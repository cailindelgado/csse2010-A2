
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000052a  00800100  00003148  000031dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015d  0080062a  0080062a  00003706  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003706  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003764  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  000037a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004043  00000000  00000000  00003ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001384  00000000  00000000  00007b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002459  00000000  00000000  00008eab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aa0  00000000  00000000  0000b304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d82  00000000  00000000  0000bda4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000275f  00000000  00000000  0000cb26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000f285  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__ctors_end>
       4:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       8:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      10:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      14:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_5>
      18:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      1c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      20:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      24:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__vector_9>
      28:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      2c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      30:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      34:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      38:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      3c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      40:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__vector_16>
      44:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      48:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      4c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      50:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__vector_20>
      54:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__vector_21>
      58:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      5c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      60:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      64:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      68:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      6c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      70:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      74:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      78:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2357>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2285>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 20 43 61 69 6c 69 6e 20 44 65 6c 67      by  Cailin Delg
      d4:	61 64 6f 20 2d 20 34 38 30 32 37 39 34 32 00        ado - 48027942.

000000e3 <__c.2283>:
      e3:	20 5c 24 24 20 20 20 5c 24 24 20 20 20 20 20 5c      \$$   \$$     \
      f3:	24 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20     $     \$$   \$$ 
     103:	20 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20           \$$   \$$ 
     113:	20 5c 24 24 24 24 24 24 24 20 5c 24 24 20 20 20      \$$$$$$$ \$$   
     123:	20 20 20 20 20 5c 24 24 24 24 24 24 00                   \$$$$$$.

00000130 <__c.2281>:
     130:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 5c 24     | $$  | $$    \$
     140:	24 24 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20     $$   | $$  | $$ 
     150:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     160:	5c 24 24 20 20 20 20 20 5c 7c 20 24 24 20 20 20     \$$     \| $$   
     170:	20 20 20 20 5c 24 24 20 20 20 20 24 24 00               \$$    $$.

0000017e <__c.2279>:
     17e:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 5c 24 24     | $$  | $$   \$$
     18e:	20 24 24 20 20 7c 20 24 24 20 20 7c 20 24 24 20      $$  | $$  | $$ 
     19e:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 7c          | $$  | $$|
     1ae:	20 24 24 24 24 24 24 24 24 7c 20 24 24 20 20 20      $$$$$$$$| $$   
     1be:	20 20 20 7c 20 24 24 5f 5f 2f 20 24 24 00              | $$__/ $$.

000001cc <__c.2277>:
     1cc:	7c 20 24 24 24 24 24 24 24 24 20 20 5c 24 24 5c     | $$$$$$$$  \$$\
     1dc:	20 20 24 24 20 7c 20 24 24 24 24 24 24 24 5c 20       $$ | $$$$$$$\ 
     1ec:	20 20 20 20 20 7c 20 24 24 24 24 24 24 24 24 7c          | $$$$$$$$|
     1fc:	20 24 24 20 20 20 20 24 24 7c 20 24 24 20 20 20      $$    $$| $$   
     20c:	5c 24 24 7c 20 24 24 20 20 7c 20 24 24 00           \$$| $$  | $$.

0000021a <__c.2275>:
     21a:	7c 20 24 24 20 20 20 20 24 24 20 5c 24 24 5c 20     | $$    $$ \$$\ 
     22a:	2f 20 20 24 24 7c 20 24 24 20 20 20 20 24 24 20     /  $$| $$    $$ 
     23a:	20 20 20 20 20 7c 20 24 24 20 20 20 20 24 24 7c          | $$    $$|
     24a:	20 20 24 24 24 24 24 24 5c 7c 20 20 24 24 24 24       $$$$$$\|  $$$$
     25a:	24 24 5c 7c 20 20 24 24 24 24 24 24 5c 00           $$\|  $$$$$$\.

00000268 <__c.2273>:
     268:	7c 20 24 24 5f 5f 7c 20 24 24 7c 20 24 24 20 20     | $$__| $$| $$  
     278:	20 7c 20 24 24 7c 20 24 24 5f 5f 7c 20 24 24 20      | $$| $$__| $$ 
     288:	20 20 20 20 20 7c 20 24 24 5f 5f 7c 20 24 24 20          | $$__| $$ 
     298:	2f 20 20 20 20 20 20 5c 20 20 2f 20 20 20 20 20     /      \  /     
     2a8:	20 5c 20 20 2f 20 20 20 20 20 20 5c 00               \  /      \.

000002b5 <__c.2271>:
     2b5:	7c 20 20 24 24 24 24 24 24 5c 7c 20 24 24 20 20     |  $$$$$$\| $$  
     2c5:	20 7c 20 24 24 7c 20 24 24 24 24 24 24 24 5c 20      | $$| $$$$$$$\ 
     2d5:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     2e5:	20 5f 5f 5f 5f 5f 5f 20 20 20 20 5f 5f 5f 5f 5f      ______    _____
     2f5:	5f 20 20 20 20 5f 5f 5f 5f 5f 5f 00                 _    ______.

00000301 <__c.2269>:
     301:	20 2f 20 20 20 20 20 20 5c 20 7c 20 20 5c 20 20      /      \ |  \  
     311:	20 7c 20 20 5c 7c 20 20 20 20 20 20 20 5c 20 20      |  \|       \  
     321:	20 20 20 20 20 7c 20 20 5c 20 20 7c 20 20 5c 00          |  \  |  \.

00000331 <__c.2267>:
     331:	20 20 5f 5f 5f 5f 5f 5f 20 20 20 5f 5f 20 20 20       ______   __   
     341:	20 20 5f 5f 20 20 5f 5f 5f 5f 5f 5f 5f 20 20 20       __  _______   
     351:	20 20 20 20 20 20 5f 5f 20 20 20 20 5f 5f 00              __    __.

00000360 <__c.2058>:
     360:	1b 5b 3f 32 35 68 00                                .[?25h.

00000367 <__c.2054>:
     367:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000036e <__c.2050>:
     36e:	1b 5b 25 64 6d 00                                   .[%dm.

00000374 <__c.2045>:
     374:	1b 5b 4b 00                                         .[K.

00000378 <__c.2040>:
     378:	1b 5b 32 4a 00                                      .[2J.

0000037d <__c.2025>:
     37d:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000386 <__ctors_end>:
     386:	11 24       	eor	r1, r1
     388:	1f be       	out	0x3f, r1	; 63
     38a:	cf ef       	ldi	r28, 0xFF	; 255
     38c:	d8 e0       	ldi	r29, 0x08	; 8
     38e:	de bf       	out	0x3e, r29	; 62
     390:	cd bf       	out	0x3d, r28	; 61

00000392 <__do_copy_data>:
     392:	16 e0       	ldi	r17, 0x06	; 6
     394:	a0 e0       	ldi	r26, 0x00	; 0
     396:	b1 e0       	ldi	r27, 0x01	; 1
     398:	e8 e4       	ldi	r30, 0x48	; 72
     39a:	f1 e3       	ldi	r31, 0x31	; 49
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__do_copy_data+0x10>
     39e:	05 90       	lpm	r0, Z+
     3a0:	0d 92       	st	X+, r0
     3a2:	aa 32       	cpi	r26, 0x2A	; 42
     3a4:	b1 07       	cpc	r27, r17
     3a6:	d9 f7       	brne	.-10     	; 0x39e <__do_copy_data+0xc>

000003a8 <__do_clear_bss>:
     3a8:	27 e0       	ldi	r18, 0x07	; 7
     3aa:	aa e2       	ldi	r26, 0x2A	; 42
     3ac:	b6 e0       	ldi	r27, 0x06	; 6
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
     3b2:	a7 38       	cpi	r26, 0x87	; 135
     3b4:	b2 07       	cpc	r27, r18
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>
     3b8:	0e 94 37 10 	call	0x206e	; 0x206e <main>
     3bc:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <_exit>

000003c0 <__bad_interrupt>:
     3c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c4 <init_button_interrupts>:
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void)
{
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     3c4:	e8 e6       	ldi	r30, 0x68	; 104
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	82 60       	ori	r24, 0x02	; 2
     3cc:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     3ce:	8b b3       	in	r24, 0x1b	; 27
     3d0:	82 60       	ori	r24, 0x02	; 2
     3d2:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     3d4:	ec e6       	ldi	r30, 0x6C	; 108
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	8f 60       	ori	r24, 0x0F	; 15
     3dc:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     3de:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <__data_end>
     3e2:	08 95       	ret

000003e4 <button_pushed>:

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0)
     3e4:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <__data_end>
     3e8:	18 16       	cp	r1, r24
     3ea:	14 f5       	brge	.+68     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     3ec:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3f0:	6f b7       	in	r22, 0x3f	; 63
		cli();
     3f2:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	09 c0       	rjmp	.+18     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		{
			button_queue[i - 1] = button_queue[i];
     3f8:	f9 01       	movw	r30, r18
     3fa:	e5 5d       	subi	r30, 0xD5	; 213
     3fc:	f9 4f       	sbci	r31, 0xF9	; 249
     3fe:	40 81       	ld	r20, Z
     400:	f9 01       	movw	r30, r18
     402:	e6 5d       	subi	r30, 0xD6	; 214
     404:	f9 4f       	sbci	r31, 0xF9	; 249
     406:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     408:	9f 5f       	subi	r25, 0xFF	; 255
     40a:	29 2f       	mov	r18, r25
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 91 2a 06 	lds	r20, 0x062A	; 0x80062a <__data_end>
     412:	04 2e       	mov	r0, r20
     414:	00 0c       	add	r0, r0
     416:	55 0b       	sbc	r21, r21
     418:	24 17       	cp	r18, r20
     41a:	35 07       	cpc	r19, r21
     41c:	6c f3       	brlt	.-38     	; 0x3f8 <button_pushed+0x14>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     41e:	90 91 2a 06 	lds	r25, 0x062A	; 0x80062a <__data_end>
     422:	91 50       	subi	r25, 0x01	; 1
     424:	90 93 2a 06 	sts	0x062A, r25	; 0x80062a <__data_end>
		
		if (interrupts_were_enabled)
     428:	66 23       	and	r22, r22
     42a:	1c f4       	brge	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		{
			// Turn them back on again
			sei();
     42c:	78 94       	sei
     42e:	08 95       	ret
	queue_length = 0;
}

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     430:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     432:	08 95       	ret

00000434 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect)
{
     434:	1f 92       	push	r1
     436:	0f 92       	push	r0
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     44c:	43 b1       	in	r20, 0x03	; 3
     44e:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	26 c0       	rjmp	.+76     	; 0x4a0 <__vector_5+0x6c>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     454:	90 91 2a 06 	lds	r25, 0x062A	; 0x80062a <__data_end>
     458:	94 30       	cpi	r25, 0x04	; 4
     45a:	0c f5       	brge	.+66     	; 0x49e <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     45c:	24 2f       	mov	r18, r20
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	08 2e       	mov	r0, r24
     462:	02 c0       	rjmp	.+4      	; 0x468 <__vector_5+0x34>
     464:	35 95       	asr	r19
     466:	27 95       	ror	r18
     468:	0a 94       	dec	r0
     46a:	e2 f7       	brpl	.-8      	; 0x464 <__vector_5+0x30>
     46c:	20 ff       	sbrs	r18, 0
     46e:	17 c0       	rjmp	.+46     	; 0x49e <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin)))
     470:	20 91 2f 06 	lds	r18, 0x062F	; 0x80062f <last_button_state>
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	08 2e       	mov	r0, r24
     478:	02 c0       	rjmp	.+4      	; 0x47e <__vector_5+0x4a>
     47a:	35 95       	asr	r19
     47c:	27 95       	ror	r18
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <__vector_5+0x46>
     482:	20 fd       	sbrc	r18, 0
     484:	0c c0       	rjmp	.+24     	; 0x49e <__vector_5+0x6a>
				{
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     486:	e0 91 2a 06 	lds	r30, 0x062A	; 0x80062a <__data_end>
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	9e 0f       	add	r25, r30
     48e:	90 93 2a 06 	sts	0x062A, r25	; 0x80062a <__data_end>
     492:	0e 2e       	mov	r0, r30
     494:	00 0c       	add	r0, r0
     496:	ff 0b       	sbc	r31, r31
     498:	e5 5d       	subi	r30, 0xD5	; 213
     49a:	f9 4f       	sbci	r31, 0xF9	; 249
     49c:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	c0 f2       	brcs	.-80     	; 0x454 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     4a4:	40 93 2f 06 	sts	0x062F, r20	; 0x80062f <last_button_state>
}
     4a8:	ff 91       	pop	r31
     4aa:	ef 91       	pop	r30
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <update_start_screen>:

// Update dynamic start screen based on the frame number (0-31)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	18 2f       	mov	r17, r24
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     4c8:	d4 e0       	ldi	r29, 0x04	; 4
     4ca:	36 c0       	rjmp	.+108    	; 0x538 <update_start_screen+0x78>
	{
		for (uint8_t col = 11; col < 16; col++)
		{
			colour = col == 14 ? COLOUR_YELLOW : COLOUR_BLACK;
     4cc:	ce 30       	cpi	r28, 0x0E	; 14
     4ce:	11 f4       	brne	.+4      	; 0x4d4 <update_start_screen+0x14>
     4d0:	4f ef       	ldi	r20, 0xFF	; 255
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <update_start_screen+0x16>
     4d4:	40 e0       	ldi	r20, 0x00	; 0
			if (((32+col-frame_number) & ((1<<(row-2))-1)) == (1<<(row-3))-1)
     4d6:	2c 2f       	mov	r18, r28
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	20 5e       	subi	r18, 0xE0	; 224
     4dc:	3f 4f       	sbci	r19, 0xFF	; 255
     4de:	21 1b       	sub	r18, r17
     4e0:	31 09       	sbc	r19, r1
     4e2:	ed 2f       	mov	r30, r29
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	bf 01       	movw	r22, r30
     4e8:	62 50       	subi	r22, 0x02	; 2
     4ea:	71 09       	sbc	r23, r1
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	dc 01       	movw	r26, r24
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <update_start_screen+0x38>
     4f4:	aa 0f       	add	r26, r26
     4f6:	bb 1f       	adc	r27, r27
     4f8:	6a 95       	dec	r22
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <update_start_screen+0x34>
     4fc:	bd 01       	movw	r22, r26
     4fe:	61 50       	subi	r22, 0x01	; 1
     500:	71 09       	sbc	r23, r1
     502:	26 23       	and	r18, r22
     504:	37 23       	and	r19, r23
     506:	33 97       	sbiw	r30, 0x03	; 3
     508:	02 c0       	rjmp	.+4      	; 0x50e <update_start_screen+0x4e>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	ea 95       	dec	r30
     510:	e2 f7       	brpl	.-8      	; 0x50a <update_start_screen+0x4a>
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	28 17       	cp	r18, r24
     516:	39 07       	cpc	r19, r25
     518:	29 f4       	brne	.+10     	; 0x524 <update_start_screen+0x64>
			{
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
     51a:	ce 30       	cpi	r28, 0x0E	; 14
     51c:	10 f4       	brcc	.+4      	; 0x522 <update_start_screen+0x62>
     51e:	4f e0       	ldi	r20, 0x0F	; 15
     520:	01 c0       	rjmp	.+2      	; 0x524 <update_start_screen+0x64>
     522:	40 ef       	ldi	r20, 0xF0	; 240
			}
			ledmatrix_update_pixel(col, row, colour);
     524:	6d 2f       	mov	r22, r29
     526:	8c 2f       	mov	r24, r28
     528:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
	{
		for (uint8_t col = 11; col < 16; col++)
     52c:	cf 5f       	subi	r28, 0xFF	; 255
     52e:	01 c0       	rjmp	.+2      	; 0x532 <update_start_screen+0x72>
     530:	cb e0       	ldi	r28, 0x0B	; 11
     532:	c0 31       	cpi	r28, 0x10	; 16
     534:	58 f2       	brcs	.-106    	; 0x4cc <update_start_screen+0xc>
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     536:	df 5f       	subi	r29, 0xFF	; 255
     538:	d8 30       	cpi	r29, 0x08	; 8
     53a:	d0 f3       	brcs	.-12     	; 0x530 <update_start_screen+0x70>
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
			}
			ledmatrix_update_pixel(col, row, colour);
		}
	}
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	08 95       	ret

00000544 <show_start_screen>:
// Stored as a 5 x 3 grid pattern going from Left-to-Right, Top-to-Bottom
// Padded with a leading zero so that it fits into a 16-bit value


void show_start_screen(void)
{
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	28 97       	sbiw	r28, 0x08	; 8
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     55a:	0e 94 43 08 	call	0x1086	; 0x1086 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	31 c0       	rjmp	.+98     	; 0x5c4 <show_start_screen+0x80>
	{
		col_data = pong_display[col];
     562:	e1 2f       	mov	r30, r17
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	ee 5c       	subi	r30, 0xCE	; 206
     568:	fe 4f       	sbci	r31, 0xFE	; 254
     56a:	90 81       	ld	r25, Z
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	21 c0       	rjmp	.+66     	; 0x5b2 <show_start_screen+0x6e>
		{
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data>>row & 1)
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	49 2f       	mov	r20, r25
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	08 2e       	mov	r0, r24
     57a:	02 c0       	rjmp	.+4      	; 0x580 <show_start_screen+0x3c>
     57c:	55 95       	asr	r21
     57e:	47 95       	ror	r20
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <show_start_screen+0x38>
     584:	40 ff       	sbrs	r20, 0
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <show_start_screen+0x5e>
			{
				column_colour_data[row] = (row < 4 ? COLOUR_RED : COLOUR_GREEN);
     588:	84 30       	cpi	r24, 0x04	; 4
     58a:	10 f4       	brcc	.+4      	; 0x590 <show_start_screen+0x4c>
     58c:	4f e0       	ldi	r20, 0x0F	; 15
     58e:	01 c0       	rjmp	.+2      	; 0x592 <show_start_screen+0x4e>
     590:	40 ef       	ldi	r20, 0xF0	; 240
     592:	e1 e0       	ldi	r30, 0x01	; 1
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	ec 0f       	add	r30, r28
     598:	fd 1f       	adc	r31, r29
     59a:	e2 0f       	add	r30, r18
     59c:	f3 1f       	adc	r31, r19
     59e:	40 83       	st	Z, r20
     5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <show_start_screen+0x6c>
			}
			else
			{
				column_colour_data[row] = 0;
     5a2:	e1 e0       	ldi	r30, 0x01	; 1
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	ec 0f       	add	r30, r28
     5a8:	fd 1f       	adc	r31, r29
     5aa:	e2 0f       	add	r30, r18
     5ac:	f3 1f       	adc	r31, r19
     5ae:	10 82       	st	Z, r1
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
	{
		col_data = pong_display[col];
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	88 30       	cpi	r24, 0x08	; 8
     5b4:	e8 f2       	brcs	.-70     	; 0x570 <show_start_screen+0x2c>
			else
			{
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
     5b6:	be 01       	movw	r22, r28
     5b8:	6f 5f       	subi	r22, 0xFF	; 255
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	81 2f       	mov	r24, r17
     5be:	0e 94 26 08 	call	0x104c	; 0x104c <ledmatrix_update_column>
{
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     5c2:	1f 5f       	subi	r17, 0xFF	; 255
     5c4:	10 31       	cpi	r17, 0x10	; 16
     5c6:	68 f2       	brcs	.-102    	; 0x562 <show_start_screen+0x1e>
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
	}
	update_start_screen(0);
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
}
     5ce:	28 96       	adiw	r28, 0x08	; 8
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	08 95       	ret

000005e2 <default_grid>:
}

// Initialize the display for the board, this creates the display
// for an empty board.
void default_grid(void)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	28 97       	sbiw	r28, 0x08	; 8
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_clear();
     5f6:	0e 94 43 08 	call	0x1086	; 0x1086 <ledmatrix_clear>
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <default_grid+0x2e>
	{
		colours[row] = COLOUR_YELLOW;
     5fe:	e1 e0       	ldi	r30, 0x01	; 1
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	e8 0f       	add	r30, r24
     608:	f1 1d       	adc	r31, r1
     60a:	9f ef       	ldi	r25, 0xFF	; 255
     60c:	90 83       	st	Z, r25
void default_grid(void)
{
	ledmatrix_clear();
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     60e:	8f 5f       	subi	r24, 0xFF	; 255
     610:	88 30       	cpi	r24, 0x08	; 8
     612:	a8 f3       	brcs	.-22     	; 0x5fe <default_grid+0x1c>
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
     614:	be 01       	movw	r22, r28
     616:	6f 5f       	subi	r22, 0xFF	; 255
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	8d e0       	ldi	r24, 0x0D	; 13
     61c:	0e 94 26 08 	call	0x104c	; 0x104c <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	09 c0       	rjmp	.+18     	; 0x636 <default_grid+0x54>
	{
		colours[row] = COLOUR_HALF_YELLOW;
     624:	e1 e0       	ldi	r30, 0x01	; 1
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ec 0f       	add	r30, r28
     62a:	fd 1f       	adc	r31, r29
     62c:	e8 0f       	add	r30, r24
     62e:	f1 1d       	adc	r31, r1
     630:	95 e5       	ldi	r25, 0x55	; 85
     632:	90 83       	st	Z, r25
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	88 30       	cpi	r24, 0x08	; 8
     638:	a8 f3       	brcs	.-22     	; 0x624 <default_grid+0x42>
	{
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
     63a:	be 01       	movw	r22, r28
     63c:	6f 5f       	subi	r22, 0xFF	; 255
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	8c e0       	ldi	r24, 0x0C	; 12
     642:	0e 94 26 08 	call	0x104c	; 0x104c <ledmatrix_update_column>
	ledmatrix_update_column(14, colours);
     646:	be 01       	movw	r22, r28
     648:	6f 5f       	subi	r22, 0xFF	; 255
     64a:	7f 4f       	sbci	r23, 0xFF	; 255
     64c:	8e e0       	ldi	r24, 0x0E	; 14
     64e:	0e 94 26 08 	call	0x104c	; 0x104c <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	09 c0       	rjmp	.+18     	; 0x668 <default_grid+0x86>
	{
		colours[row] = COLOUR_QUART_YELLOW;
     656:	e1 e0       	ldi	r30, 0x01	; 1
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	e8 0f       	add	r30, r24
     660:	f1 1d       	adc	r31, r1
     662:	91 e1       	ldi	r25, 0x11	; 17
     664:	90 83       	st	Z, r25
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
	ledmatrix_update_column(14, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	88 30       	cpi	r24, 0x08	; 8
     66a:	a8 f3       	brcs	.-22     	; 0x656 <default_grid+0x74>
	{
		colours[row] = COLOUR_QUART_YELLOW;
	}
	ledmatrix_update_column(11, colours);
     66c:	be 01       	movw	r22, r28
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	8b e0       	ldi	r24, 0x0B	; 11
     674:	0e 94 26 08 	call	0x104c	; 0x104c <ledmatrix_update_column>
	ledmatrix_update_column(15, colours);
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	8f e0       	ldi	r24, 0x0F	; 15
     680:	0e 94 26 08 	call	0x104c	; 0x104c <ledmatrix_update_column>
}
     684:	28 96       	adiw	r28, 0x08	; 8
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <update_points>:
uint8_t game_over = 0;

//updates the points in the terminal
void update_points() {
	//clear terminal line and reprint the game score with the points
	move_terminal_cursor(10, 13);
     696:	6d e0       	ldi	r22, 0x0D	; 13
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	8a e0       	ldi	r24, 0x0A	; 10
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
	clear_to_end_of_line();
     6a2:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <clear_to_end_of_line>

	// if x >= 10 and [-9, 0)
	if ((points >= 10) || (points < 0 && points >= -9)) {
     6a6:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
     6aa:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
     6ae:	8a 30       	cpi	r24, 0x0A	; 10
     6b0:	91 05       	cpc	r25, r1
     6b2:	34 f4       	brge	.+12     	; 0x6c0 <update_points+0x2a>
     6b4:	9c 01       	movw	r18, r24
     6b6:	27 5f       	subi	r18, 0xF7	; 247
     6b8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ba:	29 30       	cpi	r18, 0x09	; 9
     6bc:	31 05       	cpc	r19, r1
     6be:	68 f4       	brcc	.+26     	; 0x6da <update_points+0x44>
		printf("Game Score:   %d", points);
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	82 e4       	ldi	r24, 0x42	; 66
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	08 95       	ret
		
		//if x >= 100 and (-9, -99)
	} else if ((points >= 100) || (points < -9 && points > -99)) {
     6da:	84 36       	cpi	r24, 0x64	; 100
     6dc:	91 05       	cpc	r25, r1
     6de:	34 f4       	brge	.+12     	; 0x6ec <update_points+0x56>
     6e0:	9c 01       	movw	r18, r24
     6e2:	2e 59       	subi	r18, 0x9E	; 158
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255
     6e6:	29 35       	cpi	r18, 0x59	; 89
     6e8:	31 05       	cpc	r19, r1
     6ea:	68 f4       	brcc	.+26     	; 0x706 <update_points+0x70>
		printf("Game Score:  %d", points);
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	83 e5       	ldi	r24, 0x53	; 83
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	08 95       	ret
		
		//if x < -99
	} else if (points < -99) {
     706:	8d 39       	cpi	r24, 0x9D	; 157
     708:	2f ef       	ldi	r18, 0xFF	; 255
     70a:	92 07       	cpc	r25, r18
     70c:	6c f4       	brge	.+26     	; 0x728 <update_points+0x92>
		printf("Game Score: %d", points);
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	83 e6       	ldi	r24, 0x63	; 99
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	08 95       	ret
		
	} else {
		printf("Game Score:    %d", points);
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	82 e7       	ldi	r24, 0x72	; 114
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	9f 93       	push	r25
     732:	8f 93       	push	r24
     734:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	08 95       	ret

00000742 <update_combo>:
}

//updates the combo points in the terminal
void update_combo() {
	//Clear terminal line and reprint the combo count
	move_terminal_cursor(10, 14);
     742:	6e e0       	ldi	r22, 0x0E	; 14
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	8a e0       	ldi	r24, 0x0A	; 10
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
	clear_to_end_of_line();
     74e:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <clear_to_end_of_line>
	
	//adjusts the combo count padding so it matches points
	if (combo_count >= 10) {
     752:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <combo_count>
     756:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <combo_count+0x1>
     75a:	8a 30       	cpi	r24, 0x0A	; 10
     75c:	91 05       	cpc	r25, r1
     75e:	6c f0       	brlt	.+26     	; 0x77a <update_combo+0x38>
		printf("Combo Count:  %d", combo_count);
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	84 e8       	ldi	r24, 0x84	; 132
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	9f 93       	push	r25
     76a:	8f 93       	push	r24
     76c:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0c c0       	rjmp	.+24     	; 0x792 <update_combo+0x50>
		
	} else {
		printf("Combo Count:   %d", combo_count);
     77a:	9f 93       	push	r25
     77c:	8f 93       	push	r24
     77e:	85 e9       	ldi	r24, 0x95	; 149
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	9f 93       	push	r25
     784:	8f 93       	push	r24
     786:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
	}
	
	//update combo check accordingly
	if (combo_count >= 3) {
     792:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <combo_count>
     796:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <combo_count+0x1>
     79a:	03 97       	sbiw	r24, 0x03	; 3
     79c:	3c f0       	brlt	.+14     	; 0x7ac <update_combo+0x6a>
		combo_check = 1;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	90 93 62 06 	sts	0x0662, r25	; 0x800662 <combo_check+0x1>
     7a6:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <combo_check>
     7aa:	08 95       	ret
	} else {
		combo_check = 0;
     7ac:	10 92 62 06 	sts	0x0662, r1	; 0x800662 <combo_check+0x1>
     7b0:	10 92 61 06 	sts	0x0661, r1	; 0x800661 <combo_check>
     7b4:	08 95       	ret

000007b6 <sound_note>:
	}
}

//play the note sound
void sound_note(int lane, int col) {
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	68 97       	sbiw	r28, 0x18	; 24
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
	advance_count = 0;
     7ca:	10 92 5c 06 	sts	0x065C, r1	; 0x80065c <advance_count+0x1>
     7ce:	10 92 5b 06 	sts	0x065B, r1	; 0x80065b <advance_count>
	
	if (lane == -1 && col == -1) {
     7d2:	8f 3f       	cpi	r24, 0xFF	; 255
     7d4:	2f ef       	ldi	r18, 0xFF	; 255
     7d6:	92 07       	cpc	r25, r18
     7d8:	59 f4       	brne	.+22     	; 0x7f0 <sound_note+0x3a>
     7da:	6f 3f       	cpi	r22, 0xFF	; 255
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	72 07       	cpc	r23, r18
     7e0:	39 f4       	brne	.+14     	; 0x7f0 <sound_note+0x3a>
		//turn off buzzer
		disable_piezzo = 1;
     7e2:	21 e0       	ldi	r18, 0x01	; 1
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	30 93 3f 06 	sts	0x063F, r19	; 0x80063f <disable_piezzo+0x1>
     7ea:	20 93 3e 06 	sts	0x063E, r18	; 0x80063e <disable_piezzo>
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <sound_note+0x42>
	} else {
		disable_piezzo = 0;
     7f0:	10 92 3f 06 	sts	0x063F, r1	; 0x80063f <disable_piezzo+0x1>
     7f4:	10 92 3e 06 	sts	0x063E, r1	; 0x80063e <disable_piezzo>
	}
	
	//set frequency appropriately
							      //0     1   2    3
	int track_frequencies[3][4] = {{523, 622, 698, 784}, 
     7f8:	28 e1       	ldi	r18, 0x18	; 24
     7fa:	ea e1       	ldi	r30, 0x1A	; 26
     7fc:	f1 e0       	ldi	r31, 0x01	; 1
     7fe:	de 01       	movw	r26, r28
     800:	11 96       	adiw	r26, 0x01	; 1
     802:	01 90       	ld	r0, Z+
     804:	0d 92       	st	X+, r0
     806:	2a 95       	dec	r18
     808:	e1 f7       	brne	.-8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
								   {185, 220, 247, 277}, 
								   {220, 247, 277, 330}};			//make into a multidimensional array
									
	
	freq = track_frequencies[track_no][lane];
     80a:	e0 91 5d 06 	lds	r30, 0x065D	; 0x80065d <track_no>
     80e:	f0 91 5e 06 	lds	r31, 0x065E	; 0x80065e <track_no+0x1>
     812:	ee 0f       	add	r30, r30
     814:	ff 1f       	adc	r31, r31
     816:	ee 0f       	add	r30, r30
     818:	ff 1f       	adc	r31, r31
     81a:	e8 0f       	add	r30, r24
     81c:	f9 1f       	adc	r31, r25
     81e:	ee 0f       	add	r30, r30
     820:	ff 1f       	adc	r31, r31
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	8c 0f       	add	r24, r28
     828:	9d 1f       	adc	r25, r29
     82a:	e8 0f       	add	r30, r24
     82c:	f9 1f       	adc	r31, r25
     82e:	80 81       	ld	r24, Z
     830:	91 81       	ldd	r25, Z+1	; 0x01
     832:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <freq+0x1>
     836:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <freq>
	
	//set duty cycle appropriately
	if (col == 11) {
     83a:	6b 30       	cpi	r22, 0x0B	; 11
     83c:	71 05       	cpc	r23, r1
     83e:	69 f4       	brne	.+26     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		duty_cycle = 2;
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	a0 e0       	ldi	r26, 0x00	; 0
     846:	b0 e4       	ldi	r27, 0x40	; 64
     848:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <duty_cycle>
     84c:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <duty_cycle+0x1>
     850:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <duty_cycle+0x2>
     854:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <duty_cycle+0x3>
     858:	3f c0       	rjmp	.+126    	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
		
	} else if (col == 12) {
     85a:	6c 30       	cpi	r22, 0x0C	; 12
     85c:	71 05       	cpc	r23, r1
     85e:	69 f4       	brne	.+26     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
		duty_cycle = 10;
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	a0 e2       	ldi	r26, 0x20	; 32
     866:	b1 e4       	ldi	r27, 0x41	; 65
     868:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <duty_cycle>
     86c:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <duty_cycle+0x1>
     870:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <duty_cycle+0x2>
     874:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <duty_cycle+0x3>
     878:	2f c0       	rjmp	.+94     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
		
	} else if (col == 13) {
     87a:	6d 30       	cpi	r22, 0x0D	; 13
     87c:	71 05       	cpc	r23, r1
     87e:	69 f4       	brne	.+26     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
		duty_cycle = 50;
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	a8 e4       	ldi	r26, 0x48	; 72
     886:	b2 e4       	ldi	r27, 0x42	; 66
     888:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <duty_cycle>
     88c:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <duty_cycle+0x1>
     890:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <duty_cycle+0x2>
     894:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <duty_cycle+0x3>
     898:	1f c0       	rjmp	.+62     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
		
	} else if (col == 14) {
     89a:	6e 30       	cpi	r22, 0x0E	; 14
     89c:	71 05       	cpc	r23, r1
     89e:	69 f4       	brne	.+26     	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
		duty_cycle = 90;
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a4 eb       	ldi	r26, 0xB4	; 180
     8a6:	b2 e4       	ldi	r27, 0x42	; 66
     8a8:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <duty_cycle>
     8ac:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <duty_cycle+0x1>
     8b0:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <duty_cycle+0x2>
     8b4:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <duty_cycle+0x3>
     8b8:	0f c0       	rjmp	.+30     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
		
	} else if (col == 15) {
     8ba:	6f 30       	cpi	r22, 0x0F	; 15
     8bc:	71 05       	cpc	r23, r1
     8be:	61 f4       	brne	.+24     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
		duty_cycle = 98;
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	a4 ec       	ldi	r26, 0xC4	; 196
     8c6:	b2 e4       	ldi	r27, 0x42	; 66
     8c8:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <duty_cycle>
     8cc:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <duty_cycle+0x1>
     8d0:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <duty_cycle+0x2>
     8d4:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <duty_cycle+0x3>
		
	}
	
	note_sound();
     8d8:	0e 94 b0 12 	call	0x2560	; 0x2560 <note_sound>
}
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret

000008ee <draw_notes>:

void draw_notes() {
     8ee:	9f 92       	push	r9
     8f0:	af 92       	push	r10
     8f2:	bf 92       	push	r11
     8f4:	cf 92       	push	r12
     8f6:	df 92       	push	r13
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
	
	PixelColour color = COLOUR_RED;
	
	if (combo_check) {
     904:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <combo_check>
     908:	90 91 62 06 	lds	r25, 0x0662	; 0x800662 <combo_check+0x1>
     90c:	89 2b       	or	r24, r25
     90e:	29 f0       	breq	.+10     	; 0x91a <__stack+0x1b>
		color = COLOUR_ORANGE;
     910:	0f 2e       	mov	r0, r31
     912:	fc e3       	ldi	r31, 0x3C	; 60
     914:	cf 2e       	mov	r12, r31
     916:	f0 2d       	mov	r31, r0
     918:	04 c0       	rjmp	.+8      	; 0x922 <__stack+0x23>
	} else {
		color = COLOUR_RED;
     91a:	0f 2e       	mov	r0, r31
     91c:	ff e0       	ldi	r31, 0x0F	; 15
     91e:	cf 2e       	mov	r12, r31
     920:	f0 2d       	mov	r31, r0
	}
	
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     922:	d1 2c       	mov	r13, r1
     924:	d9 c0       	rjmp	.+434    	; 0xad8 <__stack+0x1d9>
	{
		// col counts from one end, future from the other
		uint8_t future = MATRIX_NUM_COLUMNS-1-col;
     926:	8f e0       	ldi	r24, 0x0F	; 15
     928:	8d 19       	sub	r24, r13
		
		//is 1 if there is a long note, else 0
		int long_check = 0;
		
		// index of which note in the track to play
		uint8_t index = (future+beat)/5;
     92a:	e0 91 69 06 	lds	r30, 0x0669	; 0x800669 <beat>
     92e:	f0 91 6a 06 	lds	r31, 0x066A	; 0x80066a <beat+0x1>
     932:	af 01       	movw	r20, r30
     934:	48 0f       	add	r20, r24
     936:	51 1d       	adc	r21, r1
     938:	9a 01       	movw	r18, r20
     93a:	ad ec       	ldi	r26, 0xCD	; 205
     93c:	bc ec       	ldi	r27, 0xCC	; 204
     93e:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <__umulhisi3>
     942:	ec 01       	movw	r28, r24
     944:	d6 95       	lsr	r29
     946:	c7 95       	ror	r28
     948:	d6 95       	lsr	r29
     94a:	c7 95       	ror	r28
		
		// notes are only drawn every five columns
		if ((future+beat)%5)
     94c:	ce 01       	movw	r24, r28
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	8c 0f       	add	r24, r28
     958:	9d 1f       	adc	r25, r29
     95a:	48 17       	cp	r20, r24
     95c:	59 07       	cpc	r21, r25
     95e:	09 f0       	breq	.+2      	; 0x962 <__stack+0x63>
     960:	ba c0       	rjmp	.+372    	; 0xad6 <__stack+0x1d7>
		{
			continue;
		}
		
		uint8_t ghost_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     962:	9f 01       	movw	r18, r30
     964:	21 5f       	subi	r18, 0xF1	; 241
     966:	3f 4f       	sbci	r19, 0xFF	; 255
     968:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <__umulhisi3>
     96c:	96 95       	lsr	r25
     96e:	87 95       	ror	r24
     970:	96 95       	lsr	r25
     972:	87 95       	ror	r24
		//next note in track that is coming
		uint8_t ghost_note = track[track_no][ghost_index];
     974:	20 91 5d 06 	lds	r18, 0x065D	; 0x80065d <track_no>
     978:	30 91 5e 06 	lds	r19, 0x065E	; 0x80065e <track_no+0x1>
     97c:	f9 01       	movw	r30, r18
     97e:	f6 95       	lsr	r31
     980:	fe 2f       	mov	r31, r30
     982:	ee 27       	eor	r30, r30
     984:	f7 95       	ror	r31
     986:	e7 95       	ror	r30
     988:	e2 0f       	add	r30, r18
     98a:	f3 1f       	adc	r31, r19
     98c:	e3 51       	subi	r30, 0x13	; 19
     98e:	fe 4f       	sbci	r31, 0xFE	; 254
     990:	e8 0f       	add	r30, r24
     992:	f1 1d       	adc	r31, r1
     994:	b0 80       	ld	r11, Z
		
		// if the index is beyond the end of the track,
		// no note can be drawn
		if (index >= TRACK_LENGTH || (index + 1) >= TRACK_LENGTH)
     996:	c1 38       	cpi	r28, 0x81	; 129
     998:	08 f0       	brcs	.+2      	; 0x99c <__stack+0x9d>
     99a:	9d c0       	rjmp	.+314    	; 0xad6 <__stack+0x1d7>
     99c:	dd 27       	eor	r29, r29
     99e:	7e 01       	movw	r14, r28
     9a0:	8f ef       	ldi	r24, 0xFF	; 255
     9a2:	e8 1a       	sub	r14, r24
     9a4:	f8 0a       	sbc	r15, r24
     9a6:	81 e8       	ldi	r24, 0x81	; 129
     9a8:	e8 16       	cp	r14, r24
     9aa:	f1 04       	cpc	r15, r1
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__stack+0xb1>
     9ae:	93 c0       	rjmp	.+294    	; 0xad6 <__stack+0x1d7>
     9b0:	a1 2c       	mov	r10, r1
     9b2:	00 e0       	ldi	r16, 0x00	; 0
     9b4:	10 e0       	ldi	r17, 0x00	; 0
     9b6:	8b c0       	rjmp	.+278    	; 0xace <__stack+0x1cf>
		
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{
			
			uint8_t current_note = track[track_no][index];
     9b8:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <track_no>
     9bc:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <track_no+0x1>
     9c0:	9c 01       	movw	r18, r24
     9c2:	36 95       	lsr	r19
     9c4:	32 2f       	mov	r19, r18
     9c6:	22 27       	eor	r18, r18
     9c8:	37 95       	ror	r19
     9ca:	27 95       	ror	r18
     9cc:	82 0f       	add	r24, r18
     9ce:	93 1f       	adc	r25, r19
     9d0:	83 51       	subi	r24, 0x13	; 19
     9d2:	9e 4f       	sbci	r25, 0xFE	; 254
     9d4:	fc 01       	movw	r30, r24
     9d6:	ec 0f       	add	r30, r28
     9d8:	fd 1f       	adc	r31, r29
     9da:	20 81       	ld	r18, Z
			
			//check if at the start of a long note
			if (current_note == track[track_no][index + 1]>>4) {
     9dc:	fc 01       	movw	r30, r24
     9de:	ee 0d       	add	r30, r14
     9e0:	ff 1d       	adc	r31, r15
     9e2:	80 81       	ld	r24, Z
     9e4:	98 2f       	mov	r25, r24
     9e6:	92 95       	swap	r25
     9e8:	9f 70       	andi	r25, 0x0F	; 15
     9ea:	29 17       	cp	r18, r25
     9ec:	11 f1       	breq	.+68     	; 0xa32 <__stack+0x133>
				long_check = 1;
				
				//check if in the middle of long note
				} else if ((long_check) && (track[track_no][index + 1] == current_note)) {
     9ee:	01 15       	cp	r16, r1
     9f0:	11 05       	cpc	r17, r1
     9f2:	19 f0       	breq	.+6      	; 0x9fa <__stack+0xfb>
     9f4:	28 17       	cp	r18, r24
     9f6:	09 f4       	brne	.+2      	; 0x9fa <__stack+0xfb>
     9f8:	69 c0       	rjmp	.+210    	; 0xacc <__stack+0x1cd>
				continue;
				
				//check if at the end of long note
				} else if ((long_check) && (track[index + 1] != track[index - 1])) {
     9fa:	01 15       	cp	r16, r1
     9fc:	11 05       	cpc	r17, r1
     9fe:	d9 f0       	breq	.+54     	; 0xa36 <__stack+0x137>
     a00:	a7 01       	movw	r20, r14
     a02:	56 95       	lsr	r21
     a04:	54 2f       	mov	r21, r20
     a06:	44 27       	eor	r20, r20
     a08:	57 95       	ror	r21
     a0a:	47 95       	ror	r20
     a0c:	4e 0d       	add	r20, r14
     a0e:	5f 1d       	adc	r21, r15
     a10:	ce 01       	movw	r24, r28
     a12:	01 97       	sbiw	r24, 0x01	; 1
     a14:	bc 01       	movw	r22, r24
     a16:	76 95       	lsr	r23
     a18:	76 2f       	mov	r23, r22
     a1a:	66 27       	eor	r22, r22
     a1c:	77 95       	ror	r23
     a1e:	67 95       	ror	r22
     a20:	86 0f       	add	r24, r22
     a22:	97 1f       	adc	r25, r23
     a24:	48 17       	cp	r20, r24
     a26:	59 07       	cpc	r21, r25
     a28:	09 f0       	breq	.+2      	; 0xa2c <__stack+0x12d>
     a2a:	50 c0       	rjmp	.+160    	; 0xacc <__stack+0x1cd>
				continue;
				
				//else outside long note.
				} else {
				long_check = 0;
     a2c:	00 e0       	ldi	r16, 0x00	; 0
     a2e:	10 e0       	ldi	r17, 0x00	; 0
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <__stack+0x137>
			
			uint8_t current_note = track[track_no][index];
			
			//check if at the start of a long note
			if (current_note == track[track_no][index + 1]>>4) {
				long_check = 1;
     a32:	01 e0       	ldi	r16, 0x01	; 1
     a34:	10 e0       	ldi	r17, 0x00	; 0
				//else outside long note.
				} else {
				long_check = 0;
			}
			
			if (long_check) {
     a36:	01 15       	cp	r16, r1
     a38:	11 05       	cpc	r17, r1
     a3a:	21 f0       	breq	.+8      	; 0xa44 <__stack+0x145>
				current_note = current_note>>4;
     a3c:	32 2f       	mov	r19, r18
     a3e:	32 95       	swap	r19
     a40:	3f 70       	andi	r19, 0x0F	; 15
     a42:	01 c0       	rjmp	.+2      	; 0xa46 <__stack+0x147>
		
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{
			
			uint8_t current_note = track[track_no][index];
     a44:	32 2f       	mov	r19, r18
			if (long_check) {
				current_note = current_note>>4;
			}
			
			//check if there's a note in the specific path
			if (track[track_no][index] & (1<<lane)) {										//track[index] replaced current_note
     a46:	4a 2d       	mov	r20, r10
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	82 2f       	mov	r24, r18
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0a 2c       	mov	r0, r10
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <__stack+0x157>
     a52:	95 95       	asr	r25
     a54:	87 95       	ror	r24
     a56:	0a 94       	dec	r0
     a58:	e2 f7       	brpl	.-8      	; 0xa52 <__stack+0x153>
     a5a:	80 ff       	sbrs	r24, 0
     a5c:	37 c0       	rjmp	.+110    	; 0xacc <__stack+0x1cd>
				
				//check if theres a note in the led matrix section
				if ((green_check == lane) && ((col >= 11) && (col <= 15))) {
     a5e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a62:	08 2e       	mov	r0, r24
     a64:	00 0c       	add	r0, r0
     a66:	99 0b       	sbc	r25, r25
     a68:	48 17       	cp	r20, r24
     a6a:	59 07       	cpc	r21, r25
     a6c:	91 f4       	brne	.+36     	; 0xa92 <__stack+0x193>
     a6e:	85 ef       	ldi	r24, 0xF5	; 245
     a70:	8d 0d       	add	r24, r13
     a72:	85 30       	cpi	r24, 0x05	; 5
     a74:	70 f4       	brcc	.+28     	; 0xa92 <__stack+0x193>
					//if true set pixels to green
					ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     a76:	40 ef       	ldi	r20, 0xF0	; 240
     a78:	9a 2c       	mov	r9, r10
     a7a:	99 0c       	add	r9, r9
     a7c:	69 2d       	mov	r22, r9
     a7e:	8d 2d       	mov	r24, r13
     a80:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     a84:	61 e0       	ldi	r22, 0x01	; 1
     a86:	69 0d       	add	r22, r9
     a88:	40 ef       	ldi	r20, 0xF0	; 240
     a8a:	8d 2d       	mov	r24, r13
     a8c:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
     a90:	1d c0       	rjmp	.+58     	; 0xacc <__stack+0x1cd>
					
					} else if (ghost_note != current_note) {
     a92:	3b 15       	cp	r19, r11
     a94:	71 f0       	breq	.+28     	; 0xab2 <__stack+0x1b3>
					ledmatrix_update_pixel(col, 2*lane, color);
     a96:	4c 2d       	mov	r20, r12
     a98:	9a 2c       	mov	r9, r10
     a9a:	99 0c       	add	r9, r9
     a9c:	69 2d       	mov	r22, r9
     a9e:	8d 2d       	mov	r24, r13
     aa0:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, color);
     aa4:	61 e0       	ldi	r22, 0x01	; 1
     aa6:	69 0d       	add	r22, r9
     aa8:	4c 2d       	mov	r20, r12
     aaa:	8d 2d       	mov	r24, r13
     aac:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
     ab0:	0d c0       	rjmp	.+26     	; 0xacc <__stack+0x1cd>
					
					} else {
					ledmatrix_update_pixel(col, 2*lane, color);
     ab2:	4c 2d       	mov	r20, r12
     ab4:	9a 2c       	mov	r9, r10
     ab6:	99 0c       	add	r9, r9
     ab8:	69 2d       	mov	r22, r9
     aba:	8d 2d       	mov	r24, r13
     abc:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, color);
     ac0:	61 e0       	ldi	r22, 0x01	; 1
     ac2:	69 0d       	add	r22, r9
     ac4:	4c 2d       	mov	r20, r12
     ac6:	8d 2d       	mov	r24, r13
     ac8:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
		{
			continue;
		}
		
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
     acc:	a3 94       	inc	r10
     ace:	83 e0       	ldi	r24, 0x03	; 3
     ad0:	8a 15       	cp	r24, r10
     ad2:	08 f0       	brcs	.+2      	; 0xad6 <__stack+0x1d7>
     ad4:	71 cf       	rjmp	.-286    	; 0x9b8 <__stack+0xb9>
		color = COLOUR_RED;
	}
	
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     ad6:	d3 94       	inc	r13
     ad8:	8f e0       	ldi	r24, 0x0F	; 15
     ada:	8d 15       	cp	r24, r13
     adc:	08 f0       	brcs	.+2      	; 0xae0 <__stack+0x1e1>
     ade:	23 cf       	rjmp	.-442    	; 0x926 <__stack+0x27>
				
			}
		}
		
	}
}
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	ff 90       	pop	r15
     aea:	ef 90       	pop	r14
     aec:	df 90       	pop	r13
     aee:	cf 90       	pop	r12
     af0:	bf 90       	pop	r11
     af2:	af 90       	pop	r10
     af4:	9f 90       	pop	r9
     af6:	08 95       	ret

00000af8 <set_track>:

//sets the track
void set_track(int track_number) {
	//to set the track do a matrix of tracks, where each matrix is of size TRACK_LENGTH and the individual elements are the tracks.
	if (track_number == 0) {
     af8:	00 97       	sbiw	r24, 0x00	; 0
     afa:	51 f4       	brne	.+20     	; 0xb10 <set_track+0x18>
		//track_name = "Through fire and flames";
		strcpy(track_name, "Through fire and flames");
     afc:	88 e1       	ldi	r24, 0x18	; 24
     afe:	e7 ea       	ldi	r30, 0xA7	; 167
     b00:	f1 e0       	ldi	r31, 0x01	; 1
     b02:	a2 e4       	ldi	r26, 0x42	; 66
     b04:	b6 e0       	ldi	r27, 0x06	; 6
     b06:	01 90       	ld	r0, Z+
     b08:	0d 92       	st	X+, r0
     b0a:	8a 95       	dec	r24
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <set_track+0xe>
     b0e:	08 95       	ret
	
	} else if (track_number == 1) {
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	91 05       	cpc	r25, r1
     b14:	51 f4       	brne	.+20     	; 0xb2a <set_track+0x32>
		//track_name = "Someone Like You by Adele"
		strcpy(track_name, "Someone like you by Adele");
     b16:	8a e1       	ldi	r24, 0x1A	; 26
     b18:	ef eb       	ldi	r30, 0xBF	; 191
     b1a:	f1 e0       	ldi	r31, 0x01	; 1
     b1c:	a2 e4       	ldi	r26, 0x42	; 66
     b1e:	b6 e0       	ldi	r27, 0x06	; 6
     b20:	01 90       	ld	r0, Z+
     b22:	0d 92       	st	X+, r0
     b24:	8a 95       	dec	r24
     b26:	e1 f7       	brne	.-8      	; 0xb20 <set_track+0x28>
     b28:	08 95       	ret
		
	} else if (track_number == 2) {
     b2a:	02 97       	sbiw	r24, 0x02	; 2
     b2c:	49 f4       	brne	.+18     	; 0xb40 <set_track+0x48>
		//track_name = "Pompeii by Bastille"
		strcpy(track_name, "Pompeii by Bastille");
     b2e:	84 e1       	ldi	r24, 0x14	; 20
     b30:	e9 ed       	ldi	r30, 0xD9	; 217
     b32:	f1 e0       	ldi	r31, 0x01	; 1
     b34:	a2 e4       	ldi	r26, 0x42	; 66
     b36:	b6 e0       	ldi	r27, 0x06	; 6
     b38:	01 90       	ld	r0, Z+
     b3a:	0d 92       	st	X+, r0
     b3c:	8a 95       	dec	r24
     b3e:	e1 f7       	brne	.-8      	; 0xb38 <set_track+0x40>
     b40:	08 95       	ret

00000b42 <initialise_game>:

// Initialize the game by resetting the grid and beat
void initialise_game(void)
{
	// initialize the display we are using.
	default_grid();
     b42:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <default_grid>
	
	beat = 0;
     b46:	10 92 6a 06 	sts	0x066A, r1	; 0x80066a <beat+0x1>
     b4a:	10 92 69 06 	sts	0x0669, r1	; 0x800669 <beat>
	game_over = 0;
     b4e:	10 92 30 06 	sts	0x0630, r1	; 0x800630 <game_over>
	advance_count = 0;
     b52:	10 92 5c 06 	sts	0x065C, r1	; 0x80065c <advance_count+0x1>
     b56:	10 92 5b 06 	sts	0x065B, r1	; 0x80065b <advance_count>
	
	update_points();
     b5a:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
	update_combo();
     b5e:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
     b62:	08 95       	ret

00000b64 <play_note>:
}

// Play a note in the given lane
void play_note(uint8_t lane)											//the colors need to be changed in this function.
{	
     b64:	ef 92       	push	r14
     b66:	ff 92       	push	r15
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	d8 2f       	mov	r29, r24

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     b72:	cb e0       	ldi	r28, 0x0B	; 11
     b74:	d4 c0       	rjmp	.+424    	; 0xd1e <play_note+0x1ba>
	
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col; //this is the next position that the note will be in
     b76:	8f e0       	ldi	r24, 0x0F	; 15
     b78:	8c 1b       	sub	r24, r28
		uint8_t index = (future + beat) / 5; 
     b7a:	40 91 69 06 	lds	r20, 0x0669	; 0x800669 <beat>
     b7e:	50 91 6a 06 	lds	r21, 0x066A	; 0x80066a <beat+0x1>
     b82:	48 0f       	add	r20, r24
     b84:	51 1d       	adc	r21, r1
     b86:	9a 01       	movw	r18, r20
     b88:	ad ec       	ldi	r26, 0xCD	; 205
     b8a:	bc ec       	ldi	r27, 0xCC	; 204
     b8c:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <__umulhisi3>
     b90:	8c 01       	movw	r16, r24
     b92:	16 95       	lsr	r17
     b94:	07 95       	ror	r16
     b96:	16 95       	lsr	r17
     b98:	07 95       	ror	r16
		
		if ((future + beat) % 5) {
     b9a:	c8 01       	movw	r24, r16
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	80 0f       	add	r24, r16
     ba6:	91 1f       	adc	r25, r17
     ba8:	48 17       	cp	r20, r24
     baa:	59 07       	cpc	r21, r25
     bac:	09 f0       	breq	.+2      	; 0xbb0 <play_note+0x4c>
     bae:	b6 c0       	rjmp	.+364    	; 0xd1c <play_note+0x1b8>
			continue;
		}
		if (track[track_no][index] & (1<<lane))
     bb0:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <track_no>
     bb4:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <track_no+0x1>
     bb8:	fc 01       	movw	r30, r24
     bba:	f6 95       	lsr	r31
     bbc:	fe 2f       	mov	r31, r30
     bbe:	ee 27       	eor	r30, r30
     bc0:	f7 95       	ror	r31
     bc2:	e7 95       	ror	r30
     bc4:	e8 0f       	add	r30, r24
     bc6:	f9 1f       	adc	r31, r25
     bc8:	e3 51       	subi	r30, 0x13	; 19
     bca:	fe 4f       	sbci	r31, 0xFE	; 254
     bcc:	e0 0f       	add	r30, r16
     bce:	f1 1d       	adc	r31, r1
     bd0:	80 81       	ld	r24, Z
     bd2:	ed 2e       	mov	r14, r29
     bd4:	f1 2c       	mov	r15, r1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0d 2e       	mov	r0, r29
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <play_note+0x7c>
     bdc:	95 95       	asr	r25
     bde:	87 95       	ror	r24
     be0:	0a 94       	dec	r0
     be2:	e2 f7       	brpl	.-8      	; 0xbdc <play_note+0x78>
     be4:	80 ff       	sbrs	r24, 0
     be6:	87 c0       	rjmp	.+270    	; 0xcf6 <play_note+0x192>
		{	
			if (green_check == lane) {
     be8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     bec:	08 2e       	mov	r0, r24
     bee:	00 0c       	add	r0, r0
     bf0:	99 0b       	sbc	r25, r25
     bf2:	e8 16       	cp	r14, r24
     bf4:	f9 06       	cpc	r15, r25
     bf6:	c1 f4       	brne	.+48     	; 0xc28 <play_note+0xc4>
				points--;
     bf8:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
     bfc:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <points+0x1>
     c06:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <points>
				update_points();
     c0a:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
				
				combo_count = 0;
     c0e:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <combo_count+0x1>
     c12:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <combo_count>
				update_combo();
     c16:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
				
				sound_note(-1,-1);
     c1a:	6f ef       	ldi	r22, 0xFF	; 255
     c1c:	7f ef       	ldi	r23, 0xFF	; 255
     c1e:	8f ef       	ldi	r24, 0xFF	; 255
     c20:	9f ef       	ldi	r25, 0xFF	; 255
     c22:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
				
				break;
     c26:	7e c0       	rjmp	.+252    	; 0xd24 <play_note+0x1c0>
			}
			
			green_check = lane;
     c28:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			// if so, colour the two pixels green
			ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     c2c:	40 ef       	ldi	r20, 0xF0	; 240
     c2e:	1d 2f       	mov	r17, r29
     c30:	11 0f       	add	r17, r17
     c32:	61 2f       	mov	r22, r17
     c34:	8c 2f       	mov	r24, r28
     c36:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	61 0f       	add	r22, r17
     c3e:	40 ef       	ldi	r20, 0xF0	; 240
     c40:	8c 2f       	mov	r24, r28
     c42:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
			
			//if the note is in the two specified lanes then award the appropriate amount of points
			if (col == 11 || col == 15) {
     c46:	cb 30       	cpi	r28, 0x0B	; 11
     c48:	11 f0       	breq	.+4      	; 0xc4e <play_note+0xea>
     c4a:	cf 30       	cpi	r28, 0x0F	; 15
     c4c:	99 f4       	brne	.+38     	; 0xc74 <play_note+0x110>
				points++;
     c4e:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
     c52:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <points+0x1>
     c5c:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <points>
				combo_count = 0;
     c60:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <combo_count+0x1>
     c64:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <combo_count>
				sound_note(lane, col);
     c68:	6c 2f       	mov	r22, r28
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	c7 01       	movw	r24, r14
     c6e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
     c72:	4e c0       	rjmp	.+156    	; 0xd10 <play_note+0x1ac>
				
			} else if (col == 12 || col == 14) {
     c74:	cc 30       	cpi	r28, 0x0C	; 12
     c76:	11 f0       	breq	.+4      	; 0xc7c <play_note+0x118>
     c78:	ce 30       	cpi	r28, 0x0E	; 14
     c7a:	99 f4       	brne	.+38     	; 0xca2 <play_note+0x13e>
				points += 2;
     c7c:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
     c80:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
     c84:	02 96       	adiw	r24, 0x02	; 2
     c86:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <points+0x1>
     c8a:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <points>
				combo_count = 0;
     c8e:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <combo_count+0x1>
     c92:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <combo_count>
				sound_note(lane, col);
     c96:	6c 2f       	mov	r22, r28
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	c7 01       	movw	r24, r14
     c9c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
     ca0:	37 c0       	rjmp	.+110    	; 0xd10 <play_note+0x1ac>
				
			} else if (col == 13) {
     ca2:	cd 30       	cpi	r28, 0x0D	; 13
     ca4:	a9 f5       	brne	.+106    	; 0xd10 <play_note+0x1ac>
				combo_count++;
     ca6:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <combo_count>
     caa:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <combo_count+0x1>
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <combo_count+0x1>
     cb4:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <combo_count>
				sound_note(lane, col);
     cb8:	6c 2f       	mov	r22, r28
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	c7 01       	movw	r24, r14
     cbe:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
				
				if (combo_count > 3) {
     cc2:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <combo_count>
     cc6:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <combo_count+0x1>
     cca:	04 97       	sbiw	r24, 0x04	; 4
     ccc:	54 f0       	brlt	.+20     	; 0xce2 <play_note+0x17e>
					points += 4;
     cce:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
     cd2:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
     cd6:	04 96       	adiw	r24, 0x04	; 4
     cd8:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <points+0x1>
     cdc:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <points>
     ce0:	17 c0       	rjmp	.+46     	; 0xd10 <play_note+0x1ac>
				} else {
					points += 3;
     ce2:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
     ce6:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
     cea:	03 96       	adiw	r24, 0x03	; 3
     cec:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <points+0x1>
     cf0:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <points>
     cf4:	0d c0       	rjmp	.+26     	; 0xd10 <play_note+0x1ac>
					
				}
			}
			
		} else {
			points--;
     cf6:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
     cfa:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <points+0x1>
     d04:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <points>
			combo_count = 0;
     d08:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <combo_count+0x1>
     d0c:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <combo_count>
		
		}
			
		update_points();
     d10:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
		update_combo();
     d14:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
		
		draw_notes();
     d18:	0e 94 77 04 	call	0x8ee	; 0x8ee <draw_notes>

// Play a note in the given lane
void play_note(uint8_t lane)											//the colors need to be changed in this function.
{	

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     d1c:	cf 5f       	subi	r28, 0xFF	; 255
     d1e:	c0 31       	cpi	r28, 0x10	; 16
     d20:	08 f4       	brcc	.+2      	; 0xd24 <play_note+0x1c0>
     d22:	29 cf       	rjmp	.-430    	; 0xb76 <play_note+0x12>
		update_points();
		update_combo();
		
		draw_notes();
		}	
}
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	ff 90       	pop	r15
     d2e:	ef 90       	pop	r14
     d30:	08 95       	ret

00000d32 <advance_note>:
	
// Advance the notes one row down the display
void advance_note(void)
{
     d32:	af 92       	push	r10
     d34:	bf 92       	push	r11
     d36:	df 92       	push	r13
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	//PixelColour color = COLOUR_RED;
	
	if (combo_check) {
     d42:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <combo_check>
     d46:	90 91 62 06 	lds	r25, 0x0662	; 0x800662 <combo_check+0x1>
     d4a:	89 2b       	or	r24, r25
     d4c:	19 f4       	brne	.+6      	; 0xd54 <advance_note+0x22>
	
// Advance the notes one row down the display
void advance_note(void)
{
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
     d4e:	ff 24       	eor	r15, r15
     d50:	f3 94       	inc	r15
     d52:	04 c0       	rjmp	.+8      	; 0xd5c <advance_note+0x2a>
	//PixelColour color = COLOUR_RED;
	
	if (combo_check) {
		dark_colour = COLOUR_DARK_ORANGE;
     d54:	0f 2e       	mov	r0, r31
     d56:	fc e1       	ldi	r31, 0x1C	; 28
     d58:	ff 2e       	mov	r15, r31
     d5a:	f0 2d       	mov	r31, r0
		//color = COLOUR_ORANGE;
	}
	
	advance_count++;
     d5c:	80 91 5b 06 	lds	r24, 0x065B	; 0x80065b <advance_count>
     d60:	90 91 5c 06 	lds	r25, 0x065C	; 0x80065c <advance_count+0x1>
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	90 93 5c 06 	sts	0x065C, r25	; 0x80065c <advance_count+0x1>
     d6a:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <advance_count>
	
	if (advance_count >= 5) {
     d6e:	05 97       	sbiw	r24, 0x05	; 5
     d70:	34 f0       	brlt	.+12     	; 0xd7e <advance_note+0x4c>
		sound_note(-1, -1);
     d72:	6f ef       	ldi	r22, 0xFF	; 255
     d74:	7f ef       	ldi	r23, 0xFF	; 255
     d76:	8f ef       	ldi	r24, 0xFF	; 255
     d78:	9f ef       	ldi	r25, 0xFF	; 255
     d7a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
     d7e:	10 e0       	ldi	r17, 0x00	; 0
     d80:	23 c1       	rjmp	.+582    	; 0xfc8 <advance_note+0x296>
	
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
	{
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col;
     d82:	8f e0       	ldi	r24, 0x0F	; 15
     d84:	81 1b       	sub	r24, r17
		uint8_t index = (future + beat) / 5;
     d86:	e0 91 69 06 	lds	r30, 0x0669	; 0x800669 <beat>
     d8a:	f0 91 6a 06 	lds	r31, 0x066A	; 0x80066a <beat+0x1>
     d8e:	af 01       	movw	r20, r30
     d90:	48 0f       	add	r20, r24
     d92:	51 1d       	adc	r21, r1
     d94:	9a 01       	movw	r18, r20
     d96:	ad ec       	ldi	r26, 0xCD	; 205
     d98:	bc ec       	ldi	r27, 0xCC	; 204
     d9a:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <__umulhisi3>
     d9e:	5c 01       	movw	r10, r24
     da0:	b6 94       	lsr	r11
     da2:	a7 94       	ror	r10
     da4:	b6 94       	lsr	r11
     da6:	a7 94       	ror	r10
     da8:	da 2d       	mov	r29, r10
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     daa:	9f 01       	movw	r18, r30
     dac:	21 5f       	subi	r18, 0xF1	; 241
     dae:	3f 4f       	sbci	r19, 0xFF	; 255
     db0:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <__umulhisi3>
     db4:	96 95       	lsr	r25
     db6:	87 95       	ror	r24
     db8:	96 95       	lsr	r25
     dba:	87 95       	ror	r24
		uint8_t ghost_index = ghost_start_index +1;
     dbc:	8f 5f       	subi	r24, 0xFF	; 255
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     dbe:	14 c0       	rjmp	.+40     	; 0xde8 <advance_note+0xb6>
			if (track[track_no][ghost_index] & 0x0F) {
     dc0:	20 91 5d 06 	lds	r18, 0x065D	; 0x80065d <track_no>
     dc4:	30 91 5e 06 	lds	r19, 0x065E	; 0x80065e <track_no+0x1>
     dc8:	f9 01       	movw	r30, r18
     dca:	f6 95       	lsr	r31
     dcc:	fe 2f       	mov	r31, r30
     dce:	ee 27       	eor	r30, r30
     dd0:	f7 95       	ror	r31
     dd2:	e7 95       	ror	r30
     dd4:	e2 0f       	add	r30, r18
     dd6:	f3 1f       	adc	r31, r19
     dd8:	e3 51       	subi	r30, 0x13	; 19
     dda:	fe 4f       	sbci	r31, 0xFE	; 254
     ddc:	e8 0f       	add	r30, r24
     dde:	f1 1d       	adc	r31, r1
     de0:	90 81       	ld	r25, Z
     de2:	9f 70       	andi	r25, 0x0F	; 15
     de4:	19 f4       	brne	.+6      	; 0xdec <advance_note+0xba>
		uint8_t index = (future + beat) / 5;
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
		uint8_t ghost_index = ghost_start_index +1;
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     de6:	8f 5f       	subi	r24, 0xFF	; 255
     de8:	81 38       	cpi	r24, 0x81	; 129
     dea:	50 f3       	brcs	.-44     	; 0xdc0 <advance_note+0x8e>
			if (track[track_no][ghost_index] & 0x0F) {
				break;
			}
		}
		uint8_t ghost_note = track[track_no][ghost_index];
     dec:	20 91 5d 06 	lds	r18, 0x065D	; 0x80065d <track_no>
     df0:	30 91 5e 06 	lds	r19, 0x065E	; 0x80065e <track_no+0x1>
     df4:	f9 01       	movw	r30, r18
     df6:	f6 95       	lsr	r31
     df8:	fe 2f       	mov	r31, r30
     dfa:	ee 27       	eor	r30, r30
     dfc:	f7 95       	ror	r31
     dfe:	e7 95       	ror	r30
     e00:	e2 0f       	add	r30, r18
     e02:	f3 1f       	adc	r31, r19
     e04:	e3 51       	subi	r30, 0x13	; 19
     e06:	fe 4f       	sbci	r31, 0xFE	; 254
     e08:	e8 0f       	add	r30, r24
     e0a:	f1 1d       	adc	r31, r1
     e0c:	c0 81       	ld	r28, Z
		
		if (index >= TRACK_LENGTH)
     e0e:	d1 38       	cpi	r29, 0x81	; 129
     e10:	20 f0       	brcs	.+8      	; 0xe1a <advance_note+0xe8>
		{
			//Game Over
			game_over = 1;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	80 93 30 06 	sts	0x0630, r24	; 0x800630 <game_over>
			break;
     e18:	da c0       	rjmp	.+436    	; 0xfce <advance_note+0x29c>
		}
		
		if ((future+beat) % 5)
     e1a:	9a 01       	movw	r18, r20
     e1c:	ad ec       	ldi	r26, 0xCD	; 205
     e1e:	bc ec       	ldi	r27, 0xCC	; 204
     e20:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <__umulhisi3>
     e24:	96 95       	lsr	r25
     e26:	87 95       	ror	r24
     e28:	96 95       	lsr	r25
     e2a:	87 95       	ror	r24
     e2c:	9c 01       	movw	r18, r24
     e2e:	22 0f       	add	r18, r18
     e30:	33 1f       	adc	r19, r19
     e32:	22 0f       	add	r18, r18
     e34:	33 1f       	adc	r19, r19
     e36:	82 0f       	add	r24, r18
     e38:	93 1f       	adc	r25, r19
     e3a:	48 17       	cp	r20, r24
     e3c:	59 07       	cpc	r21, r25
     e3e:	09 f0       	breq	.+2      	; 0xe42 <advance_note+0x110>
     e40:	c2 c0       	rjmp	.+388    	; 0xfc6 <advance_note+0x294>
     e42:	00 e0       	ldi	r16, 0x00	; 0
     e44:	b8 c0       	rjmp	.+368    	; 0xfb6 <advance_note+0x284>
		} 
		
		for (uint8_t lane = 0; lane < 4; lane++)
		{
			//check if the next note is in the appropriate lane
			if ((ghost_note == 0x01) & (lane == 0)) {
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	c1 30       	cpi	r28, 0x01	; 1
     e4a:	09 f0       	breq	.+2      	; 0xe4e <advance_note+0x11c>
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	01 11       	cpse	r16, r1
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	89 23       	and	r24, r25
     e56:	71 f0       	breq	.+28     	; 0xe74 <advance_note+0x142>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     e58:	4f 2d       	mov	r20, r15
     e5a:	d0 2e       	mov	r13, r16
     e5c:	dd 0c       	add	r13, r13
     e5e:	6d 2d       	mov	r22, r13
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	6d 0d       	add	r22, r13
     e6a:	4f 2d       	mov	r20, r15
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
     e72:	47 c0       	rjmp	.+142    	; 0xf02 <advance_note+0x1d0>
				
			} else if ((ghost_note == 0x02) & (lane == 1)) {
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	c2 30       	cpi	r28, 0x02	; 2
     e78:	09 f0       	breq	.+2      	; 0xe7c <advance_note+0x14a>
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	01 30       	cpi	r16, 0x01	; 1
     e80:	09 f0       	breq	.+2      	; 0xe84 <advance_note+0x152>
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	89 23       	and	r24, r25
     e86:	71 f0       	breq	.+28     	; 0xea4 <advance_note+0x172>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     e88:	4f 2d       	mov	r20, r15
     e8a:	d0 2e       	mov	r13, r16
     e8c:	dd 0c       	add	r13, r13
     e8e:	6d 2d       	mov	r22, r13
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     e96:	61 e0       	ldi	r22, 0x01	; 1
     e98:	6d 0d       	add	r22, r13
     e9a:	4f 2d       	mov	r20, r15
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
     ea2:	2f c0       	rjmp	.+94     	; 0xf02 <advance_note+0x1d0>
			
			} else if ((ghost_note == 0x04) & (lane == 2)) {
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	c4 30       	cpi	r28, 0x04	; 4
     ea8:	09 f0       	breq	.+2      	; 0xeac <advance_note+0x17a>
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	02 30       	cpi	r16, 0x02	; 2
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <advance_note+0x182>
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	89 23       	and	r24, r25
     eb6:	71 f0       	breq	.+28     	; 0xed4 <advance_note+0x1a2>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     eb8:	4f 2d       	mov	r20, r15
     eba:	d0 2e       	mov	r13, r16
     ebc:	dd 0c       	add	r13, r13
     ebe:	6d 2d       	mov	r22, r13
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	6d 0d       	add	r22, r13
     eca:	4f 2d       	mov	r20, r15
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
     ed2:	17 c0       	rjmp	.+46     	; 0xf02 <advance_note+0x1d0>
			
			} else if ((ghost_note == 0x08) & (lane == 3)) {
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	c8 30       	cpi	r28, 0x08	; 8
     ed8:	09 f0       	breq	.+2      	; 0xedc <advance_note+0x1aa>
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	03 30       	cpi	r16, 0x03	; 3
     ee0:	09 f0       	breq	.+2      	; 0xee4 <advance_note+0x1b2>
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	89 23       	and	r24, r25
     ee6:	69 f0       	breq	.+26     	; 0xf02 <advance_note+0x1d0>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     ee8:	4f 2d       	mov	r20, r15
     eea:	d0 2e       	mov	r13, r16
     eec:	dd 0c       	add	r13, r13
     eee:	6d 2d       	mov	r22, r13
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	6d 0d       	add	r22, r13
     efa:	4f 2d       	mov	r20, r15
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
			
			}
				
			if (track[track_no][index] & (1<<lane))
     f02:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <track_no>
     f06:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <track_no+0x1>
     f0a:	fc 01       	movw	r30, r24
     f0c:	f6 95       	lsr	r31
     f0e:	fe 2f       	mov	r31, r30
     f10:	ee 27       	eor	r30, r30
     f12:	f7 95       	ror	r31
     f14:	e7 95       	ror	r30
     f16:	e8 0f       	add	r30, r24
     f18:	f9 1f       	adc	r31, r25
     f1a:	e3 51       	subi	r30, 0x13	; 19
     f1c:	fe 4f       	sbci	r31, 0xFE	; 254
     f1e:	ea 0d       	add	r30, r10
     f20:	f1 1d       	adc	r31, r1
     f22:	80 81       	ld	r24, Z
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	00 2e       	mov	r0, r16
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <advance_note+0x1fc>
     f2a:	95 95       	asr	r25
     f2c:	87 95       	ror	r24
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <advance_note+0x1f8>
     f32:	80 ff       	sbrs	r24, 0
     f34:	3f c0       	rjmp	.+126    	; 0xfb4 <advance_note+0x282>
			{
				//if note slides off screen and green_check isn't checked to a lane
				if (col == 15 && green_check == -1) {
     f36:	1f 30       	cpi	r17, 0x0F	; 15
     f38:	d9 f4       	brne	.+54     	; 0xf70 <advance_note+0x23e>
     f3a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f3e:	8f 3f       	cpi	r24, 0xFF	; 255
     f40:	b9 f4       	brne	.+46     	; 0xf70 <advance_note+0x23e>
					points--;
     f42:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
     f46:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <points+0x1>
     f50:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <points>
					update_points();
     f54:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
					
					if (combo_count != 0) {
     f58:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <combo_count>
     f5c:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <combo_count+0x1>
     f60:	89 2b       	or	r24, r25
     f62:	31 f0       	breq	.+12     	; 0xf70 <advance_note+0x23e>
						combo_count = 0;
     f64:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <combo_count+0x1>
     f68:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <combo_count>
						update_combo();
     f6c:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
					}
				}
				
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
     f70:	1b 30       	cpi	r17, 0x0B	; 11
     f72:	51 f0       	breq	.+20     	; 0xf88 <advance_note+0x256>
     f74:	1f 30       	cpi	r17, 0x0F	; 15
     f76:	51 f0       	breq	.+20     	; 0xf8c <advance_note+0x25a>
				{
					colour = COLOUR_QUART_YELLOW;
				}
				else if (col==12 || col == 14)
     f78:	1c 30       	cpi	r17, 0x0C	; 12
     f7a:	51 f0       	breq	.+20     	; 0xf90 <advance_note+0x25e>
     f7c:	1e 30       	cpi	r17, 0x0E	; 14
     f7e:	51 f0       	breq	.+20     	; 0xf94 <advance_note+0x262>
				{
					colour = COLOUR_HALF_YELLOW;
				}
				else if (col==13)
     f80:	1d 30       	cpi	r17, 0x0D	; 13
     f82:	51 f4       	brne	.+20     	; 0xf98 <advance_note+0x266>
				{
					colour = COLOUR_YELLOW;
     f84:	df ef       	ldi	r29, 0xFF	; 255
     f86:	09 c0       	rjmp	.+18     	; 0xf9a <advance_note+0x268>
				
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
				{
					colour = COLOUR_QUART_YELLOW;
     f88:	d1 e1       	ldi	r29, 0x11	; 17
     f8a:	07 c0       	rjmp	.+14     	; 0xf9a <advance_note+0x268>
     f8c:	d1 e1       	ldi	r29, 0x11	; 17
     f8e:	05 c0       	rjmp	.+10     	; 0xf9a <advance_note+0x268>
				}
				else if (col==12 || col == 14)
				{
					colour = COLOUR_HALF_YELLOW;
     f90:	d5 e5       	ldi	r29, 0x55	; 85
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <advance_note+0x268>
     f94:	d5 e5       	ldi	r29, 0x55	; 85
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <advance_note+0x268>
				{
					colour = COLOUR_YELLOW;
				}
				else
				{
					colour = COLOUR_BLACK;
     f98:	d0 e0       	ldi	r29, 0x00	; 0
				}
				ledmatrix_update_pixel(col, 2*lane, colour);
     f9a:	4d 2f       	mov	r20, r29
     f9c:	d0 2e       	mov	r13, r16
     f9e:	dd 0c       	add	r13, r13
     fa0:	6d 2d       	mov	r22, r13
     fa2:	81 2f       	mov	r24, r17
     fa4:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 2*lane+1, colour);
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	6d 0d       	add	r22, r13
     fac:	4d 2f       	mov	r20, r29
     fae:	81 2f       	mov	r24, r17
     fb0:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
		if ((future+beat) % 5)
		{
			continue;
		} 
		
		for (uint8_t lane = 0; lane < 4; lane++)
     fb4:	0f 5f       	subi	r16, 0xFF	; 255
     fb6:	04 30       	cpi	r16, 0x04	; 4
     fb8:	08 f4       	brcc	.+2      	; 0xfbc <advance_note+0x28a>
     fba:	45 cf       	rjmp	.-374    	; 0xe46 <advance_note+0x114>
			}
		}
		
		
		//check if the current note goes off the screen
		if (col >= 15) {
     fbc:	1f 30       	cpi	r17, 0x0F	; 15
     fbe:	18 f0       	brcs	.+6      	; 0xfc6 <advance_note+0x294>
			green_check = -1;
     fc0:	8f ef       	ldi	r24, 0xFF	; 255
     fc2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		sound_note(-1, -1);
	}
	
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     fc6:	1f 5f       	subi	r17, 0xFF	; 255
     fc8:	10 31       	cpi	r17, 0x10	; 16
     fca:	08 f4       	brcc	.+2      	; 0xfce <advance_note+0x29c>
     fcc:	da ce       	rjmp	.-588    	; 0xd82 <advance_note+0x50>
			green_check = -1;
		}
	}
	
	// increment the beat
	beat++;
     fce:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <beat>
     fd2:	90 91 6a 06 	lds	r25, 0x066A	; 0x80066a <beat+0x1>
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	90 93 6a 06 	sts	0x066A, r25	; 0x80066a <beat+0x1>
     fdc:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <beat>
	
	draw_notes();
     fe0:	0e 94 77 04 	call	0x8ee	; 0x8ee <draw_notes>
}
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	df 90       	pop	r13
     ff0:	bf 90       	pop	r11
     ff2:	af 90       	pop	r10
     ff4:	08 95       	ret

00000ff6 <is_game_over>:

// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over(void)
{
	// Detect if the game is over i.e. if a player has won.
	if (game_over) {	
     ff6:	80 91 30 06 	lds	r24, 0x0630	; 0x800630 <game_over>
     ffa:	88 23       	and	r24, r24
     ffc:	19 f0       	breq	.+6      	; 0x1004 <is_game_over+0xe>
		game_over = 0; //reset game over check
     ffe:	10 92 30 06 	sts	0x0630, r1	; 0x800630 <game_over>
		return 1;	
    1002:	81 e0       	ldi	r24, 0x01	; 1
	
	} else {
	return 0;
	
	}
    1004:	08 95       	ret

00001006 <ledmatrix_setup>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    1006:	80 e8       	ldi	r24, 0x80	; 128
    1008:	0e 94 94 11 	call	0x2328	; 0x2328 <spi_setup_master>
    100c:	08 95       	ret

0000100e <ledmatrix_update_pixel>:
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	80 31       	cpi	r24, 0x10	; 16
    1016:	b0 f4       	brcc	.+44     	; 0x1044 <ledmatrix_update_pixel+0x36>
    1018:	68 30       	cpi	r22, 0x08	; 8
    101a:	a0 f4       	brcc	.+40     	; 0x1044 <ledmatrix_update_pixel+0x36>
    101c:	14 2f       	mov	r17, r20
    101e:	c6 2f       	mov	r28, r22
    1020:	d8 2f       	mov	r29, r24
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	0e 94 c0 11 	call	0x2380	; 0x2380 <spi_send_byte>
    1028:	6c 2f       	mov	r22, r28
    102a:	67 70       	andi	r22, 0x07	; 7
    102c:	80 e1       	ldi	r24, 0x10	; 16
    102e:	68 9f       	mul	r22, r24
    1030:	90 01       	movw	r18, r0
    1032:	11 24       	eor	r1, r1
    1034:	8d 2f       	mov	r24, r29
    1036:	8f 70       	andi	r24, 0x0F	; 15
    1038:	82 2b       	or	r24, r18
    103a:	0e 94 c0 11 	call	0x2380	; 0x2380 <spi_send_byte>
    103e:	81 2f       	mov	r24, r17
    1040:	0e 94 c0 11 	call	0x2380	; 0x2380 <spi_send_byte>
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	08 95       	ret

0000104c <ledmatrix_update_column>:
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	80 31       	cpi	r24, 0x10	; 16
    1054:	a0 f4       	brcc	.+40     	; 0x107e <ledmatrix_update_column+0x32>
    1056:	8b 01       	movw	r16, r22
    1058:	c8 2f       	mov	r28, r24
    105a:	83 e0       	ldi	r24, 0x03	; 3
    105c:	0e 94 c0 11 	call	0x2380	; 0x2380 <spi_send_byte>
    1060:	8c 2f       	mov	r24, r28
    1062:	8f 70       	andi	r24, 0x0F	; 15
    1064:	0e 94 c0 11 	call	0x2380	; 0x2380 <spi_send_byte>
    1068:	c0 e0       	ldi	r28, 0x00	; 0
    106a:	07 c0       	rjmp	.+14     	; 0x107a <ledmatrix_update_column+0x2e>
    106c:	f8 01       	movw	r30, r16
    106e:	ec 0f       	add	r30, r28
    1070:	f1 1d       	adc	r31, r1
    1072:	80 81       	ld	r24, Z
    1074:	0e 94 c0 11 	call	0x2380	; 0x2380 <spi_send_byte>
    1078:	cf 5f       	subi	r28, 0xFF	; 255
    107a:	c8 30       	cpi	r28, 0x08	; 8
    107c:	b8 f3       	brcs	.-18     	; 0x106c <ledmatrix_update_column+0x20>
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	08 95       	ret

00001086 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    1086:	8f e0       	ldi	r24, 0x0F	; 15
    1088:	0e 94 c0 11 	call	0x2380	; 0x2380 <spi_send_byte>
    108c:	08 95       	ret

0000108e <initialise_hardware>:
		}
	uint16_t res = ADC;
	return res;
}

void frequency_joy(uint16_t adc_val) {
    108e:	0e 94 03 08 	call	0x1006	; 0x1006 <ledmatrix_setup>
    1092:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <init_button_interrupts>
    1096:	8f ef       	ldi	r24, 0xFF	; 255
    1098:	87 b9       	out	0x07, r24	; 7
    109a:	8c ef       	ldi	r24, 0xFC	; 252
    109c:	8a b9       	out	0x0a, r24	; 10
    109e:	80 e4       	ldi	r24, 0x40	; 64
    10a0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    10a4:	86 e8       	ldi	r24, 0x86	; 134
    10a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	7b e4       	ldi	r23, 0x4B	; 75
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 ac 10 	call	0x2158	; 0x2158 <init_serial_stdio>
    10b8:	0e 94 08 12 	call	0x2410	; 0x2410 <init_timer0>
    10bc:	0e 94 53 12 	call	0x24a6	; 0x24a6 <init_timer1>
    10c0:	0e 94 1a 13 	call	0x2634	; 0x2634 <init_timer2>
    10c4:	78 94       	sei
    10c6:	08 95       	ret

000010c8 <start_screen>:
    10c8:	4f 92       	push	r4
    10ca:	5f 92       	push	r5
    10cc:	6f 92       	push	r6
    10ce:	7f 92       	push	r7
    10d0:	8f 92       	push	r8
    10d2:	9f 92       	push	r9
    10d4:	af 92       	push	r10
    10d6:	bf 92       	push	r11
    10d8:	cf 92       	push	r12
    10da:	df 92       	push	r13
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	0e 94 d7 11 	call	0x23ae	; 0x23ae <clear_terminal>
    10e8:	0e 94 ff 11 	call	0x23fe	; 0x23fe <show_cursor>
    10ec:	0e 94 d7 11 	call	0x23ae	; 0x23ae <clear_terminal>
    10f0:	0e 94 f6 11 	call	0x23ec	; 0x23ec <hide_cursor>
    10f4:	85 e2       	ldi	r24, 0x25	; 37
    10f6:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <set_display_attribute>
    10fa:	64 e0       	ldi	r22, 0x04	; 4
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	8a e0       	ldi	r24, 0x0A	; 10
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    1106:	81 e3       	ldi	r24, 0x31	; 49
    1108:	93 e0       	ldi	r25, 0x03	; 3
    110a:	9f 93       	push	r25
    110c:	8f 93       	push	r24
    110e:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
    1112:	65 e0       	ldi	r22, 0x05	; 5
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	8a e0       	ldi	r24, 0x0A	; 10
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	93 e0       	ldi	r25, 0x03	; 3
    1122:	9f 93       	push	r25
    1124:	8f 93       	push	r24
    1126:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
    112a:	66 e0       	ldi	r22, 0x06	; 6
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	8a e0       	ldi	r24, 0x0A	; 10
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    1136:	85 eb       	ldi	r24, 0xB5	; 181
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	9f 93       	push	r25
    113c:	8f 93       	push	r24
    113e:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
    1142:	67 e0       	ldi	r22, 0x07	; 7
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	8a e0       	ldi	r24, 0x0A	; 10
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    114e:	88 e6       	ldi	r24, 0x68	; 104
    1150:	92 e0       	ldi	r25, 0x02	; 2
    1152:	9f 93       	push	r25
    1154:	8f 93       	push	r24
    1156:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
    115a:	68 e0       	ldi	r22, 0x08	; 8
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	8a e0       	ldi	r24, 0x0A	; 10
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    1166:	8a e1       	ldi	r24, 0x1A	; 26
    1168:	92 e0       	ldi	r25, 0x02	; 2
    116a:	9f 93       	push	r25
    116c:	8f 93       	push	r24
    116e:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
    1172:	69 e0       	ldi	r22, 0x09	; 9
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	8a e0       	ldi	r24, 0x0A	; 10
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    117e:	8c ec       	ldi	r24, 0xCC	; 204
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	9f 93       	push	r25
    1184:	8f 93       	push	r24
    1186:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
    118a:	6a e0       	ldi	r22, 0x0A	; 10
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	8a e0       	ldi	r24, 0x0A	; 10
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    1196:	8e e7       	ldi	r24, 0x7E	; 126
    1198:	91 e0       	ldi	r25, 0x01	; 1
    119a:	9f 93       	push	r25
    119c:	8f 93       	push	r24
    119e:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
    11a2:	6b e0       	ldi	r22, 0x0B	; 11
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	8a e0       	ldi	r24, 0x0A	; 10
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    11ae:	80 e3       	ldi	r24, 0x30	; 48
    11b0:	91 e0       	ldi	r25, 0x01	; 1
    11b2:	9f 93       	push	r25
    11b4:	8f 93       	push	r24
    11b6:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
    11ba:	6c e0       	ldi	r22, 0x0C	; 12
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	8a e0       	ldi	r24, 0x0A	; 10
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    11c6:	83 ee       	ldi	r24, 0xE3	; 227
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	9f 93       	push	r25
    11cc:	8f 93       	push	r24
    11ce:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
    11d2:	6e e0       	ldi	r22, 0x0E	; 14
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	8a e0       	ldi	r24, 0x0A	; 10
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    11de:	84 eb       	ldi	r24, 0xB4	; 180
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	9f 93       	push	r25
    11e4:	8f 93       	push	r24
    11e6:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
    11ea:	0e 94 a2 02 	call	0x544	; 0x544 <show_start_screen>
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <set_track>
    11f6:	6f e0       	ldi	r22, 0x0F	; 15
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	8a e0       	ldi	r24, 0x0A	; 10
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    1202:	82 e4       	ldi	r24, 0x42	; 66
    1204:	96 e0       	ldi	r25, 0x06	; 6
    1206:	9f 93       	push	r25
    1208:	8f 93       	push	r24
    120a:	80 e7       	ldi	r24, 0x70	; 112
    120c:	93 e0       	ldi	r25, 0x03	; 3
    120e:	9f 93       	push	r25
    1210:	8f 93       	push	r24
    1212:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    1216:	0e 94 1e 12 	call	0x243c	; 0x243c <get_current_time>
    121a:	6b 01       	movw	r12, r22
    121c:	7c 01       	movw	r14, r24
    121e:	88 ee       	ldi	r24, 0xE8	; 232
    1220:	93 e0       	ldi	r25, 0x03	; 3
    1222:	90 93 6c 06 	sts	0x066C, r25	; 0x80066c <game_speed+0x1>
    1226:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <game_speed>
    122a:	61 e1       	ldi	r22, 0x11	; 17
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	8a e0       	ldi	r24, 0x0A	; 10
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    1236:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <clear_to_end_of_line>
    123a:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    123e:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <game_speed+0x1>
    1242:	2d b7       	in	r18, 0x3d	; 61
    1244:	3e b7       	in	r19, 0x3e	; 62
    1246:	28 5e       	subi	r18, 0xE8	; 232
    1248:	3f 4f       	sbci	r19, 0xFF	; 255
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	3e bf       	out	0x3e, r19	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	2d bf       	out	0x3d, r18	; 61
    1254:	88 3e       	cpi	r24, 0xE8	; 232
    1256:	33 e0       	ldi	r19, 0x03	; 3
    1258:	93 07       	cpc	r25, r19
    125a:	69 f4       	brne	.+26     	; 0x1276 <start_screen+0x1ae>
    125c:	9f 93       	push	r25
    125e:	8f 93       	push	r24
    1260:	8a e7       	ldi	r24, 0x7A	; 122
    1262:	93 e0       	ldi	r25, 0x03	; 3
    1264:	9f 93       	push	r25
    1266:	8f 93       	push	r24
    1268:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	20 c0       	rjmp	.+64     	; 0x12b6 <start_screen+0x1ee>
    1276:	84 3f       	cpi	r24, 0xF4	; 244
    1278:	21 e0       	ldi	r18, 0x01	; 1
    127a:	92 07       	cpc	r25, r18
    127c:	69 f4       	brne	.+26     	; 0x1298 <start_screen+0x1d0>
    127e:	9f 93       	push	r25
    1280:	8f 93       	push	r24
    1282:	80 ea       	ldi	r24, 0xA0	; 160
    1284:	93 e0       	ldi	r25, 0x03	; 3
    1286:	9f 93       	push	r25
    1288:	8f 93       	push	r24
    128a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f c0       	rjmp	.+30     	; 0x12b6 <start_screen+0x1ee>
    1298:	8a 3f       	cpi	r24, 0xFA	; 250
    129a:	91 05       	cpc	r25, r1
    129c:	61 f4       	brne	.+24     	; 0x12b6 <start_screen+0x1ee>
    129e:	9f 93       	push	r25
    12a0:	8f 93       	push	r24
    12a2:	84 ec       	ldi	r24, 0xC4	; 196
    12a4:	93 e0       	ldi	r25, 0x03	; 3
    12a6:	9f 93       	push	r25
    12a8:	8f 93       	push	r24
    12aa:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	d0 e0       	ldi	r29, 0x00	; 0
    12b8:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <serial_input_available>
    12bc:	88 23       	and	r24, r24
    12be:	41 f0       	breq	.+16     	; 0x12d0 <start_screen+0x208>
    12c0:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <__iob>
    12c4:	90 91 82 07 	lds	r25, 0x0782	; 0x800782 <__iob+0x1>
    12c8:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <fgetc>
    12cc:	c8 2f       	mov	r28, r24
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <start_screen+0x20a>
    12d0:	cf ef       	ldi	r28, 0xFF	; 255
    12d2:	c3 37       	cpi	r28, 0x73	; 115
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <start_screen+0x210>
    12d6:	f6 c0       	rjmp	.+492    	; 0x14c4 <start_screen+0x3fc>
    12d8:	c3 35       	cpi	r28, 0x53	; 83
    12da:	09 f4       	brne	.+2      	; 0x12de <start_screen+0x216>
    12dc:	f3 c0       	rjmp	.+486    	; 0x14c4 <start_screen+0x3fc>
    12de:	c1 33       	cpi	r28, 0x31	; 49
    12e0:	f9 f4       	brne	.+62     	; 0x1320 <start_screen+0x258>
    12e2:	88 ee       	ldi	r24, 0xE8	; 232
    12e4:	93 e0       	ldi	r25, 0x03	; 3
    12e6:	90 93 6c 06 	sts	0x066C, r25	; 0x80066c <game_speed+0x1>
    12ea:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <game_speed>
    12ee:	61 e1       	ldi	r22, 0x11	; 17
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	8a e0       	ldi	r24, 0x0A	; 10
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    12fa:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <clear_to_end_of_line>
    12fe:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <game_speed+0x1>
    1302:	8f 93       	push	r24
    1304:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    1308:	8f 93       	push	r24
    130a:	8a e7       	ldi	r24, 0x7A	; 122
    130c:	93 e0       	ldi	r25, 0x03	; 3
    130e:	9f 93       	push	r25
    1310:	8f 93       	push	r24
    1312:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	41 c0       	rjmp	.+130    	; 0x13a2 <start_screen+0x2da>
    1320:	c2 33       	cpi	r28, 0x32	; 50
    1322:	f9 f4       	brne	.+62     	; 0x1362 <start_screen+0x29a>
    1324:	84 ef       	ldi	r24, 0xF4	; 244
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	90 93 6c 06 	sts	0x066C, r25	; 0x80066c <game_speed+0x1>
    132c:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <game_speed>
    1330:	61 e1       	ldi	r22, 0x11	; 17
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	8a e0       	ldi	r24, 0x0A	; 10
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    133c:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <clear_to_end_of_line>
    1340:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <game_speed+0x1>
    1344:	8f 93       	push	r24
    1346:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    134a:	8f 93       	push	r24
    134c:	80 ea       	ldi	r24, 0xA0	; 160
    134e:	93 e0       	ldi	r25, 0x03	; 3
    1350:	9f 93       	push	r25
    1352:	8f 93       	push	r24
    1354:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	20 c0       	rjmp	.+64     	; 0x13a2 <start_screen+0x2da>
    1362:	c3 33       	cpi	r28, 0x33	; 51
    1364:	f1 f4       	brne	.+60     	; 0x13a2 <start_screen+0x2da>
    1366:	8a ef       	ldi	r24, 0xFA	; 250
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	90 93 6c 06 	sts	0x066C, r25	; 0x80066c <game_speed+0x1>
    136e:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <game_speed>
    1372:	61 e1       	ldi	r22, 0x11	; 17
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	8a e0       	ldi	r24, 0x0A	; 10
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    137e:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <clear_to_end_of_line>
    1382:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <game_speed+0x1>
    1386:	8f 93       	push	r24
    1388:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    138c:	8f 93       	push	r24
    138e:	84 ec       	ldi	r24, 0xC4	; 196
    1390:	93 e0       	ldi	r25, 0x03	; 3
    1392:	9f 93       	push	r25
    1394:	8f 93       	push	r24
    1396:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    13a6:	8f 3f       	cpi	r24, 0xFF	; 255
    13a8:	09 f0       	breq	.+2      	; 0x13ac <start_screen+0x2e4>
    13aa:	8c c0       	rjmp	.+280    	; 0x14c4 <start_screen+0x3fc>
    13ac:	cd 36       	cpi	r28, 0x6D	; 109
    13ae:	11 f0       	breq	.+4      	; 0x13b4 <start_screen+0x2ec>
    13b0:	cd 34       	cpi	r28, 0x4D	; 77
    13b2:	11 f5       	brne	.+68     	; 0x13f8 <start_screen+0x330>
    13b4:	60 e1       	ldi	r22, 0x10	; 16
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	8a e0       	ldi	r24, 0x0A	; 10
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    13c0:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <clear_to_end_of_line>
    13c4:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <man_mode>
    13c8:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <man_mode+0x1>
    13cc:	89 2b       	or	r24, r25
    13ce:	29 f0       	breq	.+10     	; 0x13da <start_screen+0x312>
    13d0:	10 92 36 06 	sts	0x0636, r1	; 0x800636 <man_mode+0x1>
    13d4:	10 92 35 06 	sts	0x0635, r1	; 0x800635 <man_mode>
    13d8:	3e c0       	rjmp	.+124    	; 0x1456 <start_screen+0x38e>
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	90 93 36 06 	sts	0x0636, r25	; 0x800636 <man_mode+0x1>
    13e2:	80 93 35 06 	sts	0x0635, r24	; 0x800635 <man_mode>
    13e6:	8b ee       	ldi	r24, 0xEB	; 235
    13e8:	93 e0       	ldi	r25, 0x03	; 3
    13ea:	9f 93       	push	r25
    13ec:	8f 93       	push	r24
    13ee:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	2f c0       	rjmp	.+94     	; 0x1456 <start_screen+0x38e>
    13f8:	c4 37       	cpi	r28, 0x74	; 116
    13fa:	11 f0       	breq	.+4      	; 0x1400 <start_screen+0x338>
    13fc:	c4 35       	cpi	r28, 0x54	; 84
    13fe:	59 f5       	brne	.+86     	; 0x1456 <start_screen+0x38e>
    1400:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <track_no>
    1404:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <track_no+0x1>
    1408:	01 96       	adiw	r24, 0x01	; 1
    140a:	90 93 5e 06 	sts	0x065E, r25	; 0x80065e <track_no+0x1>
    140e:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <track_no>
    1412:	03 97       	sbiw	r24, 0x03	; 3
    1414:	24 f0       	brlt	.+8      	; 0x141e <start_screen+0x356>
    1416:	10 92 5e 06 	sts	0x065E, r1	; 0x80065e <track_no+0x1>
    141a:	10 92 5d 06 	sts	0x065D, r1	; 0x80065d <track_no>
    141e:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <track_no>
    1422:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <track_no+0x1>
    1426:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <set_track>
    142a:	6f e0       	ldi	r22, 0x0F	; 15
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	8a e0       	ldi	r24, 0x0A	; 10
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
    1436:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <clear_to_end_of_line>
    143a:	82 e4       	ldi	r24, 0x42	; 66
    143c:	96 e0       	ldi	r25, 0x06	; 6
    143e:	9f 93       	push	r25
    1440:	8f 93       	push	r24
    1442:	80 e7       	ldi	r24, 0x70	; 112
    1444:	93 e0       	ldi	r25, 0x03	; 3
    1446:	9f 93       	push	r25
    1448:	8f 93       	push	r24
    144a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <man_mode>
    145a:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <man_mode+0x1>
    145e:	89 2b       	or	r24, r25
    1460:	09 f0       	breq	.+2      	; 0x1464 <start_screen+0x39c>
    1462:	2a cf       	rjmp	.-428    	; 0x12b8 <start_screen+0x1f0>
    1464:	0e 94 1e 12 	call	0x243c	; 0x243c <get_current_time>
    1468:	4b 01       	movw	r8, r22
    146a:	5c 01       	movw	r10, r24
    146c:	2b 01       	movw	r4, r22
    146e:	3c 01       	movw	r6, r24
    1470:	4c 18       	sub	r4, r12
    1472:	5d 08       	sbc	r5, r13
    1474:	6e 08       	sbc	r6, r14
    1476:	7f 08       	sbc	r7, r15
    1478:	20 91 6b 06 	lds	r18, 0x066B	; 0x80066b <game_speed>
    147c:	30 91 6c 06 	lds	r19, 0x066C	; 0x80066c <game_speed+0x1>
    1480:	ad ec       	ldi	r26, 0xCD	; 205
    1482:	bc ec       	ldi	r27, 0xCC	; 204
    1484:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <__umulhisi3>
    1488:	96 95       	lsr	r25
    148a:	87 95       	ror	r24
    148c:	96 95       	lsr	r25
    148e:	87 95       	ror	r24
    1490:	a0 e0       	ldi	r26, 0x00	; 0
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	84 15       	cp	r24, r4
    1496:	95 05       	cpc	r25, r5
    1498:	a6 05       	cpc	r26, r6
    149a:	b7 05       	cpc	r27, r7
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <start_screen+0x3d8>
    149e:	0c cf       	rjmp	.-488    	; 0x12b8 <start_screen+0x1f0>
    14a0:	8d 2f       	mov	r24, r29
    14a2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
    14a6:	8d 2f       	mov	r24, r29
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	8f 71       	andi	r24, 0x1F	; 31
    14ae:	90 78       	andi	r25, 0x80	; 128
    14b0:	99 23       	and	r25, r25
    14b2:	24 f4       	brge	.+8      	; 0x14bc <start_screen+0x3f4>
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	80 6e       	ori	r24, 0xE0	; 224
    14b8:	9f 6f       	ori	r25, 0xFF	; 255
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	d8 2f       	mov	r29, r24
    14be:	75 01       	movw	r14, r10
    14c0:	64 01       	movw	r12, r8
    14c2:	fa ce       	rjmp	.-524    	; 0x12b8 <start_screen+0x1f0>
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	ff 90       	pop	r15
    14ca:	ef 90       	pop	r14
    14cc:	df 90       	pop	r13
    14ce:	cf 90       	pop	r12
    14d0:	bf 90       	pop	r11
    14d2:	af 90       	pop	r10
    14d4:	9f 90       	pop	r9
    14d6:	8f 90       	pop	r8
    14d8:	7f 90       	pop	r7
    14da:	6f 90       	pop	r6
    14dc:	5f 90       	pop	r5
    14de:	4f 90       	pop	r4
    14e0:	08 95       	ret

000014e2 <display_countdown>:
    14e2:	cf 93       	push	r28
    14e4:	df 93       	push	r29
    14e6:	ec 01       	movw	r28, r24
    14e8:	0e 94 43 08 	call	0x1086	; 0x1086 <ledmatrix_clear>
    14ec:	c2 30       	cpi	r28, 0x02	; 2
    14ee:	d1 05       	cpc	r29, r1
    14f0:	a9 f1       	breq	.+106    	; 0x155c <display_countdown+0x7a>
    14f2:	1c f4       	brge	.+6      	; 0x14fa <display_countdown+0x18>
    14f4:	21 97       	sbiw	r28, 0x01	; 1
    14f6:	71 f1       	breq	.+92     	; 0x1554 <display_countdown+0x72>
    14f8:	74 c1       	rjmp	.+744    	; 0x17e2 <display_countdown+0x300>
    14fa:	c3 30       	cpi	r28, 0x03	; 3
    14fc:	d1 05       	cpc	r29, r1
    14fe:	09 f4       	brne	.+2      	; 0x1502 <display_countdown+0x20>
    1500:	f3 c0       	rjmp	.+486    	; 0x16e8 <display_countdown+0x206>
    1502:	24 97       	sbiw	r28, 0x04	; 4
    1504:	09 f4       	brne	.+2      	; 0x1508 <display_countdown+0x26>
    1506:	f5 c0       	rjmp	.+490    	; 0x16f2 <display_countdown+0x210>
    1508:	6c c1       	rjmp	.+728    	; 0x17e2 <display_countdown+0x300>
    150a:	4f ef       	ldi	r20, 0xFF	; 255
    150c:	63 e0       	ldi	r22, 0x03	; 3
    150e:	8c 2f       	mov	r24, r28
    1510:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1514:	4f ef       	ldi	r20, 0xFF	; 255
    1516:	64 e0       	ldi	r22, 0x04	; 4
    1518:	8c 2f       	mov	r24, r28
    151a:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    151e:	c5 30       	cpi	r28, 0x05	; 5
    1520:	59 f4       	brne	.+22     	; 0x1538 <display_countdown+0x56>
    1522:	4f ef       	ldi	r20, 0xFF	; 255
    1524:	62 e0       	ldi	r22, 0x02	; 2
    1526:	8c 2f       	mov	r24, r28
    1528:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    152c:	4f ef       	ldi	r20, 0xFF	; 255
    152e:	64 e0       	ldi	r22, 0x04	; 4
    1530:	8c 2f       	mov	r24, r28
    1532:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1536:	0c c0       	rjmp	.+24     	; 0x1550 <display_countdown+0x6e>
    1538:	ca 30       	cpi	r28, 0x0A	; 10
    153a:	51 f4       	brne	.+20     	; 0x1550 <display_countdown+0x6e>
    153c:	4f ef       	ldi	r20, 0xFF	; 255
    153e:	62 e0       	ldi	r22, 0x02	; 2
    1540:	8c 2f       	mov	r24, r28
    1542:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1546:	4f ef       	ldi	r20, 0xFF	; 255
    1548:	65 e0       	ldi	r22, 0x05	; 5
    154a:	8c 2f       	mov	r24, r28
    154c:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1550:	cf 5f       	subi	r28, 0xFF	; 255
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <display_countdown+0x74>
    1554:	c4 e0       	ldi	r28, 0x04	; 4
    1556:	cb 30       	cpi	r28, 0x0B	; 11
    1558:	c0 f2       	brcs	.-80     	; 0x150a <display_countdown+0x28>
    155a:	43 c1       	rjmp	.+646    	; 0x17e2 <display_countdown+0x300>
    155c:	4f e0       	ldi	r20, 0x0F	; 15
    155e:	62 e0       	ldi	r22, 0x02	; 2
    1560:	84 e0       	ldi	r24, 0x04	; 4
    1562:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1566:	4f e0       	ldi	r20, 0x0F	; 15
    1568:	63 e0       	ldi	r22, 0x03	; 3
    156a:	84 e0       	ldi	r24, 0x04	; 4
    156c:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1570:	4f e0       	ldi	r20, 0x0F	; 15
    1572:	64 e0       	ldi	r22, 0x04	; 4
    1574:	84 e0       	ldi	r24, 0x04	; 4
    1576:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    157a:	4f e0       	ldi	r20, 0x0F	; 15
    157c:	65 e0       	ldi	r22, 0x05	; 5
    157e:	84 e0       	ldi	r24, 0x04	; 4
    1580:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1584:	4f e0       	ldi	r20, 0x0F	; 15
    1586:	61 e0       	ldi	r22, 0x01	; 1
    1588:	85 e0       	ldi	r24, 0x05	; 5
    158a:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    158e:	4f e0       	ldi	r20, 0x0F	; 15
    1590:	62 e0       	ldi	r22, 0x02	; 2
    1592:	85 e0       	ldi	r24, 0x05	; 5
    1594:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1598:	4f e0       	ldi	r20, 0x0F	; 15
    159a:	65 e0       	ldi	r22, 0x05	; 5
    159c:	85 e0       	ldi	r24, 0x05	; 5
    159e:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    15a2:	4f e0       	ldi	r20, 0x0F	; 15
    15a4:	66 e0       	ldi	r22, 0x06	; 6
    15a6:	85 e0       	ldi	r24, 0x05	; 5
    15a8:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    15ac:	4f e0       	ldi	r20, 0x0F	; 15
    15ae:	65 e0       	ldi	r22, 0x05	; 5
    15b0:	86 e0       	ldi	r24, 0x06	; 6
    15b2:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    15b6:	4f e0       	ldi	r20, 0x0F	; 15
    15b8:	66 e0       	ldi	r22, 0x06	; 6
    15ba:	86 e0       	ldi	r24, 0x06	; 6
    15bc:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    15c0:	4f e0       	ldi	r20, 0x0F	; 15
    15c2:	65 e0       	ldi	r22, 0x05	; 5
    15c4:	87 e0       	ldi	r24, 0x07	; 7
    15c6:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    15ca:	4f e0       	ldi	r20, 0x0F	; 15
    15cc:	66 e0       	ldi	r22, 0x06	; 6
    15ce:	87 e0       	ldi	r24, 0x07	; 7
    15d0:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    15d4:	4f e0       	ldi	r20, 0x0F	; 15
    15d6:	62 e0       	ldi	r22, 0x02	; 2
    15d8:	88 e0       	ldi	r24, 0x08	; 8
    15da:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    15de:	4f e0       	ldi	r20, 0x0F	; 15
    15e0:	63 e0       	ldi	r22, 0x03	; 3
    15e2:	88 e0       	ldi	r24, 0x08	; 8
    15e4:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    15e8:	4f e0       	ldi	r20, 0x0F	; 15
    15ea:	64 e0       	ldi	r22, 0x04	; 4
    15ec:	88 e0       	ldi	r24, 0x08	; 8
    15ee:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    15f2:	4f e0       	ldi	r20, 0x0F	; 15
    15f4:	61 e0       	ldi	r22, 0x01	; 1
    15f6:	89 e0       	ldi	r24, 0x09	; 9
    15f8:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    15fc:	4f e0       	ldi	r20, 0x0F	; 15
    15fe:	62 e0       	ldi	r22, 0x02	; 2
    1600:	89 e0       	ldi	r24, 0x09	; 9
    1602:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1606:	4f e0       	ldi	r20, 0x0F	; 15
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	8a e0       	ldi	r24, 0x0A	; 10
    160c:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1610:	4f e0       	ldi	r20, 0x0F	; 15
    1612:	62 e0       	ldi	r22, 0x02	; 2
    1614:	8a e0       	ldi	r24, 0x0A	; 10
    1616:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    161a:	4f e0       	ldi	r20, 0x0F	; 15
    161c:	63 e0       	ldi	r22, 0x03	; 3
    161e:	8a e0       	ldi	r24, 0x0A	; 10
    1620:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1624:	4f e0       	ldi	r20, 0x0F	; 15
    1626:	64 e0       	ldi	r22, 0x04	; 4
    1628:	8a e0       	ldi	r24, 0x0A	; 10
    162a:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    162e:	4f e0       	ldi	r20, 0x0F	; 15
    1630:	65 e0       	ldi	r22, 0x05	; 5
    1632:	8a e0       	ldi	r24, 0x0A	; 10
    1634:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1638:	4f e0       	ldi	r20, 0x0F	; 15
    163a:	66 e0       	ldi	r22, 0x06	; 6
    163c:	8a e0       	ldi	r24, 0x0A	; 10
    163e:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1642:	cf c0       	rjmp	.+414    	; 0x17e2 <display_countdown+0x300>
    1644:	c4 30       	cpi	r28, 0x04	; 4
    1646:	11 f0       	breq	.+4      	; 0x164c <display_countdown+0x16a>
    1648:	ca 30       	cpi	r28, 0x0A	; 10
    164a:	a9 f4       	brne	.+42     	; 0x1676 <display_countdown+0x194>
    164c:	4f e0       	ldi	r20, 0x0F	; 15
    164e:	62 e0       	ldi	r22, 0x02	; 2
    1650:	8c 2f       	mov	r24, r28
    1652:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1656:	4f e0       	ldi	r20, 0x0F	; 15
    1658:	63 e0       	ldi	r22, 0x03	; 3
    165a:	8c 2f       	mov	r24, r28
    165c:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1660:	4f e0       	ldi	r20, 0x0F	; 15
    1662:	64 e0       	ldi	r22, 0x04	; 4
    1664:	8c 2f       	mov	r24, r28
    1666:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    166a:	4f e0       	ldi	r20, 0x0F	; 15
    166c:	65 e0       	ldi	r22, 0x05	; 5
    166e:	8c 2f       	mov	r24, r28
    1670:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1674:	37 c0       	rjmp	.+110    	; 0x16e4 <display_countdown+0x202>
    1676:	c5 30       	cpi	r28, 0x05	; 5
    1678:	11 f0       	breq	.+4      	; 0x167e <display_countdown+0x19c>
    167a:	c9 30       	cpi	r28, 0x09	; 9
    167c:	a9 f4       	brne	.+42     	; 0x16a8 <display_countdown+0x1c6>
    167e:	4f e0       	ldi	r20, 0x0F	; 15
    1680:	61 e0       	ldi	r22, 0x01	; 1
    1682:	8c 2f       	mov	r24, r28
    1684:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1688:	4f e0       	ldi	r20, 0x0F	; 15
    168a:	62 e0       	ldi	r22, 0x02	; 2
    168c:	8c 2f       	mov	r24, r28
    168e:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1692:	4f e0       	ldi	r20, 0x0F	; 15
    1694:	65 e0       	ldi	r22, 0x05	; 5
    1696:	8c 2f       	mov	r24, r28
    1698:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    169c:	4f e0       	ldi	r20, 0x0F	; 15
    169e:	66 e0       	ldi	r22, 0x06	; 6
    16a0:	8c 2f       	mov	r24, r28
    16a2:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    16a6:	1e c0       	rjmp	.+60     	; 0x16e4 <display_countdown+0x202>
    16a8:	c6 30       	cpi	r28, 0x06	; 6
    16aa:	11 f0       	breq	.+4      	; 0x16b0 <display_countdown+0x1ce>
    16ac:	c8 30       	cpi	r28, 0x08	; 8
    16ae:	59 f4       	brne	.+22     	; 0x16c6 <display_countdown+0x1e4>
    16b0:	4f e0       	ldi	r20, 0x0F	; 15
    16b2:	65 e0       	ldi	r22, 0x05	; 5
    16b4:	8c 2f       	mov	r24, r28
    16b6:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    16ba:	4f e0       	ldi	r20, 0x0F	; 15
    16bc:	66 e0       	ldi	r22, 0x06	; 6
    16be:	8c 2f       	mov	r24, r28
    16c0:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    16c4:	0f c0       	rjmp	.+30     	; 0x16e4 <display_countdown+0x202>
    16c6:	4f e0       	ldi	r20, 0x0F	; 15
    16c8:	62 e0       	ldi	r22, 0x02	; 2
    16ca:	8c 2f       	mov	r24, r28
    16cc:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    16d0:	4f e0       	ldi	r20, 0x0F	; 15
    16d2:	63 e0       	ldi	r22, 0x03	; 3
    16d4:	8c 2f       	mov	r24, r28
    16d6:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    16da:	4f e0       	ldi	r20, 0x0F	; 15
    16dc:	64 e0       	ldi	r22, 0x04	; 4
    16de:	8c 2f       	mov	r24, r28
    16e0:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    16e4:	cf 5f       	subi	r28, 0xFF	; 255
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <display_countdown+0x208>
    16e8:	c4 e0       	ldi	r28, 0x04	; 4
    16ea:	cb 30       	cpi	r28, 0x0B	; 11
    16ec:	08 f4       	brcc	.+2      	; 0x16f0 <display_countdown+0x20e>
    16ee:	aa cf       	rjmp	.-172    	; 0x1644 <display_countdown+0x162>
    16f0:	78 c0       	rjmp	.+240    	; 0x17e2 <display_countdown+0x300>
    16f2:	40 ef       	ldi	r20, 0xF0	; 240
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	85 e0       	ldi	r24, 0x05	; 5
    16f8:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    16fc:	40 ef       	ldi	r20, 0xF0	; 240
    16fe:	62 e0       	ldi	r22, 0x02	; 2
    1700:	85 e0       	ldi	r24, 0x05	; 5
    1702:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1706:	40 ef       	ldi	r20, 0xF0	; 240
    1708:	63 e0       	ldi	r22, 0x03	; 3
    170a:	85 e0       	ldi	r24, 0x05	; 5
    170c:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1710:	40 ef       	ldi	r20, 0xF0	; 240
    1712:	65 e0       	ldi	r22, 0x05	; 5
    1714:	85 e0       	ldi	r24, 0x05	; 5
    1716:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    171a:	40 ef       	ldi	r20, 0xF0	; 240
    171c:	66 e0       	ldi	r22, 0x06	; 6
    171e:	85 e0       	ldi	r24, 0x05	; 5
    1720:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1724:	40 ef       	ldi	r20, 0xF0	; 240
    1726:	67 e0       	ldi	r22, 0x07	; 7
    1728:	85 e0       	ldi	r24, 0x05	; 5
    172a:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    172e:	40 ef       	ldi	r20, 0xF0	; 240
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	86 e0       	ldi	r24, 0x06	; 6
    1734:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1738:	40 ef       	ldi	r20, 0xF0	; 240
    173a:	65 e0       	ldi	r22, 0x05	; 5
    173c:	86 e0       	ldi	r24, 0x06	; 6
    173e:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1742:	40 ef       	ldi	r20, 0xF0	; 240
    1744:	67 e0       	ldi	r22, 0x07	; 7
    1746:	86 e0       	ldi	r24, 0x06	; 6
    1748:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    174c:	40 ef       	ldi	r20, 0xF0	; 240
    174e:	60 e0       	ldi	r22, 0x00	; 0
    1750:	87 e0       	ldi	r24, 0x07	; 7
    1752:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1756:	40 ef       	ldi	r20, 0xF0	; 240
    1758:	62 e0       	ldi	r22, 0x02	; 2
    175a:	87 e0       	ldi	r24, 0x07	; 7
    175c:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1760:	40 ef       	ldi	r20, 0xF0	; 240
    1762:	63 e0       	ldi	r22, 0x03	; 3
    1764:	87 e0       	ldi	r24, 0x07	; 7
    1766:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    176a:	40 ef       	ldi	r20, 0xF0	; 240
    176c:	65 e0       	ldi	r22, 0x05	; 5
    176e:	87 e0       	ldi	r24, 0x07	; 7
    1770:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1774:	40 ef       	ldi	r20, 0xF0	; 240
    1776:	67 e0       	ldi	r22, 0x07	; 7
    1778:	87 e0       	ldi	r24, 0x07	; 7
    177a:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    177e:	40 ef       	ldi	r20, 0xF0	; 240
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	88 e0       	ldi	r24, 0x08	; 8
    1784:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1788:	40 ef       	ldi	r20, 0xF0	; 240
    178a:	63 e0       	ldi	r22, 0x03	; 3
    178c:	88 e0       	ldi	r24, 0x08	; 8
    178e:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    1792:	40 ef       	ldi	r20, 0xF0	; 240
    1794:	65 e0       	ldi	r22, 0x05	; 5
    1796:	88 e0       	ldi	r24, 0x08	; 8
    1798:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    179c:	40 ef       	ldi	r20, 0xF0	; 240
    179e:	67 e0       	ldi	r22, 0x07	; 7
    17a0:	88 e0       	ldi	r24, 0x08	; 8
    17a2:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    17a6:	40 ef       	ldi	r20, 0xF0	; 240
    17a8:	61 e0       	ldi	r22, 0x01	; 1
    17aa:	89 e0       	ldi	r24, 0x09	; 9
    17ac:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    17b0:	40 ef       	ldi	r20, 0xF0	; 240
    17b2:	62 e0       	ldi	r22, 0x02	; 2
    17b4:	89 e0       	ldi	r24, 0x09	; 9
    17b6:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    17ba:	40 ef       	ldi	r20, 0xF0	; 240
    17bc:	63 e0       	ldi	r22, 0x03	; 3
    17be:	85 e0       	ldi	r24, 0x05	; 5
    17c0:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    17c4:	40 ef       	ldi	r20, 0xF0	; 240
    17c6:	65 e0       	ldi	r22, 0x05	; 5
    17c8:	89 e0       	ldi	r24, 0x09	; 9
    17ca:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    17ce:	40 ef       	ldi	r20, 0xF0	; 240
    17d0:	66 e0       	ldi	r22, 0x06	; 6
    17d2:	89 e0       	ldi	r24, 0x09	; 9
    17d4:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    17d8:	40 ef       	ldi	r20, 0xF0	; 240
    17da:	67 e0       	ldi	r22, 0x07	; 7
    17dc:	89 e0       	ldi	r24, 0x09	; 9
    17de:	0e 94 07 08 	call	0x100e	; 0x100e <ledmatrix_update_pixel>
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	08 95       	ret

000017e8 <game_countdown>:
    17e8:	8f 92       	push	r8
    17ea:	9f 92       	push	r9
    17ec:	af 92       	push	r10
    17ee:	bf 92       	push	r11
    17f0:	cf 92       	push	r12
    17f2:	df 92       	push	r13
    17f4:	ef 92       	push	r14
    17f6:	ff 92       	push	r15
    17f8:	0e 94 1e 12 	call	0x243c	; 0x243c <get_current_time>
    17fc:	4b 01       	movw	r8, r22
    17fe:	5c 01       	movw	r10, r24
    1800:	83 e0       	ldi	r24, 0x03	; 3
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <display_countdown>
    1808:	0e 94 1e 12 	call	0x243c	; 0x243c <get_current_time>
    180c:	6b 01       	movw	r12, r22
    180e:	7c 01       	movw	r14, r24
    1810:	ab 01       	movw	r20, r22
    1812:	bc 01       	movw	r22, r24
    1814:	48 19       	sub	r20, r8
    1816:	59 09       	sbc	r21, r9
    1818:	6a 09       	sbc	r22, r10
    181a:	7b 09       	sbc	r23, r11
    181c:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    1820:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <game_speed+0x1>
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	a0 e0       	ldi	r26, 0x00	; 0
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	48 17       	cp	r20, r24
    182e:	59 07       	cpc	r21, r25
    1830:	6a 07       	cpc	r22, r26
    1832:	7b 07       	cpc	r23, r27
    1834:	48 f3       	brcs	.-46     	; 0x1808 <game_countdown+0x20>
    1836:	82 e0       	ldi	r24, 0x02	; 2
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <display_countdown>
    183e:	0e 94 1e 12 	call	0x243c	; 0x243c <get_current_time>
    1842:	4b 01       	movw	r8, r22
    1844:	5c 01       	movw	r10, r24
    1846:	ab 01       	movw	r20, r22
    1848:	bc 01       	movw	r22, r24
    184a:	4c 19       	sub	r20, r12
    184c:	5d 09       	sbc	r21, r13
    184e:	6e 09       	sbc	r22, r14
    1850:	7f 09       	sbc	r23, r15
    1852:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    1856:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <game_speed+0x1>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	a0 e0       	ldi	r26, 0x00	; 0
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	48 17       	cp	r20, r24
    1864:	59 07       	cpc	r21, r25
    1866:	6a 07       	cpc	r22, r26
    1868:	7b 07       	cpc	r23, r27
    186a:	48 f3       	brcs	.-46     	; 0x183e <game_countdown+0x56>
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <display_countdown>
    1874:	0e 94 1e 12 	call	0x243c	; 0x243c <get_current_time>
    1878:	6b 01       	movw	r12, r22
    187a:	7c 01       	movw	r14, r24
    187c:	ab 01       	movw	r20, r22
    187e:	bc 01       	movw	r22, r24
    1880:	48 19       	sub	r20, r8
    1882:	59 09       	sbc	r21, r9
    1884:	6a 09       	sbc	r22, r10
    1886:	7b 09       	sbc	r23, r11
    1888:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    188c:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <game_speed+0x1>
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	a0 e0       	ldi	r26, 0x00	; 0
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	48 17       	cp	r20, r24
    189a:	59 07       	cpc	r21, r25
    189c:	6a 07       	cpc	r22, r26
    189e:	7b 07       	cpc	r23, r27
    18a0:	48 f3       	brcs	.-46     	; 0x1874 <game_countdown+0x8c>
    18a2:	84 e0       	ldi	r24, 0x04	; 4
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <display_countdown>
    18aa:	0e 94 1e 12 	call	0x243c	; 0x243c <get_current_time>
    18ae:	ab 01       	movw	r20, r22
    18b0:	bc 01       	movw	r22, r24
    18b2:	4c 19       	sub	r20, r12
    18b4:	5d 09       	sbc	r21, r13
    18b6:	6e 09       	sbc	r22, r14
    18b8:	7f 09       	sbc	r23, r15
    18ba:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    18be:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <game_speed+0x1>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	a0 e0       	ldi	r26, 0x00	; 0
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	48 17       	cp	r20, r24
    18cc:	59 07       	cpc	r21, r25
    18ce:	6a 07       	cpc	r22, r26
    18d0:	7b 07       	cpc	r23, r27
    18d2:	58 f3       	brcs	.-42     	; 0x18aa <game_countdown+0xc2>
    18d4:	ff 90       	pop	r15
    18d6:	ef 90       	pop	r14
    18d8:	df 90       	pop	r13
    18da:	cf 90       	pop	r12
    18dc:	bf 90       	pop	r11
    18de:	af 90       	pop	r10
    18e0:	9f 90       	pop	r9
    18e2:	8f 90       	pop	r8
    18e4:	08 95       	ret

000018e6 <ssd_display>:
    18e6:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
    18ea:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
    18ee:	8a 30       	cpi	r24, 0x0A	; 10
    18f0:	91 05       	cpc	r25, r1
    18f2:	08 f4       	brcc	.+2      	; 0x18f6 <ssd_display+0x10>
    18f4:	61 c0       	rjmp	.+194    	; 0x19b8 <ssd_display+0xd2>
    18f6:	9c 01       	movw	r18, r24
    18f8:	2a 50       	subi	r18, 0x0A	; 10
    18fa:	31 09       	sbc	r19, r1
    18fc:	2a 35       	cpi	r18, 0x5A	; 90
    18fe:	31 05       	cpc	r19, r1
    1900:	28 f4       	brcc	.+10     	; 0x190c <ssd_display+0x26>
    1902:	6a e0       	ldi	r22, 0x0A	; 10
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <__divmodhi4>
    190a:	2a c0       	rjmp	.+84     	; 0x1960 <ssd_display+0x7a>
    190c:	84 36       	cpi	r24, 0x64	; 100
    190e:	91 05       	cpc	r25, r1
    1910:	7c f0       	brlt	.+30     	; 0x1930 <ssd_display+0x4a>
    1912:	2a e0       	ldi	r18, 0x0A	; 10
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	b9 01       	movw	r22, r18
    1918:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <__divmodhi4>
    191c:	e8 2f       	mov	r30, r24
    191e:	49 2f       	mov	r20, r25
    1920:	cb 01       	movw	r24, r22
    1922:	b9 01       	movw	r22, r18
    1924:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <__divmodhi4>
    1928:	bc 01       	movw	r22, r24
    192a:	8e 2f       	mov	r24, r30
    192c:	94 2f       	mov	r25, r20
    192e:	18 c0       	rjmp	.+48     	; 0x1960 <ssd_display+0x7a>
    1930:	9c 01       	movw	r18, r24
    1932:	27 5f       	subi	r18, 0xF7	; 247
    1934:	3f 4f       	sbci	r19, 0xFF	; 255
    1936:	29 30       	cpi	r18, 0x09	; 9
    1938:	31 05       	cpc	r19, r1
    193a:	30 f4       	brcc	.+12     	; 0x1948 <ssd_display+0x62>
    193c:	91 95       	neg	r25
    193e:	81 95       	neg	r24
    1940:	91 09       	sbc	r25, r1
    1942:	6a e0       	ldi	r22, 0x0A	; 10
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	0c c0       	rjmp	.+24     	; 0x1960 <ssd_display+0x7a>
    1948:	87 3f       	cpi	r24, 0xF7	; 247
    194a:	2f ef       	ldi	r18, 0xFF	; 255
    194c:	92 07       	cpc	r25, r18
    194e:	24 f0       	brlt	.+8      	; 0x1958 <ssd_display+0x72>
    1950:	bc 01       	movw	r22, r24
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	04 c0       	rjmp	.+8      	; 0x1960 <ssd_display+0x7a>
    1958:	8a e0       	ldi	r24, 0x0A	; 10
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	6a e0       	ldi	r22, 0x0A	; 10
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	20 91 31 06 	lds	r18, 0x0631	; 0x800631 <seven_seg_cc>
    1964:	30 91 32 06 	lds	r19, 0x0632	; 0x800632 <seven_seg_cc+0x1>
    1968:	23 2b       	or	r18, r19
    196a:	99 f0       	breq	.+38     	; 0x1992 <ssd_display+0xac>
    196c:	8b b1       	in	r24, 0x0b	; 11
    196e:	84 60       	ori	r24, 0x04	; 4
    1970:	8b b9       	out	0x0b, r24	; 11
    1972:	fb 01       	movw	r30, r22
    1974:	ef 5f       	subi	r30, 0xFF	; 255
    1976:	fe 4f       	sbci	r31, 0xFE	; 254
    1978:	80 81       	ld	r24, Z
    197a:	88 b9       	out	0x08, r24	; 8
    197c:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <seven_seg_cc>
    1980:	90 91 32 06 	lds	r25, 0x0632	; 0x800632 <seven_seg_cc+0x1>
    1984:	21 e0       	ldi	r18, 0x01	; 1
    1986:	82 27       	eor	r24, r18
    1988:	90 93 32 06 	sts	0x0632, r25	; 0x800632 <seven_seg_cc+0x1>
    198c:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <seven_seg_cc>
    1990:	08 95       	ret
    1992:	2b b1       	in	r18, 0x0b	; 11
    1994:	2b 7f       	andi	r18, 0xFB	; 251
    1996:	2b b9       	out	0x0b, r18	; 11
    1998:	fc 01       	movw	r30, r24
    199a:	ef 5f       	subi	r30, 0xFF	; 255
    199c:	fe 4f       	sbci	r31, 0xFE	; 254
    199e:	80 81       	ld	r24, Z
    19a0:	88 b9       	out	0x08, r24	; 8
    19a2:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <seven_seg_cc>
    19a6:	90 91 32 06 	lds	r25, 0x0632	; 0x800632 <seven_seg_cc+0x1>
    19aa:	21 e0       	ldi	r18, 0x01	; 1
    19ac:	82 27       	eor	r24, r18
    19ae:	90 93 32 06 	sts	0x0632, r25	; 0x800632 <seven_seg_cc+0x1>
    19b2:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <seven_seg_cc>
    19b6:	08 95       	ret
    19b8:	20 91 31 06 	lds	r18, 0x0631	; 0x800631 <seven_seg_cc>
    19bc:	30 91 32 06 	lds	r19, 0x0632	; 0x800632 <seven_seg_cc+0x1>
    19c0:	23 2b       	or	r18, r19
    19c2:	31 f0       	breq	.+12     	; 0x19d0 <ssd_display+0xea>
    19c4:	fc 01       	movw	r30, r24
    19c6:	ef 5f       	subi	r30, 0xFF	; 255
    19c8:	fe 4f       	sbci	r31, 0xFE	; 254
    19ca:	80 81       	ld	r24, Z
    19cc:	88 b9       	out	0x08, r24	; 8
    19ce:	08 95       	ret
    19d0:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <seven_seg_cc>
    19d4:	90 91 32 06 	lds	r25, 0x0632	; 0x800632 <seven_seg_cc+0x1>
    19d8:	21 e0       	ldi	r18, 0x01	; 1
    19da:	82 27       	eor	r24, r18
    19dc:	90 93 32 06 	sts	0x0632, r25	; 0x800632 <seven_seg_cc+0x1>
    19e0:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <seven_seg_cc>
    19e4:	08 95       	ret

000019e6 <new_game>:
    19e6:	0e 94 d7 11 	call	0x23ae	; 0x23ae <clear_terminal>
    19ea:	10 92 3d 06 	sts	0x063D, r1	; 0x80063d <points+0x1>
    19ee:	10 92 3c 06 	sts	0x063C, r1	; 0x80063c <points>
    19f2:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <combo_count+0x1>
    19f6:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <combo_count>
    19fa:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <game_countdown>
    19fe:	0e 94 a1 05 	call	0xb42	; 0xb42 <initialise_game>
    1a02:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    1a06:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <clear_serial_input_buffer>
    1a0a:	08 95       	ret

00001a0c <joy_stick>:
    1a0c:	ea e7       	ldi	r30, 0x7A	; 122
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	80 64       	ori	r24, 0x40	; 64
    1a14:	80 83       	st	Z, r24
    1a16:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1a1a:	86 fd       	sbrc	r24, 6
    1a1c:	fc cf       	rjmp	.-8      	; 0x1a16 <joy_stick+0xa>
    1a1e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1a22:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1a26:	08 95       	ret

00001a28 <play_game>:
		printf("ADC value is: %d", adc_val);
	} */
}

void play_game(void)
{
    1a28:	4f 92       	push	r4
    1a2a:	5f 92       	push	r5
    1a2c:	6f 92       	push	r6
    1a2e:	7f 92       	push	r7
    1a30:	8f 92       	push	r8
    1a32:	9f 92       	push	r9
    1a34:	af 92       	push	r10
    1a36:	bf 92       	push	r11
    1a38:	cf 92       	push	r12
    1a3a:	df 92       	push	r13
    1a3c:	ef 92       	push	r14
    1a3e:	ff 92       	push	r15
    1a40:	0f 93       	push	r16
    1a42:	1f 93       	push	r17
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <play_game+0x22>
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <play_game+0x24>
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
	
	int8_t btn; // The button pushed
	
	int combo_line = 0;
	
	last_advance_time = get_current_time();
    1a50:	0e 94 1e 12 	call	0x243c	; 0x243c <get_current_time>
    1a54:	2b 01       	movw	r4, r22
    1a56:	3c 01       	movw	r6, r24
	
	//Display current track
	move_terminal_cursor(10, 15);
    1a58:	6f e0       	ldi	r22, 0x0F	; 15
    1a5a:	70 e0       	ldi	r23, 0x00	; 0
    1a5c:	8a e0       	ldi	r24, 0x0A	; 10
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
	printf("Track: %s", track_name);													//do %s and add a new track title at the end.
    1a64:	82 e4       	ldi	r24, 0x42	; 66
    1a66:	96 e0       	ldi	r25, 0x06	; 6
    1a68:	9f 93       	push	r25
    1a6a:	8f 93       	push	r24
    1a6c:	80 e7       	ldi	r24, 0x70	; 112
    1a6e:	93 e0       	ldi	r25, 0x03	; 3
    1a70:	9f 93       	push	r25
    1a72:	8f 93       	push	r24
    1a74:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
	
	move_terminal_cursor(10, 18);
    1a78:	62 e1       	ldi	r22, 0x12	; 18
    1a7a:	70 e0       	ldi	r23, 0x00	; 0
    1a7c:	8a e0       	ldi	r24, 0x0A	; 10
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
	clear_to_end_of_line();
    1a84:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <clear_to_end_of_line>
	//update terminal line appropriately
	if (game_speed == 1000) {
    1a88:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    1a8c:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <game_speed+0x1>
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	88 3e       	cpi	r24, 0xE8	; 232
    1a9a:	23 e0       	ldi	r18, 0x03	; 3
    1a9c:	92 07       	cpc	r25, r18
    1a9e:	69 f4       	brne	.+26     	; 0x1aba <play_game+0x92>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    1aa0:	9f 93       	push	r25
    1aa2:	8f 93       	push	r24
    1aa4:	8a e7       	ldi	r24, 0x7A	; 122
    1aa6:	93 e0       	ldi	r25, 0x03	; 3
    1aa8:	9f 93       	push	r25
    1aaa:	8f 93       	push	r24
    1aac:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	20 c0       	rjmp	.+64     	; 0x1afa <play_game+0xd2>
		
	} else if (game_speed == 500) {
    1aba:	84 3f       	cpi	r24, 0xF4	; 244
    1abc:	31 e0       	ldi	r19, 0x01	; 1
    1abe:	93 07       	cpc	r25, r19
    1ac0:	69 f4       	brne	.+26     	; 0x1adc <play_game+0xb4>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1ac2:	9f 93       	push	r25
    1ac4:	8f 93       	push	r24
    1ac6:	80 ea       	ldi	r24, 0xA0	; 160
    1ac8:	93 e0       	ldi	r25, 0x03	; 3
    1aca:	9f 93       	push	r25
    1acc:	8f 93       	push	r24
    1ace:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	0f c0       	rjmp	.+30     	; 0x1afa <play_game+0xd2>
		
	} else if (game_speed == 250) {
    1adc:	8a 3f       	cpi	r24, 0xFA	; 250
    1ade:	91 05       	cpc	r25, r1
    1ae0:	61 f4       	brne	.+24     	; 0x1afa <play_game+0xd2>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1ae2:	9f 93       	push	r25
    1ae4:	8f 93       	push	r24
    1ae6:	84 ec       	ldi	r24, 0xC4	; 196
    1ae8:	93 e0       	ldi	r25, 0x03	; 3
    1aea:	9f 93       	push	r25
    1aec:	8f 93       	push	r24
    1aee:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
		if (!man_mode & !paused) {
			current_time = get_current_time();
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
			{
				pause_time = 0;
    1afa:	00 e0       	ldi	r16, 0x00	; 0
    1afc:	10 e0       	ldi	r17, 0x00	; 0
    1afe:	81 2c       	mov	r8, r1
    1b00:	91 2c       	mov	r9, r1
    1b02:	54 01       	movw	r10, r8
    1b04:	fa c1       	rjmp	.+1012   	; 0x1efa <play_game+0x4d2>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
    1b06:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    1b0a:	89 83       	std	Y+1, r24	; 0x01
		
		char keyboard_input = -1;
		
		if (serial_input_available()) {
    1b0c:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <serial_input_available>
    1b10:	88 23       	and	r24, r24
    1b12:	41 f0       	breq	.+16     	; 0x1b24 <play_game+0xfc>
			keyboard_input = fgetc(stdin);
    1b14:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <__iob>
    1b18:	90 91 82 07 	lds	r25, 0x0782	; 0x800782 <__iob+0x1>
    1b1c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <fgetc>
    1b20:	f8 2e       	mov	r15, r24
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <play_game+0x100>
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
		
		char keyboard_input = -1;
    1b24:	ff 24       	eor	r15, r15
    1b26:	fa 94       	dec	r15
		
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		frequency_joy(joy_stick());
    1b28:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <joy_stick>
		
		if (!paused) {
    1b2c:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <paused>
    1b30:	90 91 34 06 	lds	r25, 0x0634	; 0x800634 <paused+0x1>
    1b34:	89 2b       	or	r24, r25
    1b36:	99 f5       	brne	.+102    	; 0x1b9e <play_game+0x176>
			if ((btn == BUTTON0_PUSHED) || (keyboard_input == 'f' || keyboard_input == 'F')) {
    1b38:	49 81       	ldd	r20, Y+1	; 0x01
    1b3a:	44 23       	and	r20, r20
    1b3c:	31 f0       	breq	.+12     	; 0x1b4a <play_game+0x122>
    1b3e:	56 e6       	ldi	r21, 0x66	; 102
    1b40:	f5 16       	cp	r15, r21
    1b42:	19 f0       	breq	.+6      	; 0x1b4a <play_game+0x122>
    1b44:	86 e4       	ldi	r24, 0x46	; 70
    1b46:	f8 12       	cpse	r15, r24
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <play_game+0x12a>
				// If button 0 play the lowest note (right lane)
				play_note(3);
    1b4a:	83 e0       	ldi	r24, 0x03	; 3
    1b4c:	0e 94 b2 05 	call	0xb64	; 0xb64 <play_note>
    1b50:	26 c0       	rjmp	.+76     	; 0x1b9e <play_game+0x176>
		
			} else if ((btn == BUTTON1_PUSHED) || (keyboard_input == 'd' || keyboard_input == 'D')) {
    1b52:	99 81       	ldd	r25, Y+1	; 0x01
    1b54:	91 30       	cpi	r25, 0x01	; 1
    1b56:	31 f0       	breq	.+12     	; 0x1b64 <play_game+0x13c>
    1b58:	24 e6       	ldi	r18, 0x64	; 100
    1b5a:	f2 16       	cp	r15, r18
    1b5c:	19 f0       	breq	.+6      	; 0x1b64 <play_game+0x13c>
    1b5e:	34 e4       	ldi	r19, 0x44	; 68
    1b60:	f3 12       	cpse	r15, r19
    1b62:	04 c0       	rjmp	.+8      	; 0x1b6c <play_game+0x144>
				//If button 1 is pushed play the second lowest note
				play_note(2);		
    1b64:	82 e0       	ldi	r24, 0x02	; 2
    1b66:	0e 94 b2 05 	call	0xb64	; 0xb64 <play_note>
    1b6a:	19 c0       	rjmp	.+50     	; 0x1b9e <play_game+0x176>
		
			} else if ((btn == BUTTON2_PUSHED) || (keyboard_input == 's' || keyboard_input == 'S')) {
    1b6c:	49 81       	ldd	r20, Y+1	; 0x01
    1b6e:	42 30       	cpi	r20, 0x02	; 2
    1b70:	31 f0       	breq	.+12     	; 0x1b7e <play_game+0x156>
    1b72:	53 e7       	ldi	r21, 0x73	; 115
    1b74:	f5 16       	cp	r15, r21
    1b76:	19 f0       	breq	.+6      	; 0x1b7e <play_game+0x156>
    1b78:	83 e5       	ldi	r24, 0x53	; 83
    1b7a:	f8 12       	cpse	r15, r24
    1b7c:	04 c0       	rjmp	.+8      	; 0x1b86 <play_game+0x15e>
				//If button 2 is pushed play the second highest note
				play_note(1); 
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	0e 94 b2 05 	call	0xb64	; 0xb64 <play_note>
    1b84:	0c c0       	rjmp	.+24     	; 0x1b9e <play_game+0x176>
				
			} else if ((btn == BUTTON3_PUSHED) || (keyboard_input == 'a' || keyboard_input == 'A')) {
    1b86:	99 81       	ldd	r25, Y+1	; 0x01
    1b88:	93 30       	cpi	r25, 0x03	; 3
    1b8a:	31 f0       	breq	.+12     	; 0x1b98 <play_game+0x170>
    1b8c:	21 e6       	ldi	r18, 0x61	; 97
    1b8e:	f2 16       	cp	r15, r18
    1b90:	19 f0       	breq	.+6      	; 0x1b98 <play_game+0x170>
    1b92:	31 e4       	ldi	r19, 0x41	; 65
    1b94:	f3 12       	cpse	r15, r19
    1b96:	03 c0       	rjmp	.+6      	; 0x1b9e <play_game+0x176>
				//If button 3 is pushed play the highest note
				play_note(0);
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	0e 94 b2 05 	call	0xb64	; 0xb64 <play_note>
			
			} 
		}
		
		if (keyboard_input == 'm' || keyboard_input == 'M') {
    1b9e:	4d e6       	ldi	r20, 0x6D	; 109
    1ba0:	f4 16       	cp	r15, r20
    1ba2:	19 f0       	breq	.+6      	; 0x1baa <play_game+0x182>
    1ba4:	5d e4       	ldi	r21, 0x4D	; 77
    1ba6:	f5 12       	cpse	r15, r21
    1ba8:	27 c0       	rjmp	.+78     	; 0x1bf8 <play_game+0x1d0>
			//check to see if the game is currently paused
			if (!paused) {
    1baa:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <paused>
    1bae:	90 91 34 06 	lds	r25, 0x0634	; 0x800634 <paused+0x1>
    1bb2:	89 2b       	or	r24, r25
    1bb4:	09 f5       	brne	.+66     	; 0x1bf8 <play_game+0x1d0>
				//clear manual mode alert
				move_terminal_cursor(10, 16);
    1bb6:	60 e1       	ldi	r22, 0x10	; 16
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	8a e0       	ldi	r24, 0x0A	; 10
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
				clear_to_end_of_line();
    1bc2:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <clear_to_end_of_line>
				if (man_mode) {
    1bc6:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <man_mode>
    1bca:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <man_mode+0x1>
    1bce:	89 2b       	or	r24, r25
    1bd0:	29 f0       	breq	.+10     	; 0x1bdc <play_game+0x1b4>
					man_mode = 0;
    1bd2:	10 92 36 06 	sts	0x0636, r1	; 0x800636 <man_mode+0x1>
    1bd6:	10 92 35 06 	sts	0x0635, r1	; 0x800635 <man_mode>
    1bda:	0e c0       	rjmp	.+28     	; 0x1bf8 <play_game+0x1d0>
		
				} else {
					man_mode = 1;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	90 93 36 06 	sts	0x0636, r25	; 0x800636 <man_mode+0x1>
    1be4:	80 93 35 06 	sts	0x0635, r24	; 0x800635 <man_mode>
					
					//print to terminal that manual mode is on
					printf("Manual Mode: ON");
    1be8:	8b ee       	ldi	r24, 0xEB	; 235
    1bea:	93 e0       	ldi	r25, 0x03	; 3
    1bec:	9f 93       	push	r25
    1bee:	8f 93       	push	r24
    1bf0:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
				}
			}	
		}
		
		if (keyboard_input == 'p' || keyboard_input == 'P') {
    1bf8:	80 e7       	ldi	r24, 0x70	; 112
    1bfa:	f8 16       	cp	r15, r24
    1bfc:	19 f0       	breq	.+6      	; 0x1c04 <play_game+0x1dc>
    1bfe:	90 e5       	ldi	r25, 0x50	; 80
    1c00:	f9 12       	cpse	r15, r25
    1c02:	3b c0       	rjmp	.+118    	; 0x1c7a <play_game+0x252>
			//clear pause line in terminal
			move_terminal_cursor(10, 17);
    1c04:	61 e1       	ldi	r22, 0x11	; 17
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	8a e0       	ldi	r24, 0x0A	; 10
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
			clear_to_end_of_line();
    1c10:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <clear_to_end_of_line>
			if (paused) {
    1c14:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <paused>
    1c18:	90 91 34 06 	lds	r25, 0x0634	; 0x800634 <paused+0x1>
    1c1c:	89 2b       	or	r24, r25
    1c1e:	71 f0       	breq	.+28     	; 0x1c3c <play_game+0x214>
				paused = 0;
    1c20:	10 92 34 06 	sts	0x0634, r1	; 0x800634 <paused+0x1>
    1c24:	10 92 33 06 	sts	0x0633, r1	; 0x800633 <paused>
				PORTD = PORTD & 0b11110111;
    1c28:	8b b1       	in	r24, 0x0b	; 11
    1c2a:	87 7f       	andi	r24, 0xF7	; 247
    1c2c:	8b b9       	out	0x0b, r24	; 11
				
				//un-pause sound
				pause_control(paused);
    1c2e:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <paused>
    1c32:	90 91 34 06 	lds	r25, 0x0634	; 0x800634 <paused+0x1>
    1c36:	0e 94 06 13 	call	0x260c	; 0x260c <pause_control>
    1c3a:	1f c0       	rjmp	.+62     	; 0x1c7a <play_game+0x252>
			
			} else {
				paused = 1;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	90 93 34 06 	sts	0x0634, r25	; 0x800634 <paused+0x1>
    1c44:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <paused>
				pause_time = get_current_time() - last_advance_time; 
    1c48:	0e 94 1e 12 	call	0x243c	; 0x243c <get_current_time>
    1c4c:	4b 01       	movw	r8, r22
    1c4e:	5c 01       	movw	r10, r24
    1c50:	84 18       	sub	r8, r4
    1c52:	95 08       	sbc	r9, r5
    1c54:	a6 08       	sbc	r10, r6
    1c56:	b7 08       	sbc	r11, r7
					
				PORTD = PORTD | (1<<3); //essentially just PORTD | 0b00001000
    1c58:	8b b1       	in	r24, 0x0b	; 11
    1c5a:	88 60       	ori	r24, 0x08	; 8
    1c5c:	8b b9       	out	0x0b, r24	; 11
									
				//pause the sound
				pause_control(paused);
    1c5e:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <paused>
    1c62:	90 91 34 06 	lds	r25, 0x0634	; 0x800634 <paused+0x1>
    1c66:	0e 94 06 13 	call	0x260c	; 0x260c <pause_control>
					
				//tell user that game is currently paused
				printf("Game Paused");
    1c6a:	8b ef       	ldi	r24, 0xFB	; 251
    1c6c:	93 e0       	ldi	r25, 0x03	; 3
    1c6e:	9f 93       	push	r25
    1c70:	8f 93       	push	r24
    1c72:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
			}
				
		}
		
		//Combo IO board LED's
		if (combo_count == 0) {
    1c7a:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <combo_count>
    1c7e:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <combo_count+0x1>
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	21 f4       	brne	.+8      	; 0x1c8e <play_game+0x266>
			//set portD outputs to the I/O boards LED matrix to be 0
			PORTD = PORTD & 0b00011111;
    1c86:	8b b1       	in	r24, 0x0b	; 11
    1c88:	8f 71       	andi	r24, 0x1F	; 31
    1c8a:	8b b9       	out	0x0b, r24	; 11
    1c8c:	13 c0       	rjmp	.+38     	; 0x1cb4 <play_game+0x28c>

		} else if (combo_count == 1) {
    1c8e:	81 30       	cpi	r24, 0x01	; 1
    1c90:	91 05       	cpc	r25, r1
    1c92:	21 f4       	brne	.+8      	; 0x1c9c <play_game+0x274>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<5); 
    1c94:	8b b1       	in	r24, 0x0b	; 11
    1c96:	80 62       	ori	r24, 0x20	; 32
    1c98:	8b b9       	out	0x0b, r24	; 11
    1c9a:	0c c0       	rjmp	.+24     	; 0x1cb4 <play_game+0x28c>
			
		} else if (combo_count == 2) {
    1c9c:	82 30       	cpi	r24, 0x02	; 2
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	21 f4       	brne	.+8      	; 0x1caa <play_game+0x282>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<6);
    1ca2:	8b b1       	in	r24, 0x0b	; 11
    1ca4:	80 64       	ori	r24, 0x40	; 64
    1ca6:	8b b9       	out	0x0b, r24	; 11
    1ca8:	05 c0       	rjmp	.+10     	; 0x1cb4 <play_game+0x28c>
			
		} else if (combo_count >= 3) {
    1caa:	03 97       	sbiw	r24, 0x03	; 3
    1cac:	1c f0       	brlt	.+6      	; 0x1cb4 <play_game+0x28c>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<7);
    1cae:	8b b1       	in	r24, 0x0b	; 11
    1cb0:	80 68       	ori	r24, 0x80	; 128
    1cb2:	8b b9       	out	0x0b, r24	; 11
		}
		
		//Combo display
		if ((combo_check) && (combo_line == 0)) {
    1cb4:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <combo_check>
    1cb8:	90 91 62 06 	lds	r25, 0x0662	; 0x800662 <combo_check+0x1>
    1cbc:	89 2b       	or	r24, r25
    1cbe:	a1 f0       	breq	.+40     	; 0x1ce8 <play_game+0x2c0>
    1cc0:	01 15       	cp	r16, r1
    1cc2:	11 05       	cpc	r17, r1
    1cc4:	89 f4       	brne	.+34     	; 0x1ce8 <play_game+0x2c0>
			move_terminal_cursor(10, 3);
    1cc6:	63 e0       	ldi	r22, 0x03	; 3
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	8a e0       	ldi	r24, 0x0A	; 10
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
			printf("  ______                           __                  __");
    1cd2:	87 e0       	ldi	r24, 0x07	; 7
    1cd4:	94 e0       	ldi	r25, 0x04	; 4
    1cd6:	9f 93       	push	r25
    1cd8:	8f 93       	push	r24
    1cda:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
			
			combo_line++; //increment combo line so in next loop the next line is printed of ascii art
    1cde:	0f 5f       	subi	r16, 0xFF	; 255
    1ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	9f c0       	rjmp	.+318    	; 0x1e26 <play_game+0x3fe>
		} else if (combo_line == 1) {
    1ce8:	01 30       	cpi	r16, 0x01	; 1
    1cea:	11 05       	cpc	r17, r1
    1cec:	89 f4       	brne	.+34     	; 0x1d10 <play_game+0x2e8>
			move_terminal_cursor(10,4);
    1cee:	64 e0       	ldi	r22, 0x04	; 4
    1cf0:	70 e0       	ldi	r23, 0x00	; 0
    1cf2:	8a e0       	ldi	r24, 0x0A	; 10
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
			printf(" /      \\                         |  \\                |  \\");
    1cfa:	81 e4       	ldi	r24, 0x41	; 65
    1cfc:	94 e0       	ldi	r25, 0x04	; 4
    1cfe:	9f 93       	push	r25
    1d00:	8f 93       	push	r24
    1d02:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
			
			combo_line++;
    1d06:	0f 5f       	subi	r16, 0xFF	; 255
    1d08:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	8b c0       	rjmp	.+278    	; 0x1e26 <play_game+0x3fe>
		} else if (combo_line == 2) {
    1d10:	02 30       	cpi	r16, 0x02	; 2
    1d12:	11 05       	cpc	r17, r1
    1d14:	89 f4       	brne	.+34     	; 0x1d38 <play_game+0x310>
			move_terminal_cursor(10,5);
    1d16:	65 e0       	ldi	r22, 0x05	; 5
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	8a e0       	ldi	r24, 0x0A	; 10
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
			printf("|  $$$$$$\\  ______   ______ ____  | $$____    ______  | $$");
    1d22:	8c e7       	ldi	r24, 0x7C	; 124
    1d24:	94 e0       	ldi	r25, 0x04	; 4
    1d26:	9f 93       	push	r25
    1d28:	8f 93       	push	r24
    1d2a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
			
			combo_line++;
    1d2e:	0f 5f       	subi	r16, 0xFF	; 255
    1d30:	1f 4f       	sbci	r17, 0xFF	; 255
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	77 c0       	rjmp	.+238    	; 0x1e26 <play_game+0x3fe>
		} else if (combo_line == 3) {
    1d38:	03 30       	cpi	r16, 0x03	; 3
    1d3a:	11 05       	cpc	r17, r1
    1d3c:	89 f4       	brne	.+34     	; 0x1d60 <play_game+0x338>
			move_terminal_cursor(10,6);
    1d3e:	66 e0       	ldi	r22, 0x06	; 6
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	8a e0       	ldi	r24, 0x0A	; 10
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
			printf("| $$   \\$$ /      \\ |      \\    \\ | $$    \\  /      \\ | $$");
    1d4a:	87 eb       	ldi	r24, 0xB7	; 183
    1d4c:	94 e0       	ldi	r25, 0x04	; 4
    1d4e:	9f 93       	push	r25
    1d50:	8f 93       	push	r24
    1d52:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
			
			combo_line++;
    1d56:	0f 5f       	subi	r16, 0xFF	; 255
    1d58:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	63 c0       	rjmp	.+198    	; 0x1e26 <play_game+0x3fe>
		} else if (combo_line == 4) {
    1d60:	04 30       	cpi	r16, 0x04	; 4
    1d62:	11 05       	cpc	r17, r1
    1d64:	89 f4       	brne	.+34     	; 0x1d88 <play_game+0x360>
			move_terminal_cursor(10,7);
    1d66:	67 e0       	ldi	r22, 0x07	; 7
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	8a e0       	ldi	r24, 0x0A	; 10
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
			printf("| $$      |  $$$$$$\\| $$$$$$\\$$$$\\| $$$$$$$\\|  $$$$$$\\| $$");
    1d72:	82 ef       	ldi	r24, 0xF2	; 242
    1d74:	94 e0       	ldi	r25, 0x04	; 4
    1d76:	9f 93       	push	r25
    1d78:	8f 93       	push	r24
    1d7a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
			
			combo_line++;
    1d7e:	0f 5f       	subi	r16, 0xFF	; 255
    1d80:	1f 4f       	sbci	r17, 0xFF	; 255
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	4f c0       	rjmp	.+158    	; 0x1e26 <play_game+0x3fe>
		}  else if (combo_line == 5) {
    1d88:	05 30       	cpi	r16, 0x05	; 5
    1d8a:	11 05       	cpc	r17, r1
    1d8c:	89 f4       	brne	.+34     	; 0x1db0 <play_game+0x388>
			move_terminal_cursor(10,8);
    1d8e:	68 e0       	ldi	r22, 0x08	; 8
    1d90:	70 e0       	ldi	r23, 0x00	; 0
    1d92:	8a e0       	ldi	r24, 0x0A	; 10
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
			printf("| $$   __ | $$  | $$| $$ | $$ | $$| $$  | $$| $$  | $$ \\$$");
    1d9a:	8d e2       	ldi	r24, 0x2D	; 45
    1d9c:	95 e0       	ldi	r25, 0x05	; 5
    1d9e:	9f 93       	push	r25
    1da0:	8f 93       	push	r24
    1da2:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
			
			combo_line++;
    1da6:	0f 5f       	subi	r16, 0xFF	; 255
    1da8:	1f 4f       	sbci	r17, 0xFF	; 255
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	3b c0       	rjmp	.+118    	; 0x1e26 <play_game+0x3fe>
		} else if (combo_line == 6) {
    1db0:	06 30       	cpi	r16, 0x06	; 6
    1db2:	11 05       	cpc	r17, r1
    1db4:	89 f4       	brne	.+34     	; 0x1dd8 <play_game+0x3b0>
			move_terminal_cursor(10,9);
    1db6:	69 e0       	ldi	r22, 0x09	; 9
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	8a e0       	ldi	r24, 0x0A	; 10
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
			printf("| $$__/  \\| $$__/ $$| $$ | $$ | $$| $$__/ $$| $$__/ $$ __");
    1dc2:	88 e6       	ldi	r24, 0x68	; 104
    1dc4:	95 e0       	ldi	r25, 0x05	; 5
    1dc6:	9f 93       	push	r25
    1dc8:	8f 93       	push	r24
    1dca:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
			
			combo_line++;
    1dce:	0f 5f       	subi	r16, 0xFF	; 255
    1dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	27 c0       	rjmp	.+78     	; 0x1e26 <play_game+0x3fe>
		} else if (combo_line == 7) {
    1dd8:	07 30       	cpi	r16, 0x07	; 7
    1dda:	11 05       	cpc	r17, r1
    1ddc:	89 f4       	brne	.+34     	; 0x1e00 <play_game+0x3d8>
			move_terminal_cursor(10,10);
    1dde:	6a e0       	ldi	r22, 0x0A	; 10
    1de0:	70 e0       	ldi	r23, 0x00	; 0
    1de2:	8a e0       	ldi	r24, 0x0A	; 10
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
			printf(" \\$$    $$ \\$$    $$| $$ | $$ | $$| $$    $$ \\$$    $$|  \\");
    1dea:	82 ea       	ldi	r24, 0xA2	; 162
    1dec:	95 e0       	ldi	r25, 0x05	; 5
    1dee:	9f 93       	push	r25
    1df0:	8f 93       	push	r24
    1df2:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
			
			combo_line++;
    1df6:	0f 5f       	subi	r16, 0xFF	; 255
    1df8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	13 c0       	rjmp	.+38     	; 0x1e26 <play_game+0x3fe>
		} else if (combo_line == 8) {
    1e00:	08 30       	cpi	r16, 0x08	; 8
    1e02:	11 05       	cpc	r17, r1
    1e04:	81 f4       	brne	.+32     	; 0x1e26 <play_game+0x3fe>
			move_terminal_cursor(10,11);
    1e06:	6b e0       	ldi	r22, 0x0B	; 11
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	8a e0       	ldi	r24, 0x0A	; 10
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
			printf("  \\$$$$$$   \\$$$$$$  \\$$  \\$$  \\$$ \\$$$$$$$   \\$$$$$$  \\$$");
    1e12:	8d ed       	ldi	r24, 0xDD	; 221
    1e14:	95 e0       	ldi	r25, 0x05	; 5
    1e16:	9f 93       	push	r25
    1e18:	8f 93       	push	r24
    1e1a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
			
			combo_line = 0;
    1e22:	00 e0       	ldi	r16, 0x00	; 0
    1e24:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		if (!combo_check) {
    1e26:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <combo_check>
    1e2a:	90 91 62 06 	lds	r25, 0x0662	; 0x800662 <combo_check+0x1>
    1e2e:	89 2b       	or	r24, r25
    1e30:	81 f0       	breq	.+32     	; 0x1e52 <play_game+0x42a>
    1e32:	17 c0       	rjmp	.+46     	; 0x1e62 <play_game+0x43a>
			for (int term_line = 3; term_line < 12; term_line++) {
				move_terminal_cursor(10, term_line);
    1e34:	69 81       	ldd	r22, Y+1	; 0x01
    1e36:	7a 81       	ldd	r23, Y+2	; 0x02
    1e38:	8a e0       	ldi	r24, 0x0A	; 10
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
				clear_to_end_of_line();
    1e40:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <clear_to_end_of_line>
			
			combo_line = 0;
		}
		
		if (!combo_check) {
			for (int term_line = 3; term_line < 12; term_line++) {
    1e44:	29 81       	ldd	r18, Y+1	; 0x01
    1e46:	3a 81       	ldd	r19, Y+2	; 0x02
    1e48:	2f 5f       	subi	r18, 0xFF	; 255
    1e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4c:	3a 83       	std	Y+2, r19	; 0x02
    1e4e:	29 83       	std	Y+1, r18	; 0x01
    1e50:	04 c0       	rjmp	.+8      	; 0x1e5a <play_game+0x432>
    1e52:	43 e0       	ldi	r20, 0x03	; 3
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	5a 83       	std	Y+2, r21	; 0x02
    1e58:	49 83       	std	Y+1, r20	; 0x01
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5e:	0c 97       	sbiw	r24, 0x0c	; 12
    1e60:	4c f3       	brlt	.-46     	; 0x1e34 <play_game+0x40c>
				
			}	
		}
		

		if (!man_mode & !paused) {
    1e62:	20 91 35 06 	lds	r18, 0x0635	; 0x800635 <man_mode>
    1e66:	30 91 36 06 	lds	r19, 0x0636	; 0x800636 <man_mode+0x1>
    1e6a:	91 e0       	ldi	r25, 0x01	; 1
    1e6c:	40 91 33 06 	lds	r20, 0x0633	; 0x800633 <paused>
    1e70:	50 91 34 06 	lds	r21, 0x0634	; 0x800634 <paused+0x1>
    1e74:	45 2b       	or	r20, r21
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <play_game+0x452>
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	21 15       	cp	r18, r1
    1e7e:	31 05       	cpc	r19, r1
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <play_game+0x45c>
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	89 23       	and	r24, r25
    1e86:	69 f1       	breq	.+90     	; 0x1ee2 <play_game+0x4ba>
			current_time = get_current_time();
    1e88:	0e 94 1e 12 	call	0x243c	; 0x243c <get_current_time>
    1e8c:	69 83       	std	Y+1, r22	; 0x01
    1e8e:	7a 83       	std	Y+2, r23	; 0x02
    1e90:	8b 83       	std	Y+3, r24	; 0x03
    1e92:	9c 83       	std	Y+4, r25	; 0x04
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
    1e94:	6b 01       	movw	r12, r22
    1e96:	7c 01       	movw	r14, r24
    1e98:	c8 18       	sub	r12, r8
    1e9a:	d9 08       	sbc	r13, r9
    1e9c:	ea 08       	sbc	r14, r10
    1e9e:	fb 08       	sbc	r15, r11
    1ea0:	20 91 6b 06 	lds	r18, 0x066B	; 0x80066b <game_speed>
    1ea4:	30 91 6c 06 	lds	r19, 0x066C	; 0x80066c <game_speed+0x1>
    1ea8:	ad ec       	ldi	r26, 0xCD	; 205
    1eaa:	bc ec       	ldi	r27, 0xCC	; 204
    1eac:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <__umulhisi3>
    1eb0:	96 95       	lsr	r25
    1eb2:	87 95       	ror	r24
    1eb4:	96 95       	lsr	r25
    1eb6:	87 95       	ror	r24
    1eb8:	a3 01       	movw	r20, r6
    1eba:	92 01       	movw	r18, r4
    1ebc:	28 0f       	add	r18, r24
    1ebe:	39 1f       	adc	r19, r25
    1ec0:	41 1d       	adc	r20, r1
    1ec2:	51 1d       	adc	r21, r1
    1ec4:	c2 16       	cp	r12, r18
    1ec6:	d3 06       	cpc	r13, r19
    1ec8:	e4 06       	cpc	r14, r20
    1eca:	f5 06       	cpc	r15, r21
    1ecc:	b0 f0       	brcs	.+44     	; 0x1efa <play_game+0x4d2>
			{
				pause_time = 0;
				// 200ms (0.2 second) has passed since the last time we advance the
				// notes here, so update the advance the notes
				advance_note();
    1ece:	0e 94 99 06 	call	0xd32	; 0xd32 <advance_note>
				
				// Update the most recent time the notes were advanced
				last_advance_time = current_time;
    1ed2:	49 80       	ldd	r4, Y+1	; 0x01
    1ed4:	5a 80       	ldd	r5, Y+2	; 0x02
    1ed6:	6b 80       	ldd	r6, Y+3	; 0x03
    1ed8:	7c 80       	ldd	r7, Y+4	; 0x04
		if (!man_mode & !paused) {
			current_time = get_current_time();
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
			{
				pause_time = 0;
    1eda:	81 2c       	mov	r8, r1
    1edc:	91 2c       	mov	r9, r1
    1ede:	54 01       	movw	r10, r8
    1ee0:	0c c0       	rjmp	.+24     	; 0x1efa <play_game+0x4d2>
				
				// Update the most recent time the notes were advanced
				last_advance_time = current_time;
			}
			
		} else if (man_mode) {
    1ee2:	23 2b       	or	r18, r19
    1ee4:	51 f0       	breq	.+20     	; 0x1efa <play_game+0x4d2>
			if (keyboard_input == 'n' || keyboard_input == 'N') {
    1ee6:	3e e6       	ldi	r19, 0x6E	; 110
    1ee8:	f3 16       	cp	r15, r19
    1eea:	19 f0       	breq	.+6      	; 0x1ef2 <play_game+0x4ca>
    1eec:	4e e4       	ldi	r20, 0x4E	; 78
    1eee:	f4 12       	cpse	r15, r20
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <play_game+0x4ce>
				advance_note();
    1ef2:	0e 94 99 06 	call	0xd32	; 0xd32 <advance_note>
			}
			draw_notes();
    1ef6:	0e 94 77 04 	call	0x8ee	; 0x8ee <draw_notes>
	} else if (game_speed == 250) {
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
	}
	
	// We play the game until it's over
	while (!is_game_over())
    1efa:	0e 94 fb 07 	call	0xff6	; 0xff6 <is_game_over>
    1efe:	88 23       	and	r24, r24
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <play_game+0x4dc>
    1f02:	01 ce       	rjmp	.-1022   	; 0x1b06 <play_game+0xde>
				advance_note();
			}
			draw_notes();
		}
	}
}
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	df 90       	pop	r13
    1f1a:	cf 90       	pop	r12
    1f1c:	bf 90       	pop	r11
    1f1e:	af 90       	pop	r10
    1f20:	9f 90       	pop	r9
    1f22:	8f 90       	pop	r8
    1f24:	7f 90       	pop	r7
    1f26:	6f 90       	pop	r6
    1f28:	5f 90       	pop	r5
    1f2a:	4f 90       	pop	r4
    1f2c:	08 95       	ret

00001f2e <handle_game_over>:

void handle_game_over()
{
	clear_terminal();
    1f2e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <clear_terminal>
	move_terminal_cursor(10,13);
    1f32:	6d e0       	ldi	r22, 0x0D	; 13
    1f34:	70 e0       	ldi	r23, 0x00	; 0
    1f36:	8a e0       	ldi	r24, 0x0A	; 10
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    1f3e:	8a ea       	ldi	r24, 0xAA	; 170
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	9f 93       	push	r25
    1f44:	8f 93       	push	r24
    1f46:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
	move_terminal_cursor(10,14);
    1f4a:	6e e0       	ldi	r22, 0x0E	; 14
    1f4c:	70 e0       	ldi	r23, 0x00	; 0
    1f4e:	8a e0       	ldi	r24, 0x0A	; 10
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
	printf("Final Score: %d\n", points);
    1f56:	80 91 3d 06 	lds	r24, 0x063D	; 0x80063d <points+0x1>
    1f5a:	8f 93       	push	r24
    1f5c:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
    1f60:	8f 93       	push	r24
    1f62:	88 e1       	ldi	r24, 0x18	; 24
    1f64:	96 e0       	ldi	r25, 0x06	; 6
    1f66:	9f 93       	push	r25
    1f68:	8f 93       	push	r24
    1f6a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
	//Display current track
	move_terminal_cursor(10, 15);
    1f6e:	6f e0       	ldi	r22, 0x0F	; 15
    1f70:	70 e0       	ldi	r23, 0x00	; 0
    1f72:	8a e0       	ldi	r24, 0x0A	; 10
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
	printf("Track: %s", track_name);														//do %s and add a new track title at the end.
    1f7a:	82 e4       	ldi	r24, 0x42	; 66
    1f7c:	96 e0       	ldi	r25, 0x06	; 6
    1f7e:	9f 93       	push	r25
    1f80:	8f 93       	push	r24
    1f82:	80 e7       	ldi	r24, 0x70	; 112
    1f84:	93 e0       	ldi	r25, 0x03	; 3
    1f86:	9f 93       	push	r25
    1f88:	8f 93       	push	r24
    1f8a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
	track_no = 0;	
    1f8e:	10 92 5e 06 	sts	0x065E, r1	; 0x80065e <track_no+0x1>
    1f92:	10 92 5d 06 	sts	0x065D, r1	; 0x80065d <track_no>
	move_terminal_cursor(10, 16);
    1f96:	60 e1       	ldi	r22, 0x10	; 16
    1f98:	70 e0       	ldi	r23, 0x00	; 0
    1f9a:	8a e0       	ldi	r24, 0x0A	; 10
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
	clear_to_end_of_line();
    1fa2:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <clear_to_end_of_line>
	//display game sped
	if (game_speed == 1000) {
    1fa6:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    1faa:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <game_speed+0x1>
    1fae:	2d b7       	in	r18, 0x3d	; 61
    1fb0:	3e b7       	in	r19, 0x3e	; 62
    1fb2:	26 5f       	subi	r18, 0xF6	; 246
    1fb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	3e bf       	out	0x3e, r19	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	2d bf       	out	0x3d, r18	; 61
    1fc0:	88 3e       	cpi	r24, 0xE8	; 232
    1fc2:	33 e0       	ldi	r19, 0x03	; 3
    1fc4:	93 07       	cpc	r25, r19
    1fc6:	69 f4       	brne	.+26     	; 0x1fe2 <handle_game_over+0xb4>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    1fc8:	9f 93       	push	r25
    1fca:	8f 93       	push	r24
    1fcc:	8a e7       	ldi	r24, 0x7A	; 122
    1fce:	93 e0       	ldi	r25, 0x03	; 3
    1fd0:	9f 93       	push	r25
    1fd2:	8f 93       	push	r24
    1fd4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	20 c0       	rjmp	.+64     	; 0x2022 <handle_game_over+0xf4>
		
		} else if (game_speed == 500) {
    1fe2:	84 3f       	cpi	r24, 0xF4	; 244
    1fe4:	21 e0       	ldi	r18, 0x01	; 1
    1fe6:	92 07       	cpc	r25, r18
    1fe8:	69 f4       	brne	.+26     	; 0x2004 <handle_game_over+0xd6>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1fea:	9f 93       	push	r25
    1fec:	8f 93       	push	r24
    1fee:	80 ea       	ldi	r24, 0xA0	; 160
    1ff0:	93 e0       	ldi	r25, 0x03	; 3
    1ff2:	9f 93       	push	r25
    1ff4:	8f 93       	push	r24
    1ff6:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f c0       	rjmp	.+30     	; 0x2022 <handle_game_over+0xf4>
		
		} else if (game_speed == 250) {
    2004:	8a 3f       	cpi	r24, 0xFA	; 250
    2006:	91 05       	cpc	r25, r1
    2008:	61 f4       	brne	.+24     	; 0x2022 <handle_game_over+0xf4>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    200a:	9f 93       	push	r25
    200c:	8f 93       	push	r24
    200e:	84 ec       	ldi	r24, 0xC4	; 196
    2010:	93 e0       	ldi	r25, 0x03	; 3
    2012:	9f 93       	push	r25
    2014:	8f 93       	push	r24
    2016:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <printf>
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
	}
	
	move_terminal_cursor(10, 17);
    2022:	61 e1       	ldi	r22, 0x11	; 17
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	8a e0       	ldi	r24, 0x0A	; 10
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	0e 94 c6 11 	call	0x238c	; 0x238c <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
    202e:	8c e7       	ldi	r24, 0x7C	; 124
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	9f 93       	push	r25
    2034:	8f 93       	push	r24
    2036:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	10 c0       	rjmp	.+32     	; 0x2060 <handle_game_over+0x132>
	{
		char keyboard_input = -1;
				
		if (serial_input_available()) {
    2040:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <serial_input_available>
    2044:	88 23       	and	r24, r24
    2046:	39 f0       	breq	.+14     	; 0x2056 <handle_game_over+0x128>
			keyboard_input = fgetc(stdin);
    2048:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <__iob>
    204c:	90 91 82 07 	lds	r25, 0x0782	; 0x800782 <__iob+0x1>
    2050:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <fgetc>
    2054:	01 c0       	rjmp	.+2      	; 0x2058 <handle_game_over+0x12a>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
	{
		char keyboard_input = -1;
    2056:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		//check if the user presses s
		if (keyboard_input == 's' || keyboard_input == 'S') {
    2058:	83 37       	cpi	r24, 0x73	; 115
    205a:	31 f0       	breq	.+12     	; 0x2068 <handle_game_over+0x13a>
    205c:	83 35       	cpi	r24, 0x53	; 83
    205e:	21 f0       	breq	.+8      	; 0x2068 <handle_game_over+0x13a>
	move_terminal_cursor(10, 17);
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    2060:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    2064:	8f 3f       	cpi	r24, 0xFF	; 255
    2066:	61 f3       	breq	.-40     	; 0x2040 <handle_game_over+0x112>
		if (keyboard_input == 's' || keyboard_input == 'S') {
			break;
		}
	}	
	
	start_screen();
    2068:	0e 94 64 08 	call	0x10c8	; 0x10c8 <start_screen>
    206c:	08 95       	ret

0000206e <main>:
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    206e:	0e 94 47 08 	call	0x108e	; 0x108e <initialise_hardware>
	
	points = 0;
    2072:	10 92 3d 06 	sts	0x063D, r1	; 0x80063d <points+0x1>
    2076:	10 92 3c 06 	sts	0x063C, r1	; 0x80063c <points>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
    207a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <start_screen>
	
	// Loop forever and continuously play the game.
	while(1)
	{
		new_game();
    207e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <new_game>
		play_game();
    2082:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <play_game>
		handle_game_over();
    2086:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <handle_game_over>
    208a:	f9 cf       	rjmp	.-14     	; 0x207e <main+0x10>

0000208c <uart_put_char>:
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream)
{
    208c:	cf 93       	push	r28
    208e:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n')
    2090:	8a 30       	cpi	r24, 0x0A	; 10
    2092:	19 f4       	brne	.+6      	; 0x209a <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
    2094:	8d e0       	ldi	r24, 0x0D	; 13
    2096:	0e 94 46 10 	call	0x208c	; 0x208c <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    209a:	9f b7       	in	r25, 0x3f	; 63
    209c:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
    20a0:	99 23       	and	r25, r25
    20a2:	29 f1       	breq	.+74     	; 0x20ee <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    20a4:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <bytes_in_out_buffer>
    20a8:	8f 3f       	cpi	r24, 0xFF	; 255
    20aa:	d1 f3       	breq	.-12     	; 0x20a0 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    20ac:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    20ae:	e0 91 6d 06 	lds	r30, 0x066D	; 0x80066d <out_insert_pos>
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	8e 0f       	add	r24, r30
    20b6:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <out_insert_pos>
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	e1 59       	subi	r30, 0x91	; 145
    20be:	f9 4f       	sbci	r31, 0xF9	; 249
    20c0:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    20c2:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <bytes_in_out_buffer>
    20c6:	8f 5f       	subi	r24, 0xFF	; 255
    20c8:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
    20cc:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <out_insert_pos>
    20d0:	8f 3f       	cpi	r24, 0xFF	; 255
    20d2:	11 f4       	brne	.+4      	; 0x20d8 <uart_put_char+0x4c>
	{
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    20d4:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    20d8:	e1 ec       	ldi	r30, 0xC1	; 193
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	80 62       	ori	r24, 0x20	; 32
    20e0:	80 83       	st	Z, r24
	if (interrupts_enabled)
    20e2:	99 23       	and	r25, r25
    20e4:	39 f0       	breq	.+14     	; 0x20f4 <uart_put_char+0x68>
	{
		sei();
    20e6:	78 94       	sei
	}
	return 0;
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	05 c0       	rjmp	.+10     	; 0x20f8 <uart_put_char+0x6c>
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
}
    20f8:	cf 91       	pop	r28
    20fa:	08 95       	ret

000020fc <uart_get_char>:

int uart_get_char(FILE* stream)
{
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0)
    20fc:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <bytes_in_input_buffer>
    2100:	88 23       	and	r24, r24
    2102:	e1 f3       	breq	.-8      	; 0x20fc <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    2104:	2f b7       	in	r18, 0x3f	; 63
    2106:	20 78       	andi	r18, 0x80	; 128
	cli();
    2108:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
    210a:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <input_insert_pos>
    210e:	30 91 80 07 	lds	r19, 0x0780	; 0x800780 <bytes_in_input_buffer>
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	83 1b       	sub	r24, r19
    2116:	91 09       	sbc	r25, r1
    2118:	5a f4       	brpl	.+22     	; 0x2130 <uart_get_char+0x34>
	{
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    211a:	e0 91 6e 07 	lds	r30, 0x076E	; 0x80076e <input_insert_pos>
    211e:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <bytes_in_input_buffer>
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	e8 1b       	sub	r30, r24
    2126:	f1 09       	sbc	r31, r1
    2128:	e1 58       	subi	r30, 0x81	; 129
    212a:	f8 4f       	sbci	r31, 0xF8	; 248
    212c:	80 81       	ld	r24, Z
    212e:	0a c0       	rjmp	.+20     	; 0x2144 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    2130:	e0 91 6e 07 	lds	r30, 0x076E	; 0x80076e <input_insert_pos>
    2134:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <bytes_in_input_buffer>
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	e8 1b       	sub	r30, r24
    213c:	f1 09       	sbc	r31, r1
    213e:	e1 59       	subi	r30, 0x91	; 145
    2140:	f8 4f       	sbci	r31, 0xF8	; 248
    2142:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    2144:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <bytes_in_input_buffer>
    2148:	91 50       	subi	r25, 0x01	; 1
    214a:	90 93 80 07 	sts	0x0780, r25	; 0x800780 <bytes_in_input_buffer>
	if (interrupts_enabled)
    214e:	22 23       	and	r18, r18
    2150:	09 f0       	breq	.+2      	; 0x2154 <uart_get_char+0x58>
	{
		sei();
    2152:	78 94       	sei
	}	
	return c;
}
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	08 95       	ret

00002158 <init_serial_stdio>:
{
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    2158:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <out_insert_pos>
	bytes_in_out_buffer = 0;
    215c:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <bytes_in_out_buffer>
	input_insert_pos = 0;
    2160:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <input_insert_pos>
	bytes_in_input_buffer = 0;
    2164:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <bytes_in_input_buffer>
	input_overrun = 0;
    2168:	10 92 7f 07 	sts	0x077F, r1	; 0x80077f <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    216c:	40 93 37 06 	sts	0x0637, r20	; 0x800637 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	aa 1f       	adc	r26, r26
    217a:	bb 1f       	adc	r27, r27
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	aa 1f       	adc	r26, r26
    2182:	bb 1f       	adc	r27, r27
    2184:	9c 01       	movw	r18, r24
    2186:	ad 01       	movw	r20, r26
    2188:	22 0f       	add	r18, r18
    218a:	33 1f       	adc	r19, r19
    218c:	44 1f       	adc	r20, r20
    218e:	55 1f       	adc	r21, r21
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	72 e1       	ldi	r23, 0x12	; 18
    2194:	8a e7       	ldi	r24, 0x7A	; 122
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__divmodsi4>
    219c:	ba 01       	movw	r22, r20
    219e:	a9 01       	movw	r20, r18
    21a0:	4f 5f       	subi	r20, 0xFF	; 255
    21a2:	5f 4f       	sbci	r21, 0xFF	; 255
    21a4:	6f 4f       	sbci	r22, 0xFF	; 255
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255
    21a8:	db 01       	movw	r26, r22
    21aa:	ca 01       	movw	r24, r20
    21ac:	1a f4       	brpl	.+6      	; 0x21b4 <init_serial_stdio+0x5c>
    21ae:	01 96       	adiw	r24, 0x01	; 1
    21b0:	a1 1d       	adc	r26, r1
    21b2:	b1 1d       	adc	r27, r1
    21b4:	b5 95       	asr	r27
    21b6:	a7 95       	ror	r26
    21b8:	97 95       	ror	r25
    21ba:	87 95       	ror	r24
    21bc:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    21be:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    21c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    21c6:	e1 ec       	ldi	r30, 0xC1	; 193
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	88 e1       	ldi	r24, 0x18	; 24
    21cc:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
    21ce:	80 81       	ld	r24, Z
    21d0:	80 68       	ori	r24, 0x80	; 128
    21d2:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    21d4:	e1 e8       	ldi	r30, 0x81	; 129
    21d6:	f7 e0       	ldi	r31, 0x07	; 7
    21d8:	8c e0       	ldi	r24, 0x0C	; 12
    21da:	91 e0       	ldi	r25, 0x01	; 1
    21dc:	93 83       	std	Z+3, r25	; 0x03
    21de:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    21e0:	91 83       	std	Z+1, r25	; 0x01
    21e2:	80 83       	st	Z, r24
    21e4:	08 95       	ret

000021e6 <serial_input_available>:
}

int8_t serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
    21e6:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <bytes_in_input_buffer>
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	91 11       	cpse	r25, r1
    21ee:	01 c0       	rjmp	.+2      	; 0x21f2 <serial_input_available+0xc>
    21f0:	80 e0       	ldi	r24, 0x00	; 0
}
    21f2:	08 95       	ret

000021f4 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    21f4:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <input_insert_pos>
	bytes_in_input_buffer = 0;
    21f8:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <bytes_in_input_buffer>
    21fc:	08 95       	ret

000021fe <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    21fe:	1f 92       	push	r1
    2200:	0f 92       	push	r0
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	0f 92       	push	r0
    2206:	11 24       	eor	r1, r1
    2208:	2f 93       	push	r18
    220a:	8f 93       	push	r24
    220c:	9f 93       	push	r25
    220e:	ef 93       	push	r30
    2210:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0)
    2212:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <bytes_in_out_buffer>
    2216:	88 23       	and	r24, r24
    2218:	29 f1       	breq	.+74     	; 0x2264 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
    221a:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <out_insert_pos>
    221e:	20 91 6e 06 	lds	r18, 0x066E	; 0x80066e <bytes_in_out_buffer>
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	82 1b       	sub	r24, r18
    2226:	91 09       	sbc	r25, r1
    2228:	5a f4       	brpl	.+22     	; 0x2240 <__vector_21+0x42>
		{
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    222a:	e0 91 6d 06 	lds	r30, 0x066D	; 0x80066d <out_insert_pos>
    222e:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <bytes_in_out_buffer>
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	e8 1b       	sub	r30, r24
    2236:	f1 09       	sbc	r31, r1
    2238:	e2 59       	subi	r30, 0x92	; 146
    223a:	f8 4f       	sbci	r31, 0xF8	; 248
    223c:	90 81       	ld	r25, Z
    223e:	0a c0       	rjmp	.+20     	; 0x2254 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    2240:	e0 91 6d 06 	lds	r30, 0x066D	; 0x80066d <out_insert_pos>
    2244:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <bytes_in_out_buffer>
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	e8 1b       	sub	r30, r24
    224c:	f1 09       	sbc	r31, r1
    224e:	e1 59       	subi	r30, 0x91	; 145
    2250:	f9 4f       	sbci	r31, 0xF9	; 249
    2252:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    2254:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <bytes_in_out_buffer>
    2258:	81 50       	subi	r24, 0x01	; 1
    225a:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    225e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2262:	05 c0       	rjmp	.+10     	; 0x226e <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
    2264:	e1 ec       	ldi	r30, 0xC1	; 193
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	8f 7d       	andi	r24, 0xDF	; 223
    226c:	80 83       	st	Z, r24
	}
}
    226e:	ff 91       	pop	r31
    2270:	ef 91       	pop	r30
    2272:	9f 91       	pop	r25
    2274:	8f 91       	pop	r24
    2276:	2f 91       	pop	r18
    2278:	0f 90       	pop	r0
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	0f 90       	pop	r0
    227e:	1f 90       	pop	r1
    2280:	18 95       	reti

00002282 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    2282:	1f 92       	push	r1
    2284:	0f 92       	push	r0
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	0f 92       	push	r0
    228a:	11 24       	eor	r1, r1
    228c:	2f 93       	push	r18
    228e:	3f 93       	push	r19
    2290:	4f 93       	push	r20
    2292:	5f 93       	push	r21
    2294:	6f 93       	push	r22
    2296:	7f 93       	push	r23
    2298:	8f 93       	push	r24
    229a:	9f 93       	push	r25
    229c:	af 93       	push	r26
    229e:	bf 93       	push	r27
    22a0:	cf 93       	push	r28
    22a2:	ef 93       	push	r30
    22a4:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    22a6:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
    22aa:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <do_echo>
    22ae:	88 23       	and	r24, r24
    22b0:	49 f0       	breq	.+18     	; 0x22c4 <__vector_20+0x42>
    22b2:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <bytes_in_out_buffer>
    22b6:	8f 3f       	cpi	r24, 0xFF	; 255
    22b8:	29 f0       	breq	.+10     	; 0x22c4 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    22ba:	60 e0       	ldi	r22, 0x00	; 0
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	8c 2f       	mov	r24, r28
    22c0:	0e 94 46 10 	call	0x208c	; 0x208c <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
    22c4:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <bytes_in_input_buffer>
    22c8:	80 31       	cpi	r24, 0x10	; 16
    22ca:	20 f0       	brcs	.+8      	; 0x22d4 <__vector_20+0x52>
	{
		input_overrun = 1;
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <input_overrun>
    22d2:	18 c0       	rjmp	.+48     	; 0x2304 <__vector_20+0x82>
	} else
	{
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r')
    22d4:	cd 30       	cpi	r28, 0x0D	; 13
    22d6:	09 f4       	brne	.+2      	; 0x22da <__vector_20+0x58>
		{
			c = '\n';
    22d8:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    22da:	e0 91 6e 07 	lds	r30, 0x076E	; 0x80076e <input_insert_pos>
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	8e 0f       	add	r24, r30
    22e2:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <input_insert_pos>
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	e1 59       	subi	r30, 0x91	; 145
    22ea:	f8 4f       	sbci	r31, 0xF8	; 248
    22ec:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    22ee:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <bytes_in_input_buffer>
    22f2:	8f 5f       	subi	r24, 0xFF	; 255
    22f4:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
    22f8:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <input_insert_pos>
    22fc:	80 31       	cpi	r24, 0x10	; 16
    22fe:	11 f4       	brne	.+4      	; 0x2304 <__vector_20+0x82>
		{
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    2300:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <input_insert_pos>
		}
	}
}
    2304:	ff 91       	pop	r31
    2306:	ef 91       	pop	r30
    2308:	cf 91       	pop	r28
    230a:	bf 91       	pop	r27
    230c:	af 91       	pop	r26
    230e:	9f 91       	pop	r25
    2310:	8f 91       	pop	r24
    2312:	7f 91       	pop	r23
    2314:	6f 91       	pop	r22
    2316:	5f 91       	pop	r21
    2318:	4f 91       	pop	r20
    231a:	3f 91       	pop	r19
    231c:	2f 91       	pop	r18
    231e:	0f 90       	pop	r0
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	0f 90       	pop	r0
    2324:	1f 90       	pop	r1
    2326:	18 95       	reti

00002328 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider)
{
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    2328:	94 b1       	in	r25, 0x04	; 4
    232a:	90 6b       	ori	r25, 0xB0	; 176
    232c:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
    232e:	95 b1       	in	r25, 0x05	; 5
    2330:	90 61       	ori	r25, 0x10	; 16
    2332:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    2334:	90 e5       	ldi	r25, 0x50	; 80
    2336:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider)
    2338:	88 30       	cpi	r24, 0x08	; 8
    233a:	21 f0       	breq	.+8      	; 0x2344 <spi_setup_master+0x1c>
    233c:	80 32       	cpi	r24, 0x20	; 32
    233e:	11 f0       	breq	.+4      	; 0x2344 <spi_setup_master+0x1c>
    2340:	82 30       	cpi	r24, 0x02	; 2
    2342:	19 f4       	brne	.+6      	; 0x234a <spi_setup_master+0x22>
	{
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
    2344:	91 e0       	ldi	r25, 0x01	; 1
    2346:	9d bd       	out	0x2d, r25	; 45
			break;
    2348:	01 c0       	rjmp	.+2      	; 0x234c <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    234a:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
    234c:	80 32       	cpi	r24, 0x20	; 32
    234e:	69 f0       	breq	.+26     	; 0x236a <spi_setup_master+0x42>
    2350:	28 f4       	brcc	.+10     	; 0x235c <spi_setup_master+0x34>
    2352:	88 30       	cpi	r24, 0x08	; 8
    2354:	71 f0       	breq	.+28     	; 0x2372 <spi_setup_master+0x4a>
    2356:	80 31       	cpi	r24, 0x10	; 16
    2358:	61 f0       	breq	.+24     	; 0x2372 <spi_setup_master+0x4a>
    235a:	0e c0       	rjmp	.+28     	; 0x2378 <spi_setup_master+0x50>
    235c:	80 34       	cpi	r24, 0x40	; 64
    235e:	29 f0       	breq	.+10     	; 0x236a <spi_setup_master+0x42>
    2360:	80 38       	cpi	r24, 0x80	; 128
    2362:	51 f4       	brne	.+20     	; 0x2378 <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
    2364:	8c b5       	in	r24, 0x2c	; 44
    2366:	81 60       	ori	r24, 0x01	; 1
    2368:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
    236a:	8c b5       	in	r24, 0x2c	; 44
    236c:	82 60       	ori	r24, 0x02	; 2
    236e:	8c bd       	out	0x2c, r24	; 44
			break;
    2370:	03 c0       	rjmp	.+6      	; 0x2378 <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
    2372:	8c b5       	in	r24, 0x2c	; 44
    2374:	81 60       	ori	r24, 0x01	; 1
    2376:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
    2378:	85 b1       	in	r24, 0x05	; 5
    237a:	8f 7e       	andi	r24, 0xEF	; 239
    237c:	85 b9       	out	0x05, r24	; 5
    237e:	08 95       	ret

00002380 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    2380:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    2382:	0d b4       	in	r0, 0x2d	; 45
    2384:	07 fe       	sbrs	r0, 7
    2386:	fd cf       	rjmp	.-6      	; 0x2382 <spi_send_byte+0x2>
	{
		; // wait
	}
	return SPDR0;
    2388:	8e b5       	in	r24, 0x2e	; 46
}
    238a:	08 95       	ret

0000238c <move_terminal_cursor>:
}

void reverse_video(void)
{
	printf_P(PSTR("\x1b[7m"));
}
    238c:	9f 93       	push	r25
    238e:	8f 93       	push	r24
    2390:	7f 93       	push	r23
    2392:	6f 93       	push	r22
    2394:	8d e7       	ldi	r24, 0x7D	; 125
    2396:	93 e0       	ldi	r25, 0x03	; 3
    2398:	9f 93       	push	r25
    239a:	8f 93       	push	r24
    239c:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	08 95       	ret

000023ae <clear_terminal>:

void clear_terminal(void)
{
	printf_P(PSTR("\x1b[2J"));
    23ae:	88 e7       	ldi	r24, 0x78	; 120
    23b0:	93 e0       	ldi	r25, 0x03	; 3
    23b2:	9f 93       	push	r25
    23b4:	8f 93       	push	r24
    23b6:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
}
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	08 95       	ret

000023c0 <clear_to_end_of_line>:

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
    23c0:	84 e7       	ldi	r24, 0x74	; 116
    23c2:	93 e0       	ldi	r25, 0x03	; 3
    23c4:	9f 93       	push	r25
    23c6:	8f 93       	push	r24
    23c8:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
}
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	08 95       	ret

000023d2 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    23d2:	1f 92       	push	r1
    23d4:	8f 93       	push	r24
    23d6:	8e e6       	ldi	r24, 0x6E	; 110
    23d8:	93 e0       	ldi	r25, 0x03	; 3
    23da:	9f 93       	push	r25
    23dc:	8f 93       	push	r24
    23de:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
}
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	08 95       	ret

000023ec <hide_cursor>:

void hide_cursor()
{
	printf_P(PSTR("\x1b[?25l"));
    23ec:	87 e6       	ldi	r24, 0x67	; 103
    23ee:	93 e0       	ldi	r25, 0x03	; 3
    23f0:	9f 93       	push	r25
    23f2:	8f 93       	push	r24
    23f4:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
}
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	08 95       	ret

000023fe <show_cursor>:

void show_cursor()
{
	printf_P(PSTR("\x1b[?25h"));
    23fe:	80 e6       	ldi	r24, 0x60	; 96
    2400:	93 e0       	ldi	r25, 0x03	; 3
    2402:	9f 93       	push	r25
    2404:	8f 93       	push	r24
    2406:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <printf_P>
}
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	08 95       	ret

00002410 <init_timer0>:
void init_timer0(void)
{
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
    2410:	10 92 38 06 	sts	0x0638, r1	; 0x800638 <clock_ticks_ms>
    2414:	10 92 39 06 	sts	0x0639, r1	; 0x800639 <clock_ticks_ms+0x1>
    2418:	10 92 3a 06 	sts	0x063A, r1	; 0x80063a <clock_ticks_ms+0x2>
    241c:	10 92 3b 06 	sts	0x063B, r1	; 0x80063b <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    2420:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    2422:	8c e7       	ldi	r24, 0x7C	; 124
    2424:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
    2426:	92 e0       	ldi	r25, 0x02	; 2
    2428:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    242a:	83 e0       	ldi	r24, 0x03	; 3
    242c:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
    242e:	ee e6       	ldi	r30, 0x6E	; 110
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	82 60       	ori	r24, 0x02	; 2
    2436:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
    2438:	95 bb       	out	0x15, r25	; 21
    243a:	08 95       	ret

0000243c <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    243c:	8f b7       	in	r24, 0x3f	; 63
    243e:	28 2f       	mov	r18, r24
    2440:	20 78       	andi	r18, 0x80	; 128
	cli();
    2442:	f8 94       	cli
	return_value = clock_ticks_ms;
    2444:	60 91 38 06 	lds	r22, 0x0638	; 0x800638 <clock_ticks_ms>
    2448:	70 91 39 06 	lds	r23, 0x0639	; 0x800639 <clock_ticks_ms+0x1>
    244c:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <clock_ticks_ms+0x2>
    2450:	90 91 3b 06 	lds	r25, 0x063B	; 0x80063b <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    2454:	22 23       	and	r18, r18
    2456:	09 f0       	breq	.+2      	; 0x245a <get_current_time+0x1e>
	{
		sei();
    2458:	78 94       	sei
	}
	return return_value;
}
    245a:	08 95       	ret

0000245c <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
    245c:	1f 92       	push	r1
    245e:	0f 92       	push	r0
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	0f 92       	push	r0
    2464:	11 24       	eor	r1, r1
    2466:	8f 93       	push	r24
    2468:	9f 93       	push	r25
    246a:	af 93       	push	r26
    246c:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
    246e:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <clock_ticks_ms>
    2472:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <clock_ticks_ms+0x1>
    2476:	a0 91 3a 06 	lds	r26, 0x063A	; 0x80063a <clock_ticks_ms+0x2>
    247a:	b0 91 3b 06 	lds	r27, 0x063B	; 0x80063b <clock_ticks_ms+0x3>
    247e:	01 96       	adiw	r24, 0x01	; 1
    2480:	a1 1d       	adc	r26, r1
    2482:	b1 1d       	adc	r27, r1
    2484:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <clock_ticks_ms>
    2488:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <clock_ticks_ms+0x1>
    248c:	a0 93 3a 06 	sts	0x063A, r26	; 0x80063a <clock_ticks_ms+0x2>
    2490:	b0 93 3b 06 	sts	0x063B, r27	; 0x80063b <clock_ticks_ms+0x3>
}
    2494:	bf 91       	pop	r27
    2496:	af 91       	pop	r26
    2498:	9f 91       	pop	r25
    249a:	8f 91       	pop	r24
    249c:	0f 90       	pop	r0
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	0f 90       	pop	r0
    24a2:	1f 90       	pop	r1
    24a4:	18 95       	reti

000024a6 <init_timer1>:

/* Set up timer 1 For buzzer
 */

void init_timer1(void)
{
    24a6:	cf 92       	push	r12
    24a8:	df 92       	push	r13
    24aa:	ef 92       	push	r14
    24ac:	ff 92       	push	r15
	freq = 1;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <freq+0x1>
    24b6:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <freq>
	duty_cycle = 0;
    24ba:	10 92 65 06 	sts	0x0665, r1	; 0x800665 <duty_cycle>
    24be:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <duty_cycle+0x1>
    24c2:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <duty_cycle+0x2>
    24c6:	10 92 68 06 	sts	0x0668, r1	; 0x800668 <duty_cycle+0x3>
	
	DDRD &= ~(1<<4);	//inverse of 1<<4
    24ca:	8a b1       	in	r24, 0x0a	; 10
    24cc:	8f 7e       	andi	r24, 0xEF	; 239
    24ce:	8a b9       	out	0x0a, r24	; 10
	PORTD &= 0b11101111;
    24d0:	8b b1       	in	r24, 0x0b	; 11
    24d2:	8f 7e       	andi	r24, 0xEF	; 239
    24d4:	8b b9       	out	0x0b, r24	; 11
	
	uint16_t clockperiod = (1000000UL / freq);
    24d6:	20 91 40 06 	lds	r18, 0x0640	; 0x800640 <freq>
    24da:	30 91 41 06 	lds	r19, 0x0641	; 0x800641 <freq+0x1>
    24de:	40 e0       	ldi	r20, 0x00	; 0
    24e0:	50 e0       	ldi	r21, 0x00	; 0
    24e2:	60 e4       	ldi	r22, 0x40	; 64
    24e4:	72 e4       	ldi	r23, 0x42	; 66
    24e6:	8f e0       	ldi	r24, 0x0F	; 15
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__udivmodsi4>
    24ee:	69 01       	movw	r12, r18
    24f0:	7a 01       	movw	r14, r20
	uint16_t pulsewidth = (duty_cycle * clockperiod)/100;
    24f2:	b9 01       	movw	r22, r18
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	0e 94 ed 13 	call	0x27da	; 0x27da <__floatunsisf>
    24fc:	20 91 65 06 	lds	r18, 0x0665	; 0x800665 <duty_cycle>
    2500:	30 91 66 06 	lds	r19, 0x0666	; 0x800666 <duty_cycle+0x1>
    2504:	40 91 67 06 	lds	r20, 0x0667	; 0x800667 <duty_cycle+0x2>
    2508:	50 91 68 06 	lds	r21, 0x0668	; 0x800668 <duty_cycle+0x3>
    250c:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <__mulsf3>
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	48 ec       	ldi	r20, 0xC8	; 200
    2516:	52 e4       	ldi	r21, 0x42	; 66
    2518:	0e 94 4c 13 	call	0x2698	; 0x2698 <__divsf3>
    251c:	0e 94 be 13 	call	0x277c	; 0x277c <__fixunssfsi>
	
	// Set the maximum count value for timer/counter 1 to be one less than the clockperiod
	OCR1A = clockperiod - 1;
    2520:	21 e0       	ldi	r18, 0x01	; 1
    2522:	c2 1a       	sub	r12, r18
    2524:	d1 08       	sbc	r13, r1
    2526:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    252a:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// Set the count compare value based on the pulse width. The value will be 1 less
	// than the pulse width - unless the pulse width is 0.
	if(pulsewidth == 0) {
    252e:	61 15       	cp	r22, r1
    2530:	71 05       	cpc	r23, r1
    2532:	29 f4       	brne	.+10     	; 0x253e <init_timer1+0x98>
		OCR1B = 0;
    2534:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2538:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    253c:	06 c0       	rjmp	.+12     	; 0x254a <init_timer1+0xa4>
		
		} else {
		OCR1B = pulsewidth - 1;
    253e:	61 50       	subi	r22, 0x01	; 1
    2540:	71 09       	sbc	r23, r1
    2542:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2546:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	//set up timer 1 for;
	//Fast PWM, counting from 0 to the value in OCR1A
	//before reseting to 0. Count at 1MHz (CLK/8).
	//Configure output OC1B to be CTC non-inverting mode.
	TCCR1A = (1 << COM1B1) | (1 << WGM10) | (1 <<WGM11);
    254a:	83 e2       	ldi	r24, 0x23	; 35
    254c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << CS11) | (1 << WGM12) |(1 << WGM13);
    2550:	8a e1       	ldi	r24, 0x1A	; 26
    2552:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
}
    2556:	ff 90       	pop	r15
    2558:	ef 90       	pop	r14
    255a:	df 90       	pop	r13
    255c:	cf 90       	pop	r12
    255e:	08 95       	ret

00002560 <note_sound>:

void note_sound() {
    2560:	cf 92       	push	r12
    2562:	df 92       	push	r13
    2564:	ef 92       	push	r14
    2566:	ff 92       	push	r15
	
	if (!disable_piezzo) { //if you dont want to turn off the piezzo do the following
    2568:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <disable_piezzo>
    256c:	90 91 3f 06 	lds	r25, 0x063F	; 0x80063f <disable_piezzo+0x1>
    2570:	89 2b       	or	r24, r25
    2572:	c9 f5       	brne	.+114    	; 0x25e6 <note_sound+0x86>
		//turn on PORTd4 and set DDRD4 to be output
		DDRD |= 0b00010000;
    2574:	8a b1       	in	r24, 0x0a	; 10
    2576:	80 61       	ori	r24, 0x10	; 16
    2578:	8a b9       	out	0x0a, r24	; 10
		PORTD |= 0b00010000;
    257a:	8b b1       	in	r24, 0x0b	; 11
    257c:	80 61       	ori	r24, 0x10	; 16
    257e:	8b b9       	out	0x0b, r24	; 11
		
		uint16_t clockperiod = (1000000UL / freq);
    2580:	20 91 40 06 	lds	r18, 0x0640	; 0x800640 <freq>
    2584:	30 91 41 06 	lds	r19, 0x0641	; 0x800641 <freq+0x1>
    2588:	40 e0       	ldi	r20, 0x00	; 0
    258a:	50 e0       	ldi	r21, 0x00	; 0
    258c:	60 e4       	ldi	r22, 0x40	; 64
    258e:	72 e4       	ldi	r23, 0x42	; 66
    2590:	8f e0       	ldi	r24, 0x0F	; 15
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__udivmodsi4>
    2598:	69 01       	movw	r12, r18
    259a:	7a 01       	movw	r14, r20
		uint16_t pulsewidth = (duty_cycle * clockperiod)/100;
    259c:	b9 01       	movw	r22, r18
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	0e 94 ed 13 	call	0x27da	; 0x27da <__floatunsisf>
    25a6:	20 91 65 06 	lds	r18, 0x0665	; 0x800665 <duty_cycle>
    25aa:	30 91 66 06 	lds	r19, 0x0666	; 0x800666 <duty_cycle+0x1>
    25ae:	40 91 67 06 	lds	r20, 0x0667	; 0x800667 <duty_cycle+0x2>
    25b2:	50 91 68 06 	lds	r21, 0x0668	; 0x800668 <duty_cycle+0x3>
    25b6:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <__mulsf3>
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	48 ec       	ldi	r20, 0xC8	; 200
    25c0:	52 e4       	ldi	r21, 0x42	; 66
    25c2:	0e 94 4c 13 	call	0x2698	; 0x2698 <__divsf3>
    25c6:	0e 94 be 13 	call	0x277c	; 0x277c <__fixunssfsi>
	
		OCR1A = clockperiod - 1;
    25ca:	21 e0       	ldi	r18, 0x01	; 1
    25cc:	c2 1a       	sub	r12, r18
    25ce:	d1 08       	sbc	r13, r1
    25d0:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    25d4:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = pulsewidth - 1;
    25d8:	61 50       	subi	r22, 0x01	; 1
    25da:	71 09       	sbc	r23, r1
    25dc:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    25e0:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    25e4:	0e c0       	rjmp	.+28     	; 0x2602 <note_sound+0xa2>
		
	} else { //if you want to turn off the piezzo do the following
		//set bot checks to be 0
		OCR1A = 0;
    25e6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    25ea:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = 0;
    25ee:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    25f2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		
		//make DDRD4 to be input and PORTD4 to be off
		DDRD &= ~(1<<4);	//inverse of 1<<4
    25f6:	8a b1       	in	r24, 0x0a	; 10
    25f8:	8f 7e       	andi	r24, 0xEF	; 239
    25fa:	8a b9       	out	0x0a, r24	; 10
		PORTD &= 0b11101111;
    25fc:	8b b1       	in	r24, 0x0b	; 11
    25fe:	8f 7e       	andi	r24, 0xEF	; 239
    2600:	8b b9       	out	0x0b, r24	; 11
			
	}
}
    2602:	ff 90       	pop	r15
    2604:	ef 90       	pop	r14
    2606:	df 90       	pop	r13
    2608:	cf 90       	pop	r12
    260a:	08 95       	ret

0000260c <pause_control>:

void pause_control(int is_paused) {
	if (is_paused) {
    260c:	89 2b       	or	r24, r25
    260e:	79 f0       	breq	.+30     	; 0x262e <pause_control+0x22>
		OCR1A = 0;
    2610:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2614:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = 0;
    2618:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    261c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		
		DDRD &= ~(1<<4);	//inverse of 1<<4
    2620:	8a b1       	in	r24, 0x0a	; 10
    2622:	8f 7e       	andi	r24, 0xEF	; 239
    2624:	8a b9       	out	0x0a, r24	; 10
		PORTD &= 0b11101111;
    2626:	8b b1       	in	r24, 0x0b	; 11
    2628:	8f 7e       	andi	r24, 0xEF	; 239
    262a:	8b b9       	out	0x0b, r24	; 11
    262c:	08 95       	ret
		
	} else {
		note_sound();
    262e:	0e 94 b0 12 	call	0x2560	; 0x2560 <note_sound>
    2632:	08 95       	ret

00002634 <init_timer2>:
void init_timer2(void)
{
	
	//TCNT2 = 0;
	//set up so that there is an interrupt every 10ms (100 times per second)
	OCR2A = 77; //clock divided by 1024 - count for 10000 cycles
    2634:	8d e4       	ldi	r24, 0x4D	; 77
    2636:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = 0; //CTC mode
    263a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1<<WGM22) | (1<<CS22) | (1<<CS20); // Divide clock by 1024(PRE) 
    263e:	8d e0       	ldi	r24, 0x0D	; 13
    2640:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	//enable interrupt on timer on output compare match
	TIMSK2 = (1<<OCIE2A);
    2644:	82 e0       	ldi	r24, 0x02	; 2
    2646:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	 
	//Ensure interrupt flag is cleared
	TIFR2 = (1<<OCF2A);
    264a:	87 bb       	out	0x17, r24	; 23
	
	// Turn on global interrupts
	sei();
    264c:	78 94       	sei
    264e:	08 95       	ret

00002650 <__vector_9>:
}

ISR(TIMER2_COMPA_vect) {
    2650:	1f 92       	push	r1
    2652:	0f 92       	push	r0
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	0f 92       	push	r0
    2658:	11 24       	eor	r1, r1
    265a:	2f 93       	push	r18
    265c:	3f 93       	push	r19
    265e:	4f 93       	push	r20
    2660:	5f 93       	push	r21
    2662:	6f 93       	push	r22
    2664:	7f 93       	push	r23
    2666:	8f 93       	push	r24
    2668:	9f 93       	push	r25
    266a:	af 93       	push	r26
    266c:	bf 93       	push	r27
    266e:	ef 93       	push	r30
    2670:	ff 93       	push	r31
	ssd_display();
    2672:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <ssd_display>
}
    2676:	ff 91       	pop	r31
    2678:	ef 91       	pop	r30
    267a:	bf 91       	pop	r27
    267c:	af 91       	pop	r26
    267e:	9f 91       	pop	r25
    2680:	8f 91       	pop	r24
    2682:	7f 91       	pop	r23
    2684:	6f 91       	pop	r22
    2686:	5f 91       	pop	r21
    2688:	4f 91       	pop	r20
    268a:	3f 91       	pop	r19
    268c:	2f 91       	pop	r18
    268e:	0f 90       	pop	r0
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	0f 90       	pop	r0
    2694:	1f 90       	pop	r1
    2696:	18 95       	reti

00002698 <__divsf3>:
    2698:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__divsf3x>
    269c:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__fp_round>
    26a0:	0e 94 3a 14 	call	0x2874	; 0x2874 <__fp_pscB>
    26a4:	58 f0       	brcs	.+22     	; 0x26bc <__divsf3+0x24>
    26a6:	0e 94 33 14 	call	0x2866	; 0x2866 <__fp_pscA>
    26aa:	40 f0       	brcs	.+16     	; 0x26bc <__divsf3+0x24>
    26ac:	29 f4       	brne	.+10     	; 0x26b8 <__divsf3+0x20>
    26ae:	5f 3f       	cpi	r21, 0xFF	; 255
    26b0:	29 f0       	breq	.+10     	; 0x26bc <__divsf3+0x24>
    26b2:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__fp_inf>
    26b6:	51 11       	cpse	r21, r1
    26b8:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__fp_szero>
    26bc:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__fp_nan>

000026c0 <__divsf3x>:
    26c0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__fp_split3>
    26c4:	68 f3       	brcs	.-38     	; 0x26a0 <__divsf3+0x8>

000026c6 <__divsf3_pse>:
    26c6:	99 23       	and	r25, r25
    26c8:	b1 f3       	breq	.-20     	; 0x26b6 <__divsf3+0x1e>
    26ca:	55 23       	and	r21, r21
    26cc:	91 f3       	breq	.-28     	; 0x26b2 <__divsf3+0x1a>
    26ce:	95 1b       	sub	r25, r21
    26d0:	55 0b       	sbc	r21, r21
    26d2:	bb 27       	eor	r27, r27
    26d4:	aa 27       	eor	r26, r26
    26d6:	62 17       	cp	r22, r18
    26d8:	73 07       	cpc	r23, r19
    26da:	84 07       	cpc	r24, r20
    26dc:	38 f0       	brcs	.+14     	; 0x26ec <__divsf3_pse+0x26>
    26de:	9f 5f       	subi	r25, 0xFF	; 255
    26e0:	5f 4f       	sbci	r21, 0xFF	; 255
    26e2:	22 0f       	add	r18, r18
    26e4:	33 1f       	adc	r19, r19
    26e6:	44 1f       	adc	r20, r20
    26e8:	aa 1f       	adc	r26, r26
    26ea:	a9 f3       	breq	.-22     	; 0x26d6 <__divsf3_pse+0x10>
    26ec:	35 d0       	rcall	.+106    	; 0x2758 <__divsf3_pse+0x92>
    26ee:	0e 2e       	mov	r0, r30
    26f0:	3a f0       	brmi	.+14     	; 0x2700 <__divsf3_pse+0x3a>
    26f2:	e0 e8       	ldi	r30, 0x80	; 128
    26f4:	32 d0       	rcall	.+100    	; 0x275a <__divsf3_pse+0x94>
    26f6:	91 50       	subi	r25, 0x01	; 1
    26f8:	50 40       	sbci	r21, 0x00	; 0
    26fa:	e6 95       	lsr	r30
    26fc:	00 1c       	adc	r0, r0
    26fe:	ca f7       	brpl	.-14     	; 0x26f2 <__divsf3_pse+0x2c>
    2700:	2b d0       	rcall	.+86     	; 0x2758 <__divsf3_pse+0x92>
    2702:	fe 2f       	mov	r31, r30
    2704:	29 d0       	rcall	.+82     	; 0x2758 <__divsf3_pse+0x92>
    2706:	66 0f       	add	r22, r22
    2708:	77 1f       	adc	r23, r23
    270a:	88 1f       	adc	r24, r24
    270c:	bb 1f       	adc	r27, r27
    270e:	26 17       	cp	r18, r22
    2710:	37 07       	cpc	r19, r23
    2712:	48 07       	cpc	r20, r24
    2714:	ab 07       	cpc	r26, r27
    2716:	b0 e8       	ldi	r27, 0x80	; 128
    2718:	09 f0       	breq	.+2      	; 0x271c <__divsf3_pse+0x56>
    271a:	bb 0b       	sbc	r27, r27
    271c:	80 2d       	mov	r24, r0
    271e:	bf 01       	movw	r22, r30
    2720:	ff 27       	eor	r31, r31
    2722:	93 58       	subi	r25, 0x83	; 131
    2724:	5f 4f       	sbci	r21, 0xFF	; 255
    2726:	3a f0       	brmi	.+14     	; 0x2736 <__divsf3_pse+0x70>
    2728:	9e 3f       	cpi	r25, 0xFE	; 254
    272a:	51 05       	cpc	r21, r1
    272c:	78 f0       	brcs	.+30     	; 0x274c <__divsf3_pse+0x86>
    272e:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__fp_inf>
    2732:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__fp_szero>
    2736:	5f 3f       	cpi	r21, 0xFF	; 255
    2738:	e4 f3       	brlt	.-8      	; 0x2732 <__divsf3_pse+0x6c>
    273a:	98 3e       	cpi	r25, 0xE8	; 232
    273c:	d4 f3       	brlt	.-12     	; 0x2732 <__divsf3_pse+0x6c>
    273e:	86 95       	lsr	r24
    2740:	77 95       	ror	r23
    2742:	67 95       	ror	r22
    2744:	b7 95       	ror	r27
    2746:	f7 95       	ror	r31
    2748:	9f 5f       	subi	r25, 0xFF	; 255
    274a:	c9 f7       	brne	.-14     	; 0x273e <__divsf3_pse+0x78>
    274c:	88 0f       	add	r24, r24
    274e:	91 1d       	adc	r25, r1
    2750:	96 95       	lsr	r25
    2752:	87 95       	ror	r24
    2754:	97 f9       	bld	r25, 7
    2756:	08 95       	ret
    2758:	e1 e0       	ldi	r30, 0x01	; 1
    275a:	66 0f       	add	r22, r22
    275c:	77 1f       	adc	r23, r23
    275e:	88 1f       	adc	r24, r24
    2760:	bb 1f       	adc	r27, r27
    2762:	62 17       	cp	r22, r18
    2764:	73 07       	cpc	r23, r19
    2766:	84 07       	cpc	r24, r20
    2768:	ba 07       	cpc	r27, r26
    276a:	20 f0       	brcs	.+8      	; 0x2774 <__divsf3_pse+0xae>
    276c:	62 1b       	sub	r22, r18
    276e:	73 0b       	sbc	r23, r19
    2770:	84 0b       	sbc	r24, r20
    2772:	ba 0b       	sbc	r27, r26
    2774:	ee 1f       	adc	r30, r30
    2776:	88 f7       	brcc	.-30     	; 0x275a <__divsf3_pse+0x94>
    2778:	e0 95       	com	r30
    277a:	08 95       	ret

0000277c <__fixunssfsi>:
    277c:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__fp_splitA>
    2780:	88 f0       	brcs	.+34     	; 0x27a4 <__fixunssfsi+0x28>
    2782:	9f 57       	subi	r25, 0x7F	; 127
    2784:	98 f0       	brcs	.+38     	; 0x27ac <__fixunssfsi+0x30>
    2786:	b9 2f       	mov	r27, r25
    2788:	99 27       	eor	r25, r25
    278a:	b7 51       	subi	r27, 0x17	; 23
    278c:	b0 f0       	brcs	.+44     	; 0x27ba <__fixunssfsi+0x3e>
    278e:	e1 f0       	breq	.+56     	; 0x27c8 <__fixunssfsi+0x4c>
    2790:	66 0f       	add	r22, r22
    2792:	77 1f       	adc	r23, r23
    2794:	88 1f       	adc	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	1a f0       	brmi	.+6      	; 0x27a0 <__fixunssfsi+0x24>
    279a:	ba 95       	dec	r27
    279c:	c9 f7       	brne	.-14     	; 0x2790 <__fixunssfsi+0x14>
    279e:	14 c0       	rjmp	.+40     	; 0x27c8 <__fixunssfsi+0x4c>
    27a0:	b1 30       	cpi	r27, 0x01	; 1
    27a2:	91 f0       	breq	.+36     	; 0x27c8 <__fixunssfsi+0x4c>
    27a4:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__fp_zero>
    27a8:	b1 e0       	ldi	r27, 0x01	; 1
    27aa:	08 95       	ret
    27ac:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__fp_zero>
    27b0:	67 2f       	mov	r22, r23
    27b2:	78 2f       	mov	r23, r24
    27b4:	88 27       	eor	r24, r24
    27b6:	b8 5f       	subi	r27, 0xF8	; 248
    27b8:	39 f0       	breq	.+14     	; 0x27c8 <__fixunssfsi+0x4c>
    27ba:	b9 3f       	cpi	r27, 0xF9	; 249
    27bc:	cc f3       	brlt	.-14     	; 0x27b0 <__fixunssfsi+0x34>
    27be:	86 95       	lsr	r24
    27c0:	77 95       	ror	r23
    27c2:	67 95       	ror	r22
    27c4:	b3 95       	inc	r27
    27c6:	d9 f7       	brne	.-10     	; 0x27be <__fixunssfsi+0x42>
    27c8:	3e f4       	brtc	.+14     	; 0x27d8 <__fixunssfsi+0x5c>
    27ca:	90 95       	com	r25
    27cc:	80 95       	com	r24
    27ce:	70 95       	com	r23
    27d0:	61 95       	neg	r22
    27d2:	7f 4f       	sbci	r23, 0xFF	; 255
    27d4:	8f 4f       	sbci	r24, 0xFF	; 255
    27d6:	9f 4f       	sbci	r25, 0xFF	; 255
    27d8:	08 95       	ret

000027da <__floatunsisf>:
    27da:	e8 94       	clt
    27dc:	09 c0       	rjmp	.+18     	; 0x27f0 <__floatsisf+0x12>

000027de <__floatsisf>:
    27de:	97 fb       	bst	r25, 7
    27e0:	3e f4       	brtc	.+14     	; 0x27f0 <__floatsisf+0x12>
    27e2:	90 95       	com	r25
    27e4:	80 95       	com	r24
    27e6:	70 95       	com	r23
    27e8:	61 95       	neg	r22
    27ea:	7f 4f       	sbci	r23, 0xFF	; 255
    27ec:	8f 4f       	sbci	r24, 0xFF	; 255
    27ee:	9f 4f       	sbci	r25, 0xFF	; 255
    27f0:	99 23       	and	r25, r25
    27f2:	a9 f0       	breq	.+42     	; 0x281e <__floatsisf+0x40>
    27f4:	f9 2f       	mov	r31, r25
    27f6:	96 e9       	ldi	r25, 0x96	; 150
    27f8:	bb 27       	eor	r27, r27
    27fa:	93 95       	inc	r25
    27fc:	f6 95       	lsr	r31
    27fe:	87 95       	ror	r24
    2800:	77 95       	ror	r23
    2802:	67 95       	ror	r22
    2804:	b7 95       	ror	r27
    2806:	f1 11       	cpse	r31, r1
    2808:	f8 cf       	rjmp	.-16     	; 0x27fa <__floatsisf+0x1c>
    280a:	fa f4       	brpl	.+62     	; 0x284a <__floatsisf+0x6c>
    280c:	bb 0f       	add	r27, r27
    280e:	11 f4       	brne	.+4      	; 0x2814 <__floatsisf+0x36>
    2810:	60 ff       	sbrs	r22, 0
    2812:	1b c0       	rjmp	.+54     	; 0x284a <__floatsisf+0x6c>
    2814:	6f 5f       	subi	r22, 0xFF	; 255
    2816:	7f 4f       	sbci	r23, 0xFF	; 255
    2818:	8f 4f       	sbci	r24, 0xFF	; 255
    281a:	9f 4f       	sbci	r25, 0xFF	; 255
    281c:	16 c0       	rjmp	.+44     	; 0x284a <__floatsisf+0x6c>
    281e:	88 23       	and	r24, r24
    2820:	11 f0       	breq	.+4      	; 0x2826 <__floatsisf+0x48>
    2822:	96 e9       	ldi	r25, 0x96	; 150
    2824:	11 c0       	rjmp	.+34     	; 0x2848 <__floatsisf+0x6a>
    2826:	77 23       	and	r23, r23
    2828:	21 f0       	breq	.+8      	; 0x2832 <__floatsisf+0x54>
    282a:	9e e8       	ldi	r25, 0x8E	; 142
    282c:	87 2f       	mov	r24, r23
    282e:	76 2f       	mov	r23, r22
    2830:	05 c0       	rjmp	.+10     	; 0x283c <__floatsisf+0x5e>
    2832:	66 23       	and	r22, r22
    2834:	71 f0       	breq	.+28     	; 0x2852 <__floatsisf+0x74>
    2836:	96 e8       	ldi	r25, 0x86	; 134
    2838:	86 2f       	mov	r24, r22
    283a:	70 e0       	ldi	r23, 0x00	; 0
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	2a f0       	brmi	.+10     	; 0x284a <__floatsisf+0x6c>
    2840:	9a 95       	dec	r25
    2842:	66 0f       	add	r22, r22
    2844:	77 1f       	adc	r23, r23
    2846:	88 1f       	adc	r24, r24
    2848:	da f7       	brpl	.-10     	; 0x2840 <__floatsisf+0x62>
    284a:	88 0f       	add	r24, r24
    284c:	96 95       	lsr	r25
    284e:	87 95       	ror	r24
    2850:	97 f9       	bld	r25, 7
    2852:	08 95       	ret

00002854 <__fp_inf>:
    2854:	97 f9       	bld	r25, 7
    2856:	9f 67       	ori	r25, 0x7F	; 127
    2858:	80 e8       	ldi	r24, 0x80	; 128
    285a:	70 e0       	ldi	r23, 0x00	; 0
    285c:	60 e0       	ldi	r22, 0x00	; 0
    285e:	08 95       	ret

00002860 <__fp_nan>:
    2860:	9f ef       	ldi	r25, 0xFF	; 255
    2862:	80 ec       	ldi	r24, 0xC0	; 192
    2864:	08 95       	ret

00002866 <__fp_pscA>:
    2866:	00 24       	eor	r0, r0
    2868:	0a 94       	dec	r0
    286a:	16 16       	cp	r1, r22
    286c:	17 06       	cpc	r1, r23
    286e:	18 06       	cpc	r1, r24
    2870:	09 06       	cpc	r0, r25
    2872:	08 95       	ret

00002874 <__fp_pscB>:
    2874:	00 24       	eor	r0, r0
    2876:	0a 94       	dec	r0
    2878:	12 16       	cp	r1, r18
    287a:	13 06       	cpc	r1, r19
    287c:	14 06       	cpc	r1, r20
    287e:	05 06       	cpc	r0, r21
    2880:	08 95       	ret

00002882 <__fp_round>:
    2882:	09 2e       	mov	r0, r25
    2884:	03 94       	inc	r0
    2886:	00 0c       	add	r0, r0
    2888:	11 f4       	brne	.+4      	; 0x288e <__fp_round+0xc>
    288a:	88 23       	and	r24, r24
    288c:	52 f0       	brmi	.+20     	; 0x28a2 <__fp_round+0x20>
    288e:	bb 0f       	add	r27, r27
    2890:	40 f4       	brcc	.+16     	; 0x28a2 <__fp_round+0x20>
    2892:	bf 2b       	or	r27, r31
    2894:	11 f4       	brne	.+4      	; 0x289a <__fp_round+0x18>
    2896:	60 ff       	sbrs	r22, 0
    2898:	04 c0       	rjmp	.+8      	; 0x28a2 <__fp_round+0x20>
    289a:	6f 5f       	subi	r22, 0xFF	; 255
    289c:	7f 4f       	sbci	r23, 0xFF	; 255
    289e:	8f 4f       	sbci	r24, 0xFF	; 255
    28a0:	9f 4f       	sbci	r25, 0xFF	; 255
    28a2:	08 95       	ret

000028a4 <__fp_split3>:
    28a4:	57 fd       	sbrc	r21, 7
    28a6:	90 58       	subi	r25, 0x80	; 128
    28a8:	44 0f       	add	r20, r20
    28aa:	55 1f       	adc	r21, r21
    28ac:	59 f0       	breq	.+22     	; 0x28c4 <__fp_splitA+0x10>
    28ae:	5f 3f       	cpi	r21, 0xFF	; 255
    28b0:	71 f0       	breq	.+28     	; 0x28ce <__fp_splitA+0x1a>
    28b2:	47 95       	ror	r20

000028b4 <__fp_splitA>:
    28b4:	88 0f       	add	r24, r24
    28b6:	97 fb       	bst	r25, 7
    28b8:	99 1f       	adc	r25, r25
    28ba:	61 f0       	breq	.+24     	; 0x28d4 <__fp_splitA+0x20>
    28bc:	9f 3f       	cpi	r25, 0xFF	; 255
    28be:	79 f0       	breq	.+30     	; 0x28de <__fp_splitA+0x2a>
    28c0:	87 95       	ror	r24
    28c2:	08 95       	ret
    28c4:	12 16       	cp	r1, r18
    28c6:	13 06       	cpc	r1, r19
    28c8:	14 06       	cpc	r1, r20
    28ca:	55 1f       	adc	r21, r21
    28cc:	f2 cf       	rjmp	.-28     	; 0x28b2 <__fp_split3+0xe>
    28ce:	46 95       	lsr	r20
    28d0:	f1 df       	rcall	.-30     	; 0x28b4 <__fp_splitA>
    28d2:	08 c0       	rjmp	.+16     	; 0x28e4 <__fp_splitA+0x30>
    28d4:	16 16       	cp	r1, r22
    28d6:	17 06       	cpc	r1, r23
    28d8:	18 06       	cpc	r1, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	f1 cf       	rjmp	.-30     	; 0x28c0 <__fp_splitA+0xc>
    28de:	86 95       	lsr	r24
    28e0:	71 05       	cpc	r23, r1
    28e2:	61 05       	cpc	r22, r1
    28e4:	08 94       	sec
    28e6:	08 95       	ret

000028e8 <__fp_zero>:
    28e8:	e8 94       	clt

000028ea <__fp_szero>:
    28ea:	bb 27       	eor	r27, r27
    28ec:	66 27       	eor	r22, r22
    28ee:	77 27       	eor	r23, r23
    28f0:	cb 01       	movw	r24, r22
    28f2:	97 f9       	bld	r25, 7
    28f4:	08 95       	ret

000028f6 <__mulsf3>:
    28f6:	0e 94 8e 14 	call	0x291c	; 0x291c <__mulsf3x>
    28fa:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__fp_round>
    28fe:	0e 94 33 14 	call	0x2866	; 0x2866 <__fp_pscA>
    2902:	38 f0       	brcs	.+14     	; 0x2912 <__mulsf3+0x1c>
    2904:	0e 94 3a 14 	call	0x2874	; 0x2874 <__fp_pscB>
    2908:	20 f0       	brcs	.+8      	; 0x2912 <__mulsf3+0x1c>
    290a:	95 23       	and	r25, r21
    290c:	11 f0       	breq	.+4      	; 0x2912 <__mulsf3+0x1c>
    290e:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__fp_inf>
    2912:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__fp_nan>
    2916:	11 24       	eor	r1, r1
    2918:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__fp_szero>

0000291c <__mulsf3x>:
    291c:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__fp_split3>
    2920:	70 f3       	brcs	.-36     	; 0x28fe <__mulsf3+0x8>

00002922 <__mulsf3_pse>:
    2922:	95 9f       	mul	r25, r21
    2924:	c1 f3       	breq	.-16     	; 0x2916 <__mulsf3+0x20>
    2926:	95 0f       	add	r25, r21
    2928:	50 e0       	ldi	r21, 0x00	; 0
    292a:	55 1f       	adc	r21, r21
    292c:	62 9f       	mul	r22, r18
    292e:	f0 01       	movw	r30, r0
    2930:	72 9f       	mul	r23, r18
    2932:	bb 27       	eor	r27, r27
    2934:	f0 0d       	add	r31, r0
    2936:	b1 1d       	adc	r27, r1
    2938:	63 9f       	mul	r22, r19
    293a:	aa 27       	eor	r26, r26
    293c:	f0 0d       	add	r31, r0
    293e:	b1 1d       	adc	r27, r1
    2940:	aa 1f       	adc	r26, r26
    2942:	64 9f       	mul	r22, r20
    2944:	66 27       	eor	r22, r22
    2946:	b0 0d       	add	r27, r0
    2948:	a1 1d       	adc	r26, r1
    294a:	66 1f       	adc	r22, r22
    294c:	82 9f       	mul	r24, r18
    294e:	22 27       	eor	r18, r18
    2950:	b0 0d       	add	r27, r0
    2952:	a1 1d       	adc	r26, r1
    2954:	62 1f       	adc	r22, r18
    2956:	73 9f       	mul	r23, r19
    2958:	b0 0d       	add	r27, r0
    295a:	a1 1d       	adc	r26, r1
    295c:	62 1f       	adc	r22, r18
    295e:	83 9f       	mul	r24, r19
    2960:	a0 0d       	add	r26, r0
    2962:	61 1d       	adc	r22, r1
    2964:	22 1f       	adc	r18, r18
    2966:	74 9f       	mul	r23, r20
    2968:	33 27       	eor	r19, r19
    296a:	a0 0d       	add	r26, r0
    296c:	61 1d       	adc	r22, r1
    296e:	23 1f       	adc	r18, r19
    2970:	84 9f       	mul	r24, r20
    2972:	60 0d       	add	r22, r0
    2974:	21 1d       	adc	r18, r1
    2976:	82 2f       	mov	r24, r18
    2978:	76 2f       	mov	r23, r22
    297a:	6a 2f       	mov	r22, r26
    297c:	11 24       	eor	r1, r1
    297e:	9f 57       	subi	r25, 0x7F	; 127
    2980:	50 40       	sbci	r21, 0x00	; 0
    2982:	9a f0       	brmi	.+38     	; 0x29aa <__mulsf3_pse+0x88>
    2984:	f1 f0       	breq	.+60     	; 0x29c2 <__mulsf3_pse+0xa0>
    2986:	88 23       	and	r24, r24
    2988:	4a f0       	brmi	.+18     	; 0x299c <__mulsf3_pse+0x7a>
    298a:	ee 0f       	add	r30, r30
    298c:	ff 1f       	adc	r31, r31
    298e:	bb 1f       	adc	r27, r27
    2990:	66 1f       	adc	r22, r22
    2992:	77 1f       	adc	r23, r23
    2994:	88 1f       	adc	r24, r24
    2996:	91 50       	subi	r25, 0x01	; 1
    2998:	50 40       	sbci	r21, 0x00	; 0
    299a:	a9 f7       	brne	.-22     	; 0x2986 <__mulsf3_pse+0x64>
    299c:	9e 3f       	cpi	r25, 0xFE	; 254
    299e:	51 05       	cpc	r21, r1
    29a0:	80 f0       	brcs	.+32     	; 0x29c2 <__mulsf3_pse+0xa0>
    29a2:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__fp_inf>
    29a6:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__fp_szero>
    29aa:	5f 3f       	cpi	r21, 0xFF	; 255
    29ac:	e4 f3       	brlt	.-8      	; 0x29a6 <__mulsf3_pse+0x84>
    29ae:	98 3e       	cpi	r25, 0xE8	; 232
    29b0:	d4 f3       	brlt	.-12     	; 0x29a6 <__mulsf3_pse+0x84>
    29b2:	86 95       	lsr	r24
    29b4:	77 95       	ror	r23
    29b6:	67 95       	ror	r22
    29b8:	b7 95       	ror	r27
    29ba:	f7 95       	ror	r31
    29bc:	e7 95       	ror	r30
    29be:	9f 5f       	subi	r25, 0xFF	; 255
    29c0:	c1 f7       	brne	.-16     	; 0x29b2 <__mulsf3_pse+0x90>
    29c2:	fe 2b       	or	r31, r30
    29c4:	88 0f       	add	r24, r24
    29c6:	91 1d       	adc	r25, r1
    29c8:	96 95       	lsr	r25
    29ca:	87 95       	ror	r24
    29cc:	97 f9       	bld	r25, 7
    29ce:	08 95       	ret

000029d0 <__divmodhi4>:
    29d0:	97 fb       	bst	r25, 7
    29d2:	07 2e       	mov	r0, r23
    29d4:	16 f4       	brtc	.+4      	; 0x29da <__divmodhi4+0xa>
    29d6:	00 94       	com	r0
    29d8:	07 d0       	rcall	.+14     	; 0x29e8 <__divmodhi4_neg1>
    29da:	77 fd       	sbrc	r23, 7
    29dc:	09 d0       	rcall	.+18     	; 0x29f0 <__divmodhi4_neg2>
    29de:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodhi4>
    29e2:	07 fc       	sbrc	r0, 7
    29e4:	05 d0       	rcall	.+10     	; 0x29f0 <__divmodhi4_neg2>
    29e6:	3e f4       	brtc	.+14     	; 0x29f6 <__divmodhi4_exit>

000029e8 <__divmodhi4_neg1>:
    29e8:	90 95       	com	r25
    29ea:	81 95       	neg	r24
    29ec:	9f 4f       	sbci	r25, 0xFF	; 255
    29ee:	08 95       	ret

000029f0 <__divmodhi4_neg2>:
    29f0:	70 95       	com	r23
    29f2:	61 95       	neg	r22
    29f4:	7f 4f       	sbci	r23, 0xFF	; 255

000029f6 <__divmodhi4_exit>:
    29f6:	08 95       	ret

000029f8 <__udivmodsi4>:
    29f8:	a1 e2       	ldi	r26, 0x21	; 33
    29fa:	1a 2e       	mov	r1, r26
    29fc:	aa 1b       	sub	r26, r26
    29fe:	bb 1b       	sub	r27, r27
    2a00:	fd 01       	movw	r30, r26
    2a02:	0d c0       	rjmp	.+26     	; 0x2a1e <__udivmodsi4_ep>

00002a04 <__udivmodsi4_loop>:
    2a04:	aa 1f       	adc	r26, r26
    2a06:	bb 1f       	adc	r27, r27
    2a08:	ee 1f       	adc	r30, r30
    2a0a:	ff 1f       	adc	r31, r31
    2a0c:	a2 17       	cp	r26, r18
    2a0e:	b3 07       	cpc	r27, r19
    2a10:	e4 07       	cpc	r30, r20
    2a12:	f5 07       	cpc	r31, r21
    2a14:	20 f0       	brcs	.+8      	; 0x2a1e <__udivmodsi4_ep>
    2a16:	a2 1b       	sub	r26, r18
    2a18:	b3 0b       	sbc	r27, r19
    2a1a:	e4 0b       	sbc	r30, r20
    2a1c:	f5 0b       	sbc	r31, r21

00002a1e <__udivmodsi4_ep>:
    2a1e:	66 1f       	adc	r22, r22
    2a20:	77 1f       	adc	r23, r23
    2a22:	88 1f       	adc	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	1a 94       	dec	r1
    2a28:	69 f7       	brne	.-38     	; 0x2a04 <__udivmodsi4_loop>
    2a2a:	60 95       	com	r22
    2a2c:	70 95       	com	r23
    2a2e:	80 95       	com	r24
    2a30:	90 95       	com	r25
    2a32:	9b 01       	movw	r18, r22
    2a34:	ac 01       	movw	r20, r24
    2a36:	bd 01       	movw	r22, r26
    2a38:	cf 01       	movw	r24, r30
    2a3a:	08 95       	ret

00002a3c <__divmodsi4>:
    2a3c:	05 2e       	mov	r0, r21
    2a3e:	97 fb       	bst	r25, 7
    2a40:	1e f4       	brtc	.+6      	; 0x2a48 <__divmodsi4+0xc>
    2a42:	00 94       	com	r0
    2a44:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__negsi2>
    2a48:	57 fd       	sbrc	r21, 7
    2a4a:	07 d0       	rcall	.+14     	; 0x2a5a <__divmodsi4_neg2>
    2a4c:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__udivmodsi4>
    2a50:	07 fc       	sbrc	r0, 7
    2a52:	03 d0       	rcall	.+6      	; 0x2a5a <__divmodsi4_neg2>
    2a54:	4e f4       	brtc	.+18     	; 0x2a68 <__divmodsi4_exit>
    2a56:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <__negsi2>

00002a5a <__divmodsi4_neg2>:
    2a5a:	50 95       	com	r21
    2a5c:	40 95       	com	r20
    2a5e:	30 95       	com	r19
    2a60:	21 95       	neg	r18
    2a62:	3f 4f       	sbci	r19, 0xFF	; 255
    2a64:	4f 4f       	sbci	r20, 0xFF	; 255
    2a66:	5f 4f       	sbci	r21, 0xFF	; 255

00002a68 <__divmodsi4_exit>:
    2a68:	08 95       	ret

00002a6a <__negsi2>:
    2a6a:	90 95       	com	r25
    2a6c:	80 95       	com	r24
    2a6e:	70 95       	com	r23
    2a70:	61 95       	neg	r22
    2a72:	7f 4f       	sbci	r23, 0xFF	; 255
    2a74:	8f 4f       	sbci	r24, 0xFF	; 255
    2a76:	9f 4f       	sbci	r25, 0xFF	; 255
    2a78:	08 95       	ret

00002a7a <__umulhisi3>:
    2a7a:	a2 9f       	mul	r26, r18
    2a7c:	b0 01       	movw	r22, r0
    2a7e:	b3 9f       	mul	r27, r19
    2a80:	c0 01       	movw	r24, r0
    2a82:	a3 9f       	mul	r26, r19
    2a84:	70 0d       	add	r23, r0
    2a86:	81 1d       	adc	r24, r1
    2a88:	11 24       	eor	r1, r1
    2a8a:	91 1d       	adc	r25, r1
    2a8c:	b2 9f       	mul	r27, r18
    2a8e:	70 0d       	add	r23, r0
    2a90:	81 1d       	adc	r24, r1
    2a92:	11 24       	eor	r1, r1
    2a94:	91 1d       	adc	r25, r1
    2a96:	08 95       	ret

00002a98 <__udivmodhi4>:
    2a98:	aa 1b       	sub	r26, r26
    2a9a:	bb 1b       	sub	r27, r27
    2a9c:	51 e1       	ldi	r21, 0x11	; 17
    2a9e:	07 c0       	rjmp	.+14     	; 0x2aae <__udivmodhi4_ep>

00002aa0 <__udivmodhi4_loop>:
    2aa0:	aa 1f       	adc	r26, r26
    2aa2:	bb 1f       	adc	r27, r27
    2aa4:	a6 17       	cp	r26, r22
    2aa6:	b7 07       	cpc	r27, r23
    2aa8:	10 f0       	brcs	.+4      	; 0x2aae <__udivmodhi4_ep>
    2aaa:	a6 1b       	sub	r26, r22
    2aac:	b7 0b       	sbc	r27, r23

00002aae <__udivmodhi4_ep>:
    2aae:	88 1f       	adc	r24, r24
    2ab0:	99 1f       	adc	r25, r25
    2ab2:	5a 95       	dec	r21
    2ab4:	a9 f7       	brne	.-22     	; 0x2aa0 <__udivmodhi4_loop>
    2ab6:	80 95       	com	r24
    2ab8:	90 95       	com	r25
    2aba:	bc 01       	movw	r22, r24
    2abc:	cd 01       	movw	r24, r26
    2abe:	08 95       	ret

00002ac0 <fgetc>:
    2ac0:	cf 93       	push	r28
    2ac2:	df 93       	push	r29
    2ac4:	ec 01       	movw	r28, r24
    2ac6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ac8:	20 ff       	sbrs	r18, 0
    2aca:	33 c0       	rjmp	.+102    	; 0x2b32 <fgetc+0x72>
    2acc:	26 ff       	sbrs	r18, 6
    2ace:	0a c0       	rjmp	.+20     	; 0x2ae4 <fgetc+0x24>
    2ad0:	2f 7b       	andi	r18, 0xBF	; 191
    2ad2:	2b 83       	std	Y+3, r18	; 0x03
    2ad4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ad8:	01 96       	adiw	r24, 0x01	; 1
    2ada:	9f 83       	std	Y+7, r25	; 0x07
    2adc:	8e 83       	std	Y+6, r24	; 0x06
    2ade:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	29 c0       	rjmp	.+82     	; 0x2b36 <fgetc+0x76>
    2ae4:	22 ff       	sbrs	r18, 2
    2ae6:	0f c0       	rjmp	.+30     	; 0x2b06 <fgetc+0x46>
    2ae8:	e8 81       	ld	r30, Y
    2aea:	f9 81       	ldd	r31, Y+1	; 0x01
    2aec:	80 81       	ld	r24, Z
    2aee:	08 2e       	mov	r0, r24
    2af0:	00 0c       	add	r0, r0
    2af2:	99 0b       	sbc	r25, r25
    2af4:	00 97       	sbiw	r24, 0x00	; 0
    2af6:	19 f4       	brne	.+6      	; 0x2afe <fgetc+0x3e>
    2af8:	20 62       	ori	r18, 0x20	; 32
    2afa:	2b 83       	std	Y+3, r18	; 0x03
    2afc:	1a c0       	rjmp	.+52     	; 0x2b32 <fgetc+0x72>
    2afe:	31 96       	adiw	r30, 0x01	; 1
    2b00:	f9 83       	std	Y+1, r31	; 0x01
    2b02:	e8 83       	st	Y, r30
    2b04:	0e c0       	rjmp	.+28     	; 0x2b22 <fgetc+0x62>
    2b06:	ea 85       	ldd	r30, Y+10	; 0x0a
    2b08:	fb 85       	ldd	r31, Y+11	; 0x0b
    2b0a:	09 95       	icall
    2b0c:	97 ff       	sbrs	r25, 7
    2b0e:	09 c0       	rjmp	.+18     	; 0x2b22 <fgetc+0x62>
    2b10:	2b 81       	ldd	r18, Y+3	; 0x03
    2b12:	01 96       	adiw	r24, 0x01	; 1
    2b14:	11 f0       	breq	.+4      	; 0x2b1a <fgetc+0x5a>
    2b16:	80 e2       	ldi	r24, 0x20	; 32
    2b18:	01 c0       	rjmp	.+2      	; 0x2b1c <fgetc+0x5c>
    2b1a:	80 e1       	ldi	r24, 0x10	; 16
    2b1c:	82 2b       	or	r24, r18
    2b1e:	8b 83       	std	Y+3, r24	; 0x03
    2b20:	08 c0       	rjmp	.+16     	; 0x2b32 <fgetc+0x72>
    2b22:	2e 81       	ldd	r18, Y+6	; 0x06
    2b24:	3f 81       	ldd	r19, Y+7	; 0x07
    2b26:	2f 5f       	subi	r18, 0xFF	; 255
    2b28:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2a:	3f 83       	std	Y+7, r19	; 0x07
    2b2c:	2e 83       	std	Y+6, r18	; 0x06
    2b2e:	99 27       	eor	r25, r25
    2b30:	02 c0       	rjmp	.+4      	; 0x2b36 <fgetc+0x76>
    2b32:	8f ef       	ldi	r24, 0xFF	; 255
    2b34:	9f ef       	ldi	r25, 0xFF	; 255
    2b36:	df 91       	pop	r29
    2b38:	cf 91       	pop	r28
    2b3a:	08 95       	ret

00002b3c <printf>:
    2b3c:	a0 e0       	ldi	r26, 0x00	; 0
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	e4 ea       	ldi	r30, 0xA4	; 164
    2b42:	f5 e1       	ldi	r31, 0x15	; 21
    2b44:	0c 94 7b 18 	jmp	0x30f6	; 0x30f6 <__prologue_saves__+0x20>
    2b48:	ae 01       	movw	r20, r28
    2b4a:	4b 5f       	subi	r20, 0xFB	; 251
    2b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b4e:	fa 01       	movw	r30, r20
    2b50:	61 91       	ld	r22, Z+
    2b52:	71 91       	ld	r23, Z+
    2b54:	af 01       	movw	r20, r30
    2b56:	80 91 83 07 	lds	r24, 0x0783	; 0x800783 <__iob+0x2>
    2b5a:	90 91 84 07 	lds	r25, 0x0784	; 0x800784 <__iob+0x3>
    2b5e:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <vfprintf>
    2b62:	e2 e0       	ldi	r30, 0x02	; 2
    2b64:	0c 94 97 18 	jmp	0x312e	; 0x312e <__epilogue_restores__+0x20>

00002b68 <printf_P>:
    2b68:	a0 e0       	ldi	r26, 0x00	; 0
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	ea eb       	ldi	r30, 0xBA	; 186
    2b6e:	f5 e1       	ldi	r31, 0x15	; 21
    2b70:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__prologue_saves__+0x1c>
    2b74:	ae 01       	movw	r20, r28
    2b76:	49 5f       	subi	r20, 0xF9	; 249
    2b78:	5f 4f       	sbci	r21, 0xFF	; 255
    2b7a:	da 01       	movw	r26, r20
    2b7c:	6d 91       	ld	r22, X+
    2b7e:	7d 91       	ld	r23, X+
    2b80:	ad 01       	movw	r20, r26
    2b82:	01 e8       	ldi	r16, 0x81	; 129
    2b84:	17 e0       	ldi	r17, 0x07	; 7
    2b86:	f8 01       	movw	r30, r16
    2b88:	82 81       	ldd	r24, Z+2	; 0x02
    2b8a:	93 81       	ldd	r25, Z+3	; 0x03
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	13 96       	adiw	r26, 0x03	; 3
    2b90:	2c 91       	ld	r18, X
    2b92:	13 97       	sbiw	r26, 0x03	; 3
    2b94:	28 60       	ori	r18, 0x08	; 8
    2b96:	13 96       	adiw	r26, 0x03	; 3
    2b98:	2c 93       	st	X, r18
    2b9a:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <vfprintf>
    2b9e:	d8 01       	movw	r26, r16
    2ba0:	12 96       	adiw	r26, 0x02	; 2
    2ba2:	ed 91       	ld	r30, X+
    2ba4:	fc 91       	ld	r31, X
    2ba6:	13 97       	sbiw	r26, 0x03	; 3
    2ba8:	23 81       	ldd	r18, Z+3	; 0x03
    2baa:	27 7f       	andi	r18, 0xF7	; 247
    2bac:	23 83       	std	Z+3, r18	; 0x03
    2bae:	e4 e0       	ldi	r30, 0x04	; 4
    2bb0:	0c 94 95 18 	jmp	0x312a	; 0x312a <__epilogue_restores__+0x1c>

00002bb4 <vfprintf>:
    2bb4:	ab e0       	ldi	r26, 0x0B	; 11
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	e0 ee       	ldi	r30, 0xE0	; 224
    2bba:	f5 e1       	ldi	r31, 0x15	; 21
    2bbc:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <__prologue_saves__>
    2bc0:	6c 01       	movw	r12, r24
    2bc2:	7b 01       	movw	r14, r22
    2bc4:	8a 01       	movw	r16, r20
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	17 82       	std	Z+7, r1	; 0x07
    2bca:	16 82       	std	Z+6, r1	; 0x06
    2bcc:	83 81       	ldd	r24, Z+3	; 0x03
    2bce:	81 ff       	sbrs	r24, 1
    2bd0:	cc c1       	rjmp	.+920    	; 0x2f6a <vfprintf+0x3b6>
    2bd2:	ce 01       	movw	r24, r28
    2bd4:	01 96       	adiw	r24, 0x01	; 1
    2bd6:	3c 01       	movw	r6, r24
    2bd8:	f6 01       	movw	r30, r12
    2bda:	93 81       	ldd	r25, Z+3	; 0x03
    2bdc:	f7 01       	movw	r30, r14
    2bde:	93 fd       	sbrc	r25, 3
    2be0:	85 91       	lpm	r24, Z+
    2be2:	93 ff       	sbrs	r25, 3
    2be4:	81 91       	ld	r24, Z+
    2be6:	7f 01       	movw	r14, r30
    2be8:	88 23       	and	r24, r24
    2bea:	09 f4       	brne	.+2      	; 0x2bee <vfprintf+0x3a>
    2bec:	ba c1       	rjmp	.+884    	; 0x2f62 <vfprintf+0x3ae>
    2bee:	85 32       	cpi	r24, 0x25	; 37
    2bf0:	39 f4       	brne	.+14     	; 0x2c00 <vfprintf+0x4c>
    2bf2:	93 fd       	sbrc	r25, 3
    2bf4:	85 91       	lpm	r24, Z+
    2bf6:	93 ff       	sbrs	r25, 3
    2bf8:	81 91       	ld	r24, Z+
    2bfa:	7f 01       	movw	r14, r30
    2bfc:	85 32       	cpi	r24, 0x25	; 37
    2bfe:	29 f4       	brne	.+10     	; 0x2c0a <vfprintf+0x56>
    2c00:	b6 01       	movw	r22, r12
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <fputc>
    2c08:	e7 cf       	rjmp	.-50     	; 0x2bd8 <vfprintf+0x24>
    2c0a:	91 2c       	mov	r9, r1
    2c0c:	21 2c       	mov	r2, r1
    2c0e:	31 2c       	mov	r3, r1
    2c10:	ff e1       	ldi	r31, 0x1F	; 31
    2c12:	f3 15       	cp	r31, r3
    2c14:	d8 f0       	brcs	.+54     	; 0x2c4c <vfprintf+0x98>
    2c16:	8b 32       	cpi	r24, 0x2B	; 43
    2c18:	79 f0       	breq	.+30     	; 0x2c38 <vfprintf+0x84>
    2c1a:	38 f4       	brcc	.+14     	; 0x2c2a <vfprintf+0x76>
    2c1c:	80 32       	cpi	r24, 0x20	; 32
    2c1e:	79 f0       	breq	.+30     	; 0x2c3e <vfprintf+0x8a>
    2c20:	83 32       	cpi	r24, 0x23	; 35
    2c22:	a1 f4       	brne	.+40     	; 0x2c4c <vfprintf+0x98>
    2c24:	23 2d       	mov	r18, r3
    2c26:	20 61       	ori	r18, 0x10	; 16
    2c28:	1d c0       	rjmp	.+58     	; 0x2c64 <vfprintf+0xb0>
    2c2a:	8d 32       	cpi	r24, 0x2D	; 45
    2c2c:	61 f0       	breq	.+24     	; 0x2c46 <vfprintf+0x92>
    2c2e:	80 33       	cpi	r24, 0x30	; 48
    2c30:	69 f4       	brne	.+26     	; 0x2c4c <vfprintf+0x98>
    2c32:	23 2d       	mov	r18, r3
    2c34:	21 60       	ori	r18, 0x01	; 1
    2c36:	16 c0       	rjmp	.+44     	; 0x2c64 <vfprintf+0xb0>
    2c38:	83 2d       	mov	r24, r3
    2c3a:	82 60       	ori	r24, 0x02	; 2
    2c3c:	38 2e       	mov	r3, r24
    2c3e:	e3 2d       	mov	r30, r3
    2c40:	e4 60       	ori	r30, 0x04	; 4
    2c42:	3e 2e       	mov	r3, r30
    2c44:	2a c0       	rjmp	.+84     	; 0x2c9a <vfprintf+0xe6>
    2c46:	f3 2d       	mov	r31, r3
    2c48:	f8 60       	ori	r31, 0x08	; 8
    2c4a:	1d c0       	rjmp	.+58     	; 0x2c86 <vfprintf+0xd2>
    2c4c:	37 fc       	sbrc	r3, 7
    2c4e:	2d c0       	rjmp	.+90     	; 0x2caa <vfprintf+0xf6>
    2c50:	20 ed       	ldi	r18, 0xD0	; 208
    2c52:	28 0f       	add	r18, r24
    2c54:	2a 30       	cpi	r18, 0x0A	; 10
    2c56:	40 f0       	brcs	.+16     	; 0x2c68 <vfprintf+0xb4>
    2c58:	8e 32       	cpi	r24, 0x2E	; 46
    2c5a:	b9 f4       	brne	.+46     	; 0x2c8a <vfprintf+0xd6>
    2c5c:	36 fc       	sbrc	r3, 6
    2c5e:	81 c1       	rjmp	.+770    	; 0x2f62 <vfprintf+0x3ae>
    2c60:	23 2d       	mov	r18, r3
    2c62:	20 64       	ori	r18, 0x40	; 64
    2c64:	32 2e       	mov	r3, r18
    2c66:	19 c0       	rjmp	.+50     	; 0x2c9a <vfprintf+0xe6>
    2c68:	36 fe       	sbrs	r3, 6
    2c6a:	06 c0       	rjmp	.+12     	; 0x2c78 <vfprintf+0xc4>
    2c6c:	8a e0       	ldi	r24, 0x0A	; 10
    2c6e:	98 9e       	mul	r9, r24
    2c70:	20 0d       	add	r18, r0
    2c72:	11 24       	eor	r1, r1
    2c74:	92 2e       	mov	r9, r18
    2c76:	11 c0       	rjmp	.+34     	; 0x2c9a <vfprintf+0xe6>
    2c78:	ea e0       	ldi	r30, 0x0A	; 10
    2c7a:	2e 9e       	mul	r2, r30
    2c7c:	20 0d       	add	r18, r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	22 2e       	mov	r2, r18
    2c82:	f3 2d       	mov	r31, r3
    2c84:	f0 62       	ori	r31, 0x20	; 32
    2c86:	3f 2e       	mov	r3, r31
    2c88:	08 c0       	rjmp	.+16     	; 0x2c9a <vfprintf+0xe6>
    2c8a:	8c 36       	cpi	r24, 0x6C	; 108
    2c8c:	21 f4       	brne	.+8      	; 0x2c96 <vfprintf+0xe2>
    2c8e:	83 2d       	mov	r24, r3
    2c90:	80 68       	ori	r24, 0x80	; 128
    2c92:	38 2e       	mov	r3, r24
    2c94:	02 c0       	rjmp	.+4      	; 0x2c9a <vfprintf+0xe6>
    2c96:	88 36       	cpi	r24, 0x68	; 104
    2c98:	41 f4       	brne	.+16     	; 0x2caa <vfprintf+0xf6>
    2c9a:	f7 01       	movw	r30, r14
    2c9c:	93 fd       	sbrc	r25, 3
    2c9e:	85 91       	lpm	r24, Z+
    2ca0:	93 ff       	sbrs	r25, 3
    2ca2:	81 91       	ld	r24, Z+
    2ca4:	7f 01       	movw	r14, r30
    2ca6:	81 11       	cpse	r24, r1
    2ca8:	b3 cf       	rjmp	.-154    	; 0x2c10 <vfprintf+0x5c>
    2caa:	98 2f       	mov	r25, r24
    2cac:	9f 7d       	andi	r25, 0xDF	; 223
    2cae:	95 54       	subi	r25, 0x45	; 69
    2cb0:	93 30       	cpi	r25, 0x03	; 3
    2cb2:	28 f4       	brcc	.+10     	; 0x2cbe <vfprintf+0x10a>
    2cb4:	0c 5f       	subi	r16, 0xFC	; 252
    2cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb8:	9f e3       	ldi	r25, 0x3F	; 63
    2cba:	99 83       	std	Y+1, r25	; 0x01
    2cbc:	0d c0       	rjmp	.+26     	; 0x2cd8 <vfprintf+0x124>
    2cbe:	83 36       	cpi	r24, 0x63	; 99
    2cc0:	31 f0       	breq	.+12     	; 0x2cce <vfprintf+0x11a>
    2cc2:	83 37       	cpi	r24, 0x73	; 115
    2cc4:	71 f0       	breq	.+28     	; 0x2ce2 <vfprintf+0x12e>
    2cc6:	83 35       	cpi	r24, 0x53	; 83
    2cc8:	09 f0       	breq	.+2      	; 0x2ccc <vfprintf+0x118>
    2cca:	59 c0       	rjmp	.+178    	; 0x2d7e <vfprintf+0x1ca>
    2ccc:	21 c0       	rjmp	.+66     	; 0x2d10 <vfprintf+0x15c>
    2cce:	f8 01       	movw	r30, r16
    2cd0:	80 81       	ld	r24, Z
    2cd2:	89 83       	std	Y+1, r24	; 0x01
    2cd4:	0e 5f       	subi	r16, 0xFE	; 254
    2cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd8:	88 24       	eor	r8, r8
    2cda:	83 94       	inc	r8
    2cdc:	91 2c       	mov	r9, r1
    2cde:	53 01       	movw	r10, r6
    2ce0:	13 c0       	rjmp	.+38     	; 0x2d08 <vfprintf+0x154>
    2ce2:	28 01       	movw	r4, r16
    2ce4:	f2 e0       	ldi	r31, 0x02	; 2
    2ce6:	4f 0e       	add	r4, r31
    2ce8:	51 1c       	adc	r5, r1
    2cea:	f8 01       	movw	r30, r16
    2cec:	a0 80       	ld	r10, Z
    2cee:	b1 80       	ldd	r11, Z+1	; 0x01
    2cf0:	36 fe       	sbrs	r3, 6
    2cf2:	03 c0       	rjmp	.+6      	; 0x2cfa <vfprintf+0x146>
    2cf4:	69 2d       	mov	r22, r9
    2cf6:	70 e0       	ldi	r23, 0x00	; 0
    2cf8:	02 c0       	rjmp	.+4      	; 0x2cfe <vfprintf+0x14a>
    2cfa:	6f ef       	ldi	r22, 0xFF	; 255
    2cfc:	7f ef       	ldi	r23, 0xFF	; 255
    2cfe:	c5 01       	movw	r24, r10
    2d00:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <strnlen>
    2d04:	4c 01       	movw	r8, r24
    2d06:	82 01       	movw	r16, r4
    2d08:	f3 2d       	mov	r31, r3
    2d0a:	ff 77       	andi	r31, 0x7F	; 127
    2d0c:	3f 2e       	mov	r3, r31
    2d0e:	16 c0       	rjmp	.+44     	; 0x2d3c <vfprintf+0x188>
    2d10:	28 01       	movw	r4, r16
    2d12:	22 e0       	ldi	r18, 0x02	; 2
    2d14:	42 0e       	add	r4, r18
    2d16:	51 1c       	adc	r5, r1
    2d18:	f8 01       	movw	r30, r16
    2d1a:	a0 80       	ld	r10, Z
    2d1c:	b1 80       	ldd	r11, Z+1	; 0x01
    2d1e:	36 fe       	sbrs	r3, 6
    2d20:	03 c0       	rjmp	.+6      	; 0x2d28 <vfprintf+0x174>
    2d22:	69 2d       	mov	r22, r9
    2d24:	70 e0       	ldi	r23, 0x00	; 0
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <vfprintf+0x178>
    2d28:	6f ef       	ldi	r22, 0xFF	; 255
    2d2a:	7f ef       	ldi	r23, 0xFF	; 255
    2d2c:	c5 01       	movw	r24, r10
    2d2e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <strnlen_P>
    2d32:	4c 01       	movw	r8, r24
    2d34:	f3 2d       	mov	r31, r3
    2d36:	f0 68       	ori	r31, 0x80	; 128
    2d38:	3f 2e       	mov	r3, r31
    2d3a:	82 01       	movw	r16, r4
    2d3c:	33 fc       	sbrc	r3, 3
    2d3e:	1b c0       	rjmp	.+54     	; 0x2d76 <vfprintf+0x1c2>
    2d40:	82 2d       	mov	r24, r2
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	88 16       	cp	r8, r24
    2d46:	99 06       	cpc	r9, r25
    2d48:	b0 f4       	brcc	.+44     	; 0x2d76 <vfprintf+0x1c2>
    2d4a:	b6 01       	movw	r22, r12
    2d4c:	80 e2       	ldi	r24, 0x20	; 32
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <fputc>
    2d54:	2a 94       	dec	r2
    2d56:	f4 cf       	rjmp	.-24     	; 0x2d40 <vfprintf+0x18c>
    2d58:	f5 01       	movw	r30, r10
    2d5a:	37 fc       	sbrc	r3, 7
    2d5c:	85 91       	lpm	r24, Z+
    2d5e:	37 fe       	sbrs	r3, 7
    2d60:	81 91       	ld	r24, Z+
    2d62:	5f 01       	movw	r10, r30
    2d64:	b6 01       	movw	r22, r12
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <fputc>
    2d6c:	21 10       	cpse	r2, r1
    2d6e:	2a 94       	dec	r2
    2d70:	21 e0       	ldi	r18, 0x01	; 1
    2d72:	82 1a       	sub	r8, r18
    2d74:	91 08       	sbc	r9, r1
    2d76:	81 14       	cp	r8, r1
    2d78:	91 04       	cpc	r9, r1
    2d7a:	71 f7       	brne	.-36     	; 0x2d58 <vfprintf+0x1a4>
    2d7c:	e8 c0       	rjmp	.+464    	; 0x2f4e <vfprintf+0x39a>
    2d7e:	84 36       	cpi	r24, 0x64	; 100
    2d80:	11 f0       	breq	.+4      	; 0x2d86 <vfprintf+0x1d2>
    2d82:	89 36       	cpi	r24, 0x69	; 105
    2d84:	41 f5       	brne	.+80     	; 0x2dd6 <vfprintf+0x222>
    2d86:	f8 01       	movw	r30, r16
    2d88:	37 fe       	sbrs	r3, 7
    2d8a:	07 c0       	rjmp	.+14     	; 0x2d9a <vfprintf+0x1e6>
    2d8c:	60 81       	ld	r22, Z
    2d8e:	71 81       	ldd	r23, Z+1	; 0x01
    2d90:	82 81       	ldd	r24, Z+2	; 0x02
    2d92:	93 81       	ldd	r25, Z+3	; 0x03
    2d94:	0c 5f       	subi	r16, 0xFC	; 252
    2d96:	1f 4f       	sbci	r17, 0xFF	; 255
    2d98:	08 c0       	rjmp	.+16     	; 0x2daa <vfprintf+0x1f6>
    2d9a:	60 81       	ld	r22, Z
    2d9c:	71 81       	ldd	r23, Z+1	; 0x01
    2d9e:	07 2e       	mov	r0, r23
    2da0:	00 0c       	add	r0, r0
    2da2:	88 0b       	sbc	r24, r24
    2da4:	99 0b       	sbc	r25, r25
    2da6:	0e 5f       	subi	r16, 0xFE	; 254
    2da8:	1f 4f       	sbci	r17, 0xFF	; 255
    2daa:	f3 2d       	mov	r31, r3
    2dac:	ff 76       	andi	r31, 0x6F	; 111
    2dae:	3f 2e       	mov	r3, r31
    2db0:	97 ff       	sbrs	r25, 7
    2db2:	09 c0       	rjmp	.+18     	; 0x2dc6 <vfprintf+0x212>
    2db4:	90 95       	com	r25
    2db6:	80 95       	com	r24
    2db8:	70 95       	com	r23
    2dba:	61 95       	neg	r22
    2dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dbe:	8f 4f       	sbci	r24, 0xFF	; 255
    2dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc2:	f0 68       	ori	r31, 0x80	; 128
    2dc4:	3f 2e       	mov	r3, r31
    2dc6:	2a e0       	ldi	r18, 0x0A	; 10
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	a3 01       	movw	r20, r6
    2dcc:	0e 94 0d 18 	call	0x301a	; 0x301a <__ultoa_invert>
    2dd0:	88 2e       	mov	r8, r24
    2dd2:	86 18       	sub	r8, r6
    2dd4:	45 c0       	rjmp	.+138    	; 0x2e60 <vfprintf+0x2ac>
    2dd6:	85 37       	cpi	r24, 0x75	; 117
    2dd8:	31 f4       	brne	.+12     	; 0x2de6 <vfprintf+0x232>
    2dda:	23 2d       	mov	r18, r3
    2ddc:	2f 7e       	andi	r18, 0xEF	; 239
    2dde:	b2 2e       	mov	r11, r18
    2de0:	2a e0       	ldi	r18, 0x0A	; 10
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	25 c0       	rjmp	.+74     	; 0x2e30 <vfprintf+0x27c>
    2de6:	93 2d       	mov	r25, r3
    2de8:	99 7f       	andi	r25, 0xF9	; 249
    2dea:	b9 2e       	mov	r11, r25
    2dec:	8f 36       	cpi	r24, 0x6F	; 111
    2dee:	c1 f0       	breq	.+48     	; 0x2e20 <vfprintf+0x26c>
    2df0:	18 f4       	brcc	.+6      	; 0x2df8 <vfprintf+0x244>
    2df2:	88 35       	cpi	r24, 0x58	; 88
    2df4:	79 f0       	breq	.+30     	; 0x2e14 <vfprintf+0x260>
    2df6:	b5 c0       	rjmp	.+362    	; 0x2f62 <vfprintf+0x3ae>
    2df8:	80 37       	cpi	r24, 0x70	; 112
    2dfa:	19 f0       	breq	.+6      	; 0x2e02 <vfprintf+0x24e>
    2dfc:	88 37       	cpi	r24, 0x78	; 120
    2dfe:	21 f0       	breq	.+8      	; 0x2e08 <vfprintf+0x254>
    2e00:	b0 c0       	rjmp	.+352    	; 0x2f62 <vfprintf+0x3ae>
    2e02:	e9 2f       	mov	r30, r25
    2e04:	e0 61       	ori	r30, 0x10	; 16
    2e06:	be 2e       	mov	r11, r30
    2e08:	b4 fe       	sbrs	r11, 4
    2e0a:	0d c0       	rjmp	.+26     	; 0x2e26 <vfprintf+0x272>
    2e0c:	fb 2d       	mov	r31, r11
    2e0e:	f4 60       	ori	r31, 0x04	; 4
    2e10:	bf 2e       	mov	r11, r31
    2e12:	09 c0       	rjmp	.+18     	; 0x2e26 <vfprintf+0x272>
    2e14:	34 fe       	sbrs	r3, 4
    2e16:	0a c0       	rjmp	.+20     	; 0x2e2c <vfprintf+0x278>
    2e18:	29 2f       	mov	r18, r25
    2e1a:	26 60       	ori	r18, 0x06	; 6
    2e1c:	b2 2e       	mov	r11, r18
    2e1e:	06 c0       	rjmp	.+12     	; 0x2e2c <vfprintf+0x278>
    2e20:	28 e0       	ldi	r18, 0x08	; 8
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	05 c0       	rjmp	.+10     	; 0x2e30 <vfprintf+0x27c>
    2e26:	20 e1       	ldi	r18, 0x10	; 16
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	02 c0       	rjmp	.+4      	; 0x2e30 <vfprintf+0x27c>
    2e2c:	20 e1       	ldi	r18, 0x10	; 16
    2e2e:	32 e0       	ldi	r19, 0x02	; 2
    2e30:	f8 01       	movw	r30, r16
    2e32:	b7 fe       	sbrs	r11, 7
    2e34:	07 c0       	rjmp	.+14     	; 0x2e44 <vfprintf+0x290>
    2e36:	60 81       	ld	r22, Z
    2e38:	71 81       	ldd	r23, Z+1	; 0x01
    2e3a:	82 81       	ldd	r24, Z+2	; 0x02
    2e3c:	93 81       	ldd	r25, Z+3	; 0x03
    2e3e:	0c 5f       	subi	r16, 0xFC	; 252
    2e40:	1f 4f       	sbci	r17, 0xFF	; 255
    2e42:	06 c0       	rjmp	.+12     	; 0x2e50 <vfprintf+0x29c>
    2e44:	60 81       	ld	r22, Z
    2e46:	71 81       	ldd	r23, Z+1	; 0x01
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	0e 5f       	subi	r16, 0xFE	; 254
    2e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e50:	a3 01       	movw	r20, r6
    2e52:	0e 94 0d 18 	call	0x301a	; 0x301a <__ultoa_invert>
    2e56:	88 2e       	mov	r8, r24
    2e58:	86 18       	sub	r8, r6
    2e5a:	fb 2d       	mov	r31, r11
    2e5c:	ff 77       	andi	r31, 0x7F	; 127
    2e5e:	3f 2e       	mov	r3, r31
    2e60:	36 fe       	sbrs	r3, 6
    2e62:	0d c0       	rjmp	.+26     	; 0x2e7e <vfprintf+0x2ca>
    2e64:	23 2d       	mov	r18, r3
    2e66:	2e 7f       	andi	r18, 0xFE	; 254
    2e68:	a2 2e       	mov	r10, r18
    2e6a:	89 14       	cp	r8, r9
    2e6c:	58 f4       	brcc	.+22     	; 0x2e84 <vfprintf+0x2d0>
    2e6e:	34 fe       	sbrs	r3, 4
    2e70:	0b c0       	rjmp	.+22     	; 0x2e88 <vfprintf+0x2d4>
    2e72:	32 fc       	sbrc	r3, 2
    2e74:	09 c0       	rjmp	.+18     	; 0x2e88 <vfprintf+0x2d4>
    2e76:	83 2d       	mov	r24, r3
    2e78:	8e 7e       	andi	r24, 0xEE	; 238
    2e7a:	a8 2e       	mov	r10, r24
    2e7c:	05 c0       	rjmp	.+10     	; 0x2e88 <vfprintf+0x2d4>
    2e7e:	b8 2c       	mov	r11, r8
    2e80:	a3 2c       	mov	r10, r3
    2e82:	03 c0       	rjmp	.+6      	; 0x2e8a <vfprintf+0x2d6>
    2e84:	b8 2c       	mov	r11, r8
    2e86:	01 c0       	rjmp	.+2      	; 0x2e8a <vfprintf+0x2d6>
    2e88:	b9 2c       	mov	r11, r9
    2e8a:	a4 fe       	sbrs	r10, 4
    2e8c:	0f c0       	rjmp	.+30     	; 0x2eac <vfprintf+0x2f8>
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e8 0d       	add	r30, r8
    2e92:	f1 1d       	adc	r31, r1
    2e94:	80 81       	ld	r24, Z
    2e96:	80 33       	cpi	r24, 0x30	; 48
    2e98:	21 f4       	brne	.+8      	; 0x2ea2 <vfprintf+0x2ee>
    2e9a:	9a 2d       	mov	r25, r10
    2e9c:	99 7e       	andi	r25, 0xE9	; 233
    2e9e:	a9 2e       	mov	r10, r25
    2ea0:	09 c0       	rjmp	.+18     	; 0x2eb4 <vfprintf+0x300>
    2ea2:	a2 fe       	sbrs	r10, 2
    2ea4:	06 c0       	rjmp	.+12     	; 0x2eb2 <vfprintf+0x2fe>
    2ea6:	b3 94       	inc	r11
    2ea8:	b3 94       	inc	r11
    2eaa:	04 c0       	rjmp	.+8      	; 0x2eb4 <vfprintf+0x300>
    2eac:	8a 2d       	mov	r24, r10
    2eae:	86 78       	andi	r24, 0x86	; 134
    2eb0:	09 f0       	breq	.+2      	; 0x2eb4 <vfprintf+0x300>
    2eb2:	b3 94       	inc	r11
    2eb4:	a3 fc       	sbrc	r10, 3
    2eb6:	11 c0       	rjmp	.+34     	; 0x2eda <vfprintf+0x326>
    2eb8:	a0 fe       	sbrs	r10, 0
    2eba:	06 c0       	rjmp	.+12     	; 0x2ec8 <vfprintf+0x314>
    2ebc:	b2 14       	cp	r11, r2
    2ebe:	88 f4       	brcc	.+34     	; 0x2ee2 <vfprintf+0x32e>
    2ec0:	28 0c       	add	r2, r8
    2ec2:	92 2c       	mov	r9, r2
    2ec4:	9b 18       	sub	r9, r11
    2ec6:	0e c0       	rjmp	.+28     	; 0x2ee4 <vfprintf+0x330>
    2ec8:	b2 14       	cp	r11, r2
    2eca:	60 f4       	brcc	.+24     	; 0x2ee4 <vfprintf+0x330>
    2ecc:	b6 01       	movw	r22, r12
    2ece:	80 e2       	ldi	r24, 0x20	; 32
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <fputc>
    2ed6:	b3 94       	inc	r11
    2ed8:	f7 cf       	rjmp	.-18     	; 0x2ec8 <vfprintf+0x314>
    2eda:	b2 14       	cp	r11, r2
    2edc:	18 f4       	brcc	.+6      	; 0x2ee4 <vfprintf+0x330>
    2ede:	2b 18       	sub	r2, r11
    2ee0:	02 c0       	rjmp	.+4      	; 0x2ee6 <vfprintf+0x332>
    2ee2:	98 2c       	mov	r9, r8
    2ee4:	21 2c       	mov	r2, r1
    2ee6:	a4 fe       	sbrs	r10, 4
    2ee8:	10 c0       	rjmp	.+32     	; 0x2f0a <vfprintf+0x356>
    2eea:	b6 01       	movw	r22, r12
    2eec:	80 e3       	ldi	r24, 0x30	; 48
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <fputc>
    2ef4:	a2 fe       	sbrs	r10, 2
    2ef6:	17 c0       	rjmp	.+46     	; 0x2f26 <vfprintf+0x372>
    2ef8:	a1 fc       	sbrc	r10, 1
    2efa:	03 c0       	rjmp	.+6      	; 0x2f02 <vfprintf+0x34e>
    2efc:	88 e7       	ldi	r24, 0x78	; 120
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	02 c0       	rjmp	.+4      	; 0x2f06 <vfprintf+0x352>
    2f02:	88 e5       	ldi	r24, 0x58	; 88
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	b6 01       	movw	r22, r12
    2f08:	0c c0       	rjmp	.+24     	; 0x2f22 <vfprintf+0x36e>
    2f0a:	8a 2d       	mov	r24, r10
    2f0c:	86 78       	andi	r24, 0x86	; 134
    2f0e:	59 f0       	breq	.+22     	; 0x2f26 <vfprintf+0x372>
    2f10:	a1 fe       	sbrs	r10, 1
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <vfprintf+0x364>
    2f14:	8b e2       	ldi	r24, 0x2B	; 43
    2f16:	01 c0       	rjmp	.+2      	; 0x2f1a <vfprintf+0x366>
    2f18:	80 e2       	ldi	r24, 0x20	; 32
    2f1a:	a7 fc       	sbrc	r10, 7
    2f1c:	8d e2       	ldi	r24, 0x2D	; 45
    2f1e:	b6 01       	movw	r22, r12
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <fputc>
    2f26:	89 14       	cp	r8, r9
    2f28:	38 f4       	brcc	.+14     	; 0x2f38 <vfprintf+0x384>
    2f2a:	b6 01       	movw	r22, r12
    2f2c:	80 e3       	ldi	r24, 0x30	; 48
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <fputc>
    2f34:	9a 94       	dec	r9
    2f36:	f7 cf       	rjmp	.-18     	; 0x2f26 <vfprintf+0x372>
    2f38:	8a 94       	dec	r8
    2f3a:	f3 01       	movw	r30, r6
    2f3c:	e8 0d       	add	r30, r8
    2f3e:	f1 1d       	adc	r31, r1
    2f40:	80 81       	ld	r24, Z
    2f42:	b6 01       	movw	r22, r12
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <fputc>
    2f4a:	81 10       	cpse	r8, r1
    2f4c:	f5 cf       	rjmp	.-22     	; 0x2f38 <vfprintf+0x384>
    2f4e:	22 20       	and	r2, r2
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <vfprintf+0x3a0>
    2f52:	42 ce       	rjmp	.-892    	; 0x2bd8 <vfprintf+0x24>
    2f54:	b6 01       	movw	r22, r12
    2f56:	80 e2       	ldi	r24, 0x20	; 32
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <fputc>
    2f5e:	2a 94       	dec	r2
    2f60:	f6 cf       	rjmp	.-20     	; 0x2f4e <vfprintf+0x39a>
    2f62:	f6 01       	movw	r30, r12
    2f64:	86 81       	ldd	r24, Z+6	; 0x06
    2f66:	97 81       	ldd	r25, Z+7	; 0x07
    2f68:	02 c0       	rjmp	.+4      	; 0x2f6e <vfprintf+0x3ba>
    2f6a:	8f ef       	ldi	r24, 0xFF	; 255
    2f6c:	9f ef       	ldi	r25, 0xFF	; 255
    2f6e:	2b 96       	adiw	r28, 0x0b	; 11
    2f70:	e2 e1       	ldi	r30, 0x12	; 18
    2f72:	0c 94 87 18 	jmp	0x310e	; 0x310e <__epilogue_restores__>

00002f76 <strnlen_P>:
    2f76:	fc 01       	movw	r30, r24
    2f78:	05 90       	lpm	r0, Z+
    2f7a:	61 50       	subi	r22, 0x01	; 1
    2f7c:	70 40       	sbci	r23, 0x00	; 0
    2f7e:	01 10       	cpse	r0, r1
    2f80:	d8 f7       	brcc	.-10     	; 0x2f78 <strnlen_P+0x2>
    2f82:	80 95       	com	r24
    2f84:	90 95       	com	r25
    2f86:	8e 0f       	add	r24, r30
    2f88:	9f 1f       	adc	r25, r31
    2f8a:	08 95       	ret

00002f8c <strnlen>:
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	61 50       	subi	r22, 0x01	; 1
    2f90:	70 40       	sbci	r23, 0x00	; 0
    2f92:	01 90       	ld	r0, Z+
    2f94:	01 10       	cpse	r0, r1
    2f96:	d8 f7       	brcc	.-10     	; 0x2f8e <strnlen+0x2>
    2f98:	80 95       	com	r24
    2f9a:	90 95       	com	r25
    2f9c:	8e 0f       	add	r24, r30
    2f9e:	9f 1f       	adc	r25, r31
    2fa0:	08 95       	ret

00002fa2 <fputc>:
    2fa2:	0f 93       	push	r16
    2fa4:	1f 93       	push	r17
    2fa6:	cf 93       	push	r28
    2fa8:	df 93       	push	r29
    2faa:	fb 01       	movw	r30, r22
    2fac:	23 81       	ldd	r18, Z+3	; 0x03
    2fae:	21 fd       	sbrc	r18, 1
    2fb0:	03 c0       	rjmp	.+6      	; 0x2fb8 <fputc+0x16>
    2fb2:	8f ef       	ldi	r24, 0xFF	; 255
    2fb4:	9f ef       	ldi	r25, 0xFF	; 255
    2fb6:	2c c0       	rjmp	.+88     	; 0x3010 <fputc+0x6e>
    2fb8:	22 ff       	sbrs	r18, 2
    2fba:	16 c0       	rjmp	.+44     	; 0x2fe8 <fputc+0x46>
    2fbc:	46 81       	ldd	r20, Z+6	; 0x06
    2fbe:	57 81       	ldd	r21, Z+7	; 0x07
    2fc0:	24 81       	ldd	r18, Z+4	; 0x04
    2fc2:	35 81       	ldd	r19, Z+5	; 0x05
    2fc4:	42 17       	cp	r20, r18
    2fc6:	53 07       	cpc	r21, r19
    2fc8:	44 f4       	brge	.+16     	; 0x2fda <fputc+0x38>
    2fca:	a0 81       	ld	r26, Z
    2fcc:	b1 81       	ldd	r27, Z+1	; 0x01
    2fce:	9d 01       	movw	r18, r26
    2fd0:	2f 5f       	subi	r18, 0xFF	; 255
    2fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd4:	31 83       	std	Z+1, r19	; 0x01
    2fd6:	20 83       	st	Z, r18
    2fd8:	8c 93       	st	X, r24
    2fda:	26 81       	ldd	r18, Z+6	; 0x06
    2fdc:	37 81       	ldd	r19, Z+7	; 0x07
    2fde:	2f 5f       	subi	r18, 0xFF	; 255
    2fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe2:	37 83       	std	Z+7, r19	; 0x07
    2fe4:	26 83       	std	Z+6, r18	; 0x06
    2fe6:	14 c0       	rjmp	.+40     	; 0x3010 <fputc+0x6e>
    2fe8:	8b 01       	movw	r16, r22
    2fea:	ec 01       	movw	r28, r24
    2fec:	fb 01       	movw	r30, r22
    2fee:	00 84       	ldd	r0, Z+8	; 0x08
    2ff0:	f1 85       	ldd	r31, Z+9	; 0x09
    2ff2:	e0 2d       	mov	r30, r0
    2ff4:	09 95       	icall
    2ff6:	89 2b       	or	r24, r25
    2ff8:	e1 f6       	brne	.-72     	; 0x2fb2 <fputc+0x10>
    2ffa:	d8 01       	movw	r26, r16
    2ffc:	16 96       	adiw	r26, 0x06	; 6
    2ffe:	8d 91       	ld	r24, X+
    3000:	9c 91       	ld	r25, X
    3002:	17 97       	sbiw	r26, 0x07	; 7
    3004:	01 96       	adiw	r24, 0x01	; 1
    3006:	17 96       	adiw	r26, 0x07	; 7
    3008:	9c 93       	st	X, r25
    300a:	8e 93       	st	-X, r24
    300c:	16 97       	sbiw	r26, 0x06	; 6
    300e:	ce 01       	movw	r24, r28
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	1f 91       	pop	r17
    3016:	0f 91       	pop	r16
    3018:	08 95       	ret

0000301a <__ultoa_invert>:
    301a:	fa 01       	movw	r30, r20
    301c:	aa 27       	eor	r26, r26
    301e:	28 30       	cpi	r18, 0x08	; 8
    3020:	51 f1       	breq	.+84     	; 0x3076 <__ultoa_invert+0x5c>
    3022:	20 31       	cpi	r18, 0x10	; 16
    3024:	81 f1       	breq	.+96     	; 0x3086 <__ultoa_invert+0x6c>
    3026:	e8 94       	clt
    3028:	6f 93       	push	r22
    302a:	6e 7f       	andi	r22, 0xFE	; 254
    302c:	6e 5f       	subi	r22, 0xFE	; 254
    302e:	7f 4f       	sbci	r23, 0xFF	; 255
    3030:	8f 4f       	sbci	r24, 0xFF	; 255
    3032:	9f 4f       	sbci	r25, 0xFF	; 255
    3034:	af 4f       	sbci	r26, 0xFF	; 255
    3036:	b1 e0       	ldi	r27, 0x01	; 1
    3038:	3e d0       	rcall	.+124    	; 0x30b6 <__ultoa_invert+0x9c>
    303a:	b4 e0       	ldi	r27, 0x04	; 4
    303c:	3c d0       	rcall	.+120    	; 0x30b6 <__ultoa_invert+0x9c>
    303e:	67 0f       	add	r22, r23
    3040:	78 1f       	adc	r23, r24
    3042:	89 1f       	adc	r24, r25
    3044:	9a 1f       	adc	r25, r26
    3046:	a1 1d       	adc	r26, r1
    3048:	68 0f       	add	r22, r24
    304a:	79 1f       	adc	r23, r25
    304c:	8a 1f       	adc	r24, r26
    304e:	91 1d       	adc	r25, r1
    3050:	a1 1d       	adc	r26, r1
    3052:	6a 0f       	add	r22, r26
    3054:	71 1d       	adc	r23, r1
    3056:	81 1d       	adc	r24, r1
    3058:	91 1d       	adc	r25, r1
    305a:	a1 1d       	adc	r26, r1
    305c:	20 d0       	rcall	.+64     	; 0x309e <__ultoa_invert+0x84>
    305e:	09 f4       	brne	.+2      	; 0x3062 <__ultoa_invert+0x48>
    3060:	68 94       	set
    3062:	3f 91       	pop	r19
    3064:	2a e0       	ldi	r18, 0x0A	; 10
    3066:	26 9f       	mul	r18, r22
    3068:	11 24       	eor	r1, r1
    306a:	30 19       	sub	r19, r0
    306c:	30 5d       	subi	r19, 0xD0	; 208
    306e:	31 93       	st	Z+, r19
    3070:	de f6       	brtc	.-74     	; 0x3028 <__ultoa_invert+0xe>
    3072:	cf 01       	movw	r24, r30
    3074:	08 95       	ret
    3076:	46 2f       	mov	r20, r22
    3078:	47 70       	andi	r20, 0x07	; 7
    307a:	40 5d       	subi	r20, 0xD0	; 208
    307c:	41 93       	st	Z+, r20
    307e:	b3 e0       	ldi	r27, 0x03	; 3
    3080:	0f d0       	rcall	.+30     	; 0x30a0 <__ultoa_invert+0x86>
    3082:	c9 f7       	brne	.-14     	; 0x3076 <__ultoa_invert+0x5c>
    3084:	f6 cf       	rjmp	.-20     	; 0x3072 <__ultoa_invert+0x58>
    3086:	46 2f       	mov	r20, r22
    3088:	4f 70       	andi	r20, 0x0F	; 15
    308a:	40 5d       	subi	r20, 0xD0	; 208
    308c:	4a 33       	cpi	r20, 0x3A	; 58
    308e:	18 f0       	brcs	.+6      	; 0x3096 <__ultoa_invert+0x7c>
    3090:	49 5d       	subi	r20, 0xD9	; 217
    3092:	31 fd       	sbrc	r19, 1
    3094:	40 52       	subi	r20, 0x20	; 32
    3096:	41 93       	st	Z+, r20
    3098:	02 d0       	rcall	.+4      	; 0x309e <__ultoa_invert+0x84>
    309a:	a9 f7       	brne	.-22     	; 0x3086 <__ultoa_invert+0x6c>
    309c:	ea cf       	rjmp	.-44     	; 0x3072 <__ultoa_invert+0x58>
    309e:	b4 e0       	ldi	r27, 0x04	; 4
    30a0:	a6 95       	lsr	r26
    30a2:	97 95       	ror	r25
    30a4:	87 95       	ror	r24
    30a6:	77 95       	ror	r23
    30a8:	67 95       	ror	r22
    30aa:	ba 95       	dec	r27
    30ac:	c9 f7       	brne	.-14     	; 0x30a0 <__ultoa_invert+0x86>
    30ae:	00 97       	sbiw	r24, 0x00	; 0
    30b0:	61 05       	cpc	r22, r1
    30b2:	71 05       	cpc	r23, r1
    30b4:	08 95       	ret
    30b6:	9b 01       	movw	r18, r22
    30b8:	ac 01       	movw	r20, r24
    30ba:	0a 2e       	mov	r0, r26
    30bc:	06 94       	lsr	r0
    30be:	57 95       	ror	r21
    30c0:	47 95       	ror	r20
    30c2:	37 95       	ror	r19
    30c4:	27 95       	ror	r18
    30c6:	ba 95       	dec	r27
    30c8:	c9 f7       	brne	.-14     	; 0x30bc <__ultoa_invert+0xa2>
    30ca:	62 0f       	add	r22, r18
    30cc:	73 1f       	adc	r23, r19
    30ce:	84 1f       	adc	r24, r20
    30d0:	95 1f       	adc	r25, r21
    30d2:	a0 1d       	adc	r26, r0
    30d4:	08 95       	ret

000030d6 <__prologue_saves__>:
    30d6:	2f 92       	push	r2
    30d8:	3f 92       	push	r3
    30da:	4f 92       	push	r4
    30dc:	5f 92       	push	r5
    30de:	6f 92       	push	r6
    30e0:	7f 92       	push	r7
    30e2:	8f 92       	push	r8
    30e4:	9f 92       	push	r9
    30e6:	af 92       	push	r10
    30e8:	bf 92       	push	r11
    30ea:	cf 92       	push	r12
    30ec:	df 92       	push	r13
    30ee:	ef 92       	push	r14
    30f0:	ff 92       	push	r15
    30f2:	0f 93       	push	r16
    30f4:	1f 93       	push	r17
    30f6:	cf 93       	push	r28
    30f8:	df 93       	push	r29
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
    30fe:	ca 1b       	sub	r28, r26
    3100:	db 0b       	sbc	r29, r27
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	f8 94       	cli
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	cd bf       	out	0x3d, r28	; 61
    310c:	09 94       	ijmp

0000310e <__epilogue_restores__>:
    310e:	2a 88       	ldd	r2, Y+18	; 0x12
    3110:	39 88       	ldd	r3, Y+17	; 0x11
    3112:	48 88       	ldd	r4, Y+16	; 0x10
    3114:	5f 84       	ldd	r5, Y+15	; 0x0f
    3116:	6e 84       	ldd	r6, Y+14	; 0x0e
    3118:	7d 84       	ldd	r7, Y+13	; 0x0d
    311a:	8c 84       	ldd	r8, Y+12	; 0x0c
    311c:	9b 84       	ldd	r9, Y+11	; 0x0b
    311e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3120:	b9 84       	ldd	r11, Y+9	; 0x09
    3122:	c8 84       	ldd	r12, Y+8	; 0x08
    3124:	df 80       	ldd	r13, Y+7	; 0x07
    3126:	ee 80       	ldd	r14, Y+6	; 0x06
    3128:	fd 80       	ldd	r15, Y+5	; 0x05
    312a:	0c 81       	ldd	r16, Y+4	; 0x04
    312c:	1b 81       	ldd	r17, Y+3	; 0x03
    312e:	aa 81       	ldd	r26, Y+2	; 0x02
    3130:	b9 81       	ldd	r27, Y+1	; 0x01
    3132:	ce 0f       	add	r28, r30
    3134:	d1 1d       	adc	r29, r1
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	f8 94       	cli
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	cd bf       	out	0x3d, r28	; 61
    3140:	ed 01       	movw	r28, r26
    3142:	08 95       	ret

00003144 <_exit>:
    3144:	f8 94       	cli

00003146 <__stop_program>:
    3146:	ff cf       	rjmp	.-2      	; 0x3146 <__stop_program>
