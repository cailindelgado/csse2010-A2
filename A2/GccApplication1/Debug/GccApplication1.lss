
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  000017bc  00001850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000129  008001a0  008001a0  000018f0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000194c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027c9  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001167  00000000  00000000  0000442d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001739  00000000  00000000  00005594  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000077c  00000000  00000000  00006cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b59  00000000  00000000  0000744c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000171b  00000000  00000000  00007fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  000096c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c1 01 	jmp	0x382	; 0x382 <__ctors_end>
       4:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
       8:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
       c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      10:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      14:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_5>
      18:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      1c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      20:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      24:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      28:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      2c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      30:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      34:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      38:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      3c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      40:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__vector_16>
      44:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      48:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      4c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      50:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__vector_20>
      54:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__vector_21>
      58:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      5c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      60:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      64:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      68:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      6c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      70:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      74:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      78:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2285>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2262>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 20 43 61 69 6c 69 6e 20 44 65 6c 67      by  Cailin Delg
      d4:	61 64 6f 20 2d 20 34 38 30 32 37 39 34 32 00        ado - 48027942.

000000e3 <__c.2260>:
      e3:	20 5c 24 24 20 20 20 5c 24 24 20 20 20 20 20 5c      \$$   \$$     \
      f3:	24 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20     $     \$$   \$$ 
     103:	20 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20           \$$   \$$ 
     113:	20 5c 24 24 24 24 24 24 24 20 5c 24 24 20 20 20      \$$$$$$$ \$$   
     123:	20 20 20 20 20 5c 24 24 24 24 24 24 00                   \$$$$$$.

00000130 <__c.2258>:
     130:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 5c 24     | $$  | $$    \$
     140:	24 24 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20     $$   | $$  | $$ 
     150:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     160:	5c 24 24 20 20 20 20 20 5c 7c 20 24 24 20 20 20     \$$     \| $$   
     170:	20 20 20 20 5c 24 24 20 20 20 20 24 24 00               \$$    $$.

0000017e <__c.2256>:
     17e:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 5c 24 24     | $$  | $$   \$$
     18e:	20 24 24 20 20 7c 20 24 24 20 20 7c 20 24 24 20      $$  | $$  | $$ 
     19e:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 7c          | $$  | $$|
     1ae:	20 24 24 24 24 24 24 24 24 7c 20 24 24 20 20 20      $$$$$$$$| $$   
     1be:	20 20 20 7c 20 24 24 5f 5f 2f 20 24 24 00              | $$__/ $$.

000001cc <__c.2254>:
     1cc:	7c 20 24 24 24 24 24 24 24 24 20 20 5c 24 24 5c     | $$$$$$$$  \$$\
     1dc:	20 20 24 24 20 7c 20 24 24 24 24 24 24 24 5c 20       $$ | $$$$$$$\ 
     1ec:	20 20 20 20 20 7c 20 24 24 24 24 24 24 24 24 7c          | $$$$$$$$|
     1fc:	20 24 24 20 20 20 20 24 24 7c 20 24 24 20 20 20      $$    $$| $$   
     20c:	5c 24 24 7c 20 24 24 20 20 7c 20 24 24 00           \$$| $$  | $$.

0000021a <__c.2252>:
     21a:	7c 20 24 24 20 20 20 20 24 24 20 5c 24 24 5c 20     | $$    $$ \$$\ 
     22a:	2f 20 20 24 24 7c 20 24 24 20 20 20 20 24 24 20     /  $$| $$    $$ 
     23a:	20 20 20 20 20 7c 20 24 24 20 20 20 20 24 24 7c          | $$    $$|
     24a:	20 20 24 24 24 24 24 24 5c 7c 20 20 24 24 24 24       $$$$$$\|  $$$$
     25a:	24 24 5c 7c 20 20 24 24 24 24 24 24 5c 00           $$\|  $$$$$$\.

00000268 <__c.2250>:
     268:	7c 20 24 24 5f 5f 7c 20 24 24 7c 20 24 24 20 20     | $$__| $$| $$  
     278:	20 7c 20 24 24 7c 20 24 24 5f 5f 7c 20 24 24 20      | $$| $$__| $$ 
     288:	20 20 20 20 20 7c 20 24 24 5f 5f 7c 20 24 24 20          | $$__| $$ 
     298:	2f 20 20 20 20 20 20 5c 20 20 2f 20 20 20 20 20     /      \  /     
     2a8:	20 5c 20 20 2f 20 20 20 20 20 20 5c 00               \  /      \.

000002b5 <__c.2248>:
     2b5:	7c 20 20 24 24 24 24 24 24 5c 7c 20 24 24 20 20     |  $$$$$$\| $$  
     2c5:	20 7c 20 24 24 7c 20 24 24 24 24 24 24 24 5c 20      | $$| $$$$$$$\ 
     2d5:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     2e5:	20 5f 5f 5f 5f 5f 5f 20 20 20 20 5f 5f 5f 5f 5f      ______    _____
     2f5:	5f 20 20 20 20 5f 5f 5f 5f 5f 5f 00                 _    ______.

00000301 <__c.2246>:
     301:	20 2f 20 20 20 20 20 20 5c 20 7c 20 20 5c 20 20      /      \ |  \  
     311:	20 7c 20 20 5c 7c 20 20 20 20 20 20 20 5c 20 20      |  \|       \  
     321:	20 20 20 20 20 7c 20 20 5c 20 20 7c 20 20 5c 00          |  \  |  \.

00000331 <__c.2244>:
     331:	20 20 5f 5f 5f 5f 5f 5f 20 20 20 5f 5f 20 20 20       ______   __   
     341:	20 20 5f 5f 20 20 5f 5f 5f 5f 5f 5f 5f 20 20 20       __  _______   
     351:	20 20 20 20 20 20 5f 5f 20 20 20 20 5f 5f 00              __    __.

00000360 <__c.2058>:
     360:	1b 5b 3f 32 35 68 00                                .[?25h.

00000367 <__c.2054>:
     367:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000036e <__c.2050>:
     36e:	1b 5b 25 64 6d 00                                   .[%dm.

00000374 <__c.2040>:
     374:	1b 5b 32 4a 00                                      .[2J.

00000379 <__c.2025>:
     379:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000382 <__ctors_end>:
     382:	11 24       	eor	r1, r1
     384:	1f be       	out	0x3f, r1	; 63
     386:	cf ef       	ldi	r28, 0xFF	; 255
     388:	d8 e0       	ldi	r29, 0x08	; 8
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	cd bf       	out	0x3d, r28	; 61

0000038e <__do_copy_data>:
     38e:	11 e0       	ldi	r17, 0x01	; 1
     390:	a0 e0       	ldi	r26, 0x00	; 0
     392:	b1 e0       	ldi	r27, 0x01	; 1
     394:	ec eb       	ldi	r30, 0xBC	; 188
     396:	f7 e1       	ldi	r31, 0x17	; 23
     398:	02 c0       	rjmp	.+4      	; 0x39e <__do_copy_data+0x10>
     39a:	05 90       	lpm	r0, Z+
     39c:	0d 92       	st	X+, r0
     39e:	a0 3a       	cpi	r26, 0xA0	; 160
     3a0:	b1 07       	cpc	r27, r17
     3a2:	d9 f7       	brne	.-10     	; 0x39a <__do_copy_data+0xc>

000003a4 <__do_clear_bss>:
     3a4:	22 e0       	ldi	r18, 0x02	; 2
     3a6:	a0 ea       	ldi	r26, 0xA0	; 160
     3a8:	b1 e0       	ldi	r27, 0x01	; 1
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <.do_clear_bss_start>

000003ac <.do_clear_bss_loop>:
     3ac:	1d 92       	st	X+, r1

000003ae <.do_clear_bss_start>:
     3ae:	a9 3c       	cpi	r26, 0xC9	; 201
     3b0:	b2 07       	cpc	r27, r18
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <.do_clear_bss_loop>
     3b4:	0e 94 49 06 	call	0xc92	; 0xc92 <main>
     3b8:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <_exit>

000003bc <__bad_interrupt>:
     3bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c0 <init_button_interrupts>:
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void)
{
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     3c0:	e8 e6       	ldi	r30, 0x68	; 104
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	82 60       	ori	r24, 0x02	; 2
     3c8:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     3ca:	8b b3       	in	r24, 0x1b	; 27
     3cc:	82 60       	ori	r24, 0x02	; 2
     3ce:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     3d0:	ec e6       	ldi	r30, 0x6C	; 108
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	8f 60       	ori	r24, 0x0F	; 15
     3d8:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     3da:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
     3de:	08 95       	ret

000003e0 <button_pushed>:

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0)
     3e0:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
     3e4:	18 16       	cp	r1, r24
     3e6:	14 f5       	brge	.+68     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	{
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     3e8:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3ec:	6f b7       	in	r22, 0x3f	; 63
		cli();
     3ee:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	09 c0       	rjmp	.+18     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		{
			button_queue[i - 1] = button_queue[i];
     3f4:	f9 01       	movw	r30, r18
     3f6:	ef 55       	subi	r30, 0x5F	; 95
     3f8:	fe 4f       	sbci	r31, 0xFE	; 254
     3fa:	40 81       	ld	r20, Z
     3fc:	f9 01       	movw	r30, r18
     3fe:	e0 56       	subi	r30, 0x60	; 96
     400:	fe 4f       	sbci	r31, 0xFE	; 254
     402:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     404:	9f 5f       	subi	r25, 0xFF	; 255
     406:	29 2f       	mov	r18, r25
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <__data_end>
     40e:	04 2e       	mov	r0, r20
     410:	00 0c       	add	r0, r0
     412:	55 0b       	sbc	r21, r21
     414:	24 17       	cp	r18, r20
     416:	35 07       	cpc	r19, r21
     418:	6c f3       	brlt	.-38     	; 0x3f4 <button_pushed+0x14>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     41a:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <__data_end>
     41e:	91 50       	subi	r25, 0x01	; 1
     420:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <__data_end>
		
		if (interrupts_were_enabled)
     424:	66 23       	and	r22, r22
     426:	1c f4       	brge	.+6      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		{
			// Turn them back on again
			sei();
     428:	78 94       	sei
     42a:	08 95       	ret
	queue_length = 0;
}

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     42c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     42e:	08 95       	ret

00000430 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect)
{
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	2f 93       	push	r18
     43c:	3f 93       	push	r19
     43e:	4f 93       	push	r20
     440:	8f 93       	push	r24
     442:	9f 93       	push	r25
     444:	ef 93       	push	r30
     446:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     448:	43 b1       	in	r20, 0x03	; 3
     44a:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	26 c0       	rjmp	.+76     	; 0x49c <__vector_5+0x6c>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     450:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <__data_end>
     454:	94 30       	cpi	r25, 0x04	; 4
     456:	0c f5       	brge	.+66     	; 0x49a <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     458:	24 2f       	mov	r18, r20
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	08 2e       	mov	r0, r24
     45e:	02 c0       	rjmp	.+4      	; 0x464 <__vector_5+0x34>
     460:	35 95       	asr	r19
     462:	27 95       	ror	r18
     464:	0a 94       	dec	r0
     466:	e2 f7       	brpl	.-8      	; 0x460 <__vector_5+0x30>
     468:	20 ff       	sbrs	r18, 0
     46a:	17 c0       	rjmp	.+46     	; 0x49a <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin)))
     46c:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <last_button_state>
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	08 2e       	mov	r0, r24
     474:	02 c0       	rjmp	.+4      	; 0x47a <__vector_5+0x4a>
     476:	35 95       	asr	r19
     478:	27 95       	ror	r18
     47a:	0a 94       	dec	r0
     47c:	e2 f7       	brpl	.-8      	; 0x476 <__vector_5+0x46>
     47e:	20 fd       	sbrc	r18, 0
     480:	0c c0       	rjmp	.+24     	; 0x49a <__vector_5+0x6a>
				{
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     482:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <__data_end>
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	9e 0f       	add	r25, r30
     48a:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <__data_end>
     48e:	0e 2e       	mov	r0, r30
     490:	00 0c       	add	r0, r0
     492:	ff 0b       	sbc	r31, r31
     494:	ef 55       	subi	r30, 0x5F	; 95
     496:	fe 4f       	sbci	r31, 0xFE	; 254
     498:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     49a:	8f 5f       	subi	r24, 0xFF	; 255
     49c:	84 30       	cpi	r24, 0x04	; 4
     49e:	c0 f2       	brcs	.-80     	; 0x450 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     4a0:	40 93 a5 01 	sts	0x01A5, r20	; 0x8001a5 <last_button_state>
}
     4a4:	ff 91       	pop	r31
     4a6:	ef 91       	pop	r30
     4a8:	9f 91       	pop	r25
     4aa:	8f 91       	pop	r24
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <update_start_screen>:

// Update dynamic start screen based on the frame number (0-31)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	18 2f       	mov	r17, r24
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     4c4:	d4 e0       	ldi	r29, 0x04	; 4
     4c6:	36 c0       	rjmp	.+108    	; 0x534 <update_start_screen+0x78>
	{
		for (uint8_t col = 11; col < 16; col++)
		{
			colour = col == 14 ? COLOUR_YELLOW : COLOUR_BLACK;
     4c8:	ce 30       	cpi	r28, 0x0E	; 14
     4ca:	11 f4       	brne	.+4      	; 0x4d0 <update_start_screen+0x14>
     4cc:	4f ef       	ldi	r20, 0xFF	; 255
     4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <update_start_screen+0x16>
     4d0:	40 e0       	ldi	r20, 0x00	; 0
			if (((32+col-frame_number) & ((1<<(row-2))-1)) == (1<<(row-3))-1)
     4d2:	2c 2f       	mov	r18, r28
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	20 5e       	subi	r18, 0xE0	; 224
     4d8:	3f 4f       	sbci	r19, 0xFF	; 255
     4da:	21 1b       	sub	r18, r17
     4dc:	31 09       	sbc	r19, r1
     4de:	ed 2f       	mov	r30, r29
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	bf 01       	movw	r22, r30
     4e4:	62 50       	subi	r22, 0x02	; 2
     4e6:	71 09       	sbc	r23, r1
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	dc 01       	movw	r26, r24
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <update_start_screen+0x38>
     4f0:	aa 0f       	add	r26, r26
     4f2:	bb 1f       	adc	r27, r27
     4f4:	6a 95       	dec	r22
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <update_start_screen+0x34>
     4f8:	bd 01       	movw	r22, r26
     4fa:	61 50       	subi	r22, 0x01	; 1
     4fc:	71 09       	sbc	r23, r1
     4fe:	26 23       	and	r18, r22
     500:	37 23       	and	r19, r23
     502:	33 97       	sbiw	r30, 0x03	; 3
     504:	02 c0       	rjmp	.+4      	; 0x50a <update_start_screen+0x4e>
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	ea 95       	dec	r30
     50c:	e2 f7       	brpl	.-8      	; 0x506 <update_start_screen+0x4a>
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	28 17       	cp	r18, r24
     512:	39 07       	cpc	r19, r25
     514:	29 f4       	brne	.+10     	; 0x520 <update_start_screen+0x64>
			{
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
     516:	ce 30       	cpi	r28, 0x0E	; 14
     518:	10 f4       	brcc	.+4      	; 0x51e <update_start_screen+0x62>
     51a:	4f e0       	ldi	r20, 0x0F	; 15
     51c:	01 c0       	rjmp	.+2      	; 0x520 <update_start_screen+0x64>
     51e:	40 ef       	ldi	r20, 0xF0	; 240
			}
			ledmatrix_update_pixel(col, row, colour);
     520:	6d 2f       	mov	r22, r29
     522:	8c 2f       	mov	r24, r28
     524:	0e 94 84 04 	call	0x908	; 0x908 <ledmatrix_update_pixel>
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
	{
		for (uint8_t col = 11; col < 16; col++)
     528:	cf 5f       	subi	r28, 0xFF	; 255
     52a:	01 c0       	rjmp	.+2      	; 0x52e <update_start_screen+0x72>
     52c:	cb e0       	ldi	r28, 0x0B	; 11
     52e:	c0 31       	cpi	r28, 0x10	; 16
     530:	58 f2       	brcs	.-106    	; 0x4c8 <update_start_screen+0xc>
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     532:	df 5f       	subi	r29, 0xFF	; 255
     534:	d8 30       	cpi	r29, 0x08	; 8
     536:	d0 f3       	brcs	.-12     	; 0x52c <update_start_screen+0x70>
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
			}
			ledmatrix_update_pixel(col, row, colour);
		}
	}
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	08 95       	ret

00000540 <show_start_screen>:
// Stored as a 5 x 3 grid pattern going from Left-to-Right, Top-to-Bottom
// Padded with a leading zero so that it fits into a 16-bit value


void show_start_screen(void)
{
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	28 97       	sbiw	r28, 0x08	; 8
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     556:	0e 94 c0 04 	call	0x980	; 0x980 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     55a:	10 e0       	ldi	r17, 0x00	; 0
     55c:	31 c0       	rjmp	.+98     	; 0x5c0 <show_start_screen+0x80>
	{
		col_data = pong_display[col];
     55e:	e1 2f       	mov	r30, r17
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	e1 5f       	subi	r30, 0xF1	; 241
     564:	fe 4f       	sbci	r31, 0xFE	; 254
     566:	90 81       	ld	r25, Z
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	21 c0       	rjmp	.+66     	; 0x5ae <show_start_screen+0x6e>
		{
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data>>row & 1)
     56c:	28 2f       	mov	r18, r24
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	49 2f       	mov	r20, r25
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	08 2e       	mov	r0, r24
     576:	02 c0       	rjmp	.+4      	; 0x57c <show_start_screen+0x3c>
     578:	55 95       	asr	r21
     57a:	47 95       	ror	r20
     57c:	0a 94       	dec	r0
     57e:	e2 f7       	brpl	.-8      	; 0x578 <show_start_screen+0x38>
     580:	40 ff       	sbrs	r20, 0
     582:	0d c0       	rjmp	.+26     	; 0x59e <show_start_screen+0x5e>
			{
				column_colour_data[row] = (row < 4 ? COLOUR_RED : COLOUR_GREEN);
     584:	84 30       	cpi	r24, 0x04	; 4
     586:	10 f4       	brcc	.+4      	; 0x58c <show_start_screen+0x4c>
     588:	4f e0       	ldi	r20, 0x0F	; 15
     58a:	01 c0       	rjmp	.+2      	; 0x58e <show_start_screen+0x4e>
     58c:	40 ef       	ldi	r20, 0xF0	; 240
     58e:	e1 e0       	ldi	r30, 0x01	; 1
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	ec 0f       	add	r30, r28
     594:	fd 1f       	adc	r31, r29
     596:	e2 0f       	add	r30, r18
     598:	f3 1f       	adc	r31, r19
     59a:	40 83       	st	Z, r20
     59c:	07 c0       	rjmp	.+14     	; 0x5ac <show_start_screen+0x6c>
			}
			else
			{
				column_colour_data[row] = 0;
     59e:	e1 e0       	ldi	r30, 0x01	; 1
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	ec 0f       	add	r30, r28
     5a4:	fd 1f       	adc	r31, r29
     5a6:	e2 0f       	add	r30, r18
     5a8:	f3 1f       	adc	r31, r19
     5aa:	10 82       	st	Z, r1
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
	{
		col_data = pong_display[col];
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     5ac:	8f 5f       	subi	r24, 0xFF	; 255
     5ae:	88 30       	cpi	r24, 0x08	; 8
     5b0:	e8 f2       	brcs	.-70     	; 0x56c <show_start_screen+0x2c>
			else
			{
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
     5b2:	be 01       	movw	r22, r28
     5b4:	6f 5f       	subi	r22, 0xFF	; 255
     5b6:	7f 4f       	sbci	r23, 0xFF	; 255
     5b8:	81 2f       	mov	r24, r17
     5ba:	0e 94 a3 04 	call	0x946	; 0x946 <ledmatrix_update_column>
{
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     5be:	1f 5f       	subi	r17, 0xFF	; 255
     5c0:	10 31       	cpi	r17, 0x10	; 16
     5c2:	68 f2       	brcs	.-102    	; 0x55e <show_start_screen+0x1e>
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
	}
	update_start_screen(0);
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <update_start_screen>
}
     5ca:	28 96       	adiw	r28, 0x08	; 8
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	08 95       	ret

000005de <default_grid>:
}

// Initialise the display for the board, this creates the display
// for an empty board.
void default_grid(void)
{
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	28 97       	sbiw	r28, 0x08	; 8
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_clear();
     5f2:	0e 94 c0 04 	call	0x980	; 0x980 <ledmatrix_clear>
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	09 c0       	rjmp	.+18     	; 0x60c <default_grid+0x2e>
	{
		colours[row] = COLOUR_YELLOW;
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	ec 0f       	add	r30, r28
     600:	fd 1f       	adc	r31, r29
     602:	e8 0f       	add	r30, r24
     604:	f1 1d       	adc	r31, r1
     606:	9f ef       	ldi	r25, 0xFF	; 255
     608:	90 83       	st	Z, r25
void default_grid(void)
{
	ledmatrix_clear();
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     60a:	8f 5f       	subi	r24, 0xFF	; 255
     60c:	88 30       	cpi	r24, 0x08	; 8
     60e:	a8 f3       	brcs	.-22     	; 0x5fa <default_grid+0x1c>
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
     610:	be 01       	movw	r22, r28
     612:	6f 5f       	subi	r22, 0xFF	; 255
     614:	7f 4f       	sbci	r23, 0xFF	; 255
     616:	8d e0       	ldi	r24, 0x0D	; 13
     618:	0e 94 a3 04 	call	0x946	; 0x946 <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	09 c0       	rjmp	.+18     	; 0x632 <default_grid+0x54>
	{
		colours[row] = COLOUR_HALF_YELLOW;
     620:	e1 e0       	ldi	r30, 0x01	; 1
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	ec 0f       	add	r30, r28
     626:	fd 1f       	adc	r31, r29
     628:	e8 0f       	add	r30, r24
     62a:	f1 1d       	adc	r31, r1
     62c:	95 e5       	ldi	r25, 0x55	; 85
     62e:	90 83       	st	Z, r25
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     630:	8f 5f       	subi	r24, 0xFF	; 255
     632:	88 30       	cpi	r24, 0x08	; 8
     634:	a8 f3       	brcs	.-22     	; 0x620 <default_grid+0x42>
	{
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
     636:	be 01       	movw	r22, r28
     638:	6f 5f       	subi	r22, 0xFF	; 255
     63a:	7f 4f       	sbci	r23, 0xFF	; 255
     63c:	8c e0       	ldi	r24, 0x0C	; 12
     63e:	0e 94 a3 04 	call	0x946	; 0x946 <ledmatrix_update_column>
	ledmatrix_update_column(14, colours);
     642:	be 01       	movw	r22, r28
     644:	6f 5f       	subi	r22, 0xFF	; 255
     646:	7f 4f       	sbci	r23, 0xFF	; 255
     648:	8e e0       	ldi	r24, 0x0E	; 14
     64a:	0e 94 a3 04 	call	0x946	; 0x946 <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	09 c0       	rjmp	.+18     	; 0x664 <default_grid+0x86>
	{
		colours[row] = COLOUR_QUART_YELLOW;
     652:	e1 e0       	ldi	r30, 0x01	; 1
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	ec 0f       	add	r30, r28
     658:	fd 1f       	adc	r31, r29
     65a:	e8 0f       	add	r30, r24
     65c:	f1 1d       	adc	r31, r1
     65e:	91 e1       	ldi	r25, 0x11	; 17
     660:	90 83       	st	Z, r25
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
	ledmatrix_update_column(14, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     662:	8f 5f       	subi	r24, 0xFF	; 255
     664:	88 30       	cpi	r24, 0x08	; 8
     666:	a8 f3       	brcs	.-22     	; 0x652 <default_grid+0x74>
	{
		colours[row] = COLOUR_QUART_YELLOW;
	}
	ledmatrix_update_column(11, colours);
     668:	be 01       	movw	r22, r28
     66a:	6f 5f       	subi	r22, 0xFF	; 255
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	8b e0       	ldi	r24, 0x0B	; 11
     670:	0e 94 a3 04 	call	0x946	; 0x946 <ledmatrix_update_column>
	ledmatrix_update_column(15, colours);
     674:	be 01       	movw	r22, r28
     676:	6f 5f       	subi	r22, 0xFF	; 255
     678:	7f 4f       	sbci	r23, 0xFF	; 255
     67a:	8f e0       	ldi	r24, 0x0F	; 15
     67c:	0e 94 a3 04 	call	0x946	; 0x946 <ledmatrix_update_column>
}
     680:	28 96       	adiw	r28, 0x08	; 8
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <initialise_game>:

// Initialize the game by resetting the grid and beat
void initialise_game(void)
{
	// initialize the display we are using.
	default_grid();
     692:	0e 94 ef 02 	call	0x5de	; 0x5de <default_grid>
	beat = 0;
     696:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <beat+0x1>
     69a:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <beat>
     69e:	08 95       	ret

000006a0 <play_note>:
}

// Play a note in the given lane
void play_note(uint8_t lane) // button lane, normally aligned
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	d8 2f       	mov	r29, r24
	// d) in advance_note below, poll that variable, and choose COLOUR_GREEN
	//    instead of COLOUR_RED for ledmatrix_update_pixel if required
	// e) depending on your implementation, clear the variable in
	//    advance_note when a note disappears from the screen

	green_check = lane;
     6a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     6ac:	cb e0       	ldi	r28, 0x0B	; 11
     6ae:	37 c0       	rjmp	.+110    	; 0x71e <play_note+0x7e>
	
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col; //this is the next position that the note will be in
     6b0:	8f e0       	ldi	r24, 0x0F	; 15
     6b2:	8c 1b       	sub	r24, r28
		uint8_t index = (future + beat) / 5;	//this is the note??
     6b4:	40 91 ab 01 	lds	r20, 0x01AB	; 0x8001ab <beat>
     6b8:	50 91 ac 01 	lds	r21, 0x01AC	; 0x8001ac <beat+0x1>
     6bc:	48 0f       	add	r20, r24
     6be:	51 1d       	adc	r21, r1
     6c0:	9a 01       	movw	r18, r20
     6c2:	ad ec       	ldi	r26, 0xCD	; 205
     6c4:	bc ec       	ldi	r27, 0xCC	; 204
     6c6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__umulhisi3>
     6ca:	fc 01       	movw	r30, r24
     6cc:	f6 95       	lsr	r31
     6ce:	e7 95       	ror	r30
     6d0:	f6 95       	lsr	r31
     6d2:	e7 95       	ror	r30
		
		if ((future+beat) % 5) {
     6d4:	cf 01       	movw	r24, r30
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	88 0f       	add	r24, r24
     6dc:	99 1f       	adc	r25, r25
     6de:	8e 0f       	add	r24, r30
     6e0:	9f 1f       	adc	r25, r31
     6e2:	48 17       	cp	r20, r24
     6e4:	59 07       	cpc	r21, r25
     6e6:	d1 f4       	brne	.+52     	; 0x71c <play_note+0x7c>
			continue;
		}
		if (track[index] & (1<<lane))
     6e8:	ff 27       	eor	r31, r31
     6ea:	e1 5e       	subi	r30, 0xE1	; 225
     6ec:	fe 4f       	sbci	r31, 0xFE	; 254
     6ee:	80 81       	ld	r24, Z
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0d 2e       	mov	r0, r29
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <play_note+0x5a>
     6f6:	95 95       	asr	r25
     6f8:	87 95       	ror	r24
     6fa:	0a 94       	dec	r0
     6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <play_note+0x56>
     6fe:	80 ff       	sbrs	r24, 0
     700:	0d c0       	rjmp	.+26     	; 0x71c <play_note+0x7c>
		{
			// if so, colour the two pixels green
			ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     702:	40 ef       	ldi	r20, 0xF0	; 240
     704:	1d 2f       	mov	r17, r29
     706:	11 0f       	add	r17, r17
     708:	61 2f       	mov	r22, r17
     70a:	8c 2f       	mov	r24, r28
     70c:	0e 94 84 04 	call	0x908	; 0x908 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	61 0f       	add	r22, r17
     714:	40 ef       	ldi	r20, 0xF0	; 240
     716:	8c 2f       	mov	r24, r28
     718:	0e 94 84 04 	call	0x908	; 0x908 <ledmatrix_update_pixel>
	// e) depending on your implementation, clear the variable in
	//    advance_note when a note disappears from the screen

	green_check = lane;
	
	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     71c:	cf 5f       	subi	r28, 0xFF	; 255
     71e:	c0 31       	cpi	r28, 0x10	; 16
     720:	38 f2       	brcs	.-114    	; 0x6b0 <play_note+0x10>
			// if so, colour the two pixels green
			ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
			ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
		}
	}
}
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	08 95       	ret

0000072a <advance_note>:

// Advance the notes one row down the display
void advance_note(void)
{
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     736:	c0 e0       	ldi	r28, 0x00	; 0
     738:	65 c0       	rjmp	.+202    	; 0x804 <__DATA_REGION_LENGTH__+0x4>
	{
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col;
     73a:	8f e0       	ldi	r24, 0x0F	; 15
     73c:	8c 1b       	sub	r24, r28
		uint8_t index = (future + beat) / 5;
     73e:	40 91 ab 01 	lds	r20, 0x01AB	; 0x8001ab <beat>
     742:	50 91 ac 01 	lds	r21, 0x01AC	; 0x8001ac <beat+0x1>
     746:	48 0f       	add	r20, r24
     748:	51 1d       	adc	r21, r1
     74a:	9a 01       	movw	r18, r20
     74c:	ad ec       	ldi	r26, 0xCD	; 205
     74e:	bc ec       	ldi	r27, 0xCC	; 204
     750:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__umulhisi3>
     754:	8c 01       	movw	r16, r24
     756:	16 95       	lsr	r17
     758:	07 95       	ror	r16
     75a:	16 95       	lsr	r17
     75c:	07 95       	ror	r16
		if (index >= TRACK_LENGTH)
     75e:	01 38       	cpi	r16, 0x81	; 129
     760:	08 f0       	brcs	.+2      	; 0x764 <advance_note+0x3a>
     762:	53 c0       	rjmp	.+166    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		{
			break;
		}
		if ((future+beat) % 5)
     764:	c8 01       	movw	r24, r16
     766:	98 01       	movw	r18, r16
     768:	22 0f       	add	r18, r18
     76a:	33 1f       	adc	r19, r19
     76c:	22 0f       	add	r18, r18
     76e:	33 1f       	adc	r19, r19
     770:	82 0f       	add	r24, r18
     772:	93 1f       	adc	r25, r19
     774:	48 17       	cp	r20, r24
     776:	59 07       	cpc	r21, r25
     778:	09 f0       	breq	.+2      	; 0x77c <advance_note+0x52>
     77a:	43 c0       	rjmp	.+134    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     77c:	d0 e0       	ldi	r29, 0x00	; 0
     77e:	3e c0       	rjmp	.+124    	; 0x7fc <advance_note+0xd2>
		{
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
		{
			if (track[index] & (1<<lane))
     780:	f8 01       	movw	r30, r16
     782:	ff 27       	eor	r31, r31
     784:	e1 5e       	subi	r30, 0xE1	; 225
     786:	fe 4f       	sbci	r31, 0xFE	; 254
     788:	80 81       	ld	r24, Z
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0d 2e       	mov	r0, r29
     78e:	02 c0       	rjmp	.+4      	; 0x794 <advance_note+0x6a>
     790:	95 95       	asr	r25
     792:	87 95       	ror	r24
     794:	0a 94       	dec	r0
     796:	e2 f7       	brpl	.-8      	; 0x790 <advance_note+0x66>
     798:	80 ff       	sbrs	r24, 0
     79a:	2f c0       	rjmp	.+94     	; 0x7fa <advance_note+0xd0>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
     79c:	cb 30       	cpi	r28, 0x0B	; 11
     79e:	59 f0       	breq	.+22     	; 0x7b6 <advance_note+0x8c>
     7a0:	cf 30       	cpi	r28, 0x0F	; 15
     7a2:	71 f0       	breq	.+28     	; 0x7c0 <advance_note+0x96>
				{
					colour = COLOUR_QUART_YELLOW;
				}
				else if (col==12 || col == 14)
     7a4:	cc 30       	cpi	r28, 0x0C	; 12
     7a6:	89 f0       	breq	.+34     	; 0x7ca <advance_note+0xa0>
     7a8:	ce 30       	cpi	r28, 0x0E	; 14
     7aa:	a1 f0       	breq	.+40     	; 0x7d4 <advance_note+0xaa>
				{
					colour = COLOUR_HALF_YELLOW;
				}
				else if (col==13)
     7ac:	cd 30       	cpi	r28, 0x0D	; 13
     7ae:	b9 f4       	brne	.+46     	; 0x7de <advance_note+0xb4>
				{
					colour = COLOUR_YELLOW;
     7b0:	ee 24       	eor	r14, r14
     7b2:	ea 94       	dec	r14
     7b4:	15 c0       	rjmp	.+42     	; 0x7e0 <advance_note+0xb6>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
				{
					colour = COLOUR_QUART_YELLOW;
     7b6:	0f 2e       	mov	r0, r31
     7b8:	f1 e1       	ldi	r31, 0x11	; 17
     7ba:	ef 2e       	mov	r14, r31
     7bc:	f0 2d       	mov	r31, r0
     7be:	10 c0       	rjmp	.+32     	; 0x7e0 <advance_note+0xb6>
     7c0:	0f 2e       	mov	r0, r31
     7c2:	f1 e1       	ldi	r31, 0x11	; 17
     7c4:	ef 2e       	mov	r14, r31
     7c6:	f0 2d       	mov	r31, r0
     7c8:	0b c0       	rjmp	.+22     	; 0x7e0 <advance_note+0xb6>
				}
				else if (col==12 || col == 14)
				{
					colour = COLOUR_HALF_YELLOW;
     7ca:	0f 2e       	mov	r0, r31
     7cc:	f5 e5       	ldi	r31, 0x55	; 85
     7ce:	ef 2e       	mov	r14, r31
     7d0:	f0 2d       	mov	r31, r0
     7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <advance_note+0xb6>
     7d4:	0f 2e       	mov	r0, r31
     7d6:	f5 e5       	ldi	r31, 0x55	; 85
     7d8:	ef 2e       	mov	r14, r31
     7da:	f0 2d       	mov	r31, r0
     7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <advance_note+0xb6>
				{
					colour = COLOUR_YELLOW;
				}
				else
				{
					colour = COLOUR_BLACK;
     7de:	e1 2c       	mov	r14, r1
				}
				ledmatrix_update_pixel(col, 2*lane, colour);
     7e0:	4e 2d       	mov	r20, r14
     7e2:	fd 2e       	mov	r15, r29
     7e4:	ff 0c       	add	r15, r15
     7e6:	6f 2d       	mov	r22, r15
     7e8:	8c 2f       	mov	r24, r28
     7ea:	0e 94 84 04 	call	0x908	; 0x908 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 2*lane+1, colour);
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	6f 0d       	add	r22, r15
     7f2:	4e 2d       	mov	r20, r14
     7f4:	8c 2f       	mov	r24, r28
     7f6:	0e 94 84 04 	call	0x908	; 0x908 <ledmatrix_update_pixel>
		}
		if ((future+beat) % 5)
		{
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
     7fa:	df 5f       	subi	r29, 0xFF	; 255
     7fc:	d4 30       	cpi	r29, 0x04	; 4
     7fe:	08 f4       	brcc	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     800:	bf cf       	rjmp	.-130    	; 0x780 <advance_note+0x56>

// Advance the notes one row down the display
void advance_note(void)
{
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     802:	cf 5f       	subi	r28, 0xFF	; 255
     804:	c0 31       	cpi	r28, 0x10	; 16
     806:	08 f4       	brcc	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     808:	98 cf       	rjmp	.-208    	; 0x73a <advance_note+0x10>
			}
		}
	}
	
	// increment the beat
	beat++;
     80a:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <beat>
     80e:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <beat+0x1>
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <beat+0x1>
     818:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <beat>
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     81c:	c0 e0       	ldi	r28, 0x00	; 0
     81e:	64 c0       	rjmp	.+200    	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
	{
		// col counts from one end, future from the other
		uint8_t future = MATRIX_NUM_COLUMNS-1-col;
     820:	8f e0       	ldi	r24, 0x0F	; 15
     822:	8c 1b       	sub	r24, r28
		// notes are only drawn every five columns
		if ((future+beat)%5)
     824:	40 91 ab 01 	lds	r20, 0x01AB	; 0x8001ab <beat>
     828:	50 91 ac 01 	lds	r21, 0x01AC	; 0x8001ac <beat+0x1>
     82c:	48 0f       	add	r20, r24
     82e:	51 1d       	adc	r21, r1
     830:	9a 01       	movw	r18, r20
     832:	ad ec       	ldi	r26, 0xCD	; 205
     834:	bc ec       	ldi	r27, 0xCC	; 204
     836:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__umulhisi3>
     83a:	96 95       	lsr	r25
     83c:	87 95       	ror	r24
     83e:	96 95       	lsr	r25
     840:	87 95       	ror	r24
     842:	9c 01       	movw	r18, r24
     844:	22 0f       	add	r18, r18
     846:	33 1f       	adc	r19, r19
     848:	22 0f       	add	r18, r18
     84a:	33 1f       	adc	r19, r19
     84c:	82 0f       	add	r24, r18
     84e:	93 1f       	adc	r25, r19
     850:	48 17       	cp	r20, r24
     852:	59 07       	cpc	r21, r25
     854:	09 f0       	breq	.+2      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     856:	47 c0       	rjmp	.+142    	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
		{
			continue;
		}
		
		// index of which note in the track to play
		uint8_t index = (future+beat)/5;
     858:	9a 01       	movw	r18, r20
     85a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__umulhisi3>
     85e:	8c 01       	movw	r16, r24
     860:	16 95       	lsr	r17
     862:	07 95       	ror	r16
     864:	16 95       	lsr	r17
     866:	07 95       	ror	r16
		// if the index is beyond the end of the track,
		// no note can be drawn
		if (index >= TRACK_LENGTH)
     868:	01 38       	cpi	r16, 0x81	; 129
     86a:	e8 f5       	brcc	.+122    	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
     86c:	d0 e0       	ldi	r29, 0x00	; 0
     86e:	39 c0       	rjmp	.+114    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{
			
			//check if there's a note in the specific path
			if (track[index] & (1<<lane)) {
     870:	f8 01       	movw	r30, r16
     872:	ff 27       	eor	r31, r31
     874:	e1 5e       	subi	r30, 0xE1	; 225
     876:	fe 4f       	sbci	r31, 0xFE	; 254
     878:	80 81       	ld	r24, Z
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0d 2e       	mov	r0, r29
     87e:	02 c0       	rjmp	.+4      	; 0x884 <__DATA_REGION_LENGTH__+0x84>
     880:	95 95       	asr	r25
     882:	87 95       	ror	r24
     884:	0a 94       	dec	r0
     886:	e2 f7       	brpl	.-8      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
     888:	80 ff       	sbrs	r24, 0
     88a:	2a c0       	rjmp	.+84     	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
				
				//check if theres a note in the led matrix section
				if ((green_check == lane) & ((col >= 11) & (col <= 15))) {
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     892:	8d 13       	cpse	r24, r29
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	85 ef       	ldi	r24, 0xF5	; 245
     89a:	8c 0f       	add	r24, r28
     89c:	85 30       	cpi	r24, 0x05	; 5
     89e:	08 f0       	brcs	.+2      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	99 23       	and	r25, r25
     8a4:	81 f0       	breq	.+32     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
     8a6:	22 23       	and	r18, r18
     8a8:	71 f0       	breq	.+28     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
					//if true set pixels to green
					ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     8aa:	40 ef       	ldi	r20, 0xF0	; 240
     8ac:	fd 2e       	mov	r15, r29
     8ae:	ff 0c       	add	r15, r15
     8b0:	6f 2d       	mov	r22, r15
     8b2:	8c 2f       	mov	r24, r28
     8b4:	0e 94 84 04 	call	0x908	; 0x908 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	6f 0d       	add	r22, r15
     8bc:	40 ef       	ldi	r20, 0xF0	; 240
     8be:	8c 2f       	mov	r24, r28
     8c0:	0e 94 84 04 	call	0x908	; 0x908 <ledmatrix_update_pixel>
     8c4:	0d c0       	rjmp	.+26     	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
				} else {
					ledmatrix_update_pixel(col, 2*lane, COLOUR_RED);
     8c6:	4f e0       	ldi	r20, 0x0F	; 15
     8c8:	fd 2e       	mov	r15, r29
     8ca:	ff 0c       	add	r15, r15
     8cc:	6f 2d       	mov	r22, r15
     8ce:	8c 2f       	mov	r24, r28
     8d0:	0e 94 84 04 	call	0x908	; 0x908 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_RED);							
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	6f 0d       	add	r22, r15
     8d8:	4f e0       	ldi	r20, 0x0F	; 15
     8da:	8c 2f       	mov	r24, r28
     8dc:	0e 94 84 04 	call	0x908	; 0x908 <ledmatrix_update_pixel>
		if (index >= TRACK_LENGTH)
		{
			continue;
		}
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
     8e0:	df 5f       	subi	r29, 0xFF	; 255
     8e2:	d4 30       	cpi	r29, 0x04	; 4
     8e4:	28 f2       	brcs	.-118    	; 0x870 <__DATA_REGION_LENGTH__+0x70>
	
	// increment the beat
	beat++;
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     8e6:	cf 5f       	subi	r28, 0xFF	; 255
     8e8:	c0 31       	cpi	r28, 0x10	; 16
     8ea:	08 f4       	brcc	.+2      	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
     8ec:	99 cf       	rjmp	.-206    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
				ledmatrix_update_pixel(col, 2*lane, COLOUR_RED);
				ledmatrix_update_pixel(col, 2*lane+1, COLOUR_RED);
			}
		*/}
	}
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	08 95       	ret

000008fc <is_game_over>:
uint8_t is_game_over(void)
{
	// YOUR CODE HERE
	// Detect if the game is over i.e. if a player has won.
	return 0;
}
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	08 95       	ret

00000900 <ledmatrix_setup>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     900:	80 e8       	ldi	r24, 0x80	; 128
     902:	0e 94 a2 07 	call	0xf44	; 0xf44 <spi_setup_master>
     906:	08 95       	ret

00000908 <ledmatrix_update_pixel>:
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	80 31       	cpi	r24, 0x10	; 16
     910:	b0 f4       	brcc	.+44     	; 0x93e <ledmatrix_update_pixel+0x36>
     912:	68 30       	cpi	r22, 0x08	; 8
     914:	a0 f4       	brcc	.+40     	; 0x93e <ledmatrix_update_pixel+0x36>
     916:	14 2f       	mov	r17, r20
     918:	c6 2f       	mov	r28, r22
     91a:	d8 2f       	mov	r29, r24
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <spi_send_byte>
     922:	6c 2f       	mov	r22, r28
     924:	67 70       	andi	r22, 0x07	; 7
     926:	80 e1       	ldi	r24, 0x10	; 16
     928:	68 9f       	mul	r22, r24
     92a:	90 01       	movw	r18, r0
     92c:	11 24       	eor	r1, r1
     92e:	8d 2f       	mov	r24, r29
     930:	8f 70       	andi	r24, 0x0F	; 15
     932:	82 2b       	or	r24, r18
     934:	0e 94 ce 07 	call	0xf9c	; 0xf9c <spi_send_byte>
     938:	81 2f       	mov	r24, r17
     93a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <spi_send_byte>
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	08 95       	ret

00000946 <ledmatrix_update_column>:
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	80 31       	cpi	r24, 0x10	; 16
     94e:	a0 f4       	brcc	.+40     	; 0x978 <ledmatrix_update_column+0x32>
     950:	8b 01       	movw	r16, r22
     952:	c8 2f       	mov	r28, r24
     954:	83 e0       	ldi	r24, 0x03	; 3
     956:	0e 94 ce 07 	call	0xf9c	; 0xf9c <spi_send_byte>
     95a:	8c 2f       	mov	r24, r28
     95c:	8f 70       	andi	r24, 0x0F	; 15
     95e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <spi_send_byte>
     962:	c0 e0       	ldi	r28, 0x00	; 0
     964:	07 c0       	rjmp	.+14     	; 0x974 <ledmatrix_update_column+0x2e>
     966:	f8 01       	movw	r30, r16
     968:	ec 0f       	add	r30, r28
     96a:	f1 1d       	adc	r31, r1
     96c:	80 81       	ld	r24, Z
     96e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <spi_send_byte>
     972:	cf 5f       	subi	r28, 0xFF	; 255
     974:	c8 30       	cpi	r28, 0x08	; 8
     976:	b8 f3       	brcs	.-18     	; 0x966 <ledmatrix_update_column+0x20>
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	08 95       	ret

00000980 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     980:	8f e0       	ldi	r24, 0x0F	; 15
     982:	0e 94 ce 07 	call	0xf9c	; 0xf9c <spi_send_byte>
     986:	08 95       	ret

00000988 <initialise_hardware>:
	}
}

void initialise_hardware(void)
{
	ledmatrix_setup();
     988:	0e 94 80 04 	call	0x900	; 0x900 <ledmatrix_setup>
	init_button_interrupts();
     98c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	7b e4       	ldi	r23, 0x4B	; 75
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0e 94 ba 06 	call	0xd74	; 0xd74 <init_serial_stdio>
	
	init_timer0();
     99e:	0e 94 0d 08 	call	0x101a	; 0x101a <init_timer0>
	init_timer1();
     9a2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <init_timer1>
	init_timer2();
     9a6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <init_timer2>
	
	// Turn on global interrupts
	sei();
     9aa:	78 94       	sei
     9ac:	08 95       	ret

000009ae <start_screen>:
}

void start_screen(void)
{
     9ae:	4f 92       	push	r4
     9b0:	5f 92       	push	r5
     9b2:	6f 92       	push	r6
     9b4:	7f 92       	push	r7
     9b6:	8f 92       	push	r8
     9b8:	9f 92       	push	r9
     9ba:	af 92       	push	r10
     9bc:	bf 92       	push	r11
     9be:	cf 92       	push	r12
     9c0:	df 92       	push	r13
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
	// Clear terminal screen and output a message
	clear_terminal();
     9ca:	0e 94 e5 07 	call	0xfca	; 0xfca <clear_terminal>
	show_cursor();
     9ce:	0e 94 04 08 	call	0x1008	; 0x1008 <show_cursor>
	clear_terminal();
     9d2:	0e 94 e5 07 	call	0xfca	; 0xfca <clear_terminal>
	hide_cursor();
     9d6:	0e 94 fb 07 	call	0xff6	; 0xff6 <hide_cursor>
	set_display_attribute(FG_WHITE);
     9da:	85 e2       	ldi	r24, 0x25	; 37
     9dc:	0e 94 ee 07 	call	0xfdc	; 0xfdc <set_display_attribute>
	move_terminal_cursor(10,4);
     9e0:	64 e0       	ldi	r22, 0x04	; 4
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	8a e0       	ldi	r24, 0x0A	; 10
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <move_terminal_cursor>
	printf_P(PSTR("  ______   __     __  _______         __    __"));
     9ec:	81 e3       	ldi	r24, 0x31	; 49
     9ee:	93 e0       	ldi	r25, 0x03	; 3
     9f0:	9f 93       	push	r25
     9f2:	8f 93       	push	r24
     9f4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
	move_terminal_cursor(10,5);
     9f8:	65 e0       	ldi	r22, 0x05	; 5
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	8a e0       	ldi	r24, 0x0A	; 10
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <move_terminal_cursor>
	printf_P(PSTR(" /      \\ |  \\   |  \\|       \\       |  \\  |  \\"));
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	93 e0       	ldi	r25, 0x03	; 3
     a08:	9f 93       	push	r25
     a0a:	8f 93       	push	r24
     a0c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
	move_terminal_cursor(10,6);
     a10:	66 e0       	ldi	r22, 0x06	; 6
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	8a e0       	ldi	r24, 0x0A	; 10
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <move_terminal_cursor>
	printf_P(PSTR("|  $$$$$$\\| $$   | $$| $$$$$$$\\      | $$  | $$  ______    ______    ______"));
     a1c:	85 eb       	ldi	r24, 0xB5	; 181
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	9f 93       	push	r25
     a22:	8f 93       	push	r24
     a24:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
	move_terminal_cursor(10,7);
     a28:	67 e0       	ldi	r22, 0x07	; 7
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	8a e0       	ldi	r24, 0x0A	; 10
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <move_terminal_cursor>
	printf_P(PSTR("| $$__| $$| $$   | $$| $$__| $$      | $$__| $$ /      \\  /      \\  /      \\"));
     a34:	88 e6       	ldi	r24, 0x68	; 104
     a36:	92 e0       	ldi	r25, 0x02	; 2
     a38:	9f 93       	push	r25
     a3a:	8f 93       	push	r24
     a3c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
	move_terminal_cursor(10,8);
     a40:	68 e0       	ldi	r22, 0x08	; 8
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	8a e0       	ldi	r24, 0x0A	; 10
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <move_terminal_cursor>
	printf_P(PSTR("| $$    $$ \\$$\\ /  $$| $$    $$      | $$    $$|  $$$$$$\\|  $$$$$$\\|  $$$$$$\\"));
     a4c:	8a e1       	ldi	r24, 0x1A	; 26
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	9f 93       	push	r25
     a52:	8f 93       	push	r24
     a54:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
	move_terminal_cursor(10,9);
     a58:	69 e0       	ldi	r22, 0x09	; 9
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	8a e0       	ldi	r24, 0x0A	; 10
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <move_terminal_cursor>
	printf_P(PSTR("| $$$$$$$$  \\$$\\  $$ | $$$$$$$\\      | $$$$$$$$| $$    $$| $$   \\$$| $$  | $$"));
     a64:	8c ec       	ldi	r24, 0xCC	; 204
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	9f 93       	push	r25
     a6a:	8f 93       	push	r24
     a6c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
	move_terminal_cursor(10,10);
     a70:	6a e0       	ldi	r22, 0x0A	; 10
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	8a e0       	ldi	r24, 0x0A	; 10
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$   \\$$ $$  | $$  | $$      | $$  | $$| $$$$$$$$| $$      | $$__/ $$"));
     a7c:	8e e7       	ldi	r24, 0x7E	; 126
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	9f 93       	push	r25
     a82:	8f 93       	push	r24
     a84:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
	move_terminal_cursor(10,11);
     a88:	6b e0       	ldi	r22, 0x0B	; 11
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	8a e0       	ldi	r24, 0x0A	; 10
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$    \\$$$   | $$  | $$      | $$  | $$ \\$$     \\| $$       \\$$    $$"));
     a94:	80 e3       	ldi	r24, 0x30	; 48
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	9f 93       	push	r25
     a9a:	8f 93       	push	r24
     a9c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
	move_terminal_cursor(10,12);
     aa0:	6c e0       	ldi	r22, 0x0C	; 12
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	8a e0       	ldi	r24, 0x0A	; 10
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <move_terminal_cursor>
	printf_P(PSTR(" \\$$   \\$$     \\$     \\$$   \\$$       \\$$   \\$$  \\$$$$$$$ \\$$        \\$$$$$$"));
     aac:	83 ee       	ldi	r24, 0xE3	; 227
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	9f 93       	push	r25
     ab2:	8f 93       	push	r24
     ab4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
	move_terminal_cursor(10,14);
     ab8:	6e e0       	ldi	r22, 0x0E	; 14
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	8a e0       	ldi	r24, 0x0A	; 10
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <move_terminal_cursor>
	// change this to your name and student number; remove the chevrons <>
	printf_P(PSTR("CSSE2010/7201 A2 by  Cailin Delgado - 48027942"));
     ac4:	84 eb       	ldi	r24, 0xB4	; 180
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	9f 93       	push	r25
     aca:	8f 93       	push	r24
     acc:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
     ad0:	0e 94 a0 02 	call	0x540	; 0x540 <show_start_screen>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
     ad4:	0e 94 23 08 	call	0x1046	; 0x1046 <get_current_time>
     ad8:	4b 01       	movw	r8, r22
     ada:	5c 01       	movw	r10, r24
	
	uint8_t frame_number = 0;
	game_speed = 1000;
     adc:	88 ee       	ldi	r24, 0xE8	; 232
     ade:	93 e0       	ldi	r25, 0x03	; 3
     ae0:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <game_speed+0x1>
     ae4:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <game_speed>
     ae8:	8d b7       	in	r24, 0x3d	; 61
     aea:	9e b7       	in	r25, 0x3e	; 62
     aec:	44 96       	adiw	r24, 0x14	; 20
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	9e bf       	out	0x3e, r25	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	8d bf       	out	0x3d, r24	; 61
	show_start_screen();

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
	
	uint8_t frame_number = 0;
     af8:	c0 e0       	ldi	r28, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available())
     afa:	0e 94 01 07 	call	0xe02	; 0xe02 <serial_input_available>
     afe:	88 23       	and	r24, r24
     b00:	39 f0       	breq	.+14     	; 0xb10 <start_screen+0x162>
		{
			serial_input = fgetc(stdin);
     b02:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <__iob>
     b06:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <__iob+0x1>
     b0a:	0e 94 b0 08 	call	0x1160	; 0x1160 <fgetc>
     b0e:	01 c0       	rjmp	.+2      	; 0xb12 <start_screen+0x164>
	{
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     b10:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available())
		{
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S')
     b12:	83 37       	cpi	r24, 0x73	; 115
     b14:	99 f1       	breq	.+102    	; 0xb7c <start_screen+0x1ce>
     b16:	83 35       	cpi	r24, 0x53	; 83
     b18:	89 f1       	breq	.+98     	; 0xb7c <start_screen+0x1ce>
		{
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
     b1a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <button_pushed>
		if (btn != NO_BUTTON_PUSHED)
     b1e:	8f 3f       	cpi	r24, 0xFF	; 255
     b20:	69 f5       	brne	.+90     	; 0xb7c <start_screen+0x1ce>
		{
			break;
		}

		// every 200 ms, update the animation
		current_time = get_current_time();
     b22:	0e 94 23 08 	call	0x1046	; 0x1046 <get_current_time>
     b26:	6b 01       	movw	r12, r22
     b28:	7c 01       	movw	r14, r24
		if (current_time - last_screen_update > game_speed/5)
     b2a:	2b 01       	movw	r4, r22
     b2c:	3c 01       	movw	r6, r24
     b2e:	48 18       	sub	r4, r8
     b30:	59 08       	sbc	r5, r9
     b32:	6a 08       	sbc	r6, r10
     b34:	7b 08       	sbc	r7, r11
     b36:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <game_speed>
     b3a:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <game_speed+0x1>
     b3e:	ad ec       	ldi	r26, 0xCD	; 205
     b40:	bc ec       	ldi	r27, 0xCC	; 204
     b42:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__umulhisi3>
     b46:	96 95       	lsr	r25
     b48:	87 95       	ror	r24
     b4a:	96 95       	lsr	r25
     b4c:	87 95       	ror	r24
     b4e:	a0 e0       	ldi	r26, 0x00	; 0
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	84 15       	cp	r24, r4
     b54:	95 05       	cpc	r25, r5
     b56:	a6 05       	cpc	r26, r6
     b58:	b7 05       	cpc	r27, r7
     b5a:	78 f6       	brcc	.-98     	; 0xafa <start_screen+0x14c>
		{
			update_start_screen(frame_number);
     b5c:	8c 2f       	mov	r24, r28
     b5e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <update_start_screen>
			frame_number = (frame_number + 1) % 32;
     b62:	d0 e0       	ldi	r29, 0x00	; 0
     b64:	21 96       	adiw	r28, 0x01	; 1
     b66:	cf 71       	andi	r28, 0x1F	; 31
     b68:	d0 78       	andi	r29, 0x80	; 128
     b6a:	dd 23       	and	r29, r29
     b6c:	24 f4       	brge	.+8      	; 0xb76 <start_screen+0x1c8>
     b6e:	21 97       	sbiw	r28, 0x01	; 1
     b70:	c0 6e       	ori	r28, 0xE0	; 224
     b72:	df 6f       	ori	r29, 0xFF	; 255
     b74:	21 96       	adiw	r28, 0x01	; 1
			last_screen_update = current_time;
     b76:	46 01       	movw	r8, r12
     b78:	57 01       	movw	r10, r14
     b7a:	bf cf       	rjmp	.-130    	; 0xafa <start_screen+0x14c>
		}
	}
}
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	cf 90       	pop	r12
     b88:	bf 90       	pop	r11
     b8a:	af 90       	pop	r10
     b8c:	9f 90       	pop	r9
     b8e:	8f 90       	pop	r8
     b90:	7f 90       	pop	r7
     b92:	6f 90       	pop	r6
     b94:	5f 90       	pop	r5
     b96:	4f 90       	pop	r4
     b98:	08 95       	ret

00000b9a <new_game>:

void new_game(void)
{
	// Clear the serial terminal
	clear_terminal();
     b9a:	0e 94 e5 07 	call	0xfca	; 0xfca <clear_terminal>
	
	// Initialise the game and display
	initialise_game();
     b9e:	0e 94 49 03 	call	0x692	; 0x692 <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     ba2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <button_pushed>
	clear_serial_input_buffer();
     ba6:	0e 94 08 07 	call	0xe10	; 0xe10 <clear_serial_input_buffer>
     baa:	08 95       	ret

00000bac <play_game>:
}

void play_game(void)
{
     bac:	8f 92       	push	r8
     bae:	9f 92       	push	r9
     bb0:	af 92       	push	r10
     bb2:	bf 92       	push	r11
     bb4:	cf 92       	push	r12
     bb6:	df 92       	push	r13
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
	
	uint32_t last_advance_time, current_time;
	int8_t btn; // The button pushed
	
	last_advance_time = get_current_time();
     bbc:	0e 94 23 08 	call	0x1046	; 0x1046 <get_current_time>
     bc0:	4b 01       	movw	r8, r22
     bc2:	5c 01       	movw	r10, r24
	
	// We play the game until it's over
	while (!is_game_over())
     bc4:	38 c0       	rjmp	.+112    	; 0xc36 <play_game+0x8a>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
     bc6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <button_pushed>
		
		if (btn == BUTTON0_PUSHED) {
     bca:	81 11       	cpse	r24, r1
     bcc:	04 c0       	rjmp	.+8      	; 0xbd6 <play_game+0x2a>
			// If button 0 play the lowest note (right lane)
			play_note(3); //bitwise lane is the left-most lane, button lane is the rightmost lane
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <play_note>
     bd4:	11 c0       	rjmp	.+34     	; 0xbf8 <play_game+0x4c>
		
		} else if (btn == BUTTON1_PUSHED) {
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <play_game+0x36>
			//If button 1 is pushed play the second lowest note
			play_note(2);
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <play_note>
     be0:	0b c0       	rjmp	.+22     	; 0xbf8 <play_game+0x4c>
		
		} else if (btn == BUTTON2_PUSHED) {
     be2:	82 30       	cpi	r24, 0x02	; 2
     be4:	21 f4       	brne	.+8      	; 0xbee <play_game+0x42>
			//If button 2 is pushed play the second highest note
			play_note(1); 
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <play_note>
     bec:	05 c0       	rjmp	.+10     	; 0xbf8 <play_game+0x4c>
			
		} else if (btn == BUTTON3_PUSHED) {
     bee:	83 30       	cpi	r24, 0x03	; 3
     bf0:	19 f4       	brne	.+6      	; 0xbf8 <play_game+0x4c>
			//If button 3 is pushed play the highest note
			play_note(0);
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <play_note>
		}
		
		current_time = get_current_time();
     bf8:	0e 94 23 08 	call	0x1046	; 0x1046 <get_current_time>
     bfc:	6b 01       	movw	r12, r22
     bfe:	7c 01       	movw	r14, r24
		if (current_time >= last_advance_time + game_speed/5)
     c00:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <game_speed>
     c04:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <game_speed+0x1>
     c08:	ad ec       	ldi	r26, 0xCD	; 205
     c0a:	bc ec       	ldi	r27, 0xCC	; 204
     c0c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__umulhisi3>
     c10:	96 95       	lsr	r25
     c12:	87 95       	ror	r24
     c14:	96 95       	lsr	r25
     c16:	87 95       	ror	r24
     c18:	a5 01       	movw	r20, r10
     c1a:	94 01       	movw	r18, r8
     c1c:	28 0f       	add	r18, r24
     c1e:	39 1f       	adc	r19, r25
     c20:	41 1d       	adc	r20, r1
     c22:	51 1d       	adc	r21, r1
     c24:	c2 16       	cp	r12, r18
     c26:	d3 06       	cpc	r13, r19
     c28:	e4 06       	cpc	r14, r20
     c2a:	f5 06       	cpc	r15, r21
     c2c:	20 f0       	brcs	.+8      	; 0xc36 <play_game+0x8a>
		{
			// 200ms (0.2 second) has passed since the last time we advance the
			// notes here, so update the advance the notes
			advance_note();
     c2e:	0e 94 95 03 	call	0x72a	; 0x72a <advance_note>
			
			// Update the most recent time the notes were advance
			last_advance_time = current_time;
     c32:	46 01       	movw	r8, r12
     c34:	57 01       	movw	r10, r14
	int8_t btn; // The button pushed
	
	last_advance_time = get_current_time();
	
	// We play the game until it's over
	while (!is_game_over())
     c36:	0e 94 7e 04 	call	0x8fc	; 0x8fc <is_game_over>
     c3a:	88 23       	and	r24, r24
     c3c:	21 f2       	breq	.-120    	; 0xbc6 <play_game+0x1a>
			// Update the most recent time the notes were advance
			last_advance_time = current_time;
		}
	}
	// We get here if the game is over.
}
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	bf 90       	pop	r11
     c48:	af 90       	pop	r10
     c4a:	9f 90       	pop	r9
     c4c:	8f 90       	pop	r8
     c4e:	08 95       	ret

00000c50 <handle_game_over>:

void handle_game_over()
{
	move_terminal_cursor(10,14);
     c50:	6e e0       	ldi	r22, 0x0E	; 14
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	8a e0       	ldi	r24, 0x0A	; 10
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     c5c:	8a ea       	ldi	r24, 0xAA	; 170
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	9f 93       	push	r25
     c62:	8f 93       	push	r24
     c64:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
	move_terminal_cursor(10,15);
     c68:	6f e0       	ldi	r22, 0x0F	; 15
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	8a e0       	ldi	r24, 0x0A	; 10
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
     c74:	8c e7       	ldi	r24, 0x7C	; 124
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	9f 93       	push	r25
     c7a:	8f 93       	push	r24
     c7c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <button_pushed>
     c8c:	8f 3f       	cpi	r24, 0xFF	; 255
     c8e:	e1 f3       	breq	.-8      	; 0xc88 <handle_game_over+0x38>
	{
		; // wait
	}
}
     c90:	08 95       	ret

00000c92 <main>:
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     c92:	0e 94 c4 04 	call	0x988	; 0x988 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
     c96:	0e 94 d7 04 	call	0x9ae	; 0x9ae <start_screen>
	
	// Loop forever and continuously play the game.
	while(1)
	{
		new_game();
     c9a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <new_game>
		play_game();
     c9e:	0e 94 d6 05 	call	0xbac	; 0xbac <play_game>
		handle_game_over();
     ca2:	0e 94 28 06 	call	0xc50	; 0xc50 <handle_game_over>
     ca6:	f9 cf       	rjmp	.-14     	; 0xc9a <main+0x8>

00000ca8 <uart_put_char>:
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream)
{
     ca8:	cf 93       	push	r28
     caa:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n')
     cac:	8a 30       	cpi	r24, 0x0A	; 10
     cae:	19 f4       	brne	.+6      	; 0xcb6 <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
     cb0:	8d e0       	ldi	r24, 0x0D	; 13
     cb2:	0e 94 54 06 	call	0xca8	; 0xca8 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     cb6:	9f b7       	in	r25, 0x3f	; 63
     cb8:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
     cbc:	99 23       	and	r25, r25
     cbe:	29 f1       	breq	.+74     	; 0xd0a <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
     cc0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
     cc4:	8f 3f       	cpi	r24, 0xFF	; 255
     cc6:	d1 f3       	breq	.-12     	; 0xcbc <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     cc8:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     cca:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <out_insert_pos>
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	8e 0f       	add	r24, r30
     cd2:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <out_insert_pos>
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	ef 54       	subi	r30, 0x4F	; 79
     cda:	fe 4f       	sbci	r31, 0xFE	; 254
     cdc:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     cde:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
     ce2:	8f 5f       	subi	r24, 0xFF	; 255
     ce4:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
     ce8:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <out_insert_pos>
     cec:	8f 3f       	cpi	r24, 0xFF	; 255
     cee:	11 f4       	brne	.+4      	; 0xcf4 <uart_put_char+0x4c>
	{
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     cf0:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     cf4:	e1 ec       	ldi	r30, 0xC1	; 193
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	80 62       	ori	r24, 0x20	; 32
     cfc:	80 83       	st	Z, r24
	if (interrupts_enabled)
     cfe:	99 23       	and	r25, r25
     d00:	39 f0       	breq	.+14     	; 0xd10 <uart_put_char+0x68>
	{
		sei();
     d02:	78 94       	sei
	}
	return 0;
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	05 c0       	rjmp	.+10     	; 0xd14 <uart_put_char+0x6c>
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	90 e0       	ldi	r25, 0x00	; 0
}
     d14:	cf 91       	pop	r28
     d16:	08 95       	ret

00000d18 <uart_get_char>:

int uart_get_char(FILE* stream)
{
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0)
     d18:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
     d1c:	88 23       	and	r24, r24
     d1e:	e1 f3       	breq	.-8      	; 0xd18 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     d20:	2f b7       	in	r18, 0x3f	; 63
     d22:	20 78       	andi	r18, 0x80	; 128
	cli();
     d24:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
     d26:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <input_insert_pos>
     d2a:	30 91 c2 02 	lds	r19, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	83 1b       	sub	r24, r19
     d32:	91 09       	sbc	r25, r1
     d34:	5a f4       	brpl	.+22     	; 0xd4c <uart_get_char+0x34>
	{
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     d36:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <input_insert_pos>
     d3a:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	e8 1b       	sub	r30, r24
     d42:	f1 09       	sbc	r31, r1
     d44:	ef 53       	subi	r30, 0x3F	; 63
     d46:	fd 4f       	sbci	r31, 0xFD	; 253
     d48:	80 81       	ld	r24, Z
     d4a:	0a c0       	rjmp	.+20     	; 0xd60 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     d4c:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <input_insert_pos>
     d50:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	e8 1b       	sub	r30, r24
     d58:	f1 09       	sbc	r31, r1
     d5a:	ef 54       	subi	r30, 0x4F	; 79
     d5c:	fd 4f       	sbci	r31, 0xFD	; 253
     d5e:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     d60:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
     d64:	91 50       	subi	r25, 0x01	; 1
     d66:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <bytes_in_input_buffer>
	if (interrupts_enabled)
     d6a:	22 23       	and	r18, r18
     d6c:	09 f0       	breq	.+2      	; 0xd70 <uart_get_char+0x58>
	{
		sei();
     d6e:	78 94       	sei
	}	
	return c;
}
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	08 95       	ret

00000d74 <init_serial_stdio>:
{
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     d74:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <out_insert_pos>
	bytes_in_out_buffer = 0;
     d78:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <bytes_in_out_buffer>
	input_insert_pos = 0;
     d7c:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <input_insert_pos>
	bytes_in_input_buffer = 0;
     d80:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <bytes_in_input_buffer>
	input_overrun = 0;
     d84:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     d88:	40 93 a6 01 	sts	0x01A6, r20	; 0x8001a6 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	aa 1f       	adc	r26, r26
     d96:	bb 1f       	adc	r27, r27
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	aa 1f       	adc	r26, r26
     d9e:	bb 1f       	adc	r27, r27
     da0:	9c 01       	movw	r18, r24
     da2:	ad 01       	movw	r20, r26
     da4:	22 0f       	add	r18, r18
     da6:	33 1f       	adc	r19, r19
     da8:	44 1f       	adc	r20, r20
     daa:	55 1f       	adc	r21, r21
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	72 e1       	ldi	r23, 0x12	; 18
     db0:	8a e7       	ldi	r24, 0x7A	; 122
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__divmodsi4>
     db8:	ba 01       	movw	r22, r20
     dba:	a9 01       	movw	r20, r18
     dbc:	4f 5f       	subi	r20, 0xFF	; 255
     dbe:	5f 4f       	sbci	r21, 0xFF	; 255
     dc0:	6f 4f       	sbci	r22, 0xFF	; 255
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	db 01       	movw	r26, r22
     dc6:	ca 01       	movw	r24, r20
     dc8:	1a f4       	brpl	.+6      	; 0xdd0 <init_serial_stdio+0x5c>
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	a1 1d       	adc	r26, r1
     dce:	b1 1d       	adc	r27, r1
     dd0:	b5 95       	asr	r27
     dd2:	a7 95       	ror	r26
     dd4:	97 95       	ror	r25
     dd6:	87 95       	ror	r24
     dd8:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     dda:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     dde:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     de2:	e1 ec       	ldi	r30, 0xC1	; 193
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	88 e1       	ldi	r24, 0x18	; 24
     de8:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
     dea:	80 81       	ld	r24, Z
     dec:	80 68       	ori	r24, 0x80	; 128
     dee:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     df0:	e3 ec       	ldi	r30, 0xC3	; 195
     df2:	f2 e0       	ldi	r31, 0x02	; 2
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	93 83       	std	Z+3, r25	; 0x03
     dfa:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     dfc:	91 83       	std	Z+1, r25	; 0x01
     dfe:	80 83       	st	Z, r24
     e00:	08 95       	ret

00000e02 <serial_input_available>:
}

int8_t serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
     e02:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	91 11       	cpse	r25, r1
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <serial_input_available+0xc>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
}
     e0e:	08 95       	ret

00000e10 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     e10:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <input_insert_pos>
	bytes_in_input_buffer = 0;
     e14:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <bytes_in_input_buffer>
     e18:	08 95       	ret

00000e1a <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     e1a:	1f 92       	push	r1
     e1c:	0f 92       	push	r0
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	0f 92       	push	r0
     e22:	11 24       	eor	r1, r1
     e24:	2f 93       	push	r18
     e26:	8f 93       	push	r24
     e28:	9f 93       	push	r25
     e2a:	ef 93       	push	r30
     e2c:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0)
     e2e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
     e32:	88 23       	and	r24, r24
     e34:	29 f1       	breq	.+74     	; 0xe80 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
     e36:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <out_insert_pos>
     e3a:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	82 1b       	sub	r24, r18
     e42:	91 09       	sbc	r25, r1
     e44:	5a f4       	brpl	.+22     	; 0xe5c <__vector_21+0x42>
		{
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     e46:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <out_insert_pos>
     e4a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	e8 1b       	sub	r30, r24
     e52:	f1 09       	sbc	r31, r1
     e54:	e0 55       	subi	r30, 0x50	; 80
     e56:	fd 4f       	sbci	r31, 0xFD	; 253
     e58:	90 81       	ld	r25, Z
     e5a:	0a c0       	rjmp	.+20     	; 0xe70 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     e5c:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <out_insert_pos>
     e60:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	e8 1b       	sub	r30, r24
     e68:	f1 09       	sbc	r31, r1
     e6a:	ef 54       	subi	r30, 0x4F	; 79
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     e70:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
     e74:	81 50       	subi	r24, 0x01	; 1
     e76:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     e7a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     e7e:	05 c0       	rjmp	.+10     	; 0xe8a <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
     e80:	e1 ec       	ldi	r30, 0xC1	; 193
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8f 7d       	andi	r24, 0xDF	; 223
     e88:	80 83       	st	Z, r24
	}
}
     e8a:	ff 91       	pop	r31
     e8c:	ef 91       	pop	r30
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	2f 91       	pop	r18
     e94:	0f 90       	pop	r0
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	0f 90       	pop	r0
     e9a:	1f 90       	pop	r1
     e9c:	18 95       	reti

00000e9e <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     e9e:	1f 92       	push	r1
     ea0:	0f 92       	push	r0
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	0f 92       	push	r0
     ea6:	11 24       	eor	r1, r1
     ea8:	2f 93       	push	r18
     eaa:	3f 93       	push	r19
     eac:	4f 93       	push	r20
     eae:	5f 93       	push	r21
     eb0:	6f 93       	push	r22
     eb2:	7f 93       	push	r23
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	af 93       	push	r26
     eba:	bf 93       	push	r27
     ebc:	cf 93       	push	r28
     ebe:	ef 93       	push	r30
     ec0:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     ec2:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
     ec6:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <do_echo>
     eca:	88 23       	and	r24, r24
     ecc:	49 f0       	breq	.+18     	; 0xee0 <__vector_20+0x42>
     ece:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
     ed2:	8f 3f       	cpi	r24, 0xFF	; 255
     ed4:	29 f0       	breq	.+10     	; 0xee0 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	8c 2f       	mov	r24, r28
     edc:	0e 94 54 06 	call	0xca8	; 0xca8 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
     ee0:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
     ee4:	80 31       	cpi	r24, 0x10	; 16
     ee6:	20 f0       	brcs	.+8      	; 0xef0 <__vector_20+0x52>
	{
		input_overrun = 1;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <input_overrun>
     eee:	18 c0       	rjmp	.+48     	; 0xf20 <__vector_20+0x82>
	} else
	{
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r')
     ef0:	cd 30       	cpi	r28, 0x0D	; 13
     ef2:	09 f4       	brne	.+2      	; 0xef6 <__vector_20+0x58>
		{
			c = '\n';
     ef4:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     ef6:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <input_insert_pos>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	8e 0f       	add	r24, r30
     efe:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <input_insert_pos>
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	ef 54       	subi	r30, 0x4F	; 79
     f06:	fd 4f       	sbci	r31, 0xFD	; 253
     f08:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     f0a:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
     f0e:	8f 5f       	subi	r24, 0xFF	; 255
     f10:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
     f14:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <input_insert_pos>
     f18:	80 31       	cpi	r24, 0x10	; 16
     f1a:	11 f4       	brne	.+4      	; 0xf20 <__vector_20+0x82>
		{
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     f1c:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <input_insert_pos>
		}
	}
}
     f20:	ff 91       	pop	r31
     f22:	ef 91       	pop	r30
     f24:	cf 91       	pop	r28
     f26:	bf 91       	pop	r27
     f28:	af 91       	pop	r26
     f2a:	9f 91       	pop	r25
     f2c:	8f 91       	pop	r24
     f2e:	7f 91       	pop	r23
     f30:	6f 91       	pop	r22
     f32:	5f 91       	pop	r21
     f34:	4f 91       	pop	r20
     f36:	3f 91       	pop	r19
     f38:	2f 91       	pop	r18
     f3a:	0f 90       	pop	r0
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	0f 90       	pop	r0
     f40:	1f 90       	pop	r1
     f42:	18 95       	reti

00000f44 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider)
{
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
     f44:	94 b1       	in	r25, 0x04	; 4
     f46:	90 6b       	ori	r25, 0xB0	; 176
     f48:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
     f4a:	95 b1       	in	r25, 0x05	; 5
     f4c:	90 61       	ori	r25, 0x10	; 16
     f4e:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
     f50:	90 e5       	ldi	r25, 0x50	; 80
     f52:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider)
     f54:	88 30       	cpi	r24, 0x08	; 8
     f56:	21 f0       	breq	.+8      	; 0xf60 <spi_setup_master+0x1c>
     f58:	80 32       	cpi	r24, 0x20	; 32
     f5a:	11 f0       	breq	.+4      	; 0xf60 <spi_setup_master+0x1c>
     f5c:	82 30       	cpi	r24, 0x02	; 2
     f5e:	19 f4       	brne	.+6      	; 0xf66 <spi_setup_master+0x22>
	{
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	9d bd       	out	0x2d, r25	; 45
			break;
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
     f66:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
     f68:	80 32       	cpi	r24, 0x20	; 32
     f6a:	69 f0       	breq	.+26     	; 0xf86 <spi_setup_master+0x42>
     f6c:	28 f4       	brcc	.+10     	; 0xf78 <spi_setup_master+0x34>
     f6e:	88 30       	cpi	r24, 0x08	; 8
     f70:	71 f0       	breq	.+28     	; 0xf8e <spi_setup_master+0x4a>
     f72:	80 31       	cpi	r24, 0x10	; 16
     f74:	61 f0       	breq	.+24     	; 0xf8e <spi_setup_master+0x4a>
     f76:	0e c0       	rjmp	.+28     	; 0xf94 <spi_setup_master+0x50>
     f78:	80 34       	cpi	r24, 0x40	; 64
     f7a:	29 f0       	breq	.+10     	; 0xf86 <spi_setup_master+0x42>
     f7c:	80 38       	cpi	r24, 0x80	; 128
     f7e:	51 f4       	brne	.+20     	; 0xf94 <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
     f80:	8c b5       	in	r24, 0x2c	; 44
     f82:	81 60       	ori	r24, 0x01	; 1
     f84:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
     f86:	8c b5       	in	r24, 0x2c	; 44
     f88:	82 60       	ori	r24, 0x02	; 2
     f8a:	8c bd       	out	0x2c, r24	; 44
			break;
     f8c:	03 c0       	rjmp	.+6      	; 0xf94 <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
     f8e:	8c b5       	in	r24, 0x2c	; 44
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
     f94:	85 b1       	in	r24, 0x05	; 5
     f96:	8f 7e       	andi	r24, 0xEF	; 239
     f98:	85 b9       	out	0x05, r24	; 5
     f9a:	08 95       	ret

00000f9c <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
     f9c:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
     f9e:	0d b4       	in	r0, 0x2d	; 45
     fa0:	07 fe       	sbrs	r0, 7
     fa2:	fd cf       	rjmp	.-6      	; 0xf9e <spi_send_byte+0x2>
	{
		; // wait
	}
	return SPDR0;
     fa4:	8e b5       	in	r24, 0x2e	; 46
}
     fa6:	08 95       	ret

00000fa8 <move_terminal_cursor>:
}

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
}
     fa8:	9f 93       	push	r25
     faa:	8f 93       	push	r24
     fac:	7f 93       	push	r23
     fae:	6f 93       	push	r22
     fb0:	89 e7       	ldi	r24, 0x79	; 121
     fb2:	93 e0       	ldi	r25, 0x03	; 3
     fb4:	9f 93       	push	r25
     fb6:	8f 93       	push	r24
     fb8:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	08 95       	ret

00000fca <clear_terminal>:
     fca:	84 e7       	ldi	r24, 0x74	; 116
     fcc:	93 e0       	ldi	r25, 0x03	; 3
     fce:	9f 93       	push	r25
     fd0:	8f 93       	push	r24
     fd2:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	08 95       	ret

00000fdc <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
     fdc:	1f 92       	push	r1
     fde:	8f 93       	push	r24
     fe0:	8e e6       	ldi	r24, 0x6E	; 110
     fe2:	93 e0       	ldi	r25, 0x03	; 3
     fe4:	9f 93       	push	r25
     fe6:	8f 93       	push	r24
     fe8:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
}
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	08 95       	ret

00000ff6 <hide_cursor>:

void hide_cursor()
{
	printf_P(PSTR("\x1b[?25l"));
     ff6:	87 e6       	ldi	r24, 0x67	; 103
     ff8:	93 e0       	ldi	r25, 0x03	; 3
     ffa:	9f 93       	push	r25
     ffc:	8f 93       	push	r24
     ffe:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	08 95       	ret

00001008 <show_cursor>:

void show_cursor()
{
	printf_P(PSTR("\x1b[?25h"));
    1008:	80 e6       	ldi	r24, 0x60	; 96
    100a:	93 e0       	ldi	r25, 0x03	; 3
    100c:	9f 93       	push	r25
    100e:	8f 93       	push	r24
    1010:	0e 94 ee 08 	call	0x11dc	; 0x11dc <printf_P>
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	08 95       	ret

0000101a <init_timer0>:
void init_timer0(void)
{
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
    101a:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <clock_ticks_ms>
    101e:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <clock_ticks_ms+0x1>
    1022:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <clock_ticks_ms+0x2>
    1026:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    102a:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    102c:	8c e7       	ldi	r24, 0x7C	; 124
    102e:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
    1030:	92 e0       	ldi	r25, 0x02	; 2
    1032:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
    1038:	ee e6       	ldi	r30, 0x6E	; 110
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	82 60       	ori	r24, 0x02	; 2
    1040:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
    1042:	95 bb       	out	0x15, r25	; 21
    1044:	08 95       	ret

00001046 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    1046:	8f b7       	in	r24, 0x3f	; 63
    1048:	28 2f       	mov	r18, r24
    104a:	20 78       	andi	r18, 0x80	; 128
	cli();
    104c:	f8 94       	cli
	return_value = clock_ticks_ms;
    104e:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <clock_ticks_ms>
    1052:	70 91 a8 01 	lds	r23, 0x01A8	; 0x8001a8 <clock_ticks_ms+0x1>
    1056:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <clock_ticks_ms+0x2>
    105a:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    105e:	22 23       	and	r18, r18
    1060:	09 f0       	breq	.+2      	; 0x1064 <get_current_time+0x1e>
	{
		sei();
    1062:	78 94       	sei
	}
	return return_value;
}
    1064:	08 95       	ret

00001066 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
    1066:	1f 92       	push	r1
    1068:	0f 92       	push	r0
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	0f 92       	push	r0
    106e:	11 24       	eor	r1, r1
    1070:	8f 93       	push	r24
    1072:	9f 93       	push	r25
    1074:	af 93       	push	r26
    1076:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
    1078:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <clock_ticks_ms>
    107c:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <clock_ticks_ms+0x1>
    1080:	a0 91 a9 01 	lds	r26, 0x01A9	; 0x8001a9 <clock_ticks_ms+0x2>
    1084:	b0 91 aa 01 	lds	r27, 0x01AA	; 0x8001aa <clock_ticks_ms+0x3>
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	a1 1d       	adc	r26, r1
    108c:	b1 1d       	adc	r27, r1
    108e:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <clock_ticks_ms>
    1092:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <clock_ticks_ms+0x1>
    1096:	a0 93 a9 01 	sts	0x01A9, r26	; 0x8001a9 <clock_ticks_ms+0x2>
    109a:	b0 93 aa 01 	sts	0x01AA, r27	; 0x8001aa <clock_ticks_ms+0x3>
}
    109e:	bf 91       	pop	r27
    10a0:	af 91       	pop	r26
    10a2:	9f 91       	pop	r25
    10a4:	8f 91       	pop	r24
    10a6:	0f 90       	pop	r0
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	0f 90       	pop	r0
    10ac:	1f 90       	pop	r1
    10ae:	18 95       	reti

000010b0 <init_timer1>:

/* Set up timer 1
 */
void init_timer1(void)
{
	TCNT1 = 0;
    10b0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    10b4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    10b8:	08 95       	ret

000010ba <init_timer2>:

/* Set up timer 2
 */
void init_timer2(void)
{
	TCNT2 = 0;
    10ba:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    10be:	08 95       	ret

000010c0 <__divmodsi4>:
    10c0:	05 2e       	mov	r0, r21
    10c2:	97 fb       	bst	r25, 7
    10c4:	1e f4       	brtc	.+6      	; 0x10cc <__divmodsi4+0xc>
    10c6:	00 94       	com	r0
    10c8:	0e 94 77 08 	call	0x10ee	; 0x10ee <__negsi2>
    10cc:	57 fd       	sbrc	r21, 7
    10ce:	07 d0       	rcall	.+14     	; 0x10de <__divmodsi4_neg2>
    10d0:	0e 94 8e 08 	call	0x111c	; 0x111c <__udivmodsi4>
    10d4:	07 fc       	sbrc	r0, 7
    10d6:	03 d0       	rcall	.+6      	; 0x10de <__divmodsi4_neg2>
    10d8:	4e f4       	brtc	.+18     	; 0x10ec <__divmodsi4_exit>
    10da:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__negsi2>

000010de <__divmodsi4_neg2>:
    10de:	50 95       	com	r21
    10e0:	40 95       	com	r20
    10e2:	30 95       	com	r19
    10e4:	21 95       	neg	r18
    10e6:	3f 4f       	sbci	r19, 0xFF	; 255
    10e8:	4f 4f       	sbci	r20, 0xFF	; 255
    10ea:	5f 4f       	sbci	r21, 0xFF	; 255

000010ec <__divmodsi4_exit>:
    10ec:	08 95       	ret

000010ee <__negsi2>:
    10ee:	90 95       	com	r25
    10f0:	80 95       	com	r24
    10f2:	70 95       	com	r23
    10f4:	61 95       	neg	r22
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	8f 4f       	sbci	r24, 0xFF	; 255
    10fa:	9f 4f       	sbci	r25, 0xFF	; 255
    10fc:	08 95       	ret

000010fe <__umulhisi3>:
    10fe:	a2 9f       	mul	r26, r18
    1100:	b0 01       	movw	r22, r0
    1102:	b3 9f       	mul	r27, r19
    1104:	c0 01       	movw	r24, r0
    1106:	a3 9f       	mul	r26, r19
    1108:	70 0d       	add	r23, r0
    110a:	81 1d       	adc	r24, r1
    110c:	11 24       	eor	r1, r1
    110e:	91 1d       	adc	r25, r1
    1110:	b2 9f       	mul	r27, r18
    1112:	70 0d       	add	r23, r0
    1114:	81 1d       	adc	r24, r1
    1116:	11 24       	eor	r1, r1
    1118:	91 1d       	adc	r25, r1
    111a:	08 95       	ret

0000111c <__udivmodsi4>:
    111c:	a1 e2       	ldi	r26, 0x21	; 33
    111e:	1a 2e       	mov	r1, r26
    1120:	aa 1b       	sub	r26, r26
    1122:	bb 1b       	sub	r27, r27
    1124:	fd 01       	movw	r30, r26
    1126:	0d c0       	rjmp	.+26     	; 0x1142 <__udivmodsi4_ep>

00001128 <__udivmodsi4_loop>:
    1128:	aa 1f       	adc	r26, r26
    112a:	bb 1f       	adc	r27, r27
    112c:	ee 1f       	adc	r30, r30
    112e:	ff 1f       	adc	r31, r31
    1130:	a2 17       	cp	r26, r18
    1132:	b3 07       	cpc	r27, r19
    1134:	e4 07       	cpc	r30, r20
    1136:	f5 07       	cpc	r31, r21
    1138:	20 f0       	brcs	.+8      	; 0x1142 <__udivmodsi4_ep>
    113a:	a2 1b       	sub	r26, r18
    113c:	b3 0b       	sbc	r27, r19
    113e:	e4 0b       	sbc	r30, r20
    1140:	f5 0b       	sbc	r31, r21

00001142 <__udivmodsi4_ep>:
    1142:	66 1f       	adc	r22, r22
    1144:	77 1f       	adc	r23, r23
    1146:	88 1f       	adc	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	1a 94       	dec	r1
    114c:	69 f7       	brne	.-38     	; 0x1128 <__udivmodsi4_loop>
    114e:	60 95       	com	r22
    1150:	70 95       	com	r23
    1152:	80 95       	com	r24
    1154:	90 95       	com	r25
    1156:	9b 01       	movw	r18, r22
    1158:	ac 01       	movw	r20, r24
    115a:	bd 01       	movw	r22, r26
    115c:	cf 01       	movw	r24, r30
    115e:	08 95       	ret

00001160 <fgetc>:
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	ec 01       	movw	r28, r24
    1166:	2b 81       	ldd	r18, Y+3	; 0x03
    1168:	20 ff       	sbrs	r18, 0
    116a:	33 c0       	rjmp	.+102    	; 0x11d2 <fgetc+0x72>
    116c:	26 ff       	sbrs	r18, 6
    116e:	0a c0       	rjmp	.+20     	; 0x1184 <fgetc+0x24>
    1170:	2f 7b       	andi	r18, 0xBF	; 191
    1172:	2b 83       	std	Y+3, r18	; 0x03
    1174:	8e 81       	ldd	r24, Y+6	; 0x06
    1176:	9f 81       	ldd	r25, Y+7	; 0x07
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	9f 83       	std	Y+7, r25	; 0x07
    117c:	8e 83       	std	Y+6, r24	; 0x06
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	29 c0       	rjmp	.+82     	; 0x11d6 <fgetc+0x76>
    1184:	22 ff       	sbrs	r18, 2
    1186:	0f c0       	rjmp	.+30     	; 0x11a6 <fgetc+0x46>
    1188:	e8 81       	ld	r30, Y
    118a:	f9 81       	ldd	r31, Y+1	; 0x01
    118c:	80 81       	ld	r24, Z
    118e:	08 2e       	mov	r0, r24
    1190:	00 0c       	add	r0, r0
    1192:	99 0b       	sbc	r25, r25
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	19 f4       	brne	.+6      	; 0x119e <fgetc+0x3e>
    1198:	20 62       	ori	r18, 0x20	; 32
    119a:	2b 83       	std	Y+3, r18	; 0x03
    119c:	1a c0       	rjmp	.+52     	; 0x11d2 <fgetc+0x72>
    119e:	31 96       	adiw	r30, 0x01	; 1
    11a0:	f9 83       	std	Y+1, r31	; 0x01
    11a2:	e8 83       	st	Y, r30
    11a4:	0e c0       	rjmp	.+28     	; 0x11c2 <fgetc+0x62>
    11a6:	ea 85       	ldd	r30, Y+10	; 0x0a
    11a8:	fb 85       	ldd	r31, Y+11	; 0x0b
    11aa:	09 95       	icall
    11ac:	97 ff       	sbrs	r25, 7
    11ae:	09 c0       	rjmp	.+18     	; 0x11c2 <fgetc+0x62>
    11b0:	2b 81       	ldd	r18, Y+3	; 0x03
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	11 f0       	breq	.+4      	; 0x11ba <fgetc+0x5a>
    11b6:	80 e2       	ldi	r24, 0x20	; 32
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <fgetc+0x5c>
    11ba:	80 e1       	ldi	r24, 0x10	; 16
    11bc:	82 2b       	or	r24, r18
    11be:	8b 83       	std	Y+3, r24	; 0x03
    11c0:	08 c0       	rjmp	.+16     	; 0x11d2 <fgetc+0x72>
    11c2:	2e 81       	ldd	r18, Y+6	; 0x06
    11c4:	3f 81       	ldd	r19, Y+7	; 0x07
    11c6:	2f 5f       	subi	r18, 0xFF	; 255
    11c8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ca:	3f 83       	std	Y+7, r19	; 0x07
    11cc:	2e 83       	std	Y+6, r18	; 0x06
    11ce:	99 27       	eor	r25, r25
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <fgetc+0x76>
    11d2:	8f ef       	ldi	r24, 0xFF	; 255
    11d4:	9f ef       	ldi	r25, 0xFF	; 255
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <printf_P>:
    11dc:	a0 e0       	ldi	r26, 0x00	; 0
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e4 ef       	ldi	r30, 0xF4	; 244
    11e2:	f8 e0       	ldi	r31, 0x08	; 8
    11e4:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <__prologue_saves__+0x1c>
    11e8:	ae 01       	movw	r20, r28
    11ea:	49 5f       	subi	r20, 0xF9	; 249
    11ec:	5f 4f       	sbci	r21, 0xFF	; 255
    11ee:	da 01       	movw	r26, r20
    11f0:	6d 91       	ld	r22, X+
    11f2:	7d 91       	ld	r23, X+
    11f4:	ad 01       	movw	r20, r26
    11f6:	03 ec       	ldi	r16, 0xC3	; 195
    11f8:	12 e0       	ldi	r17, 0x02	; 2
    11fa:	f8 01       	movw	r30, r16
    11fc:	82 81       	ldd	r24, Z+2	; 0x02
    11fe:	93 81       	ldd	r25, Z+3	; 0x03
    1200:	dc 01       	movw	r26, r24
    1202:	13 96       	adiw	r26, 0x03	; 3
    1204:	2c 91       	ld	r18, X
    1206:	13 97       	sbiw	r26, 0x03	; 3
    1208:	28 60       	ori	r18, 0x08	; 8
    120a:	13 96       	adiw	r26, 0x03	; 3
    120c:	2c 93       	st	X, r18
    120e:	0e 94 14 09 	call	0x1228	; 0x1228 <vfprintf>
    1212:	d8 01       	movw	r26, r16
    1214:	12 96       	adiw	r26, 0x02	; 2
    1216:	ed 91       	ld	r30, X+
    1218:	fc 91       	ld	r31, X
    121a:	13 97       	sbiw	r26, 0x03	; 3
    121c:	23 81       	ldd	r18, Z+3	; 0x03
    121e:	27 7f       	andi	r18, 0xF7	; 247
    1220:	23 83       	std	Z+3, r18	; 0x03
    1222:	e4 e0       	ldi	r30, 0x04	; 4
    1224:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__epilogue_restores__+0x1c>

00001228 <vfprintf>:
    1228:	ab e0       	ldi	r26, 0x0B	; 11
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ea e1       	ldi	r30, 0x1A	; 26
    122e:	f9 e0       	ldi	r31, 0x09	; 9
    1230:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__prologue_saves__>
    1234:	6c 01       	movw	r12, r24
    1236:	7b 01       	movw	r14, r22
    1238:	8a 01       	movw	r16, r20
    123a:	fc 01       	movw	r30, r24
    123c:	17 82       	std	Z+7, r1	; 0x07
    123e:	16 82       	std	Z+6, r1	; 0x06
    1240:	83 81       	ldd	r24, Z+3	; 0x03
    1242:	81 ff       	sbrs	r24, 1
    1244:	cc c1       	rjmp	.+920    	; 0x15de <vfprintf+0x3b6>
    1246:	ce 01       	movw	r24, r28
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	3c 01       	movw	r6, r24
    124c:	f6 01       	movw	r30, r12
    124e:	93 81       	ldd	r25, Z+3	; 0x03
    1250:	f7 01       	movw	r30, r14
    1252:	93 fd       	sbrc	r25, 3
    1254:	85 91       	lpm	r24, Z+
    1256:	93 ff       	sbrs	r25, 3
    1258:	81 91       	ld	r24, Z+
    125a:	7f 01       	movw	r14, r30
    125c:	88 23       	and	r24, r24
    125e:	09 f4       	brne	.+2      	; 0x1262 <vfprintf+0x3a>
    1260:	ba c1       	rjmp	.+884    	; 0x15d6 <vfprintf+0x3ae>
    1262:	85 32       	cpi	r24, 0x25	; 37
    1264:	39 f4       	brne	.+14     	; 0x1274 <vfprintf+0x4c>
    1266:	93 fd       	sbrc	r25, 3
    1268:	85 91       	lpm	r24, Z+
    126a:	93 ff       	sbrs	r25, 3
    126c:	81 91       	ld	r24, Z+
    126e:	7f 01       	movw	r14, r30
    1270:	85 32       	cpi	r24, 0x25	; 37
    1272:	29 f4       	brne	.+10     	; 0x127e <vfprintf+0x56>
    1274:	b6 01       	movw	r22, r12
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
    127c:	e7 cf       	rjmp	.-50     	; 0x124c <vfprintf+0x24>
    127e:	91 2c       	mov	r9, r1
    1280:	21 2c       	mov	r2, r1
    1282:	31 2c       	mov	r3, r1
    1284:	ff e1       	ldi	r31, 0x1F	; 31
    1286:	f3 15       	cp	r31, r3
    1288:	d8 f0       	brcs	.+54     	; 0x12c0 <vfprintf+0x98>
    128a:	8b 32       	cpi	r24, 0x2B	; 43
    128c:	79 f0       	breq	.+30     	; 0x12ac <vfprintf+0x84>
    128e:	38 f4       	brcc	.+14     	; 0x129e <vfprintf+0x76>
    1290:	80 32       	cpi	r24, 0x20	; 32
    1292:	79 f0       	breq	.+30     	; 0x12b2 <vfprintf+0x8a>
    1294:	83 32       	cpi	r24, 0x23	; 35
    1296:	a1 f4       	brne	.+40     	; 0x12c0 <vfprintf+0x98>
    1298:	23 2d       	mov	r18, r3
    129a:	20 61       	ori	r18, 0x10	; 16
    129c:	1d c0       	rjmp	.+58     	; 0x12d8 <vfprintf+0xb0>
    129e:	8d 32       	cpi	r24, 0x2D	; 45
    12a0:	61 f0       	breq	.+24     	; 0x12ba <vfprintf+0x92>
    12a2:	80 33       	cpi	r24, 0x30	; 48
    12a4:	69 f4       	brne	.+26     	; 0x12c0 <vfprintf+0x98>
    12a6:	23 2d       	mov	r18, r3
    12a8:	21 60       	ori	r18, 0x01	; 1
    12aa:	16 c0       	rjmp	.+44     	; 0x12d8 <vfprintf+0xb0>
    12ac:	83 2d       	mov	r24, r3
    12ae:	82 60       	ori	r24, 0x02	; 2
    12b0:	38 2e       	mov	r3, r24
    12b2:	e3 2d       	mov	r30, r3
    12b4:	e4 60       	ori	r30, 0x04	; 4
    12b6:	3e 2e       	mov	r3, r30
    12b8:	2a c0       	rjmp	.+84     	; 0x130e <vfprintf+0xe6>
    12ba:	f3 2d       	mov	r31, r3
    12bc:	f8 60       	ori	r31, 0x08	; 8
    12be:	1d c0       	rjmp	.+58     	; 0x12fa <vfprintf+0xd2>
    12c0:	37 fc       	sbrc	r3, 7
    12c2:	2d c0       	rjmp	.+90     	; 0x131e <vfprintf+0xf6>
    12c4:	20 ed       	ldi	r18, 0xD0	; 208
    12c6:	28 0f       	add	r18, r24
    12c8:	2a 30       	cpi	r18, 0x0A	; 10
    12ca:	40 f0       	brcs	.+16     	; 0x12dc <vfprintf+0xb4>
    12cc:	8e 32       	cpi	r24, 0x2E	; 46
    12ce:	b9 f4       	brne	.+46     	; 0x12fe <vfprintf+0xd6>
    12d0:	36 fc       	sbrc	r3, 6
    12d2:	81 c1       	rjmp	.+770    	; 0x15d6 <vfprintf+0x3ae>
    12d4:	23 2d       	mov	r18, r3
    12d6:	20 64       	ori	r18, 0x40	; 64
    12d8:	32 2e       	mov	r3, r18
    12da:	19 c0       	rjmp	.+50     	; 0x130e <vfprintf+0xe6>
    12dc:	36 fe       	sbrs	r3, 6
    12de:	06 c0       	rjmp	.+12     	; 0x12ec <vfprintf+0xc4>
    12e0:	8a e0       	ldi	r24, 0x0A	; 10
    12e2:	98 9e       	mul	r9, r24
    12e4:	20 0d       	add	r18, r0
    12e6:	11 24       	eor	r1, r1
    12e8:	92 2e       	mov	r9, r18
    12ea:	11 c0       	rjmp	.+34     	; 0x130e <vfprintf+0xe6>
    12ec:	ea e0       	ldi	r30, 0x0A	; 10
    12ee:	2e 9e       	mul	r2, r30
    12f0:	20 0d       	add	r18, r0
    12f2:	11 24       	eor	r1, r1
    12f4:	22 2e       	mov	r2, r18
    12f6:	f3 2d       	mov	r31, r3
    12f8:	f0 62       	ori	r31, 0x20	; 32
    12fa:	3f 2e       	mov	r3, r31
    12fc:	08 c0       	rjmp	.+16     	; 0x130e <vfprintf+0xe6>
    12fe:	8c 36       	cpi	r24, 0x6C	; 108
    1300:	21 f4       	brne	.+8      	; 0x130a <vfprintf+0xe2>
    1302:	83 2d       	mov	r24, r3
    1304:	80 68       	ori	r24, 0x80	; 128
    1306:	38 2e       	mov	r3, r24
    1308:	02 c0       	rjmp	.+4      	; 0x130e <vfprintf+0xe6>
    130a:	88 36       	cpi	r24, 0x68	; 104
    130c:	41 f4       	brne	.+16     	; 0x131e <vfprintf+0xf6>
    130e:	f7 01       	movw	r30, r14
    1310:	93 fd       	sbrc	r25, 3
    1312:	85 91       	lpm	r24, Z+
    1314:	93 ff       	sbrs	r25, 3
    1316:	81 91       	ld	r24, Z+
    1318:	7f 01       	movw	r14, r30
    131a:	81 11       	cpse	r24, r1
    131c:	b3 cf       	rjmp	.-154    	; 0x1284 <vfprintf+0x5c>
    131e:	98 2f       	mov	r25, r24
    1320:	9f 7d       	andi	r25, 0xDF	; 223
    1322:	95 54       	subi	r25, 0x45	; 69
    1324:	93 30       	cpi	r25, 0x03	; 3
    1326:	28 f4       	brcc	.+10     	; 0x1332 <vfprintf+0x10a>
    1328:	0c 5f       	subi	r16, 0xFC	; 252
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
    132c:	9f e3       	ldi	r25, 0x3F	; 63
    132e:	99 83       	std	Y+1, r25	; 0x01
    1330:	0d c0       	rjmp	.+26     	; 0x134c <vfprintf+0x124>
    1332:	83 36       	cpi	r24, 0x63	; 99
    1334:	31 f0       	breq	.+12     	; 0x1342 <vfprintf+0x11a>
    1336:	83 37       	cpi	r24, 0x73	; 115
    1338:	71 f0       	breq	.+28     	; 0x1356 <vfprintf+0x12e>
    133a:	83 35       	cpi	r24, 0x53	; 83
    133c:	09 f0       	breq	.+2      	; 0x1340 <vfprintf+0x118>
    133e:	59 c0       	rjmp	.+178    	; 0x13f2 <vfprintf+0x1ca>
    1340:	21 c0       	rjmp	.+66     	; 0x1384 <vfprintf+0x15c>
    1342:	f8 01       	movw	r30, r16
    1344:	80 81       	ld	r24, Z
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	0e 5f       	subi	r16, 0xFE	; 254
    134a:	1f 4f       	sbci	r17, 0xFF	; 255
    134c:	88 24       	eor	r8, r8
    134e:	83 94       	inc	r8
    1350:	91 2c       	mov	r9, r1
    1352:	53 01       	movw	r10, r6
    1354:	13 c0       	rjmp	.+38     	; 0x137c <vfprintf+0x154>
    1356:	28 01       	movw	r4, r16
    1358:	f2 e0       	ldi	r31, 0x02	; 2
    135a:	4f 0e       	add	r4, r31
    135c:	51 1c       	adc	r5, r1
    135e:	f8 01       	movw	r30, r16
    1360:	a0 80       	ld	r10, Z
    1362:	b1 80       	ldd	r11, Z+1	; 0x01
    1364:	36 fe       	sbrs	r3, 6
    1366:	03 c0       	rjmp	.+6      	; 0x136e <vfprintf+0x146>
    1368:	69 2d       	mov	r22, r9
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <vfprintf+0x14a>
    136e:	6f ef       	ldi	r22, 0xFF	; 255
    1370:	7f ef       	ldi	r23, 0xFF	; 255
    1372:	c5 01       	movw	r24, r10
    1374:	0e 94 00 0b 	call	0x1600	; 0x1600 <strnlen>
    1378:	4c 01       	movw	r8, r24
    137a:	82 01       	movw	r16, r4
    137c:	f3 2d       	mov	r31, r3
    137e:	ff 77       	andi	r31, 0x7F	; 127
    1380:	3f 2e       	mov	r3, r31
    1382:	16 c0       	rjmp	.+44     	; 0x13b0 <vfprintf+0x188>
    1384:	28 01       	movw	r4, r16
    1386:	22 e0       	ldi	r18, 0x02	; 2
    1388:	42 0e       	add	r4, r18
    138a:	51 1c       	adc	r5, r1
    138c:	f8 01       	movw	r30, r16
    138e:	a0 80       	ld	r10, Z
    1390:	b1 80       	ldd	r11, Z+1	; 0x01
    1392:	36 fe       	sbrs	r3, 6
    1394:	03 c0       	rjmp	.+6      	; 0x139c <vfprintf+0x174>
    1396:	69 2d       	mov	r22, r9
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <vfprintf+0x178>
    139c:	6f ef       	ldi	r22, 0xFF	; 255
    139e:	7f ef       	ldi	r23, 0xFF	; 255
    13a0:	c5 01       	movw	r24, r10
    13a2:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <strnlen_P>
    13a6:	4c 01       	movw	r8, r24
    13a8:	f3 2d       	mov	r31, r3
    13aa:	f0 68       	ori	r31, 0x80	; 128
    13ac:	3f 2e       	mov	r3, r31
    13ae:	82 01       	movw	r16, r4
    13b0:	33 fc       	sbrc	r3, 3
    13b2:	1b c0       	rjmp	.+54     	; 0x13ea <vfprintf+0x1c2>
    13b4:	82 2d       	mov	r24, r2
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	88 16       	cp	r8, r24
    13ba:	99 06       	cpc	r9, r25
    13bc:	b0 f4       	brcc	.+44     	; 0x13ea <vfprintf+0x1c2>
    13be:	b6 01       	movw	r22, r12
    13c0:	80 e2       	ldi	r24, 0x20	; 32
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
    13c8:	2a 94       	dec	r2
    13ca:	f4 cf       	rjmp	.-24     	; 0x13b4 <vfprintf+0x18c>
    13cc:	f5 01       	movw	r30, r10
    13ce:	37 fc       	sbrc	r3, 7
    13d0:	85 91       	lpm	r24, Z+
    13d2:	37 fe       	sbrs	r3, 7
    13d4:	81 91       	ld	r24, Z+
    13d6:	5f 01       	movw	r10, r30
    13d8:	b6 01       	movw	r22, r12
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
    13e0:	21 10       	cpse	r2, r1
    13e2:	2a 94       	dec	r2
    13e4:	21 e0       	ldi	r18, 0x01	; 1
    13e6:	82 1a       	sub	r8, r18
    13e8:	91 08       	sbc	r9, r1
    13ea:	81 14       	cp	r8, r1
    13ec:	91 04       	cpc	r9, r1
    13ee:	71 f7       	brne	.-36     	; 0x13cc <vfprintf+0x1a4>
    13f0:	e8 c0       	rjmp	.+464    	; 0x15c2 <vfprintf+0x39a>
    13f2:	84 36       	cpi	r24, 0x64	; 100
    13f4:	11 f0       	breq	.+4      	; 0x13fa <vfprintf+0x1d2>
    13f6:	89 36       	cpi	r24, 0x69	; 105
    13f8:	41 f5       	brne	.+80     	; 0x144a <vfprintf+0x222>
    13fa:	f8 01       	movw	r30, r16
    13fc:	37 fe       	sbrs	r3, 7
    13fe:	07 c0       	rjmp	.+14     	; 0x140e <vfprintf+0x1e6>
    1400:	60 81       	ld	r22, Z
    1402:	71 81       	ldd	r23, Z+1	; 0x01
    1404:	82 81       	ldd	r24, Z+2	; 0x02
    1406:	93 81       	ldd	r25, Z+3	; 0x03
    1408:	0c 5f       	subi	r16, 0xFC	; 252
    140a:	1f 4f       	sbci	r17, 0xFF	; 255
    140c:	08 c0       	rjmp	.+16     	; 0x141e <vfprintf+0x1f6>
    140e:	60 81       	ld	r22, Z
    1410:	71 81       	ldd	r23, Z+1	; 0x01
    1412:	07 2e       	mov	r0, r23
    1414:	00 0c       	add	r0, r0
    1416:	88 0b       	sbc	r24, r24
    1418:	99 0b       	sbc	r25, r25
    141a:	0e 5f       	subi	r16, 0xFE	; 254
    141c:	1f 4f       	sbci	r17, 0xFF	; 255
    141e:	f3 2d       	mov	r31, r3
    1420:	ff 76       	andi	r31, 0x6F	; 111
    1422:	3f 2e       	mov	r3, r31
    1424:	97 ff       	sbrs	r25, 7
    1426:	09 c0       	rjmp	.+18     	; 0x143a <vfprintf+0x212>
    1428:	90 95       	com	r25
    142a:	80 95       	com	r24
    142c:	70 95       	com	r23
    142e:	61 95       	neg	r22
    1430:	7f 4f       	sbci	r23, 0xFF	; 255
    1432:	8f 4f       	sbci	r24, 0xFF	; 255
    1434:	9f 4f       	sbci	r25, 0xFF	; 255
    1436:	f0 68       	ori	r31, 0x80	; 128
    1438:	3f 2e       	mov	r3, r31
    143a:	2a e0       	ldi	r18, 0x0A	; 10
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	a3 01       	movw	r20, r6
    1440:	0e 94 47 0b 	call	0x168e	; 0x168e <__ultoa_invert>
    1444:	88 2e       	mov	r8, r24
    1446:	86 18       	sub	r8, r6
    1448:	45 c0       	rjmp	.+138    	; 0x14d4 <vfprintf+0x2ac>
    144a:	85 37       	cpi	r24, 0x75	; 117
    144c:	31 f4       	brne	.+12     	; 0x145a <vfprintf+0x232>
    144e:	23 2d       	mov	r18, r3
    1450:	2f 7e       	andi	r18, 0xEF	; 239
    1452:	b2 2e       	mov	r11, r18
    1454:	2a e0       	ldi	r18, 0x0A	; 10
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	25 c0       	rjmp	.+74     	; 0x14a4 <vfprintf+0x27c>
    145a:	93 2d       	mov	r25, r3
    145c:	99 7f       	andi	r25, 0xF9	; 249
    145e:	b9 2e       	mov	r11, r25
    1460:	8f 36       	cpi	r24, 0x6F	; 111
    1462:	c1 f0       	breq	.+48     	; 0x1494 <vfprintf+0x26c>
    1464:	18 f4       	brcc	.+6      	; 0x146c <vfprintf+0x244>
    1466:	88 35       	cpi	r24, 0x58	; 88
    1468:	79 f0       	breq	.+30     	; 0x1488 <vfprintf+0x260>
    146a:	b5 c0       	rjmp	.+362    	; 0x15d6 <vfprintf+0x3ae>
    146c:	80 37       	cpi	r24, 0x70	; 112
    146e:	19 f0       	breq	.+6      	; 0x1476 <vfprintf+0x24e>
    1470:	88 37       	cpi	r24, 0x78	; 120
    1472:	21 f0       	breq	.+8      	; 0x147c <vfprintf+0x254>
    1474:	b0 c0       	rjmp	.+352    	; 0x15d6 <vfprintf+0x3ae>
    1476:	e9 2f       	mov	r30, r25
    1478:	e0 61       	ori	r30, 0x10	; 16
    147a:	be 2e       	mov	r11, r30
    147c:	b4 fe       	sbrs	r11, 4
    147e:	0d c0       	rjmp	.+26     	; 0x149a <vfprintf+0x272>
    1480:	fb 2d       	mov	r31, r11
    1482:	f4 60       	ori	r31, 0x04	; 4
    1484:	bf 2e       	mov	r11, r31
    1486:	09 c0       	rjmp	.+18     	; 0x149a <vfprintf+0x272>
    1488:	34 fe       	sbrs	r3, 4
    148a:	0a c0       	rjmp	.+20     	; 0x14a0 <vfprintf+0x278>
    148c:	29 2f       	mov	r18, r25
    148e:	26 60       	ori	r18, 0x06	; 6
    1490:	b2 2e       	mov	r11, r18
    1492:	06 c0       	rjmp	.+12     	; 0x14a0 <vfprintf+0x278>
    1494:	28 e0       	ldi	r18, 0x08	; 8
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	05 c0       	rjmp	.+10     	; 0x14a4 <vfprintf+0x27c>
    149a:	20 e1       	ldi	r18, 0x10	; 16
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <vfprintf+0x27c>
    14a0:	20 e1       	ldi	r18, 0x10	; 16
    14a2:	32 e0       	ldi	r19, 0x02	; 2
    14a4:	f8 01       	movw	r30, r16
    14a6:	b7 fe       	sbrs	r11, 7
    14a8:	07 c0       	rjmp	.+14     	; 0x14b8 <vfprintf+0x290>
    14aa:	60 81       	ld	r22, Z
    14ac:	71 81       	ldd	r23, Z+1	; 0x01
    14ae:	82 81       	ldd	r24, Z+2	; 0x02
    14b0:	93 81       	ldd	r25, Z+3	; 0x03
    14b2:	0c 5f       	subi	r16, 0xFC	; 252
    14b4:	1f 4f       	sbci	r17, 0xFF	; 255
    14b6:	06 c0       	rjmp	.+12     	; 0x14c4 <vfprintf+0x29c>
    14b8:	60 81       	ld	r22, Z
    14ba:	71 81       	ldd	r23, Z+1	; 0x01
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 5f       	subi	r16, 0xFE	; 254
    14c2:	1f 4f       	sbci	r17, 0xFF	; 255
    14c4:	a3 01       	movw	r20, r6
    14c6:	0e 94 47 0b 	call	0x168e	; 0x168e <__ultoa_invert>
    14ca:	88 2e       	mov	r8, r24
    14cc:	86 18       	sub	r8, r6
    14ce:	fb 2d       	mov	r31, r11
    14d0:	ff 77       	andi	r31, 0x7F	; 127
    14d2:	3f 2e       	mov	r3, r31
    14d4:	36 fe       	sbrs	r3, 6
    14d6:	0d c0       	rjmp	.+26     	; 0x14f2 <vfprintf+0x2ca>
    14d8:	23 2d       	mov	r18, r3
    14da:	2e 7f       	andi	r18, 0xFE	; 254
    14dc:	a2 2e       	mov	r10, r18
    14de:	89 14       	cp	r8, r9
    14e0:	58 f4       	brcc	.+22     	; 0x14f8 <vfprintf+0x2d0>
    14e2:	34 fe       	sbrs	r3, 4
    14e4:	0b c0       	rjmp	.+22     	; 0x14fc <vfprintf+0x2d4>
    14e6:	32 fc       	sbrc	r3, 2
    14e8:	09 c0       	rjmp	.+18     	; 0x14fc <vfprintf+0x2d4>
    14ea:	83 2d       	mov	r24, r3
    14ec:	8e 7e       	andi	r24, 0xEE	; 238
    14ee:	a8 2e       	mov	r10, r24
    14f0:	05 c0       	rjmp	.+10     	; 0x14fc <vfprintf+0x2d4>
    14f2:	b8 2c       	mov	r11, r8
    14f4:	a3 2c       	mov	r10, r3
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <vfprintf+0x2d6>
    14f8:	b8 2c       	mov	r11, r8
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <vfprintf+0x2d6>
    14fc:	b9 2c       	mov	r11, r9
    14fe:	a4 fe       	sbrs	r10, 4
    1500:	0f c0       	rjmp	.+30     	; 0x1520 <vfprintf+0x2f8>
    1502:	fe 01       	movw	r30, r28
    1504:	e8 0d       	add	r30, r8
    1506:	f1 1d       	adc	r31, r1
    1508:	80 81       	ld	r24, Z
    150a:	80 33       	cpi	r24, 0x30	; 48
    150c:	21 f4       	brne	.+8      	; 0x1516 <vfprintf+0x2ee>
    150e:	9a 2d       	mov	r25, r10
    1510:	99 7e       	andi	r25, 0xE9	; 233
    1512:	a9 2e       	mov	r10, r25
    1514:	09 c0       	rjmp	.+18     	; 0x1528 <vfprintf+0x300>
    1516:	a2 fe       	sbrs	r10, 2
    1518:	06 c0       	rjmp	.+12     	; 0x1526 <vfprintf+0x2fe>
    151a:	b3 94       	inc	r11
    151c:	b3 94       	inc	r11
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <vfprintf+0x300>
    1520:	8a 2d       	mov	r24, r10
    1522:	86 78       	andi	r24, 0x86	; 134
    1524:	09 f0       	breq	.+2      	; 0x1528 <vfprintf+0x300>
    1526:	b3 94       	inc	r11
    1528:	a3 fc       	sbrc	r10, 3
    152a:	11 c0       	rjmp	.+34     	; 0x154e <vfprintf+0x326>
    152c:	a0 fe       	sbrs	r10, 0
    152e:	06 c0       	rjmp	.+12     	; 0x153c <vfprintf+0x314>
    1530:	b2 14       	cp	r11, r2
    1532:	88 f4       	brcc	.+34     	; 0x1556 <vfprintf+0x32e>
    1534:	28 0c       	add	r2, r8
    1536:	92 2c       	mov	r9, r2
    1538:	9b 18       	sub	r9, r11
    153a:	0e c0       	rjmp	.+28     	; 0x1558 <vfprintf+0x330>
    153c:	b2 14       	cp	r11, r2
    153e:	60 f4       	brcc	.+24     	; 0x1558 <vfprintf+0x330>
    1540:	b6 01       	movw	r22, r12
    1542:	80 e2       	ldi	r24, 0x20	; 32
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
    154a:	b3 94       	inc	r11
    154c:	f7 cf       	rjmp	.-18     	; 0x153c <vfprintf+0x314>
    154e:	b2 14       	cp	r11, r2
    1550:	18 f4       	brcc	.+6      	; 0x1558 <vfprintf+0x330>
    1552:	2b 18       	sub	r2, r11
    1554:	02 c0       	rjmp	.+4      	; 0x155a <vfprintf+0x332>
    1556:	98 2c       	mov	r9, r8
    1558:	21 2c       	mov	r2, r1
    155a:	a4 fe       	sbrs	r10, 4
    155c:	10 c0       	rjmp	.+32     	; 0x157e <vfprintf+0x356>
    155e:	b6 01       	movw	r22, r12
    1560:	80 e3       	ldi	r24, 0x30	; 48
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
    1568:	a2 fe       	sbrs	r10, 2
    156a:	17 c0       	rjmp	.+46     	; 0x159a <vfprintf+0x372>
    156c:	a1 fc       	sbrc	r10, 1
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <vfprintf+0x34e>
    1570:	88 e7       	ldi	r24, 0x78	; 120
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 c0       	rjmp	.+4      	; 0x157a <vfprintf+0x352>
    1576:	88 e5       	ldi	r24, 0x58	; 88
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	b6 01       	movw	r22, r12
    157c:	0c c0       	rjmp	.+24     	; 0x1596 <vfprintf+0x36e>
    157e:	8a 2d       	mov	r24, r10
    1580:	86 78       	andi	r24, 0x86	; 134
    1582:	59 f0       	breq	.+22     	; 0x159a <vfprintf+0x372>
    1584:	a1 fe       	sbrs	r10, 1
    1586:	02 c0       	rjmp	.+4      	; 0x158c <vfprintf+0x364>
    1588:	8b e2       	ldi	r24, 0x2B	; 43
    158a:	01 c0       	rjmp	.+2      	; 0x158e <vfprintf+0x366>
    158c:	80 e2       	ldi	r24, 0x20	; 32
    158e:	a7 fc       	sbrc	r10, 7
    1590:	8d e2       	ldi	r24, 0x2D	; 45
    1592:	b6 01       	movw	r22, r12
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
    159a:	89 14       	cp	r8, r9
    159c:	38 f4       	brcc	.+14     	; 0x15ac <vfprintf+0x384>
    159e:	b6 01       	movw	r22, r12
    15a0:	80 e3       	ldi	r24, 0x30	; 48
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
    15a8:	9a 94       	dec	r9
    15aa:	f7 cf       	rjmp	.-18     	; 0x159a <vfprintf+0x372>
    15ac:	8a 94       	dec	r8
    15ae:	f3 01       	movw	r30, r6
    15b0:	e8 0d       	add	r30, r8
    15b2:	f1 1d       	adc	r31, r1
    15b4:	80 81       	ld	r24, Z
    15b6:	b6 01       	movw	r22, r12
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
    15be:	81 10       	cpse	r8, r1
    15c0:	f5 cf       	rjmp	.-22     	; 0x15ac <vfprintf+0x384>
    15c2:	22 20       	and	r2, r2
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <vfprintf+0x3a0>
    15c6:	42 ce       	rjmp	.-892    	; 0x124c <vfprintf+0x24>
    15c8:	b6 01       	movw	r22, r12
    15ca:	80 e2       	ldi	r24, 0x20	; 32
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
    15d2:	2a 94       	dec	r2
    15d4:	f6 cf       	rjmp	.-20     	; 0x15c2 <vfprintf+0x39a>
    15d6:	f6 01       	movw	r30, r12
    15d8:	86 81       	ldd	r24, Z+6	; 0x06
    15da:	97 81       	ldd	r25, Z+7	; 0x07
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <vfprintf+0x3ba>
    15de:	8f ef       	ldi	r24, 0xFF	; 255
    15e0:	9f ef       	ldi	r25, 0xFF	; 255
    15e2:	2b 96       	adiw	r28, 0x0b	; 11
    15e4:	e2 e1       	ldi	r30, 0x12	; 18
    15e6:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__epilogue_restores__>

000015ea <strnlen_P>:
    15ea:	fc 01       	movw	r30, r24
    15ec:	05 90       	lpm	r0, Z+
    15ee:	61 50       	subi	r22, 0x01	; 1
    15f0:	70 40       	sbci	r23, 0x00	; 0
    15f2:	01 10       	cpse	r0, r1
    15f4:	d8 f7       	brcc	.-10     	; 0x15ec <strnlen_P+0x2>
    15f6:	80 95       	com	r24
    15f8:	90 95       	com	r25
    15fa:	8e 0f       	add	r24, r30
    15fc:	9f 1f       	adc	r25, r31
    15fe:	08 95       	ret

00001600 <strnlen>:
    1600:	fc 01       	movw	r30, r24
    1602:	61 50       	subi	r22, 0x01	; 1
    1604:	70 40       	sbci	r23, 0x00	; 0
    1606:	01 90       	ld	r0, Z+
    1608:	01 10       	cpse	r0, r1
    160a:	d8 f7       	brcc	.-10     	; 0x1602 <strnlen+0x2>
    160c:	80 95       	com	r24
    160e:	90 95       	com	r25
    1610:	8e 0f       	add	r24, r30
    1612:	9f 1f       	adc	r25, r31
    1614:	08 95       	ret

00001616 <fputc>:
    1616:	0f 93       	push	r16
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	fb 01       	movw	r30, r22
    1620:	23 81       	ldd	r18, Z+3	; 0x03
    1622:	21 fd       	sbrc	r18, 1
    1624:	03 c0       	rjmp	.+6      	; 0x162c <fputc+0x16>
    1626:	8f ef       	ldi	r24, 0xFF	; 255
    1628:	9f ef       	ldi	r25, 0xFF	; 255
    162a:	2c c0       	rjmp	.+88     	; 0x1684 <fputc+0x6e>
    162c:	22 ff       	sbrs	r18, 2
    162e:	16 c0       	rjmp	.+44     	; 0x165c <fputc+0x46>
    1630:	46 81       	ldd	r20, Z+6	; 0x06
    1632:	57 81       	ldd	r21, Z+7	; 0x07
    1634:	24 81       	ldd	r18, Z+4	; 0x04
    1636:	35 81       	ldd	r19, Z+5	; 0x05
    1638:	42 17       	cp	r20, r18
    163a:	53 07       	cpc	r21, r19
    163c:	44 f4       	brge	.+16     	; 0x164e <fputc+0x38>
    163e:	a0 81       	ld	r26, Z
    1640:	b1 81       	ldd	r27, Z+1	; 0x01
    1642:	9d 01       	movw	r18, r26
    1644:	2f 5f       	subi	r18, 0xFF	; 255
    1646:	3f 4f       	sbci	r19, 0xFF	; 255
    1648:	31 83       	std	Z+1, r19	; 0x01
    164a:	20 83       	st	Z, r18
    164c:	8c 93       	st	X, r24
    164e:	26 81       	ldd	r18, Z+6	; 0x06
    1650:	37 81       	ldd	r19, Z+7	; 0x07
    1652:	2f 5f       	subi	r18, 0xFF	; 255
    1654:	3f 4f       	sbci	r19, 0xFF	; 255
    1656:	37 83       	std	Z+7, r19	; 0x07
    1658:	26 83       	std	Z+6, r18	; 0x06
    165a:	14 c0       	rjmp	.+40     	; 0x1684 <fputc+0x6e>
    165c:	8b 01       	movw	r16, r22
    165e:	ec 01       	movw	r28, r24
    1660:	fb 01       	movw	r30, r22
    1662:	00 84       	ldd	r0, Z+8	; 0x08
    1664:	f1 85       	ldd	r31, Z+9	; 0x09
    1666:	e0 2d       	mov	r30, r0
    1668:	09 95       	icall
    166a:	89 2b       	or	r24, r25
    166c:	e1 f6       	brne	.-72     	; 0x1626 <fputc+0x10>
    166e:	d8 01       	movw	r26, r16
    1670:	16 96       	adiw	r26, 0x06	; 6
    1672:	8d 91       	ld	r24, X+
    1674:	9c 91       	ld	r25, X
    1676:	17 97       	sbiw	r26, 0x07	; 7
    1678:	01 96       	adiw	r24, 0x01	; 1
    167a:	17 96       	adiw	r26, 0x07	; 7
    167c:	9c 93       	st	X, r25
    167e:	8e 93       	st	-X, r24
    1680:	16 97       	sbiw	r26, 0x06	; 6
    1682:	ce 01       	movw	r24, r28
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	08 95       	ret

0000168e <__ultoa_invert>:
    168e:	fa 01       	movw	r30, r20
    1690:	aa 27       	eor	r26, r26
    1692:	28 30       	cpi	r18, 0x08	; 8
    1694:	51 f1       	breq	.+84     	; 0x16ea <__ultoa_invert+0x5c>
    1696:	20 31       	cpi	r18, 0x10	; 16
    1698:	81 f1       	breq	.+96     	; 0x16fa <__ultoa_invert+0x6c>
    169a:	e8 94       	clt
    169c:	6f 93       	push	r22
    169e:	6e 7f       	andi	r22, 0xFE	; 254
    16a0:	6e 5f       	subi	r22, 0xFE	; 254
    16a2:	7f 4f       	sbci	r23, 0xFF	; 255
    16a4:	8f 4f       	sbci	r24, 0xFF	; 255
    16a6:	9f 4f       	sbci	r25, 0xFF	; 255
    16a8:	af 4f       	sbci	r26, 0xFF	; 255
    16aa:	b1 e0       	ldi	r27, 0x01	; 1
    16ac:	3e d0       	rcall	.+124    	; 0x172a <__ultoa_invert+0x9c>
    16ae:	b4 e0       	ldi	r27, 0x04	; 4
    16b0:	3c d0       	rcall	.+120    	; 0x172a <__ultoa_invert+0x9c>
    16b2:	67 0f       	add	r22, r23
    16b4:	78 1f       	adc	r23, r24
    16b6:	89 1f       	adc	r24, r25
    16b8:	9a 1f       	adc	r25, r26
    16ba:	a1 1d       	adc	r26, r1
    16bc:	68 0f       	add	r22, r24
    16be:	79 1f       	adc	r23, r25
    16c0:	8a 1f       	adc	r24, r26
    16c2:	91 1d       	adc	r25, r1
    16c4:	a1 1d       	adc	r26, r1
    16c6:	6a 0f       	add	r22, r26
    16c8:	71 1d       	adc	r23, r1
    16ca:	81 1d       	adc	r24, r1
    16cc:	91 1d       	adc	r25, r1
    16ce:	a1 1d       	adc	r26, r1
    16d0:	20 d0       	rcall	.+64     	; 0x1712 <__ultoa_invert+0x84>
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <__ultoa_invert+0x48>
    16d4:	68 94       	set
    16d6:	3f 91       	pop	r19
    16d8:	2a e0       	ldi	r18, 0x0A	; 10
    16da:	26 9f       	mul	r18, r22
    16dc:	11 24       	eor	r1, r1
    16de:	30 19       	sub	r19, r0
    16e0:	30 5d       	subi	r19, 0xD0	; 208
    16e2:	31 93       	st	Z+, r19
    16e4:	de f6       	brtc	.-74     	; 0x169c <__ultoa_invert+0xe>
    16e6:	cf 01       	movw	r24, r30
    16e8:	08 95       	ret
    16ea:	46 2f       	mov	r20, r22
    16ec:	47 70       	andi	r20, 0x07	; 7
    16ee:	40 5d       	subi	r20, 0xD0	; 208
    16f0:	41 93       	st	Z+, r20
    16f2:	b3 e0       	ldi	r27, 0x03	; 3
    16f4:	0f d0       	rcall	.+30     	; 0x1714 <__ultoa_invert+0x86>
    16f6:	c9 f7       	brne	.-14     	; 0x16ea <__ultoa_invert+0x5c>
    16f8:	f6 cf       	rjmp	.-20     	; 0x16e6 <__ultoa_invert+0x58>
    16fa:	46 2f       	mov	r20, r22
    16fc:	4f 70       	andi	r20, 0x0F	; 15
    16fe:	40 5d       	subi	r20, 0xD0	; 208
    1700:	4a 33       	cpi	r20, 0x3A	; 58
    1702:	18 f0       	brcs	.+6      	; 0x170a <__ultoa_invert+0x7c>
    1704:	49 5d       	subi	r20, 0xD9	; 217
    1706:	31 fd       	sbrc	r19, 1
    1708:	40 52       	subi	r20, 0x20	; 32
    170a:	41 93       	st	Z+, r20
    170c:	02 d0       	rcall	.+4      	; 0x1712 <__ultoa_invert+0x84>
    170e:	a9 f7       	brne	.-22     	; 0x16fa <__ultoa_invert+0x6c>
    1710:	ea cf       	rjmp	.-44     	; 0x16e6 <__ultoa_invert+0x58>
    1712:	b4 e0       	ldi	r27, 0x04	; 4
    1714:	a6 95       	lsr	r26
    1716:	97 95       	ror	r25
    1718:	87 95       	ror	r24
    171a:	77 95       	ror	r23
    171c:	67 95       	ror	r22
    171e:	ba 95       	dec	r27
    1720:	c9 f7       	brne	.-14     	; 0x1714 <__ultoa_invert+0x86>
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	61 05       	cpc	r22, r1
    1726:	71 05       	cpc	r23, r1
    1728:	08 95       	ret
    172a:	9b 01       	movw	r18, r22
    172c:	ac 01       	movw	r20, r24
    172e:	0a 2e       	mov	r0, r26
    1730:	06 94       	lsr	r0
    1732:	57 95       	ror	r21
    1734:	47 95       	ror	r20
    1736:	37 95       	ror	r19
    1738:	27 95       	ror	r18
    173a:	ba 95       	dec	r27
    173c:	c9 f7       	brne	.-14     	; 0x1730 <__ultoa_invert+0xa2>
    173e:	62 0f       	add	r22, r18
    1740:	73 1f       	adc	r23, r19
    1742:	84 1f       	adc	r24, r20
    1744:	95 1f       	adc	r25, r21
    1746:	a0 1d       	adc	r26, r0
    1748:	08 95       	ret

0000174a <__prologue_saves__>:
    174a:	2f 92       	push	r2
    174c:	3f 92       	push	r3
    174e:	4f 92       	push	r4
    1750:	5f 92       	push	r5
    1752:	6f 92       	push	r6
    1754:	7f 92       	push	r7
    1756:	8f 92       	push	r8
    1758:	9f 92       	push	r9
    175a:	af 92       	push	r10
    175c:	bf 92       	push	r11
    175e:	cf 92       	push	r12
    1760:	df 92       	push	r13
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	ca 1b       	sub	r28, r26
    1774:	db 0b       	sbc	r29, r27
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	09 94       	ijmp

00001782 <__epilogue_restores__>:
    1782:	2a 88       	ldd	r2, Y+18	; 0x12
    1784:	39 88       	ldd	r3, Y+17	; 0x11
    1786:	48 88       	ldd	r4, Y+16	; 0x10
    1788:	5f 84       	ldd	r5, Y+15	; 0x0f
    178a:	6e 84       	ldd	r6, Y+14	; 0x0e
    178c:	7d 84       	ldd	r7, Y+13	; 0x0d
    178e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1790:	9b 84       	ldd	r9, Y+11	; 0x0b
    1792:	aa 84       	ldd	r10, Y+10	; 0x0a
    1794:	b9 84       	ldd	r11, Y+9	; 0x09
    1796:	c8 84       	ldd	r12, Y+8	; 0x08
    1798:	df 80       	ldd	r13, Y+7	; 0x07
    179a:	ee 80       	ldd	r14, Y+6	; 0x06
    179c:	fd 80       	ldd	r15, Y+5	; 0x05
    179e:	0c 81       	ldd	r16, Y+4	; 0x04
    17a0:	1b 81       	ldd	r17, Y+3	; 0x03
    17a2:	aa 81       	ldd	r26, Y+2	; 0x02
    17a4:	b9 81       	ldd	r27, Y+1	; 0x01
    17a6:	ce 0f       	add	r28, r30
    17a8:	d1 1d       	adc	r29, r1
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	ed 01       	movw	r28, r26
    17b6:	08 95       	ret

000017b8 <_exit>:
    17b8:	f8 94       	cli

000017ba <__stop_program>:
    17ba:	ff cf       	rjmp	.-2      	; 0x17ba <__stop_program>
