
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  00001ad0  00001b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ad0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  008001be  008001be  00001c22  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002aee  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ba  00000000  00000000  00004a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000195f  00000000  00000000  00005c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b4  00000000  00000000  000075a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ba0  00000000  00000000  00007d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000193d  00000000  00000000  000088fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000a239  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__ctors_end>
       4:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       8:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      10:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      14:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_5>
      18:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      1c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      20:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      24:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      28:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      2c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      30:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      34:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      38:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      3c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      40:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__vector_16>
      44:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      48:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      4c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      50:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__vector_20>
      54:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <__vector_21>
      58:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      5c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      60:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      64:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      68:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      6c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      70:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      74:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      78:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2287>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2263>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 20 43 61 69 6c 69 6e 20 44 65 6c 67      by  Cailin Delg
      d4:	61 64 6f 20 2d 20 34 38 30 32 37 39 34 32 00        ado - 48027942.

000000e3 <__c.2261>:
      e3:	20 5c 24 24 20 20 20 5c 24 24 20 20 20 20 20 5c      \$$   \$$     \
      f3:	24 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20     $     \$$   \$$ 
     103:	20 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20           \$$   \$$ 
     113:	20 5c 24 24 24 24 24 24 24 20 5c 24 24 20 20 20      \$$$$$$$ \$$   
     123:	20 20 20 20 20 5c 24 24 24 24 24 24 00                   \$$$$$$.

00000130 <__c.2259>:
     130:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 5c 24     | $$  | $$    \$
     140:	24 24 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20     $$   | $$  | $$ 
     150:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     160:	5c 24 24 20 20 20 20 20 5c 7c 20 24 24 20 20 20     \$$     \| $$   
     170:	20 20 20 20 5c 24 24 20 20 20 20 24 24 00               \$$    $$.

0000017e <__c.2257>:
     17e:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 5c 24 24     | $$  | $$   \$$
     18e:	20 24 24 20 20 7c 20 24 24 20 20 7c 20 24 24 20      $$  | $$  | $$ 
     19e:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 7c          | $$  | $$|
     1ae:	20 24 24 24 24 24 24 24 24 7c 20 24 24 20 20 20      $$$$$$$$| $$   
     1be:	20 20 20 7c 20 24 24 5f 5f 2f 20 24 24 00              | $$__/ $$.

000001cc <__c.2255>:
     1cc:	7c 20 24 24 24 24 24 24 24 24 20 20 5c 24 24 5c     | $$$$$$$$  \$$\
     1dc:	20 20 24 24 20 7c 20 24 24 24 24 24 24 24 5c 20       $$ | $$$$$$$\ 
     1ec:	20 20 20 20 20 7c 20 24 24 24 24 24 24 24 24 7c          | $$$$$$$$|
     1fc:	20 24 24 20 20 20 20 24 24 7c 20 24 24 20 20 20      $$    $$| $$   
     20c:	5c 24 24 7c 20 24 24 20 20 7c 20 24 24 00           \$$| $$  | $$.

0000021a <__c.2253>:
     21a:	7c 20 24 24 20 20 20 20 24 24 20 5c 24 24 5c 20     | $$    $$ \$$\ 
     22a:	2f 20 20 24 24 7c 20 24 24 20 20 20 20 24 24 20     /  $$| $$    $$ 
     23a:	20 20 20 20 20 7c 20 24 24 20 20 20 20 24 24 7c          | $$    $$|
     24a:	20 20 24 24 24 24 24 24 5c 7c 20 20 24 24 24 24       $$$$$$\|  $$$$
     25a:	24 24 5c 7c 20 20 24 24 24 24 24 24 5c 00           $$\|  $$$$$$\.

00000268 <__c.2251>:
     268:	7c 20 24 24 5f 5f 7c 20 24 24 7c 20 24 24 20 20     | $$__| $$| $$  
     278:	20 7c 20 24 24 7c 20 24 24 5f 5f 7c 20 24 24 20      | $$| $$__| $$ 
     288:	20 20 20 20 20 7c 20 24 24 5f 5f 7c 20 24 24 20          | $$__| $$ 
     298:	2f 20 20 20 20 20 20 5c 20 20 2f 20 20 20 20 20     /      \  /     
     2a8:	20 5c 20 20 2f 20 20 20 20 20 20 5c 00               \  /      \.

000002b5 <__c.2249>:
     2b5:	7c 20 20 24 24 24 24 24 24 5c 7c 20 24 24 20 20     |  $$$$$$\| $$  
     2c5:	20 7c 20 24 24 7c 20 24 24 24 24 24 24 24 5c 20      | $$| $$$$$$$\ 
     2d5:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     2e5:	20 5f 5f 5f 5f 5f 5f 20 20 20 20 5f 5f 5f 5f 5f      ______    _____
     2f5:	5f 20 20 20 20 5f 5f 5f 5f 5f 5f 00                 _    ______.

00000301 <__c.2247>:
     301:	20 2f 20 20 20 20 20 20 5c 20 7c 20 20 5c 20 20      /      \ |  \  
     311:	20 7c 20 20 5c 7c 20 20 20 20 20 20 20 5c 20 20      |  \|       \  
     321:	20 20 20 20 20 7c 20 20 5c 20 20 7c 20 20 5c 00          |  \  |  \.

00000331 <__c.2245>:
     331:	20 20 5f 5f 5f 5f 5f 5f 20 20 20 5f 5f 20 20 20       ______   __   
     341:	20 20 5f 5f 20 20 5f 5f 5f 5f 5f 5f 5f 20 20 20       __  _______   
     351:	20 20 20 20 20 20 5f 5f 20 20 20 20 5f 5f 00              __    __.

00000360 <__c.2058>:
     360:	1b 5b 3f 32 35 68 00                                .[?25h.

00000367 <__c.2054>:
     367:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000036e <__c.2050>:
     36e:	1b 5b 25 64 6d 00                                   .[%dm.

00000374 <__c.2045>:
     374:	1b 5b 4b 00                                         .[K.

00000378 <__c.2040>:
     378:	1b 5b 32 4a 00                                      .[2J.

0000037d <__c.2025>:
     37d:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000386 <__ctors_end>:
     386:	11 24       	eor	r1, r1
     388:	1f be       	out	0x3f, r1	; 63
     38a:	cf ef       	ldi	r28, 0xFF	; 255
     38c:	d8 e0       	ldi	r29, 0x08	; 8
     38e:	de bf       	out	0x3e, r29	; 62
     390:	cd bf       	out	0x3d, r28	; 61

00000392 <__do_copy_data>:
     392:	11 e0       	ldi	r17, 0x01	; 1
     394:	a0 e0       	ldi	r26, 0x00	; 0
     396:	b1 e0       	ldi	r27, 0x01	; 1
     398:	e0 ed       	ldi	r30, 0xD0	; 208
     39a:	fa e1       	ldi	r31, 0x1A	; 26
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__do_copy_data+0x10>
     39e:	05 90       	lpm	r0, Z+
     3a0:	0d 92       	st	X+, r0
     3a2:	ae 3b       	cpi	r26, 0xBE	; 190
     3a4:	b1 07       	cpc	r27, r17
     3a6:	d9 f7       	brne	.-10     	; 0x39e <__do_copy_data+0xc>

000003a8 <__do_clear_bss>:
     3a8:	22 e0       	ldi	r18, 0x02	; 2
     3aa:	ae eb       	ldi	r26, 0xBE	; 190
     3ac:	b1 e0       	ldi	r27, 0x01	; 1
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
     3b2:	aa 3e       	cpi	r26, 0xEA	; 234
     3b4:	b2 07       	cpc	r27, r18
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>
     3b8:	0e 94 b0 07 	call	0xf60	; 0xf60 <main>
     3bc:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <_exit>

000003c0 <__bad_interrupt>:
     3c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c4 <init_button_interrupts>:
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void)
{
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     3c4:	e8 e6       	ldi	r30, 0x68	; 104
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	82 60       	ori	r24, 0x02	; 2
     3cc:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     3ce:	8b b3       	in	r24, 0x1b	; 27
     3d0:	82 60       	ori	r24, 0x02	; 2
     3d2:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     3d4:	ec e6       	ldi	r30, 0x6C	; 108
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	8f 60       	ori	r24, 0x0F	; 15
     3dc:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     3de:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <__data_end>
     3e2:	08 95       	ret

000003e4 <button_pushed>:

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0)
     3e4:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <__data_end>
     3e8:	18 16       	cp	r1, r24
     3ea:	14 f5       	brge	.+68     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     3ec:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3f0:	6f b7       	in	r22, 0x3f	; 63
		cli();
     3f2:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	09 c0       	rjmp	.+18     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		{
			button_queue[i - 1] = button_queue[i];
     3f8:	f9 01       	movw	r30, r18
     3fa:	e1 54       	subi	r30, 0x41	; 65
     3fc:	fe 4f       	sbci	r31, 0xFE	; 254
     3fe:	40 81       	ld	r20, Z
     400:	f9 01       	movw	r30, r18
     402:	e2 54       	subi	r30, 0x42	; 66
     404:	fe 4f       	sbci	r31, 0xFE	; 254
     406:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     408:	9f 5f       	subi	r25, 0xFF	; 255
     40a:	29 2f       	mov	r18, r25
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 91 be 01 	lds	r20, 0x01BE	; 0x8001be <__data_end>
     412:	04 2e       	mov	r0, r20
     414:	00 0c       	add	r0, r0
     416:	55 0b       	sbc	r21, r21
     418:	24 17       	cp	r18, r20
     41a:	35 07       	cpc	r19, r21
     41c:	6c f3       	brlt	.-38     	; 0x3f8 <button_pushed+0x14>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     41e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <__data_end>
     422:	91 50       	subi	r25, 0x01	; 1
     424:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <__data_end>
		
		if (interrupts_were_enabled)
     428:	66 23       	and	r22, r22
     42a:	1c f4       	brge	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		{
			// Turn them back on again
			sei();
     42c:	78 94       	sei
     42e:	08 95       	ret
	queue_length = 0;
}

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     430:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     432:	08 95       	ret

00000434 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect)
{
     434:	1f 92       	push	r1
     436:	0f 92       	push	r0
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     44c:	43 b1       	in	r20, 0x03	; 3
     44e:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	26 c0       	rjmp	.+76     	; 0x4a0 <__vector_5+0x6c>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     454:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <__data_end>
     458:	94 30       	cpi	r25, 0x04	; 4
     45a:	0c f5       	brge	.+66     	; 0x49e <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     45c:	24 2f       	mov	r18, r20
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	08 2e       	mov	r0, r24
     462:	02 c0       	rjmp	.+4      	; 0x468 <__vector_5+0x34>
     464:	35 95       	asr	r19
     466:	27 95       	ror	r18
     468:	0a 94       	dec	r0
     46a:	e2 f7       	brpl	.-8      	; 0x464 <__vector_5+0x30>
     46c:	20 ff       	sbrs	r18, 0
     46e:	17 c0       	rjmp	.+46     	; 0x49e <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin)))
     470:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <last_button_state>
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	08 2e       	mov	r0, r24
     478:	02 c0       	rjmp	.+4      	; 0x47e <__vector_5+0x4a>
     47a:	35 95       	asr	r19
     47c:	27 95       	ror	r18
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <__vector_5+0x46>
     482:	20 fd       	sbrc	r18, 0
     484:	0c c0       	rjmp	.+24     	; 0x49e <__vector_5+0x6a>
				{
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     486:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <__data_end>
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	9e 0f       	add	r25, r30
     48e:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <__data_end>
     492:	0e 2e       	mov	r0, r30
     494:	00 0c       	add	r0, r0
     496:	ff 0b       	sbc	r31, r31
     498:	e1 54       	subi	r30, 0x41	; 65
     49a:	fe 4f       	sbci	r31, 0xFE	; 254
     49c:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	c0 f2       	brcs	.-80     	; 0x454 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     4a4:	40 93 c3 01 	sts	0x01C3, r20	; 0x8001c3 <last_button_state>
}
     4a8:	ff 91       	pop	r31
     4aa:	ef 91       	pop	r30
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <update_start_screen>:

// Update dynamic start screen based on the frame number (0-31)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	18 2f       	mov	r17, r24
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     4c8:	d4 e0       	ldi	r29, 0x04	; 4
     4ca:	36 c0       	rjmp	.+108    	; 0x538 <update_start_screen+0x78>
	{
		for (uint8_t col = 11; col < 16; col++)
		{
			colour = col == 14 ? COLOUR_YELLOW : COLOUR_BLACK;
     4cc:	ce 30       	cpi	r28, 0x0E	; 14
     4ce:	11 f4       	brne	.+4      	; 0x4d4 <update_start_screen+0x14>
     4d0:	4f ef       	ldi	r20, 0xFF	; 255
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <update_start_screen+0x16>
     4d4:	40 e0       	ldi	r20, 0x00	; 0
			if (((32+col-frame_number) & ((1<<(row-2))-1)) == (1<<(row-3))-1)
     4d6:	2c 2f       	mov	r18, r28
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	20 5e       	subi	r18, 0xE0	; 224
     4dc:	3f 4f       	sbci	r19, 0xFF	; 255
     4de:	21 1b       	sub	r18, r17
     4e0:	31 09       	sbc	r19, r1
     4e2:	ed 2f       	mov	r30, r29
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	bf 01       	movw	r22, r30
     4e8:	62 50       	subi	r22, 0x02	; 2
     4ea:	71 09       	sbc	r23, r1
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	dc 01       	movw	r26, r24
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <update_start_screen+0x38>
     4f4:	aa 0f       	add	r26, r26
     4f6:	bb 1f       	adc	r27, r27
     4f8:	6a 95       	dec	r22
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <update_start_screen+0x34>
     4fc:	bd 01       	movw	r22, r26
     4fe:	61 50       	subi	r22, 0x01	; 1
     500:	71 09       	sbc	r23, r1
     502:	26 23       	and	r18, r22
     504:	37 23       	and	r19, r23
     506:	33 97       	sbiw	r30, 0x03	; 3
     508:	02 c0       	rjmp	.+4      	; 0x50e <update_start_screen+0x4e>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	ea 95       	dec	r30
     510:	e2 f7       	brpl	.-8      	; 0x50a <update_start_screen+0x4a>
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	28 17       	cp	r18, r24
     516:	39 07       	cpc	r19, r25
     518:	29 f4       	brne	.+10     	; 0x524 <update_start_screen+0x64>
			{
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
     51a:	ce 30       	cpi	r28, 0x0E	; 14
     51c:	10 f4       	brcc	.+4      	; 0x522 <update_start_screen+0x62>
     51e:	4f e0       	ldi	r20, 0x0F	; 15
     520:	01 c0       	rjmp	.+2      	; 0x524 <update_start_screen+0x64>
     522:	40 ef       	ldi	r20, 0xF0	; 240
			}
			ledmatrix_update_pixel(col, row, colour);
     524:	6d 2f       	mov	r22, r29
     526:	8c 2f       	mov	r24, r28
     528:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
	{
		for (uint8_t col = 11; col < 16; col++)
     52c:	cf 5f       	subi	r28, 0xFF	; 255
     52e:	01 c0       	rjmp	.+2      	; 0x532 <update_start_screen+0x72>
     530:	cb e0       	ldi	r28, 0x0B	; 11
     532:	c0 31       	cpi	r28, 0x10	; 16
     534:	58 f2       	brcs	.-106    	; 0x4cc <update_start_screen+0xc>
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     536:	df 5f       	subi	r29, 0xFF	; 255
     538:	d8 30       	cpi	r29, 0x08	; 8
     53a:	d0 f3       	brcs	.-12     	; 0x530 <update_start_screen+0x70>
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
			}
			ledmatrix_update_pixel(col, row, colour);
		}
	}
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	08 95       	ret

00000544 <show_start_screen>:
// Stored as a 5 x 3 grid pattern going from Left-to-Right, Top-to-Bottom
// Padded with a leading zero so that it fits into a 16-bit value


void show_start_screen(void)
{
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	28 97       	sbiw	r28, 0x08	; 8
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     55a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	31 c0       	rjmp	.+98     	; 0x5c4 <show_start_screen+0x80>
	{
		col_data = pong_display[col];
     562:	e1 2f       	mov	r30, r17
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	e1 5f       	subi	r30, 0xF1	; 241
     568:	fe 4f       	sbci	r31, 0xFE	; 254
     56a:	90 81       	ld	r25, Z
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	21 c0       	rjmp	.+66     	; 0x5b2 <show_start_screen+0x6e>
		{
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data>>row & 1)
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	49 2f       	mov	r20, r25
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	08 2e       	mov	r0, r24
     57a:	02 c0       	rjmp	.+4      	; 0x580 <show_start_screen+0x3c>
     57c:	55 95       	asr	r21
     57e:	47 95       	ror	r20
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <show_start_screen+0x38>
     584:	40 ff       	sbrs	r20, 0
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <show_start_screen+0x5e>
			{
				column_colour_data[row] = (row < 4 ? COLOUR_RED : COLOUR_GREEN);
     588:	84 30       	cpi	r24, 0x04	; 4
     58a:	10 f4       	brcc	.+4      	; 0x590 <show_start_screen+0x4c>
     58c:	4f e0       	ldi	r20, 0x0F	; 15
     58e:	01 c0       	rjmp	.+2      	; 0x592 <show_start_screen+0x4e>
     590:	40 ef       	ldi	r20, 0xF0	; 240
     592:	e1 e0       	ldi	r30, 0x01	; 1
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	ec 0f       	add	r30, r28
     598:	fd 1f       	adc	r31, r29
     59a:	e2 0f       	add	r30, r18
     59c:	f3 1f       	adc	r31, r19
     59e:	40 83       	st	Z, r20
     5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <show_start_screen+0x6c>
			}
			else
			{
				column_colour_data[row] = 0;
     5a2:	e1 e0       	ldi	r30, 0x01	; 1
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	ec 0f       	add	r30, r28
     5a8:	fd 1f       	adc	r31, r29
     5aa:	e2 0f       	add	r30, r18
     5ac:	f3 1f       	adc	r31, r19
     5ae:	10 82       	st	Z, r1
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
	{
		col_data = pong_display[col];
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	88 30       	cpi	r24, 0x08	; 8
     5b4:	e8 f2       	brcs	.-70     	; 0x570 <show_start_screen+0x2c>
			else
			{
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
     5b6:	be 01       	movw	r22, r28
     5b8:	6f 5f       	subi	r22, 0xFF	; 255
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	81 2f       	mov	r24, r17
     5be:	0e 94 d4 05 	call	0xba8	; 0xba8 <ledmatrix_update_column>
{
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     5c2:	1f 5f       	subi	r17, 0xFF	; 255
     5c4:	10 31       	cpi	r17, 0x10	; 16
     5c6:	68 f2       	brcs	.-102    	; 0x562 <show_start_screen+0x1e>
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
	}
	update_start_screen(0);
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
}
     5ce:	28 96       	adiw	r28, 0x08	; 8
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	08 95       	ret

000005e2 <default_grid>:
}

// Initialise the display for the board, this creates the display
// for an empty board.
void default_grid(void)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	28 97       	sbiw	r28, 0x08	; 8
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_clear();
     5f6:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <ledmatrix_clear>
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <default_grid+0x2e>
	{
		colours[row] = COLOUR_YELLOW;
     5fe:	e1 e0       	ldi	r30, 0x01	; 1
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	e8 0f       	add	r30, r24
     608:	f1 1d       	adc	r31, r1
     60a:	9f ef       	ldi	r25, 0xFF	; 255
     60c:	90 83       	st	Z, r25
void default_grid(void)
{
	ledmatrix_clear();
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     60e:	8f 5f       	subi	r24, 0xFF	; 255
     610:	88 30       	cpi	r24, 0x08	; 8
     612:	a8 f3       	brcs	.-22     	; 0x5fe <default_grid+0x1c>
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
     614:	be 01       	movw	r22, r28
     616:	6f 5f       	subi	r22, 0xFF	; 255
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	8d e0       	ldi	r24, 0x0D	; 13
     61c:	0e 94 d4 05 	call	0xba8	; 0xba8 <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	09 c0       	rjmp	.+18     	; 0x636 <default_grid+0x54>
	{
		colours[row] = COLOUR_HALF_YELLOW;
     624:	e1 e0       	ldi	r30, 0x01	; 1
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ec 0f       	add	r30, r28
     62a:	fd 1f       	adc	r31, r29
     62c:	e8 0f       	add	r30, r24
     62e:	f1 1d       	adc	r31, r1
     630:	95 e5       	ldi	r25, 0x55	; 85
     632:	90 83       	st	Z, r25
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	88 30       	cpi	r24, 0x08	; 8
     638:	a8 f3       	brcs	.-22     	; 0x624 <default_grid+0x42>
	{
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
     63a:	be 01       	movw	r22, r28
     63c:	6f 5f       	subi	r22, 0xFF	; 255
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	8c e0       	ldi	r24, 0x0C	; 12
     642:	0e 94 d4 05 	call	0xba8	; 0xba8 <ledmatrix_update_column>
	ledmatrix_update_column(14, colours);
     646:	be 01       	movw	r22, r28
     648:	6f 5f       	subi	r22, 0xFF	; 255
     64a:	7f 4f       	sbci	r23, 0xFF	; 255
     64c:	8e e0       	ldi	r24, 0x0E	; 14
     64e:	0e 94 d4 05 	call	0xba8	; 0xba8 <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	09 c0       	rjmp	.+18     	; 0x668 <default_grid+0x86>
	{
		colours[row] = COLOUR_QUART_YELLOW;
     656:	e1 e0       	ldi	r30, 0x01	; 1
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	e8 0f       	add	r30, r24
     660:	f1 1d       	adc	r31, r1
     662:	91 e1       	ldi	r25, 0x11	; 17
     664:	90 83       	st	Z, r25
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
	ledmatrix_update_column(14, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	88 30       	cpi	r24, 0x08	; 8
     66a:	a8 f3       	brcs	.-22     	; 0x656 <default_grid+0x74>
	{
		colours[row] = COLOUR_QUART_YELLOW;
	}
	ledmatrix_update_column(11, colours);
     66c:	be 01       	movw	r22, r28
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	8b e0       	ldi	r24, 0x0B	; 11
     674:	0e 94 d4 05 	call	0xba8	; 0xba8 <ledmatrix_update_column>
	ledmatrix_update_column(15, colours);
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	8f e0       	ldi	r24, 0x0F	; 15
     680:	0e 94 d4 05 	call	0xba8	; 0xba8 <ledmatrix_update_column>
}
     684:	28 96       	adiw	r28, 0x08	; 8
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <initialise_game>:

// Initialize the game by resetting the grid and beat
void initialise_game(void)
{
	// initialize the display we are using.
	default_grid();
     696:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <default_grid>
	beat = 0;
     69a:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <beat+0x1>
     69e:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <beat>
     6a2:	08 95       	ret

000006a4 <is_game_over>:

// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over(void)
{
	// Detect if the game is over i.e. if a player has won.
	if (game_over) {
     6a4:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <game_over>
     6a8:	81 11       	cpse	r24, r1
		return 1;	
     6aa:	81 e0       	ldi	r24, 0x01	; 1
	} else {
	return 0;
	
	}
}
     6ac:	08 95       	ret

000006ae <update_points>:

void update_points() {
	
	//clear terminal and reprint the game score with the points
	move_terminal_cursor(10, 10);
     6ae:	6a e0       	ldi	r22, 0x0A	; 10
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	8a e0       	ldi	r24, 0x0A	; 10
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 3f 09 	call	0x127e	; 0x127e <move_terminal_cursor>
	clear_to_end_of_line();
     6ba:	0e 94 59 09 	call	0x12b2	; 0x12b2 <clear_to_end_of_line>
	printf("Game Score:%d", points);
     6be:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <points+0x1>
     6c2:	8f 93       	push	r24
     6c4:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <points>
     6c8:	8f 93       	push	r24
     6ca:	8f e1       	ldi	r24, 0x1F	; 31
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	9f 93       	push	r25
     6d0:	8f 93       	push	r24
     6d2:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf>
}
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
     6de:	08 95       	ret

000006e0 <play_note>:
	beat = 0;
}

// Play a note in the given lane
void play_note(uint8_t lane)
{	
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	d8 2f       	mov	r29, r24

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     6e8:	cb e0       	ldi	r28, 0x0B	; 11
     6ea:	7d c0       	rjmp	.+250    	; 0x7e6 <play_note+0x106>
	
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col; //this is the next position that the note will be in
     6ec:	8f e0       	ldi	r24, 0x0F	; 15
     6ee:	8c 1b       	sub	r24, r28
		uint8_t index = (future + beat) / 5;	//this is the note??
     6f0:	40 91 cc 01 	lds	r20, 0x01CC	; 0x8001cc <beat>
     6f4:	50 91 cd 01 	lds	r21, 0x01CD	; 0x8001cd <beat+0x1>
     6f8:	48 0f       	add	r20, r24
     6fa:	51 1d       	adc	r21, r1
     6fc:	9a 01       	movw	r18, r20
     6fe:	ad ec       	ldi	r26, 0xCD	; 205
     700:	bc ec       	ldi	r27, 0xCC	; 204
     702:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__umulhisi3>
     706:	fc 01       	movw	r30, r24
     708:	f6 95       	lsr	r31
     70a:	e7 95       	ror	r30
     70c:	f6 95       	lsr	r31
     70e:	e7 95       	ror	r30
		
		if ((future + beat) % 5) {
     710:	cf 01       	movw	r24, r30
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	88 0f       	add	r24, r24
     718:	99 1f       	adc	r25, r25
     71a:	8e 0f       	add	r24, r30
     71c:	9f 1f       	adc	r25, r31
     71e:	48 17       	cp	r20, r24
     720:	59 07       	cpc	r21, r25
     722:	09 f0       	breq	.+2      	; 0x726 <play_note+0x46>
     724:	5f c0       	rjmp	.+190    	; 0x7e4 <play_note+0x104>
			continue;
		}
		if (track[index] & (1<<lane))
     726:	ff 27       	eor	r31, r31
     728:	e3 5d       	subi	r30, 0xD3	; 211
     72a:	fe 4f       	sbci	r31, 0xFE	; 254
     72c:	80 81       	ld	r24, Z
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0d 2e       	mov	r0, r29
     732:	02 c0       	rjmp	.+4      	; 0x738 <play_note+0x58>
     734:	95 95       	asr	r25
     736:	87 95       	ror	r24
     738:	0a 94       	dec	r0
     73a:	e2 f7       	brpl	.-8      	; 0x734 <play_note+0x54>
     73c:	80 ff       	sbrs	r24, 0
     73e:	47 c0       	rjmp	.+142    	; 0x7ce <play_note+0xee>
		{
			
			if (green_check == lane) {
     740:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     744:	d8 13       	cpse	r29, r24
     746:	0c c0       	rjmp	.+24     	; 0x760 <play_note+0x80>
				points -= 1;
     748:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <points>
     74c:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <points+0x1>
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <points+0x1>
     756:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <points>
				update_points();
     75a:	0e 94 57 03 	call	0x6ae	; 0x6ae <update_points>
				
				break;
     75e:	46 c0       	rjmp	.+140    	; 0x7ec <play_note+0x10c>
			}
			
			green_check = lane;
     760:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			// if so, colour the two pixels green
			ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     764:	40 ef       	ldi	r20, 0xF0	; 240
     766:	1d 2f       	mov	r17, r29
     768:	11 0f       	add	r17, r17
     76a:	61 2f       	mov	r22, r17
     76c:	8c 2f       	mov	r24, r28
     76e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     772:	61 e0       	ldi	r22, 0x01	; 1
     774:	61 0f       	add	r22, r17
     776:	40 ef       	ldi	r20, 0xF0	; 240
     778:	8c 2f       	mov	r24, r28
     77a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
			
			//if the note is in the two specified lanes then award the appropriate amount of points
			if (col == 11 || col == 15) {
     77e:	cb 30       	cpi	r28, 0x0B	; 11
     780:	11 f0       	breq	.+4      	; 0x786 <play_note+0xa6>
     782:	cf 30       	cpi	r28, 0x0F	; 15
     784:	51 f4       	brne	.+20     	; 0x79a <play_note+0xba>
				points += 1;
     786:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <points>
     78a:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <points+0x1>
     78e:	01 96       	adiw	r24, 0x01	; 1
     790:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <points+0x1>
     794:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <points>
     798:	23 c0       	rjmp	.+70     	; 0x7e0 <play_note+0x100>
				
			} else if (col == 12 || col == 14) {
     79a:	cc 30       	cpi	r28, 0x0C	; 12
     79c:	11 f0       	breq	.+4      	; 0x7a2 <play_note+0xc2>
     79e:	ce 30       	cpi	r28, 0x0E	; 14
     7a0:	51 f4       	brne	.+20     	; 0x7b6 <play_note+0xd6>
				points += 2;
     7a2:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <points>
     7a6:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <points+0x1>
     7aa:	02 96       	adiw	r24, 0x02	; 2
     7ac:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <points+0x1>
     7b0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <points>
     7b4:	15 c0       	rjmp	.+42     	; 0x7e0 <play_note+0x100>
				
			} else if (col == 13) {
     7b6:	cd 30       	cpi	r28, 0x0D	; 13
     7b8:	99 f4       	brne	.+38     	; 0x7e0 <play_note+0x100>
				points += 3;
     7ba:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <points>
     7be:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <points+0x1>
     7c2:	03 96       	adiw	r24, 0x03	; 3
     7c4:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <points+0x1>
     7c8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <points>
     7cc:	09 c0       	rjmp	.+18     	; 0x7e0 <play_note+0x100>
			
			}
			
		} else {
			points -= 1;
     7ce:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <points>
     7d2:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <points+0x1>
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <points+0x1>
     7dc:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <points>
		
		}
			
		update_points();
     7e0:	0e 94 57 03 	call	0x6ae	; 0x6ae <update_points>

// Play a note in the given lane
void play_note(uint8_t lane)
{	

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     7e4:	cf 5f       	subi	r28, 0xFF	; 255
     7e6:	c0 31       	cpi	r28, 0x10	; 16
     7e8:	08 f4       	brcc	.+2      	; 0x7ec <play_note+0x10c>
     7ea:	80 cf       	rjmp	.-256    	; 0x6ec <play_note+0xc>
			
		update_points();
		
		}
		
}
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	08 95       	ret

000007f4 <advance_note>:
	

// Advance the notes one row down the display
void advance_note(void)
{
     7f4:	df 92       	push	r13
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     802:	10 e0       	ldi	r17, 0x00	; 0
     804:	e9 c0       	rjmp	.+466    	; 0x9d8 <__stack+0xd9>
	{
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col;
     806:	8f e0       	ldi	r24, 0x0F	; 15
     808:	81 1b       	sub	r24, r17
		uint8_t index = (future + beat) / 5;
     80a:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <beat>
     80e:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <beat+0x1>
     812:	af 01       	movw	r20, r30
     814:	48 0f       	add	r20, r24
     816:	51 1d       	adc	r21, r1
     818:	9a 01       	movw	r18, r20
     81a:	ad ec       	ldi	r26, 0xCD	; 205
     81c:	bc ec       	ldi	r27, 0xCC	; 204
     81e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__umulhisi3>
     822:	ec 01       	movw	r28, r24
     824:	d6 95       	lsr	r29
     826:	c7 95       	ror	r28
     828:	d6 95       	lsr	r29
     82a:	c7 95       	ror	r28
     82c:	0c 2f       	mov	r16, r28
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     82e:	9f 01       	movw	r18, r30
     830:	21 5f       	subi	r18, 0xF1	; 241
     832:	3f 4f       	sbci	r19, 0xFF	; 255
     834:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__umulhisi3>
     838:	96 95       	lsr	r25
     83a:	87 95       	ror	r24
     83c:	96 95       	lsr	r25
     83e:	87 95       	ror	r24
		uint8_t ghost_index = ghost_start_index +1;
     840:	8f 5f       	subi	r24, 0xFF	; 255
		
		//iterate over until the next valid future note is coming
		for (ghost_index; ghost_index < TRACK_LENGTH; ghost_index++) {
     842:	08 c0       	rjmp	.+16     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
			if (track[ghost_index] & 0x0F) {
     844:	e8 2f       	mov	r30, r24
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	e3 5d       	subi	r30, 0xD3	; 211
     84a:	fe 4f       	sbci	r31, 0xFE	; 254
     84c:	90 81       	ld	r25, Z
     84e:	9f 70       	andi	r25, 0x0F	; 15
     850:	19 f4       	brne	.+6      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
		uint8_t index = (future + beat) / 5;
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
		uint8_t ghost_index = ghost_start_index +1;
		
		//iterate over until the next valid future note is coming
		for (ghost_index; ghost_index < TRACK_LENGTH; ghost_index++) {
     852:	8f 5f       	subi	r24, 0xFF	; 255
     854:	81 38       	cpi	r24, 0x81	; 129
     856:	b0 f3       	brcs	.-20     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
			if (track[ghost_index] & 0x0F) {
				break;
			}
		}
		uint8_t ghost_note = track[ghost_index];
     858:	e8 2f       	mov	r30, r24
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	e3 5d       	subi	r30, 0xD3	; 211
     85e:	fe 4f       	sbci	r31, 0xFE	; 254
     860:	f0 80       	ld	r15, Z
		
		if (index >= TRACK_LENGTH)
     862:	01 38       	cpi	r16, 0x81	; 129
     864:	20 f0       	brcs	.+8      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
		{
			//Game Over
			game_over = 1;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <game_over>
			break;
     86c:	b8 c0       	rjmp	.+368    	; 0x9de <__stack+0xdf>
		}
		if ((future+beat) % 5)
     86e:	9a 01       	movw	r18, r20
     870:	ad ec       	ldi	r26, 0xCD	; 205
     872:	bc ec       	ldi	r27, 0xCC	; 204
     874:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__umulhisi3>
     878:	96 95       	lsr	r25
     87a:	87 95       	ror	r24
     87c:	96 95       	lsr	r25
     87e:	87 95       	ror	r24
     880:	9c 01       	movw	r18, r24
     882:	22 0f       	add	r18, r18
     884:	33 1f       	adc	r19, r19
     886:	22 0f       	add	r18, r18
     888:	33 1f       	adc	r19, r19
     88a:	82 0f       	add	r24, r18
     88c:	93 1f       	adc	r25, r19
     88e:	48 17       	cp	r20, r24
     890:	59 07       	cpc	r21, r25
     892:	09 f0       	breq	.+2      	; 0x896 <__DATA_REGION_LENGTH__+0x96>
     894:	a0 c0       	rjmp	.+320    	; 0x9d6 <__stack+0xd7>
     896:	00 e0       	ldi	r16, 0x00	; 0
     898:	9b c0       	rjmp	.+310    	; 0x9d0 <__stack+0xd1>
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
		{
			//check if the next note is in the appropriate lane
			if ((ghost_note == 0x01) & (lane == 0)) {
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	f9 12       	cpse	r15, r25
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	01 11       	cpse	r16, r1
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	89 23       	and	r24, r25
     8a8:	71 f0       	breq	.+28     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
				ledmatrix_update_pixel(0, 2*lane, COLOUR_DARK_RED);
     8aa:	41 e0       	ldi	r20, 0x01	; 1
     8ac:	e0 2e       	mov	r14, r16
     8ae:	ee 0c       	add	r14, r14
     8b0:	6e 2d       	mov	r22, r14
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, COLOUR_DARK_RED);
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	6e 0d       	add	r22, r14
     8bc:	41 e0       	ldi	r20, 0x01	; 1
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
     8c4:	47 c0       	rjmp	.+142    	; 0x954 <__stack+0x55>
				
			} else if ((ghost_note == 0x02) & (lane == 1)) {
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	f8 12       	cpse	r15, r24
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	01 30       	cpi	r16, 0x01	; 1
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	89 23       	and	r24, r25
     8d8:	71 f0       	breq	.+28     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
				ledmatrix_update_pixel(0, 2*lane, COLOUR_DARK_RED);
     8da:	41 e0       	ldi	r20, 0x01	; 1
     8dc:	e0 2e       	mov	r14, r16
     8de:	ee 0c       	add	r14, r14
     8e0:	6e 2d       	mov	r22, r14
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, COLOUR_DARK_RED);
     8e8:	61 e0       	ldi	r22, 0x01	; 1
     8ea:	6e 0d       	add	r22, r14
     8ec:	41 e0       	ldi	r20, 0x01	; 1
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
     8f4:	2f c0       	rjmp	.+94     	; 0x954 <__stack+0x55>
			
			} else if ((ghost_note == 0x04) & (lane == 2)) {
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	84 e0       	ldi	r24, 0x04	; 4
     8fa:	f8 12       	cpse	r15, r24
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	02 30       	cpi	r16, 0x02	; 2
     902:	09 f0       	breq	.+2      	; 0x906 <__stack+0x7>
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	89 23       	and	r24, r25
     908:	71 f0       	breq	.+28     	; 0x926 <__stack+0x27>
				ledmatrix_update_pixel(0, 2*lane, COLOUR_DARK_RED);
     90a:	41 e0       	ldi	r20, 0x01	; 1
     90c:	e0 2e       	mov	r14, r16
     90e:	ee 0c       	add	r14, r14
     910:	6e 2d       	mov	r22, r14
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, COLOUR_DARK_RED);
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	6e 0d       	add	r22, r14
     91c:	41 e0       	ldi	r20, 0x01	; 1
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
     924:	17 c0       	rjmp	.+46     	; 0x954 <__stack+0x55>
			
			} else if ((ghost_note == 0x08) & (lane == 3)) {
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	88 e0       	ldi	r24, 0x08	; 8
     92a:	f8 12       	cpse	r15, r24
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	03 30       	cpi	r16, 0x03	; 3
     932:	09 f0       	breq	.+2      	; 0x936 <__stack+0x37>
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	89 23       	and	r24, r25
     938:	69 f0       	breq	.+26     	; 0x954 <__stack+0x55>
				ledmatrix_update_pixel(0, 2*lane, COLOUR_DARK_RED);
     93a:	41 e0       	ldi	r20, 0x01	; 1
     93c:	e0 2e       	mov	r14, r16
     93e:	ee 0c       	add	r14, r14
     940:	6e 2d       	mov	r22, r14
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, COLOUR_DARK_RED);
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	6e 0d       	add	r22, r14
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
			
			}
				
			if (track[index] & (1<<lane))
     954:	fe 01       	movw	r30, r28
     956:	ff 27       	eor	r31, r31
     958:	e3 5d       	subi	r30, 0xD3	; 211
     95a:	fe 4f       	sbci	r31, 0xFE	; 254
     95c:	80 81       	ld	r24, Z
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	00 2e       	mov	r0, r16
     962:	02 c0       	rjmp	.+4      	; 0x968 <__stack+0x69>
     964:	95 95       	asr	r25
     966:	87 95       	ror	r24
     968:	0a 94       	dec	r0
     96a:	e2 f7       	brpl	.-8      	; 0x964 <__stack+0x65>
     96c:	80 ff       	sbrs	r24, 0
     96e:	2f c0       	rjmp	.+94     	; 0x9ce <__stack+0xcf>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
     970:	1b 30       	cpi	r17, 0x0B	; 11
     972:	59 f0       	breq	.+22     	; 0x98a <__stack+0x8b>
     974:	1f 30       	cpi	r17, 0x0F	; 15
     976:	71 f0       	breq	.+28     	; 0x994 <__stack+0x95>
				{
					colour = COLOUR_QUART_YELLOW;
				}
				else if (col==12 || col == 14)
     978:	1c 30       	cpi	r17, 0x0C	; 12
     97a:	89 f0       	breq	.+34     	; 0x99e <__stack+0x9f>
     97c:	1e 30       	cpi	r17, 0x0E	; 14
     97e:	a1 f0       	breq	.+40     	; 0x9a8 <__stack+0xa9>
				{
					colour = COLOUR_HALF_YELLOW;
				}
				else if (col==13)
     980:	1d 30       	cpi	r17, 0x0D	; 13
     982:	b9 f4       	brne	.+46     	; 0x9b2 <__stack+0xb3>
				{
					colour = COLOUR_YELLOW;
     984:	dd 24       	eor	r13, r13
     986:	da 94       	dec	r13
     988:	15 c0       	rjmp	.+42     	; 0x9b4 <__stack+0xb5>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
				{
					colour = COLOUR_QUART_YELLOW;
     98a:	0f 2e       	mov	r0, r31
     98c:	f1 e1       	ldi	r31, 0x11	; 17
     98e:	df 2e       	mov	r13, r31
     990:	f0 2d       	mov	r31, r0
     992:	10 c0       	rjmp	.+32     	; 0x9b4 <__stack+0xb5>
     994:	0f 2e       	mov	r0, r31
     996:	f1 e1       	ldi	r31, 0x11	; 17
     998:	df 2e       	mov	r13, r31
     99a:	f0 2d       	mov	r31, r0
     99c:	0b c0       	rjmp	.+22     	; 0x9b4 <__stack+0xb5>
				}
				else if (col==12 || col == 14)
				{
					colour = COLOUR_HALF_YELLOW;
     99e:	0f 2e       	mov	r0, r31
     9a0:	f5 e5       	ldi	r31, 0x55	; 85
     9a2:	df 2e       	mov	r13, r31
     9a4:	f0 2d       	mov	r31, r0
     9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <__stack+0xb5>
     9a8:	0f 2e       	mov	r0, r31
     9aa:	f5 e5       	ldi	r31, 0x55	; 85
     9ac:	df 2e       	mov	r13, r31
     9ae:	f0 2d       	mov	r31, r0
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <__stack+0xb5>
				{
					colour = COLOUR_YELLOW;
				}
				else
				{
					colour = COLOUR_BLACK;
     9b2:	d1 2c       	mov	r13, r1
				}
				ledmatrix_update_pixel(col, 2*lane, colour);
     9b4:	4d 2d       	mov	r20, r13
     9b6:	e0 2e       	mov	r14, r16
     9b8:	ee 0c       	add	r14, r14
     9ba:	6e 2d       	mov	r22, r14
     9bc:	81 2f       	mov	r24, r17
     9be:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 2*lane+1, colour);
     9c2:	61 e0       	ldi	r22, 0x01	; 1
     9c4:	6e 0d       	add	r22, r14
     9c6:	4d 2d       	mov	r20, r13
     9c8:	81 2f       	mov	r24, r17
     9ca:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
		}
		if ((future+beat) % 5)
		{
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
     9ce:	0f 5f       	subi	r16, 0xFF	; 255
     9d0:	04 30       	cpi	r16, 0x04	; 4
     9d2:	08 f4       	brcc	.+2      	; 0x9d6 <__stack+0xd7>
     9d4:	62 cf       	rjmp	.-316    	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
// Advance the notes one row down the display
void advance_note(void)
{
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     9d6:	1f 5f       	subi	r17, 0xFF	; 255
     9d8:	10 31       	cpi	r17, 0x10	; 16
     9da:	08 f4       	brcc	.+2      	; 0x9de <__stack+0xdf>
     9dc:	14 cf       	rjmp	.-472    	; 0x806 <__DATA_REGION_LENGTH__+0x6>
			}
		}
	}
	
	// increment the beat
	beat++;
     9de:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <beat>
     9e2:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <beat+0x1>
     9e6:	01 96       	adiw	r24, 0x01	; 1
     9e8:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <beat+0x1>
     9ec:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <beat>
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     9f0:	c0 e0       	ldi	r28, 0x00	; 0
     9f2:	ac c0       	rjmp	.+344    	; 0xb4c <__stack+0x24d>
	{
		// col counts from one end, future from the other
		uint8_t future = MATRIX_NUM_COLUMNS-1-col;
     9f4:	8f e0       	ldi	r24, 0x0F	; 15
     9f6:	8c 1b       	sub	r24, r28
		// notes are only drawn every five columns
		if ((future+beat)%5)
     9f8:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <beat>
     9fc:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <beat+0x1>
     a00:	af 01       	movw	r20, r30
     a02:	48 0f       	add	r20, r24
     a04:	51 1d       	adc	r21, r1
     a06:	9a 01       	movw	r18, r20
     a08:	ad ec       	ldi	r26, 0xCD	; 205
     a0a:	bc ec       	ldi	r27, 0xCC	; 204
     a0c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__umulhisi3>
     a10:	96 95       	lsr	r25
     a12:	87 95       	ror	r24
     a14:	96 95       	lsr	r25
     a16:	87 95       	ror	r24
     a18:	9c 01       	movw	r18, r24
     a1a:	22 0f       	add	r18, r18
     a1c:	33 1f       	adc	r19, r19
     a1e:	22 0f       	add	r18, r18
     a20:	33 1f       	adc	r19, r19
     a22:	82 0f       	add	r24, r18
     a24:	93 1f       	adc	r25, r19
     a26:	48 17       	cp	r20, r24
     a28:	59 07       	cpc	r21, r25
     a2a:	09 f0       	breq	.+2      	; 0xa2e <__stack+0x12f>
     a2c:	8e c0       	rjmp	.+284    	; 0xb4a <__stack+0x24b>
		{
			continue;
		}
		
		// index of which note in the track to play
		uint8_t index = (future+beat)/5;
     a2e:	9a 01       	movw	r18, r20
     a30:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__umulhisi3>
     a34:	ac 01       	movw	r20, r24
     a36:	56 95       	lsr	r21
     a38:	47 95       	ror	r20
     a3a:	56 95       	lsr	r21
     a3c:	47 95       	ror	r20
		
		uint8_t ghost_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     a3e:	9f 01       	movw	r18, r30
     a40:	21 5f       	subi	r18, 0xF1	; 241
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__umulhisi3>
     a48:	96 95       	lsr	r25
     a4a:	87 95       	ror	r24
     a4c:	96 95       	lsr	r25
     a4e:	87 95       	ror	r24
		//next note in track that is coming
		uint8_t ghost_note = track[ghost_index];
     a50:	fc 01       	movw	r30, r24
     a52:	ff 27       	eor	r31, r31
     a54:	e3 5d       	subi	r30, 0xD3	; 211
     a56:	fe 4f       	sbci	r31, 0xFE	; 254
     a58:	e0 80       	ld	r14, Z
		
		// if the index is beyond the end of the track,
		// no note can be drawn
		if (index >= TRACK_LENGTH || (index + 1) >= TRACK_LENGTH)
     a5a:	41 38       	cpi	r20, 0x81	; 129
     a5c:	08 f0       	brcs	.+2      	; 0xa60 <__stack+0x161>
     a5e:	75 c0       	rjmp	.+234    	; 0xb4a <__stack+0x24b>
     a60:	8a 01       	movw	r16, r20
     a62:	11 27       	eor	r17, r17
     a64:	c8 01       	movw	r24, r16
     a66:	01 96       	adiw	r24, 0x01	; 1
     a68:	81 38       	cpi	r24, 0x81	; 129
     a6a:	91 05       	cpc	r25, r1
     a6c:	0c f0       	brlt	.+2      	; 0xa70 <__stack+0x171>
     a6e:	6d c0       	rjmp	.+218    	; 0xb4a <__stack+0x24b>
     a70:	d0 e0       	ldi	r29, 0x00	; 0
     a72:	68 c0       	rjmp	.+208    	; 0xb44 <__stack+0x245>
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{									
				
			//check if there's a note in the specific path
			if (track[index] & (1<<lane)) {
     a74:	f8 01       	movw	r30, r16
     a76:	e3 5d       	subi	r30, 0xD3	; 211
     a78:	fe 4f       	sbci	r31, 0xFE	; 254
     a7a:	80 81       	ld	r24, Z
     a7c:	28 2f       	mov	r18, r24
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	0d 2e       	mov	r0, r29
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <__stack+0x189>
     a84:	35 95       	asr	r19
     a86:	27 95       	ror	r18
     a88:	0a 94       	dec	r0
     a8a:	e2 f7       	brpl	.-8      	; 0xa84 <__stack+0x185>
     a8c:	20 ff       	sbrs	r18, 0
     a8e:	59 c0       	rjmp	.+178    	; 0xb42 <__stack+0x243>
				
				//check if theres a note in the led matrix section
				if ((green_check == lane) & ((col >= 11) & (col <= 15))) {
     a90:	21 e0       	ldi	r18, 0x01	; 1
     a92:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a96:	9d 13       	cpse	r25, r29
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	31 e0       	ldi	r19, 0x01	; 1
     a9c:	95 ef       	ldi	r25, 0xF5	; 245
     a9e:	9c 0f       	add	r25, r28
     aa0:	95 30       	cpi	r25, 0x05	; 5
     aa2:	08 f0       	brcs	.+2      	; 0xaa6 <__stack+0x1a7>
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	22 23       	and	r18, r18
     aa8:	81 f0       	breq	.+32     	; 0xaca <__stack+0x1cb>
     aaa:	33 23       	and	r19, r19
     aac:	71 f0       	breq	.+28     	; 0xaca <__stack+0x1cb>
					//if true set pixels to green
					ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     aae:	40 ef       	ldi	r20, 0xF0	; 240
     ab0:	fd 2e       	mov	r15, r29
     ab2:	ff 0c       	add	r15, r15
     ab4:	6f 2d       	mov	r22, r15
     ab6:	8c 2f       	mov	r24, r28
     ab8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	6f 0d       	add	r22, r15
     ac0:	40 ef       	ldi	r20, 0xF0	; 240
     ac2:	8c 2f       	mov	r24, r28
     ac4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
     ac8:	37 c0       	rjmp	.+110    	; 0xb38 <__stack+0x239>
				
				} else if (ghost_note != track[index]) {
     aca:	e8 16       	cp	r14, r24
     acc:	d9 f0       	breq	.+54     	; 0xb04 <__stack+0x205>
					
					

					ledmatrix_update_pixel(col, 2*lane, COLOUR_RED);
     ace:	4f e0       	ldi	r20, 0x0F	; 15
     ad0:	fd 2e       	mov	r15, r29
     ad2:	ff 0c       	add	r15, r15
     ad4:	6f 2d       	mov	r22, r15
     ad6:	8c 2f       	mov	r24, r28
     ad8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_RED);
     adc:	61 e0       	ldi	r22, 0x01	; 1
     ade:	6f 0d       	add	r22, r15
     ae0:	4f e0       	ldi	r20, 0x0F	; 15
     ae2:	8c 2f       	mov	r24, r28
     ae4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
					
					//if note slides off screen and green_check isn't checked to a lane
					if (col == 15) {
     ae8:	cf 30       	cpi	r28, 0x0F	; 15
     aea:	31 f5       	brne	.+76     	; 0xb38 <__stack+0x239>
						points -= 1;
     aec:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <points>
     af0:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <points+0x1>
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <points+0x1>
     afa:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <points>
						
						update_points();						
     afe:	0e 94 57 03 	call	0x6ae	; 0x6ae <update_points>
     b02:	1a c0       	rjmp	.+52     	; 0xb38 <__stack+0x239>
					}
					
				} else {
					ledmatrix_update_pixel(col, 2*lane, COLOUR_RED);
     b04:	4f e0       	ldi	r20, 0x0F	; 15
     b06:	fd 2e       	mov	r15, r29
     b08:	ff 0c       	add	r15, r15
     b0a:	6f 2d       	mov	r22, r15
     b0c:	8c 2f       	mov	r24, r28
     b0e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_RED);	
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	6f 0d       	add	r22, r15
     b16:	4f e0       	ldi	r20, 0x0F	; 15
     b18:	8c 2f       	mov	r24, r28
     b1a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ledmatrix_update_pixel>
					
					//if note slides off screen and green_check isn't checked to a lane
					if (col == 15) {
     b1e:	cf 30       	cpi	r28, 0x0F	; 15
     b20:	59 f4       	brne	.+22     	; 0xb38 <__stack+0x239>
						points -= 1;
     b22:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <points>
     b26:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <points+0x1>
     b2a:	01 97       	sbiw	r24, 0x01	; 1
     b2c:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <points+0x1>
     b30:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <points>
						
						update_points();						
     b34:	0e 94 57 03 	call	0x6ae	; 0x6ae <update_points>
					}
				} 
				
				//check if the current note goes off the screen
				if (col >= 15) {
     b38:	cf 30       	cpi	r28, 0x0F	; 15
     b3a:	18 f0       	brcs	.+6      	; 0xb42 <__stack+0x243>
					green_check = -1;
     b3c:	8f ef       	ldi	r24, 0xFF	; 255
     b3e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		{
			continue;
		}
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
     b42:	df 5f       	subi	r29, 0xFF	; 255
     b44:	d4 30       	cpi	r29, 0x04	; 4
     b46:	08 f4       	brcc	.+2      	; 0xb4a <__stack+0x24b>
     b48:	95 cf       	rjmp	.-214    	; 0xa74 <__stack+0x175>
	
	// increment the beat
	beat++;
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     b4a:	cf 5f       	subi	r28, 0xFF	; 255
     b4c:	c0 31       	cpi	r28, 0x10	; 16
     b4e:	08 f4       	brcc	.+2      	; 0xb52 <__stack+0x253>
     b50:	51 cf       	rjmp	.-350    	; 0x9f4 <__stack+0xf5>
				
								
			}
		}
	}
}
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	08 95       	ret

00000b62 <ledmatrix_setup>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     b62:	80 e8       	ldi	r24, 0x80	; 128
     b64:	0e 94 0d 09 	call	0x121a	; 0x121a <spi_setup_master>
     b68:	08 95       	ret

00000b6a <ledmatrix_update_pixel>:
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	80 31       	cpi	r24, 0x10	; 16
     b72:	b0 f4       	brcc	.+44     	; 0xba0 <ledmatrix_update_pixel+0x36>
     b74:	68 30       	cpi	r22, 0x08	; 8
     b76:	a0 f4       	brcc	.+40     	; 0xba0 <ledmatrix_update_pixel+0x36>
     b78:	14 2f       	mov	r17, r20
     b7a:	c6 2f       	mov	r28, r22
     b7c:	d8 2f       	mov	r29, r24
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	0e 94 39 09 	call	0x1272	; 0x1272 <spi_send_byte>
     b84:	6c 2f       	mov	r22, r28
     b86:	67 70       	andi	r22, 0x07	; 7
     b88:	80 e1       	ldi	r24, 0x10	; 16
     b8a:	68 9f       	mul	r22, r24
     b8c:	90 01       	movw	r18, r0
     b8e:	11 24       	eor	r1, r1
     b90:	8d 2f       	mov	r24, r29
     b92:	8f 70       	andi	r24, 0x0F	; 15
     b94:	82 2b       	or	r24, r18
     b96:	0e 94 39 09 	call	0x1272	; 0x1272 <spi_send_byte>
     b9a:	81 2f       	mov	r24, r17
     b9c:	0e 94 39 09 	call	0x1272	; 0x1272 <spi_send_byte>
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	08 95       	ret

00000ba8 <ledmatrix_update_column>:
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	80 31       	cpi	r24, 0x10	; 16
     bb0:	a0 f4       	brcc	.+40     	; 0xbda <ledmatrix_update_column+0x32>
     bb2:	8b 01       	movw	r16, r22
     bb4:	c8 2f       	mov	r28, r24
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	0e 94 39 09 	call	0x1272	; 0x1272 <spi_send_byte>
     bbc:	8c 2f       	mov	r24, r28
     bbe:	8f 70       	andi	r24, 0x0F	; 15
     bc0:	0e 94 39 09 	call	0x1272	; 0x1272 <spi_send_byte>
     bc4:	c0 e0       	ldi	r28, 0x00	; 0
     bc6:	07 c0       	rjmp	.+14     	; 0xbd6 <ledmatrix_update_column+0x2e>
     bc8:	f8 01       	movw	r30, r16
     bca:	ec 0f       	add	r30, r28
     bcc:	f1 1d       	adc	r31, r1
     bce:	80 81       	ld	r24, Z
     bd0:	0e 94 39 09 	call	0x1272	; 0x1272 <spi_send_byte>
     bd4:	cf 5f       	subi	r28, 0xFF	; 255
     bd6:	c8 30       	cpi	r28, 0x08	; 8
     bd8:	b8 f3       	brcs	.-18     	; 0xbc8 <ledmatrix_update_column+0x20>
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	08 95       	ret

00000be2 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     be2:	8f e0       	ldi	r24, 0x0F	; 15
     be4:	0e 94 39 09 	call	0x1272	; 0x1272 <spi_send_byte>
     be8:	08 95       	ret

00000bea <initialise_hardware>:
	}
}

void initialise_hardware(void)
{
	ledmatrix_setup();
     bea:	0e 94 b1 05 	call	0xb62	; 0xb62 <ledmatrix_setup>
	init_button_interrupts();
     bee:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     bf2:	40 e0       	ldi	r20, 0x00	; 0
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	7b e4       	ldi	r23, 0x4B	; 75
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 25 08 	call	0x104a	; 0x104a <init_serial_stdio>
	
	init_timer0();
     c00:	0e 94 81 09 	call	0x1302	; 0x1302 <init_timer0>
	init_timer1();
     c04:	0e 94 cc 09 	call	0x1398	; 0x1398 <init_timer1>
	init_timer2();
     c08:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <init_timer2>
	
	// Turn on global interrupts
	sei();
     c0c:	78 94       	sei
     c0e:	08 95       	ret

00000c10 <start_screen>:
}

void start_screen(void)
{
     c10:	4f 92       	push	r4
     c12:	5f 92       	push	r5
     c14:	6f 92       	push	r6
     c16:	7f 92       	push	r7
     c18:	8f 92       	push	r8
     c1a:	9f 92       	push	r9
     c1c:	af 92       	push	r10
     c1e:	bf 92       	push	r11
     c20:	cf 92       	push	r12
     c22:	df 92       	push	r13
     c24:	ef 92       	push	r14
     c26:	ff 92       	push	r15
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
	// Clear terminal screen and output a message
	clear_terminal();
     c2c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <clear_terminal>
	show_cursor();
     c30:	0e 94 78 09 	call	0x12f0	; 0x12f0 <show_cursor>
	clear_terminal();
     c34:	0e 94 50 09 	call	0x12a0	; 0x12a0 <clear_terminal>
	hide_cursor();
     c38:	0e 94 6f 09 	call	0x12de	; 0x12de <hide_cursor>
	set_display_attribute(FG_WHITE);
     c3c:	85 e2       	ldi	r24, 0x25	; 37
     c3e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <set_display_attribute>
	move_terminal_cursor(10,4);
     c42:	64 e0       	ldi	r22, 0x04	; 4
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	8a e0       	ldi	r24, 0x0A	; 10
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 3f 09 	call	0x127e	; 0x127e <move_terminal_cursor>
	printf_P(PSTR("  ______   __     __  _______         __    __"));
     c4e:	81 e3       	ldi	r24, 0x31	; 49
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	9f 93       	push	r25
     c54:	8f 93       	push	r24
     c56:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
	move_terminal_cursor(10,5);
     c5a:	65 e0       	ldi	r22, 0x05	; 5
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	8a e0       	ldi	r24, 0x0A	; 10
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 3f 09 	call	0x127e	; 0x127e <move_terminal_cursor>
	printf_P(PSTR(" /      \\ |  \\   |  \\|       \\       |  \\  |  \\"));
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	93 e0       	ldi	r25, 0x03	; 3
     c6a:	9f 93       	push	r25
     c6c:	8f 93       	push	r24
     c6e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
	move_terminal_cursor(10,6);
     c72:	66 e0       	ldi	r22, 0x06	; 6
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	8a e0       	ldi	r24, 0x0A	; 10
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 3f 09 	call	0x127e	; 0x127e <move_terminal_cursor>
	printf_P(PSTR("|  $$$$$$\\| $$   | $$| $$$$$$$\\      | $$  | $$  ______    ______    ______"));
     c7e:	85 eb       	ldi	r24, 0xB5	; 181
     c80:	92 e0       	ldi	r25, 0x02	; 2
     c82:	9f 93       	push	r25
     c84:	8f 93       	push	r24
     c86:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
	move_terminal_cursor(10,7);
     c8a:	67 e0       	ldi	r22, 0x07	; 7
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	8a e0       	ldi	r24, 0x0A	; 10
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 3f 09 	call	0x127e	; 0x127e <move_terminal_cursor>
	printf_P(PSTR("| $$__| $$| $$   | $$| $$__| $$      | $$__| $$ /      \\  /      \\  /      \\"));
     c96:	88 e6       	ldi	r24, 0x68	; 104
     c98:	92 e0       	ldi	r25, 0x02	; 2
     c9a:	9f 93       	push	r25
     c9c:	8f 93       	push	r24
     c9e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
	move_terminal_cursor(10,8);
     ca2:	68 e0       	ldi	r22, 0x08	; 8
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	8a e0       	ldi	r24, 0x0A	; 10
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 3f 09 	call	0x127e	; 0x127e <move_terminal_cursor>
	printf_P(PSTR("| $$    $$ \\$$\\ /  $$| $$    $$      | $$    $$|  $$$$$$\\|  $$$$$$\\|  $$$$$$\\"));
     cae:	8a e1       	ldi	r24, 0x1A	; 26
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	9f 93       	push	r25
     cb4:	8f 93       	push	r24
     cb6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
	move_terminal_cursor(10,9);
     cba:	69 e0       	ldi	r22, 0x09	; 9
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	8a e0       	ldi	r24, 0x0A	; 10
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 3f 09 	call	0x127e	; 0x127e <move_terminal_cursor>
	printf_P(PSTR("| $$$$$$$$  \\$$\\  $$ | $$$$$$$\\      | $$$$$$$$| $$    $$| $$   \\$$| $$  | $$"));
     cc6:	8c ec       	ldi	r24, 0xCC	; 204
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	9f 93       	push	r25
     ccc:	8f 93       	push	r24
     cce:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
	move_terminal_cursor(10,10);
     cd2:	6a e0       	ldi	r22, 0x0A	; 10
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	8a e0       	ldi	r24, 0x0A	; 10
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 3f 09 	call	0x127e	; 0x127e <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$   \\$$ $$  | $$  | $$      | $$  | $$| $$$$$$$$| $$      | $$__/ $$"));
     cde:	8e e7       	ldi	r24, 0x7E	; 126
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	9f 93       	push	r25
     ce4:	8f 93       	push	r24
     ce6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
	move_terminal_cursor(10,11);
     cea:	6b e0       	ldi	r22, 0x0B	; 11
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	8a e0       	ldi	r24, 0x0A	; 10
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 3f 09 	call	0x127e	; 0x127e <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$    \\$$$   | $$  | $$      | $$  | $$ \\$$     \\| $$       \\$$    $$"));
     cf6:	80 e3       	ldi	r24, 0x30	; 48
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	9f 93       	push	r25
     cfc:	8f 93       	push	r24
     cfe:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
	move_terminal_cursor(10,12);
     d02:	6c e0       	ldi	r22, 0x0C	; 12
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	8a e0       	ldi	r24, 0x0A	; 10
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 3f 09 	call	0x127e	; 0x127e <move_terminal_cursor>
	printf_P(PSTR(" \\$$   \\$$     \\$     \\$$   \\$$       \\$$   \\$$  \\$$$$$$$ \\$$        \\$$$$$$"));
     d0e:	83 ee       	ldi	r24, 0xE3	; 227
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	9f 93       	push	r25
     d14:	8f 93       	push	r24
     d16:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
	move_terminal_cursor(10,14);
     d1a:	6e e0       	ldi	r22, 0x0E	; 14
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	8a e0       	ldi	r24, 0x0A	; 10
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 3f 09 	call	0x127e	; 0x127e <move_terminal_cursor>
	// change this to your name and student number; remove the chevrons <>
	printf_P(PSTR("CSSE2010/7201 A2 by  Cailin Delgado - 48027942"));
     d26:	84 eb       	ldi	r24, 0xB4	; 180
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	9f 93       	push	r25
     d2c:	8f 93       	push	r24
     d2e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
     d32:	0e 94 a2 02 	call	0x544	; 0x544 <show_start_screen>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
     d36:	0e 94 97 09 	call	0x132e	; 0x132e <get_current_time>
     d3a:	4b 01       	movw	r8, r22
     d3c:	5c 01       	movw	r10, r24
	
	uint8_t frame_number = 0;
	game_speed = 1000;
     d3e:	88 ee       	ldi	r24, 0xE8	; 232
     d40:	93 e0       	ldi	r25, 0x03	; 3
     d42:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <game_speed+0x1>
     d46:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <game_speed>
     d4a:	8d b7       	in	r24, 0x3d	; 61
     d4c:	9e b7       	in	r25, 0x3e	; 62
     d4e:	44 96       	adiw	r24, 0x14	; 20
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	9e bf       	out	0x3e, r25	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	8d bf       	out	0x3d, r24	; 61
	show_start_screen();

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
	
	uint8_t frame_number = 0;
     d5a:	c0 e0       	ldi	r28, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available())
     d5c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <serial_input_available>
     d60:	88 23       	and	r24, r24
     d62:	39 f0       	breq	.+14     	; 0xd72 <start_screen+0x162>
		{
			serial_input = fgetc(stdin);
     d64:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <__iob>
     d68:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <__iob+0x1>
     d6c:	0e 94 24 0a 	call	0x1448	; 0x1448 <fgetc>
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <start_screen+0x164>
	{
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     d72:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available())
		{
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S')
     d74:	83 37       	cpi	r24, 0x73	; 115
     d76:	99 f1       	breq	.+102    	; 0xdde <start_screen+0x1ce>
     d78:	83 35       	cpi	r24, 0x53	; 83
     d7a:	89 f1       	breq	.+98     	; 0xdde <start_screen+0x1ce>
		{
			break;
		} 
		
		// Next check for any button presses
		int8_t btn = button_pushed();
     d7c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
		if (btn != NO_BUTTON_PUSHED)
     d80:	8f 3f       	cpi	r24, 0xFF	; 255
     d82:	69 f5       	brne	.+90     	; 0xdde <start_screen+0x1ce>
		{
			break;
		}

		// every 200 ms, update the animation
		current_time = get_current_time();
     d84:	0e 94 97 09 	call	0x132e	; 0x132e <get_current_time>
     d88:	6b 01       	movw	r12, r22
     d8a:	7c 01       	movw	r14, r24
		if (current_time - last_screen_update > game_speed/5)
     d8c:	2b 01       	movw	r4, r22
     d8e:	3c 01       	movw	r6, r24
     d90:	48 18       	sub	r4, r8
     d92:	59 08       	sbc	r5, r9
     d94:	6a 08       	sbc	r6, r10
     d96:	7b 08       	sbc	r7, r11
     d98:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <game_speed>
     d9c:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <game_speed+0x1>
     da0:	ad ec       	ldi	r26, 0xCD	; 205
     da2:	bc ec       	ldi	r27, 0xCC	; 204
     da4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__umulhisi3>
     da8:	96 95       	lsr	r25
     daa:	87 95       	ror	r24
     dac:	96 95       	lsr	r25
     dae:	87 95       	ror	r24
     db0:	a0 e0       	ldi	r26, 0x00	; 0
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	84 15       	cp	r24, r4
     db6:	95 05       	cpc	r25, r5
     db8:	a6 05       	cpc	r26, r6
     dba:	b7 05       	cpc	r27, r7
     dbc:	78 f6       	brcc	.-98     	; 0xd5c <start_screen+0x14c>
		{
			update_start_screen(frame_number);
     dbe:	8c 2f       	mov	r24, r28
     dc0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
			frame_number = (frame_number + 1) % 32;
     dc4:	d0 e0       	ldi	r29, 0x00	; 0
     dc6:	21 96       	adiw	r28, 0x01	; 1
     dc8:	cf 71       	andi	r28, 0x1F	; 31
     dca:	d0 78       	andi	r29, 0x80	; 128
     dcc:	dd 23       	and	r29, r29
     dce:	24 f4       	brge	.+8      	; 0xdd8 <start_screen+0x1c8>
     dd0:	21 97       	sbiw	r28, 0x01	; 1
     dd2:	c0 6e       	ori	r28, 0xE0	; 224
     dd4:	df 6f       	ori	r29, 0xFF	; 255
     dd6:	21 96       	adiw	r28, 0x01	; 1
			last_screen_update = current_time;
     dd8:	46 01       	movw	r8, r12
     dda:	57 01       	movw	r10, r14
     ddc:	bf cf       	rjmp	.-130    	; 0xd5c <start_screen+0x14c>
		}
	}
}
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	ff 90       	pop	r15
     de4:	ef 90       	pop	r14
     de6:	df 90       	pop	r13
     de8:	cf 90       	pop	r12
     dea:	bf 90       	pop	r11
     dec:	af 90       	pop	r10
     dee:	9f 90       	pop	r9
     df0:	8f 90       	pop	r8
     df2:	7f 90       	pop	r7
     df4:	6f 90       	pop	r6
     df6:	5f 90       	pop	r5
     df8:	4f 90       	pop	r4
     dfa:	08 95       	ret

00000dfc <new_game>:

void new_game(void)
{
	// Clear the serial terminal
	clear_terminal();
     dfc:	0e 94 50 09 	call	0x12a0	; 0x12a0 <clear_terminal>
	
	//reset number of points player has
	points = 0;
     e00:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <points+0x1>
     e04:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <points>
	
	// Initialize the game and display
	initialise_game();
     e08:	0e 94 4b 03 	call	0x696	; 0x696 <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     e0c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
	clear_serial_input_buffer();
     e10:	0e 94 73 08 	call	0x10e6	; 0x10e6 <clear_serial_input_buffer>
     e14:	08 95       	ret

00000e16 <handle_game_over>:
	handle_game_over();
}

void handle_game_over()
{
	move_terminal_cursor(10,14);
     e16:	6e e0       	ldi	r22, 0x0E	; 14
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	8a e0       	ldi	r24, 0x0A	; 10
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 3f 09 	call	0x127e	; 0x127e <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     e22:	8a ea       	ldi	r24, 0xAA	; 170
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9f 93       	push	r25
     e28:	8f 93       	push	r24
     e2a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
	move_terminal_cursor(10,15);
     e2e:	6f e0       	ldi	r22, 0x0F	; 15
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	8a e0       	ldi	r24, 0x0A	; 10
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 3f 09 	call	0x127e	; 0x127e <move_terminal_cursor>
	printf("Game Score: %d\n", points);
     e3a:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <points+0x1>
     e3e:	8f 93       	push	r24
     e40:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <points>
     e44:	8f 93       	push	r24
     e46:	8e ea       	ldi	r24, 0xAE	; 174
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	9f 93       	push	r25
     e4c:	8f 93       	push	r24
     e4e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
     e52:	8c e7       	ldi	r24, 0x7C	; 124
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	9f 93       	push	r25
     e58:	8f 93       	push	r24
     e5a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
	
	//if (keyboard_input == 's' || keyboard_input == 'S') {}
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
     e5e:	8d b7       	in	r24, 0x3d	; 61
     e60:	9e b7       	in	r25, 0x3e	; 62
     e62:	08 96       	adiw	r24, 0x08	; 8
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	9e bf       	out	0x3e, r25	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	8d bf       	out	0x3d, r24	; 61
     e6e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
     e72:	8f 3f       	cpi	r24, 0xFF	; 255
     e74:	e1 f3       	breq	.-8      	; 0xe6e <handle_game_over+0x58>
	{
		; // wait
	}
}
     e76:	08 95       	ret

00000e78 <play_game>:
	(void)button_pushed();
	clear_serial_input_buffer();
}

void play_game(void)
{
     e78:	8f 92       	push	r8
     e7a:	9f 92       	push	r9
     e7c:	af 92       	push	r10
     e7e:	bf 92       	push	r11
     e80:	cf 92       	push	r12
     e82:	df 92       	push	r13
     e84:	ef 92       	push	r14
     e86:	ff 92       	push	r15
     e88:	cf 93       	push	r28
	
	uint32_t last_advance_time, current_time;
	int8_t btn; // The button pushed
	
	last_advance_time = get_current_time();
     e8a:	0e 94 97 09 	call	0x132e	; 0x132e <get_current_time>
     e8e:	4b 01       	movw	r8, r22
     e90:	5c 01       	movw	r10, r24
	
	// We play the game until it's over
	while (!is_game_over())
     e92:	55 c0       	rjmp	.+170    	; 0xf3e <play_game+0xc6>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
     e94:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
     e98:	c8 2f       	mov	r28, r24
		
		char keyboard_input = -1;
		
		if (serial_input_available()) {
     e9a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <serial_input_available>
     e9e:	88 23       	and	r24, r24
     ea0:	39 f0       	breq	.+14     	; 0xeb0 <play_game+0x38>
			keyboard_input = fgetc(stdin);
     ea2:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <__iob>
     ea6:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <__iob+0x1>
     eaa:	0e 94 24 0a 	call	0x1448	; 0x1448 <fgetc>
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <play_game+0x3a>
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
		
		char keyboard_input = -1;
     eb0:	8f ef       	ldi	r24, 0xFF	; 255
		
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		if ((btn == BUTTON0_PUSHED) || (keyboard_input == 'f' || keyboard_input == 'F')) {
     eb2:	cc 23       	and	r28, r28
     eb4:	21 f0       	breq	.+8      	; 0xebe <play_game+0x46>
     eb6:	86 36       	cpi	r24, 0x66	; 102
     eb8:	11 f0       	breq	.+4      	; 0xebe <play_game+0x46>
     eba:	86 34       	cpi	r24, 0x46	; 70
     ebc:	21 f4       	brne	.+8      	; 0xec6 <play_game+0x4e>
			// If button 0 play the lowest note (right lane)
			play_note(3);
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <play_note>
     ec4:	1d c0       	rjmp	.+58     	; 0xf00 <play_game+0x88>
		
		} else if ((btn == BUTTON1_PUSHED) || (keyboard_input == 'd' || keyboard_input == 'D')) {
     ec6:	c1 30       	cpi	r28, 0x01	; 1
     ec8:	21 f0       	breq	.+8      	; 0xed2 <play_game+0x5a>
     eca:	84 36       	cpi	r24, 0x64	; 100
     ecc:	11 f0       	breq	.+4      	; 0xed2 <play_game+0x5a>
     ece:	84 34       	cpi	r24, 0x44	; 68
     ed0:	21 f4       	brne	.+8      	; 0xeda <play_game+0x62>
			//If button 1 is pushed play the second lowest note
			play_note(2);		
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <play_note>
     ed8:	13 c0       	rjmp	.+38     	; 0xf00 <play_game+0x88>
		
		} else if ((btn == BUTTON2_PUSHED) || (keyboard_input == 's' || keyboard_input == 'S')) {
     eda:	c2 30       	cpi	r28, 0x02	; 2
     edc:	21 f0       	breq	.+8      	; 0xee6 <play_game+0x6e>
     ede:	83 37       	cpi	r24, 0x73	; 115
     ee0:	11 f0       	breq	.+4      	; 0xee6 <play_game+0x6e>
     ee2:	83 35       	cpi	r24, 0x53	; 83
     ee4:	21 f4       	brne	.+8      	; 0xeee <play_game+0x76>
			//If button 2 is pushed play the second highest note
			play_note(1); 
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <play_note>
     eec:	09 c0       	rjmp	.+18     	; 0xf00 <play_game+0x88>
			
		} else if ((btn == BUTTON3_PUSHED) || (keyboard_input == 'a' || keyboard_input == 'A')) {
     eee:	c3 30       	cpi	r28, 0x03	; 3
     ef0:	21 f0       	breq	.+8      	; 0xefa <play_game+0x82>
     ef2:	81 36       	cpi	r24, 0x61	; 97
     ef4:	11 f0       	breq	.+4      	; 0xefa <play_game+0x82>
     ef6:	81 34       	cpi	r24, 0x41	; 65
     ef8:	19 f4       	brne	.+6      	; 0xf00 <play_game+0x88>
			//If button 3 is pushed play the highest note
			play_note(0);
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	0e 94 70 03 	call	0x6e0	; 0x6e0 <play_note>
		if (keyboard_input == 'm' || keyboard_input == 'M') {
			//run an interrupt to last until keyboard_input is run again	
		}
		*/
				
		current_time = get_current_time();
     f00:	0e 94 97 09 	call	0x132e	; 0x132e <get_current_time>
     f04:	6b 01       	movw	r12, r22
     f06:	7c 01       	movw	r14, r24
		if (current_time >= last_advance_time + game_speed/5)
     f08:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <game_speed>
     f0c:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <game_speed+0x1>
     f10:	ad ec       	ldi	r26, 0xCD	; 205
     f12:	bc ec       	ldi	r27, 0xCC	; 204
     f14:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__umulhisi3>
     f18:	96 95       	lsr	r25
     f1a:	87 95       	ror	r24
     f1c:	96 95       	lsr	r25
     f1e:	87 95       	ror	r24
     f20:	a5 01       	movw	r20, r10
     f22:	94 01       	movw	r18, r8
     f24:	28 0f       	add	r18, r24
     f26:	39 1f       	adc	r19, r25
     f28:	41 1d       	adc	r20, r1
     f2a:	51 1d       	adc	r21, r1
     f2c:	c2 16       	cp	r12, r18
     f2e:	d3 06       	cpc	r13, r19
     f30:	e4 06       	cpc	r14, r20
     f32:	f5 06       	cpc	r15, r21
     f34:	20 f0       	brcs	.+8      	; 0xf3e <play_game+0xc6>
		{
			// 200ms (0.2 second) has passed since the last time we advance the
			// notes here, so update the advance the notes
			advance_note();
     f36:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <advance_note>
			
			// Update the most recent time the notes were advance
			last_advance_time = current_time;
     f3a:	46 01       	movw	r8, r12
     f3c:	57 01       	movw	r10, r14
	int8_t btn; // The button pushed
	
	last_advance_time = get_current_time();
	
	// We play the game until it's over
	while (!is_game_over())
     f3e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <is_game_over>
     f42:	88 23       	and	r24, r24
     f44:	09 f4       	brne	.+2      	; 0xf48 <play_game+0xd0>
     f46:	a6 cf       	rjmp	.-180    	; 0xe94 <play_game+0x1c>
			// Update the most recent time the notes were advance
			last_advance_time = current_time;
		}
	}
	// We get here if the game is over.
	handle_game_over();
     f48:	0e 94 0b 07 	call	0xe16	; 0xe16 <handle_game_over>
}
     f4c:	cf 91       	pop	r28
     f4e:	ff 90       	pop	r15
     f50:	ef 90       	pop	r14
     f52:	df 90       	pop	r13
     f54:	cf 90       	pop	r12
     f56:	bf 90       	pop	r11
     f58:	af 90       	pop	r10
     f5a:	9f 90       	pop	r9
     f5c:	8f 90       	pop	r8
     f5e:	08 95       	ret

00000f60 <main>:
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     f60:	0e 94 f5 05 	call	0xbea	; 0xbea <initialise_hardware>
	
	points = 0;
     f64:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <points+0x1>
     f68:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <points>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
     f6c:	0e 94 08 06 	call	0xc10	; 0xc10 <start_screen>
	
	// Loop forever and continuously play the game.
	while(1)
	{
		new_game();
     f70:	0e 94 fe 06 	call	0xdfc	; 0xdfc <new_game>
		play_game();
     f74:	0e 94 3c 07 	call	0xe78	; 0xe78 <play_game>
		handle_game_over();
     f78:	0e 94 0b 07 	call	0xe16	; 0xe16 <handle_game_over>
     f7c:	f9 cf       	rjmp	.-14     	; 0xf70 <main+0x10>

00000f7e <uart_put_char>:
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream)
{
     f7e:	cf 93       	push	r28
     f80:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n')
     f82:	8a 30       	cpi	r24, 0x0A	; 10
     f84:	19 f4       	brne	.+6      	; 0xf8c <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
     f86:	8d e0       	ldi	r24, 0x0D	; 13
     f88:	0e 94 bf 07 	call	0xf7e	; 0xf7e <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     f8c:	9f b7       	in	r25, 0x3f	; 63
     f8e:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
     f92:	99 23       	and	r25, r25
     f94:	29 f1       	breq	.+74     	; 0xfe0 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
     f96:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <bytes_in_out_buffer>
     f9a:	8f 3f       	cpi	r24, 0xFF	; 255
     f9c:	d1 f3       	breq	.-12     	; 0xf92 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     f9e:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     fa0:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <out_insert_pos>
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	8e 0f       	add	r24, r30
     fa8:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <out_insert_pos>
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	ee 52       	subi	r30, 0x2E	; 46
     fb0:	fe 4f       	sbci	r31, 0xFE	; 254
     fb2:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     fb4:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <bytes_in_out_buffer>
     fb8:	8f 5f       	subi	r24, 0xFF	; 255
     fba:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
     fbe:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <out_insert_pos>
     fc2:	8f 3f       	cpi	r24, 0xFF	; 255
     fc4:	11 f4       	brne	.+4      	; 0xfca <uart_put_char+0x4c>
	{
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     fc6:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     fca:	e1 ec       	ldi	r30, 0xC1	; 193
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	80 62       	ori	r24, 0x20	; 32
     fd2:	80 83       	st	Z, r24
	if (interrupts_enabled)
     fd4:	99 23       	and	r25, r25
     fd6:	39 f0       	breq	.+14     	; 0xfe6 <uart_put_char+0x68>
	{
		sei();
     fd8:	78 94       	sei
	}
	return 0;
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	05 c0       	rjmp	.+10     	; 0xfea <uart_put_char+0x6c>
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	90 e0       	ldi	r25, 0x00	; 0
}
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <uart_get_char>:

int uart_get_char(FILE* stream)
{
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0)
     fee:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <bytes_in_input_buffer>
     ff2:	88 23       	and	r24, r24
     ff4:	e1 f3       	breq	.-8      	; 0xfee <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     ff6:	2f b7       	in	r18, 0x3f	; 63
     ff8:	20 78       	andi	r18, 0x80	; 128
	cli();
     ffa:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
     ffc:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <input_insert_pos>
    1000:	30 91 e3 02 	lds	r19, 0x02E3	; 0x8002e3 <bytes_in_input_buffer>
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	83 1b       	sub	r24, r19
    1008:	91 09       	sbc	r25, r1
    100a:	5a f4       	brpl	.+22     	; 0x1022 <uart_get_char+0x34>
	{
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    100c:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <input_insert_pos>
    1010:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <bytes_in_input_buffer>
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	e8 1b       	sub	r30, r24
    1018:	f1 09       	sbc	r31, r1
    101a:	ee 51       	subi	r30, 0x1E	; 30
    101c:	fd 4f       	sbci	r31, 0xFD	; 253
    101e:	80 81       	ld	r24, Z
    1020:	0a c0       	rjmp	.+20     	; 0x1036 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1022:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <input_insert_pos>
    1026:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <bytes_in_input_buffer>
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	e8 1b       	sub	r30, r24
    102e:	f1 09       	sbc	r31, r1
    1030:	ee 52       	subi	r30, 0x2E	; 46
    1032:	fd 4f       	sbci	r31, 0xFD	; 253
    1034:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1036:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <bytes_in_input_buffer>
    103a:	91 50       	subi	r25, 0x01	; 1
    103c:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <bytes_in_input_buffer>
	if (interrupts_enabled)
    1040:	22 23       	and	r18, r18
    1042:	09 f0       	breq	.+2      	; 0x1046 <uart_get_char+0x58>
	{
		sei();
    1044:	78 94       	sei
	}	
	return c;
}
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	08 95       	ret

0000104a <init_serial_stdio>:
{
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    104a:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <out_insert_pos>
	bytes_in_out_buffer = 0;
    104e:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1052:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1056:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <bytes_in_input_buffer>
	input_overrun = 0;
    105a:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    105e:	40 93 c5 01 	sts	0x01C5, r20	; 0x8001c5 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	aa 1f       	adc	r26, r26
    106c:	bb 1f       	adc	r27, r27
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	aa 1f       	adc	r26, r26
    1074:	bb 1f       	adc	r27, r27
    1076:	9c 01       	movw	r18, r24
    1078:	ad 01       	movw	r20, r26
    107a:	22 0f       	add	r18, r18
    107c:	33 1f       	adc	r19, r19
    107e:	44 1f       	adc	r20, r20
    1080:	55 1f       	adc	r21, r21
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	72 e1       	ldi	r23, 0x12	; 18
    1086:	8a e7       	ldi	r24, 0x7A	; 122
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__divmodsi4>
    108e:	ba 01       	movw	r22, r20
    1090:	a9 01       	movw	r20, r18
    1092:	4f 5f       	subi	r20, 0xFF	; 255
    1094:	5f 4f       	sbci	r21, 0xFF	; 255
    1096:	6f 4f       	sbci	r22, 0xFF	; 255
    1098:	7f 4f       	sbci	r23, 0xFF	; 255
    109a:	db 01       	movw	r26, r22
    109c:	ca 01       	movw	r24, r20
    109e:	1a f4       	brpl	.+6      	; 0x10a6 <init_serial_stdio+0x5c>
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	a1 1d       	adc	r26, r1
    10a4:	b1 1d       	adc	r27, r1
    10a6:	b5 95       	asr	r27
    10a8:	a7 95       	ror	r26
    10aa:	97 95       	ror	r25
    10ac:	87 95       	ror	r24
    10ae:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    10b0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    10b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    10b8:	e1 ec       	ldi	r30, 0xC1	; 193
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	88 e1       	ldi	r24, 0x18	; 24
    10be:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
    10c0:	80 81       	ld	r24, Z
    10c2:	80 68       	ori	r24, 0x80	; 128
    10c4:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    10c6:	e4 ee       	ldi	r30, 0xE4	; 228
    10c8:	f2 e0       	ldi	r31, 0x02	; 2
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	91 e0       	ldi	r25, 0x01	; 1
    10ce:	93 83       	std	Z+3, r25	; 0x03
    10d0:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    10d2:	91 83       	std	Z+1, r25	; 0x01
    10d4:	80 83       	st	Z, r24
    10d6:	08 95       	ret

000010d8 <serial_input_available>:
}

int8_t serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
    10d8:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <bytes_in_input_buffer>
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	91 11       	cpse	r25, r1
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <serial_input_available+0xc>
    10e2:	80 e0       	ldi	r24, 0x00	; 0
}
    10e4:	08 95       	ret

000010e6 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    10e6:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <input_insert_pos>
	bytes_in_input_buffer = 0;
    10ea:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <bytes_in_input_buffer>
    10ee:	08 95       	ret

000010f0 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    10f0:	1f 92       	push	r1
    10f2:	0f 92       	push	r0
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	0f 92       	push	r0
    10f8:	11 24       	eor	r1, r1
    10fa:	2f 93       	push	r18
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	ef 93       	push	r30
    1102:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0)
    1104:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <bytes_in_out_buffer>
    1108:	88 23       	and	r24, r24
    110a:	29 f1       	breq	.+74     	; 0x1156 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
    110c:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <out_insert_pos>
    1110:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <bytes_in_out_buffer>
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	82 1b       	sub	r24, r18
    1118:	91 09       	sbc	r25, r1
    111a:	5a f4       	brpl	.+22     	; 0x1132 <__vector_21+0x42>
		{
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    111c:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <out_insert_pos>
    1120:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <bytes_in_out_buffer>
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	e8 1b       	sub	r30, r24
    1128:	f1 09       	sbc	r31, r1
    112a:	ef 52       	subi	r30, 0x2F	; 47
    112c:	fd 4f       	sbci	r31, 0xFD	; 253
    112e:	90 81       	ld	r25, Z
    1130:	0a c0       	rjmp	.+20     	; 0x1146 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1132:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <out_insert_pos>
    1136:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <bytes_in_out_buffer>
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	e8 1b       	sub	r30, r24
    113e:	f1 09       	sbc	r31, r1
    1140:	ee 52       	subi	r30, 0x2E	; 46
    1142:	fe 4f       	sbci	r31, 0xFE	; 254
    1144:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1146:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <bytes_in_out_buffer>
    114a:	81 50       	subi	r24, 0x01	; 1
    114c:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1150:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1154:	05 c0       	rjmp	.+10     	; 0x1160 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
    1156:	e1 ec       	ldi	r30, 0xC1	; 193
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	8f 7d       	andi	r24, 0xDF	; 223
    115e:	80 83       	st	Z, r24
	}
}
    1160:	ff 91       	pop	r31
    1162:	ef 91       	pop	r30
    1164:	9f 91       	pop	r25
    1166:	8f 91       	pop	r24
    1168:	2f 91       	pop	r18
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	0f 90       	pop	r0
    1170:	1f 90       	pop	r1
    1172:	18 95       	reti

00001174 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1174:	1f 92       	push	r1
    1176:	0f 92       	push	r0
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	0f 92       	push	r0
    117c:	11 24       	eor	r1, r1
    117e:	2f 93       	push	r18
    1180:	3f 93       	push	r19
    1182:	4f 93       	push	r20
    1184:	5f 93       	push	r21
    1186:	6f 93       	push	r22
    1188:	7f 93       	push	r23
    118a:	8f 93       	push	r24
    118c:	9f 93       	push	r25
    118e:	af 93       	push	r26
    1190:	bf 93       	push	r27
    1192:	cf 93       	push	r28
    1194:	ef 93       	push	r30
    1196:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1198:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
    119c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <do_echo>
    11a0:	88 23       	and	r24, r24
    11a2:	49 f0       	breq	.+18     	; 0x11b6 <__vector_20+0x42>
    11a4:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <bytes_in_out_buffer>
    11a8:	8f 3f       	cpi	r24, 0xFF	; 255
    11aa:	29 f0       	breq	.+10     	; 0x11b6 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	8c 2f       	mov	r24, r28
    11b2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
    11b6:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <bytes_in_input_buffer>
    11ba:	80 31       	cpi	r24, 0x10	; 16
    11bc:	20 f0       	brcs	.+8      	; 0x11c6 <__vector_20+0x52>
	{
		input_overrun = 1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <input_overrun>
    11c4:	18 c0       	rjmp	.+48     	; 0x11f6 <__vector_20+0x82>
	} else
	{
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r')
    11c6:	cd 30       	cpi	r28, 0x0D	; 13
    11c8:	09 f4       	brne	.+2      	; 0x11cc <__vector_20+0x58>
		{
			c = '\n';
    11ca:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    11cc:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <input_insert_pos>
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	8e 0f       	add	r24, r30
    11d4:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <input_insert_pos>
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	ee 52       	subi	r30, 0x2E	; 46
    11dc:	fd 4f       	sbci	r31, 0xFD	; 253
    11de:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    11e0:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <bytes_in_input_buffer>
    11e4:	8f 5f       	subi	r24, 0xFF	; 255
    11e6:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
    11ea:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <input_insert_pos>
    11ee:	80 31       	cpi	r24, 0x10	; 16
    11f0:	11 f4       	brne	.+4      	; 0x11f6 <__vector_20+0x82>
		{
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    11f2:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <input_insert_pos>
		}
	}
}
    11f6:	ff 91       	pop	r31
    11f8:	ef 91       	pop	r30
    11fa:	cf 91       	pop	r28
    11fc:	bf 91       	pop	r27
    11fe:	af 91       	pop	r26
    1200:	9f 91       	pop	r25
    1202:	8f 91       	pop	r24
    1204:	7f 91       	pop	r23
    1206:	6f 91       	pop	r22
    1208:	5f 91       	pop	r21
    120a:	4f 91       	pop	r20
    120c:	3f 91       	pop	r19
    120e:	2f 91       	pop	r18
    1210:	0f 90       	pop	r0
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	0f 90       	pop	r0
    1216:	1f 90       	pop	r1
    1218:	18 95       	reti

0000121a <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider)
{
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    121a:	94 b1       	in	r25, 0x04	; 4
    121c:	90 6b       	ori	r25, 0xB0	; 176
    121e:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
    1220:	95 b1       	in	r25, 0x05	; 5
    1222:	90 61       	ori	r25, 0x10	; 16
    1224:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    1226:	90 e5       	ldi	r25, 0x50	; 80
    1228:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider)
    122a:	88 30       	cpi	r24, 0x08	; 8
    122c:	21 f0       	breq	.+8      	; 0x1236 <spi_setup_master+0x1c>
    122e:	80 32       	cpi	r24, 0x20	; 32
    1230:	11 f0       	breq	.+4      	; 0x1236 <spi_setup_master+0x1c>
    1232:	82 30       	cpi	r24, 0x02	; 2
    1234:	19 f4       	brne	.+6      	; 0x123c <spi_setup_master+0x22>
	{
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	9d bd       	out	0x2d, r25	; 45
			break;
    123a:	01 c0       	rjmp	.+2      	; 0x123e <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    123c:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
    123e:	80 32       	cpi	r24, 0x20	; 32
    1240:	69 f0       	breq	.+26     	; 0x125c <spi_setup_master+0x42>
    1242:	28 f4       	brcc	.+10     	; 0x124e <spi_setup_master+0x34>
    1244:	88 30       	cpi	r24, 0x08	; 8
    1246:	71 f0       	breq	.+28     	; 0x1264 <spi_setup_master+0x4a>
    1248:	80 31       	cpi	r24, 0x10	; 16
    124a:	61 f0       	breq	.+24     	; 0x1264 <spi_setup_master+0x4a>
    124c:	0e c0       	rjmp	.+28     	; 0x126a <spi_setup_master+0x50>
    124e:	80 34       	cpi	r24, 0x40	; 64
    1250:	29 f0       	breq	.+10     	; 0x125c <spi_setup_master+0x42>
    1252:	80 38       	cpi	r24, 0x80	; 128
    1254:	51 f4       	brne	.+20     	; 0x126a <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
    1256:	8c b5       	in	r24, 0x2c	; 44
    1258:	81 60       	ori	r24, 0x01	; 1
    125a:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
    125c:	8c b5       	in	r24, 0x2c	; 44
    125e:	82 60       	ori	r24, 0x02	; 2
    1260:	8c bd       	out	0x2c, r24	; 44
			break;
    1262:	03 c0       	rjmp	.+6      	; 0x126a <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
    1264:	8c b5       	in	r24, 0x2c	; 44
    1266:	81 60       	ori	r24, 0x01	; 1
    1268:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
    126a:	85 b1       	in	r24, 0x05	; 5
    126c:	8f 7e       	andi	r24, 0xEF	; 239
    126e:	85 b9       	out	0x05, r24	; 5
    1270:	08 95       	ret

00001272 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1272:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    1274:	0d b4       	in	r0, 0x2d	; 45
    1276:	07 fe       	sbrs	r0, 7
    1278:	fd cf       	rjmp	.-6      	; 0x1274 <spi_send_byte+0x2>
	{
		; // wait
	}
	return SPDR0;
    127a:	8e b5       	in	r24, 0x2e	; 46
}
    127c:	08 95       	ret

0000127e <move_terminal_cursor>:
}

void reverse_video(void)
{
	printf_P(PSTR("\x1b[7m"));
}
    127e:	9f 93       	push	r25
    1280:	8f 93       	push	r24
    1282:	7f 93       	push	r23
    1284:	6f 93       	push	r22
    1286:	8d e7       	ldi	r24, 0x7D	; 125
    1288:	93 e0       	ldi	r25, 0x03	; 3
    128a:	9f 93       	push	r25
    128c:	8f 93       	push	r24
    128e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	08 95       	ret

000012a0 <clear_terminal>:

void clear_terminal(void)
{
	printf_P(PSTR("\x1b[2J"));
    12a0:	88 e7       	ldi	r24, 0x78	; 120
    12a2:	93 e0       	ldi	r25, 0x03	; 3
    12a4:	9f 93       	push	r25
    12a6:	8f 93       	push	r24
    12a8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
}
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	08 95       	ret

000012b2 <clear_to_end_of_line>:

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
    12b2:	84 e7       	ldi	r24, 0x74	; 116
    12b4:	93 e0       	ldi	r25, 0x03	; 3
    12b6:	9f 93       	push	r25
    12b8:	8f 93       	push	r24
    12ba:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
}
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	08 95       	ret

000012c4 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    12c4:	1f 92       	push	r1
    12c6:	8f 93       	push	r24
    12c8:	8e e6       	ldi	r24, 0x6E	; 110
    12ca:	93 e0       	ldi	r25, 0x03	; 3
    12cc:	9f 93       	push	r25
    12ce:	8f 93       	push	r24
    12d0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
}
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	08 95       	ret

000012de <hide_cursor>:

void hide_cursor()
{
	printf_P(PSTR("\x1b[?25l"));
    12de:	87 e6       	ldi	r24, 0x67	; 103
    12e0:	93 e0       	ldi	r25, 0x03	; 3
    12e2:	9f 93       	push	r25
    12e4:	8f 93       	push	r24
    12e6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
}
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	08 95       	ret

000012f0 <show_cursor>:

void show_cursor()
{
	printf_P(PSTR("\x1b[?25h"));
    12f0:	80 e6       	ldi	r24, 0x60	; 96
    12f2:	93 e0       	ldi	r25, 0x03	; 3
    12f4:	9f 93       	push	r25
    12f6:	8f 93       	push	r24
    12f8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf_P>
}
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	08 95       	ret

00001302 <init_timer0>:
void init_timer0(void)
{
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
    1302:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <clock_ticks_ms>
    1306:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <clock_ticks_ms+0x1>
    130a:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <clock_ticks_ms+0x2>
    130e:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    1312:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    1314:	8c e7       	ldi	r24, 0x7C	; 124
    1316:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
    1318:	92 e0       	ldi	r25, 0x02	; 2
    131a:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    131c:	83 e0       	ldi	r24, 0x03	; 3
    131e:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
    1320:	ee e6       	ldi	r30, 0x6E	; 110
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	82 60       	ori	r24, 0x02	; 2
    1328:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
    132a:	95 bb       	out	0x15, r25	; 21
    132c:	08 95       	ret

0000132e <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    132e:	8f b7       	in	r24, 0x3f	; 63
    1330:	28 2f       	mov	r18, r24
    1332:	20 78       	andi	r18, 0x80	; 128
	cli();
    1334:	f8 94       	cli
	return_value = clock_ticks_ms;
    1336:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <clock_ticks_ms>
    133a:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <clock_ticks_ms+0x1>
    133e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <clock_ticks_ms+0x2>
    1342:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    1346:	22 23       	and	r18, r18
    1348:	09 f0       	breq	.+2      	; 0x134c <get_current_time+0x1e>
	{
		sei();
    134a:	78 94       	sei
	}
	return return_value;
}
    134c:	08 95       	ret

0000134e <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
    134e:	1f 92       	push	r1
    1350:	0f 92       	push	r0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	0f 92       	push	r0
    1356:	11 24       	eor	r1, r1
    1358:	8f 93       	push	r24
    135a:	9f 93       	push	r25
    135c:	af 93       	push	r26
    135e:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
    1360:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <clock_ticks_ms>
    1364:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <clock_ticks_ms+0x1>
    1368:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <clock_ticks_ms+0x2>
    136c:	b0 91 c9 01 	lds	r27, 0x01C9	; 0x8001c9 <clock_ticks_ms+0x3>
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	a1 1d       	adc	r26, r1
    1374:	b1 1d       	adc	r27, r1
    1376:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <clock_ticks_ms>
    137a:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <clock_ticks_ms+0x1>
    137e:	a0 93 c8 01 	sts	0x01C8, r26	; 0x8001c8 <clock_ticks_ms+0x2>
    1382:	b0 93 c9 01 	sts	0x01C9, r27	; 0x8001c9 <clock_ticks_ms+0x3>
}
    1386:	bf 91       	pop	r27
    1388:	af 91       	pop	r26
    138a:	9f 91       	pop	r25
    138c:	8f 91       	pop	r24
    138e:	0f 90       	pop	r0
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	0f 90       	pop	r0
    1394:	1f 90       	pop	r1
    1396:	18 95       	reti

00001398 <init_timer1>:

/* Set up timer 1
 */
void init_timer1(void)
{
	TCNT1 = 0;
    1398:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    139c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    13a0:	08 95       	ret

000013a2 <init_timer2>:

/* Set up timer 2
 */
void init_timer2(void)
{
	TCNT2 = 0;
    13a2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    13a6:	08 95       	ret

000013a8 <__divmodsi4>:
    13a8:	05 2e       	mov	r0, r21
    13aa:	97 fb       	bst	r25, 7
    13ac:	1e f4       	brtc	.+6      	; 0x13b4 <__divmodsi4+0xc>
    13ae:	00 94       	com	r0
    13b0:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__negsi2>
    13b4:	57 fd       	sbrc	r21, 7
    13b6:	07 d0       	rcall	.+14     	; 0x13c6 <__divmodsi4_neg2>
    13b8:	0e 94 02 0a 	call	0x1404	; 0x1404 <__udivmodsi4>
    13bc:	07 fc       	sbrc	r0, 7
    13be:	03 d0       	rcall	.+6      	; 0x13c6 <__divmodsi4_neg2>
    13c0:	4e f4       	brtc	.+18     	; 0x13d4 <__divmodsi4_exit>
    13c2:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__negsi2>

000013c6 <__divmodsi4_neg2>:
    13c6:	50 95       	com	r21
    13c8:	40 95       	com	r20
    13ca:	30 95       	com	r19
    13cc:	21 95       	neg	r18
    13ce:	3f 4f       	sbci	r19, 0xFF	; 255
    13d0:	4f 4f       	sbci	r20, 0xFF	; 255
    13d2:	5f 4f       	sbci	r21, 0xFF	; 255

000013d4 <__divmodsi4_exit>:
    13d4:	08 95       	ret

000013d6 <__negsi2>:
    13d6:	90 95       	com	r25
    13d8:	80 95       	com	r24
    13da:	70 95       	com	r23
    13dc:	61 95       	neg	r22
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	8f 4f       	sbci	r24, 0xFF	; 255
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255
    13e4:	08 95       	ret

000013e6 <__umulhisi3>:
    13e6:	a2 9f       	mul	r26, r18
    13e8:	b0 01       	movw	r22, r0
    13ea:	b3 9f       	mul	r27, r19
    13ec:	c0 01       	movw	r24, r0
    13ee:	a3 9f       	mul	r26, r19
    13f0:	70 0d       	add	r23, r0
    13f2:	81 1d       	adc	r24, r1
    13f4:	11 24       	eor	r1, r1
    13f6:	91 1d       	adc	r25, r1
    13f8:	b2 9f       	mul	r27, r18
    13fa:	70 0d       	add	r23, r0
    13fc:	81 1d       	adc	r24, r1
    13fe:	11 24       	eor	r1, r1
    1400:	91 1d       	adc	r25, r1
    1402:	08 95       	ret

00001404 <__udivmodsi4>:
    1404:	a1 e2       	ldi	r26, 0x21	; 33
    1406:	1a 2e       	mov	r1, r26
    1408:	aa 1b       	sub	r26, r26
    140a:	bb 1b       	sub	r27, r27
    140c:	fd 01       	movw	r30, r26
    140e:	0d c0       	rjmp	.+26     	; 0x142a <__udivmodsi4_ep>

00001410 <__udivmodsi4_loop>:
    1410:	aa 1f       	adc	r26, r26
    1412:	bb 1f       	adc	r27, r27
    1414:	ee 1f       	adc	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	a2 17       	cp	r26, r18
    141a:	b3 07       	cpc	r27, r19
    141c:	e4 07       	cpc	r30, r20
    141e:	f5 07       	cpc	r31, r21
    1420:	20 f0       	brcs	.+8      	; 0x142a <__udivmodsi4_ep>
    1422:	a2 1b       	sub	r26, r18
    1424:	b3 0b       	sbc	r27, r19
    1426:	e4 0b       	sbc	r30, r20
    1428:	f5 0b       	sbc	r31, r21

0000142a <__udivmodsi4_ep>:
    142a:	66 1f       	adc	r22, r22
    142c:	77 1f       	adc	r23, r23
    142e:	88 1f       	adc	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	1a 94       	dec	r1
    1434:	69 f7       	brne	.-38     	; 0x1410 <__udivmodsi4_loop>
    1436:	60 95       	com	r22
    1438:	70 95       	com	r23
    143a:	80 95       	com	r24
    143c:	90 95       	com	r25
    143e:	9b 01       	movw	r18, r22
    1440:	ac 01       	movw	r20, r24
    1442:	bd 01       	movw	r22, r26
    1444:	cf 01       	movw	r24, r30
    1446:	08 95       	ret

00001448 <fgetc>:
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	ec 01       	movw	r28, r24
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	20 ff       	sbrs	r18, 0
    1452:	33 c0       	rjmp	.+102    	; 0x14ba <fgetc+0x72>
    1454:	26 ff       	sbrs	r18, 6
    1456:	0a c0       	rjmp	.+20     	; 0x146c <fgetc+0x24>
    1458:	2f 7b       	andi	r18, 0xBF	; 191
    145a:	2b 83       	std	Y+3, r18	; 0x03
    145c:	8e 81       	ldd	r24, Y+6	; 0x06
    145e:	9f 81       	ldd	r25, Y+7	; 0x07
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	9f 83       	std	Y+7, r25	; 0x07
    1464:	8e 83       	std	Y+6, r24	; 0x06
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	29 c0       	rjmp	.+82     	; 0x14be <fgetc+0x76>
    146c:	22 ff       	sbrs	r18, 2
    146e:	0f c0       	rjmp	.+30     	; 0x148e <fgetc+0x46>
    1470:	e8 81       	ld	r30, Y
    1472:	f9 81       	ldd	r31, Y+1	; 0x01
    1474:	80 81       	ld	r24, Z
    1476:	08 2e       	mov	r0, r24
    1478:	00 0c       	add	r0, r0
    147a:	99 0b       	sbc	r25, r25
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	19 f4       	brne	.+6      	; 0x1486 <fgetc+0x3e>
    1480:	20 62       	ori	r18, 0x20	; 32
    1482:	2b 83       	std	Y+3, r18	; 0x03
    1484:	1a c0       	rjmp	.+52     	; 0x14ba <fgetc+0x72>
    1486:	31 96       	adiw	r30, 0x01	; 1
    1488:	f9 83       	std	Y+1, r31	; 0x01
    148a:	e8 83       	st	Y, r30
    148c:	0e c0       	rjmp	.+28     	; 0x14aa <fgetc+0x62>
    148e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1490:	fb 85       	ldd	r31, Y+11	; 0x0b
    1492:	09 95       	icall
    1494:	97 ff       	sbrs	r25, 7
    1496:	09 c0       	rjmp	.+18     	; 0x14aa <fgetc+0x62>
    1498:	2b 81       	ldd	r18, Y+3	; 0x03
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	11 f0       	breq	.+4      	; 0x14a2 <fgetc+0x5a>
    149e:	80 e2       	ldi	r24, 0x20	; 32
    14a0:	01 c0       	rjmp	.+2      	; 0x14a4 <fgetc+0x5c>
    14a2:	80 e1       	ldi	r24, 0x10	; 16
    14a4:	82 2b       	or	r24, r18
    14a6:	8b 83       	std	Y+3, r24	; 0x03
    14a8:	08 c0       	rjmp	.+16     	; 0x14ba <fgetc+0x72>
    14aa:	2e 81       	ldd	r18, Y+6	; 0x06
    14ac:	3f 81       	ldd	r19, Y+7	; 0x07
    14ae:	2f 5f       	subi	r18, 0xFF	; 255
    14b0:	3f 4f       	sbci	r19, 0xFF	; 255
    14b2:	3f 83       	std	Y+7, r19	; 0x07
    14b4:	2e 83       	std	Y+6, r18	; 0x06
    14b6:	99 27       	eor	r25, r25
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <fgetc+0x76>
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
    14bc:	9f ef       	ldi	r25, 0xFF	; 255
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	08 95       	ret

000014c4 <printf>:
    14c4:	a0 e0       	ldi	r26, 0x00	; 0
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e8 e6       	ldi	r30, 0x68	; 104
    14ca:	fa e0       	ldi	r31, 0x0A	; 10
    14cc:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__prologue_saves__+0x20>
    14d0:	ae 01       	movw	r20, r28
    14d2:	4b 5f       	subi	r20, 0xFB	; 251
    14d4:	5f 4f       	sbci	r21, 0xFF	; 255
    14d6:	fa 01       	movw	r30, r20
    14d8:	61 91       	ld	r22, Z+
    14da:	71 91       	ld	r23, Z+
    14dc:	af 01       	movw	r20, r30
    14de:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <__iob+0x2>
    14e2:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <__iob+0x3>
    14e6:	0e 94 9e 0a 	call	0x153c	; 0x153c <vfprintf>
    14ea:	e2 e0       	ldi	r30, 0x02	; 2
    14ec:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__epilogue_restores__+0x20>

000014f0 <printf_P>:
    14f0:	a0 e0       	ldi	r26, 0x00	; 0
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ee e7       	ldi	r30, 0x7E	; 126
    14f6:	fa e0       	ldi	r31, 0x0A	; 10
    14f8:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <__prologue_saves__+0x1c>
    14fc:	ae 01       	movw	r20, r28
    14fe:	49 5f       	subi	r20, 0xF9	; 249
    1500:	5f 4f       	sbci	r21, 0xFF	; 255
    1502:	da 01       	movw	r26, r20
    1504:	6d 91       	ld	r22, X+
    1506:	7d 91       	ld	r23, X+
    1508:	ad 01       	movw	r20, r26
    150a:	04 ee       	ldi	r16, 0xE4	; 228
    150c:	12 e0       	ldi	r17, 0x02	; 2
    150e:	f8 01       	movw	r30, r16
    1510:	82 81       	ldd	r24, Z+2	; 0x02
    1512:	93 81       	ldd	r25, Z+3	; 0x03
    1514:	dc 01       	movw	r26, r24
    1516:	13 96       	adiw	r26, 0x03	; 3
    1518:	2c 91       	ld	r18, X
    151a:	13 97       	sbiw	r26, 0x03	; 3
    151c:	28 60       	ori	r18, 0x08	; 8
    151e:	13 96       	adiw	r26, 0x03	; 3
    1520:	2c 93       	st	X, r18
    1522:	0e 94 9e 0a 	call	0x153c	; 0x153c <vfprintf>
    1526:	d8 01       	movw	r26, r16
    1528:	12 96       	adiw	r26, 0x02	; 2
    152a:	ed 91       	ld	r30, X+
    152c:	fc 91       	ld	r31, X
    152e:	13 97       	sbiw	r26, 0x03	; 3
    1530:	23 81       	ldd	r18, Z+3	; 0x03
    1532:	27 7f       	andi	r18, 0xF7	; 247
    1534:	23 83       	std	Z+3, r18	; 0x03
    1536:	e4 e0       	ldi	r30, 0x04	; 4
    1538:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__epilogue_restores__+0x1c>

0000153c <vfprintf>:
    153c:	ab e0       	ldi	r26, 0x0B	; 11
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e4 ea       	ldi	r30, 0xA4	; 164
    1542:	fa e0       	ldi	r31, 0x0A	; 10
    1544:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__prologue_saves__>
    1548:	6c 01       	movw	r12, r24
    154a:	7b 01       	movw	r14, r22
    154c:	8a 01       	movw	r16, r20
    154e:	fc 01       	movw	r30, r24
    1550:	17 82       	std	Z+7, r1	; 0x07
    1552:	16 82       	std	Z+6, r1	; 0x06
    1554:	83 81       	ldd	r24, Z+3	; 0x03
    1556:	81 ff       	sbrs	r24, 1
    1558:	cc c1       	rjmp	.+920    	; 0x18f2 <vfprintf+0x3b6>
    155a:	ce 01       	movw	r24, r28
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	3c 01       	movw	r6, r24
    1560:	f6 01       	movw	r30, r12
    1562:	93 81       	ldd	r25, Z+3	; 0x03
    1564:	f7 01       	movw	r30, r14
    1566:	93 fd       	sbrc	r25, 3
    1568:	85 91       	lpm	r24, Z+
    156a:	93 ff       	sbrs	r25, 3
    156c:	81 91       	ld	r24, Z+
    156e:	7f 01       	movw	r14, r30
    1570:	88 23       	and	r24, r24
    1572:	09 f4       	brne	.+2      	; 0x1576 <vfprintf+0x3a>
    1574:	ba c1       	rjmp	.+884    	; 0x18ea <vfprintf+0x3ae>
    1576:	85 32       	cpi	r24, 0x25	; 37
    1578:	39 f4       	brne	.+14     	; 0x1588 <vfprintf+0x4c>
    157a:	93 fd       	sbrc	r25, 3
    157c:	85 91       	lpm	r24, Z+
    157e:	93 ff       	sbrs	r25, 3
    1580:	81 91       	ld	r24, Z+
    1582:	7f 01       	movw	r14, r30
    1584:	85 32       	cpi	r24, 0x25	; 37
    1586:	29 f4       	brne	.+10     	; 0x1592 <vfprintf+0x56>
    1588:	b6 01       	movw	r22, r12
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 95 0c 	call	0x192a	; 0x192a <fputc>
    1590:	e7 cf       	rjmp	.-50     	; 0x1560 <vfprintf+0x24>
    1592:	91 2c       	mov	r9, r1
    1594:	21 2c       	mov	r2, r1
    1596:	31 2c       	mov	r3, r1
    1598:	ff e1       	ldi	r31, 0x1F	; 31
    159a:	f3 15       	cp	r31, r3
    159c:	d8 f0       	brcs	.+54     	; 0x15d4 <vfprintf+0x98>
    159e:	8b 32       	cpi	r24, 0x2B	; 43
    15a0:	79 f0       	breq	.+30     	; 0x15c0 <vfprintf+0x84>
    15a2:	38 f4       	brcc	.+14     	; 0x15b2 <vfprintf+0x76>
    15a4:	80 32       	cpi	r24, 0x20	; 32
    15a6:	79 f0       	breq	.+30     	; 0x15c6 <vfprintf+0x8a>
    15a8:	83 32       	cpi	r24, 0x23	; 35
    15aa:	a1 f4       	brne	.+40     	; 0x15d4 <vfprintf+0x98>
    15ac:	23 2d       	mov	r18, r3
    15ae:	20 61       	ori	r18, 0x10	; 16
    15b0:	1d c0       	rjmp	.+58     	; 0x15ec <vfprintf+0xb0>
    15b2:	8d 32       	cpi	r24, 0x2D	; 45
    15b4:	61 f0       	breq	.+24     	; 0x15ce <vfprintf+0x92>
    15b6:	80 33       	cpi	r24, 0x30	; 48
    15b8:	69 f4       	brne	.+26     	; 0x15d4 <vfprintf+0x98>
    15ba:	23 2d       	mov	r18, r3
    15bc:	21 60       	ori	r18, 0x01	; 1
    15be:	16 c0       	rjmp	.+44     	; 0x15ec <vfprintf+0xb0>
    15c0:	83 2d       	mov	r24, r3
    15c2:	82 60       	ori	r24, 0x02	; 2
    15c4:	38 2e       	mov	r3, r24
    15c6:	e3 2d       	mov	r30, r3
    15c8:	e4 60       	ori	r30, 0x04	; 4
    15ca:	3e 2e       	mov	r3, r30
    15cc:	2a c0       	rjmp	.+84     	; 0x1622 <vfprintf+0xe6>
    15ce:	f3 2d       	mov	r31, r3
    15d0:	f8 60       	ori	r31, 0x08	; 8
    15d2:	1d c0       	rjmp	.+58     	; 0x160e <vfprintf+0xd2>
    15d4:	37 fc       	sbrc	r3, 7
    15d6:	2d c0       	rjmp	.+90     	; 0x1632 <vfprintf+0xf6>
    15d8:	20 ed       	ldi	r18, 0xD0	; 208
    15da:	28 0f       	add	r18, r24
    15dc:	2a 30       	cpi	r18, 0x0A	; 10
    15de:	40 f0       	brcs	.+16     	; 0x15f0 <vfprintf+0xb4>
    15e0:	8e 32       	cpi	r24, 0x2E	; 46
    15e2:	b9 f4       	brne	.+46     	; 0x1612 <vfprintf+0xd6>
    15e4:	36 fc       	sbrc	r3, 6
    15e6:	81 c1       	rjmp	.+770    	; 0x18ea <vfprintf+0x3ae>
    15e8:	23 2d       	mov	r18, r3
    15ea:	20 64       	ori	r18, 0x40	; 64
    15ec:	32 2e       	mov	r3, r18
    15ee:	19 c0       	rjmp	.+50     	; 0x1622 <vfprintf+0xe6>
    15f0:	36 fe       	sbrs	r3, 6
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <vfprintf+0xc4>
    15f4:	8a e0       	ldi	r24, 0x0A	; 10
    15f6:	98 9e       	mul	r9, r24
    15f8:	20 0d       	add	r18, r0
    15fa:	11 24       	eor	r1, r1
    15fc:	92 2e       	mov	r9, r18
    15fe:	11 c0       	rjmp	.+34     	; 0x1622 <vfprintf+0xe6>
    1600:	ea e0       	ldi	r30, 0x0A	; 10
    1602:	2e 9e       	mul	r2, r30
    1604:	20 0d       	add	r18, r0
    1606:	11 24       	eor	r1, r1
    1608:	22 2e       	mov	r2, r18
    160a:	f3 2d       	mov	r31, r3
    160c:	f0 62       	ori	r31, 0x20	; 32
    160e:	3f 2e       	mov	r3, r31
    1610:	08 c0       	rjmp	.+16     	; 0x1622 <vfprintf+0xe6>
    1612:	8c 36       	cpi	r24, 0x6C	; 108
    1614:	21 f4       	brne	.+8      	; 0x161e <vfprintf+0xe2>
    1616:	83 2d       	mov	r24, r3
    1618:	80 68       	ori	r24, 0x80	; 128
    161a:	38 2e       	mov	r3, r24
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <vfprintf+0xe6>
    161e:	88 36       	cpi	r24, 0x68	; 104
    1620:	41 f4       	brne	.+16     	; 0x1632 <vfprintf+0xf6>
    1622:	f7 01       	movw	r30, r14
    1624:	93 fd       	sbrc	r25, 3
    1626:	85 91       	lpm	r24, Z+
    1628:	93 ff       	sbrs	r25, 3
    162a:	81 91       	ld	r24, Z+
    162c:	7f 01       	movw	r14, r30
    162e:	81 11       	cpse	r24, r1
    1630:	b3 cf       	rjmp	.-154    	; 0x1598 <vfprintf+0x5c>
    1632:	98 2f       	mov	r25, r24
    1634:	9f 7d       	andi	r25, 0xDF	; 223
    1636:	95 54       	subi	r25, 0x45	; 69
    1638:	93 30       	cpi	r25, 0x03	; 3
    163a:	28 f4       	brcc	.+10     	; 0x1646 <vfprintf+0x10a>
    163c:	0c 5f       	subi	r16, 0xFC	; 252
    163e:	1f 4f       	sbci	r17, 0xFF	; 255
    1640:	9f e3       	ldi	r25, 0x3F	; 63
    1642:	99 83       	std	Y+1, r25	; 0x01
    1644:	0d c0       	rjmp	.+26     	; 0x1660 <vfprintf+0x124>
    1646:	83 36       	cpi	r24, 0x63	; 99
    1648:	31 f0       	breq	.+12     	; 0x1656 <vfprintf+0x11a>
    164a:	83 37       	cpi	r24, 0x73	; 115
    164c:	71 f0       	breq	.+28     	; 0x166a <vfprintf+0x12e>
    164e:	83 35       	cpi	r24, 0x53	; 83
    1650:	09 f0       	breq	.+2      	; 0x1654 <vfprintf+0x118>
    1652:	59 c0       	rjmp	.+178    	; 0x1706 <vfprintf+0x1ca>
    1654:	21 c0       	rjmp	.+66     	; 0x1698 <vfprintf+0x15c>
    1656:	f8 01       	movw	r30, r16
    1658:	80 81       	ld	r24, Z
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	0e 5f       	subi	r16, 0xFE	; 254
    165e:	1f 4f       	sbci	r17, 0xFF	; 255
    1660:	88 24       	eor	r8, r8
    1662:	83 94       	inc	r8
    1664:	91 2c       	mov	r9, r1
    1666:	53 01       	movw	r10, r6
    1668:	13 c0       	rjmp	.+38     	; 0x1690 <vfprintf+0x154>
    166a:	28 01       	movw	r4, r16
    166c:	f2 e0       	ldi	r31, 0x02	; 2
    166e:	4f 0e       	add	r4, r31
    1670:	51 1c       	adc	r5, r1
    1672:	f8 01       	movw	r30, r16
    1674:	a0 80       	ld	r10, Z
    1676:	b1 80       	ldd	r11, Z+1	; 0x01
    1678:	36 fe       	sbrs	r3, 6
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <vfprintf+0x146>
    167c:	69 2d       	mov	r22, r9
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <vfprintf+0x14a>
    1682:	6f ef       	ldi	r22, 0xFF	; 255
    1684:	7f ef       	ldi	r23, 0xFF	; 255
    1686:	c5 01       	movw	r24, r10
    1688:	0e 94 8a 0c 	call	0x1914	; 0x1914 <strnlen>
    168c:	4c 01       	movw	r8, r24
    168e:	82 01       	movw	r16, r4
    1690:	f3 2d       	mov	r31, r3
    1692:	ff 77       	andi	r31, 0x7F	; 127
    1694:	3f 2e       	mov	r3, r31
    1696:	16 c0       	rjmp	.+44     	; 0x16c4 <vfprintf+0x188>
    1698:	28 01       	movw	r4, r16
    169a:	22 e0       	ldi	r18, 0x02	; 2
    169c:	42 0e       	add	r4, r18
    169e:	51 1c       	adc	r5, r1
    16a0:	f8 01       	movw	r30, r16
    16a2:	a0 80       	ld	r10, Z
    16a4:	b1 80       	ldd	r11, Z+1	; 0x01
    16a6:	36 fe       	sbrs	r3, 6
    16a8:	03 c0       	rjmp	.+6      	; 0x16b0 <vfprintf+0x174>
    16aa:	69 2d       	mov	r22, r9
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <vfprintf+0x178>
    16b0:	6f ef       	ldi	r22, 0xFF	; 255
    16b2:	7f ef       	ldi	r23, 0xFF	; 255
    16b4:	c5 01       	movw	r24, r10
    16b6:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <strnlen_P>
    16ba:	4c 01       	movw	r8, r24
    16bc:	f3 2d       	mov	r31, r3
    16be:	f0 68       	ori	r31, 0x80	; 128
    16c0:	3f 2e       	mov	r3, r31
    16c2:	82 01       	movw	r16, r4
    16c4:	33 fc       	sbrc	r3, 3
    16c6:	1b c0       	rjmp	.+54     	; 0x16fe <vfprintf+0x1c2>
    16c8:	82 2d       	mov	r24, r2
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	88 16       	cp	r8, r24
    16ce:	99 06       	cpc	r9, r25
    16d0:	b0 f4       	brcc	.+44     	; 0x16fe <vfprintf+0x1c2>
    16d2:	b6 01       	movw	r22, r12
    16d4:	80 e2       	ldi	r24, 0x20	; 32
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 95 0c 	call	0x192a	; 0x192a <fputc>
    16dc:	2a 94       	dec	r2
    16de:	f4 cf       	rjmp	.-24     	; 0x16c8 <vfprintf+0x18c>
    16e0:	f5 01       	movw	r30, r10
    16e2:	37 fc       	sbrc	r3, 7
    16e4:	85 91       	lpm	r24, Z+
    16e6:	37 fe       	sbrs	r3, 7
    16e8:	81 91       	ld	r24, Z+
    16ea:	5f 01       	movw	r10, r30
    16ec:	b6 01       	movw	r22, r12
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 95 0c 	call	0x192a	; 0x192a <fputc>
    16f4:	21 10       	cpse	r2, r1
    16f6:	2a 94       	dec	r2
    16f8:	21 e0       	ldi	r18, 0x01	; 1
    16fa:	82 1a       	sub	r8, r18
    16fc:	91 08       	sbc	r9, r1
    16fe:	81 14       	cp	r8, r1
    1700:	91 04       	cpc	r9, r1
    1702:	71 f7       	brne	.-36     	; 0x16e0 <vfprintf+0x1a4>
    1704:	e8 c0       	rjmp	.+464    	; 0x18d6 <vfprintf+0x39a>
    1706:	84 36       	cpi	r24, 0x64	; 100
    1708:	11 f0       	breq	.+4      	; 0x170e <vfprintf+0x1d2>
    170a:	89 36       	cpi	r24, 0x69	; 105
    170c:	41 f5       	brne	.+80     	; 0x175e <vfprintf+0x222>
    170e:	f8 01       	movw	r30, r16
    1710:	37 fe       	sbrs	r3, 7
    1712:	07 c0       	rjmp	.+14     	; 0x1722 <vfprintf+0x1e6>
    1714:	60 81       	ld	r22, Z
    1716:	71 81       	ldd	r23, Z+1	; 0x01
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	0c 5f       	subi	r16, 0xFC	; 252
    171e:	1f 4f       	sbci	r17, 0xFF	; 255
    1720:	08 c0       	rjmp	.+16     	; 0x1732 <vfprintf+0x1f6>
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	07 2e       	mov	r0, r23
    1728:	00 0c       	add	r0, r0
    172a:	88 0b       	sbc	r24, r24
    172c:	99 0b       	sbc	r25, r25
    172e:	0e 5f       	subi	r16, 0xFE	; 254
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	f3 2d       	mov	r31, r3
    1734:	ff 76       	andi	r31, 0x6F	; 111
    1736:	3f 2e       	mov	r3, r31
    1738:	97 ff       	sbrs	r25, 7
    173a:	09 c0       	rjmp	.+18     	; 0x174e <vfprintf+0x212>
    173c:	90 95       	com	r25
    173e:	80 95       	com	r24
    1740:	70 95       	com	r23
    1742:	61 95       	neg	r22
    1744:	7f 4f       	sbci	r23, 0xFF	; 255
    1746:	8f 4f       	sbci	r24, 0xFF	; 255
    1748:	9f 4f       	sbci	r25, 0xFF	; 255
    174a:	f0 68       	ori	r31, 0x80	; 128
    174c:	3f 2e       	mov	r3, r31
    174e:	2a e0       	ldi	r18, 0x0A	; 10
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	a3 01       	movw	r20, r6
    1754:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__ultoa_invert>
    1758:	88 2e       	mov	r8, r24
    175a:	86 18       	sub	r8, r6
    175c:	45 c0       	rjmp	.+138    	; 0x17e8 <vfprintf+0x2ac>
    175e:	85 37       	cpi	r24, 0x75	; 117
    1760:	31 f4       	brne	.+12     	; 0x176e <vfprintf+0x232>
    1762:	23 2d       	mov	r18, r3
    1764:	2f 7e       	andi	r18, 0xEF	; 239
    1766:	b2 2e       	mov	r11, r18
    1768:	2a e0       	ldi	r18, 0x0A	; 10
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	25 c0       	rjmp	.+74     	; 0x17b8 <vfprintf+0x27c>
    176e:	93 2d       	mov	r25, r3
    1770:	99 7f       	andi	r25, 0xF9	; 249
    1772:	b9 2e       	mov	r11, r25
    1774:	8f 36       	cpi	r24, 0x6F	; 111
    1776:	c1 f0       	breq	.+48     	; 0x17a8 <vfprintf+0x26c>
    1778:	18 f4       	brcc	.+6      	; 0x1780 <vfprintf+0x244>
    177a:	88 35       	cpi	r24, 0x58	; 88
    177c:	79 f0       	breq	.+30     	; 0x179c <vfprintf+0x260>
    177e:	b5 c0       	rjmp	.+362    	; 0x18ea <vfprintf+0x3ae>
    1780:	80 37       	cpi	r24, 0x70	; 112
    1782:	19 f0       	breq	.+6      	; 0x178a <vfprintf+0x24e>
    1784:	88 37       	cpi	r24, 0x78	; 120
    1786:	21 f0       	breq	.+8      	; 0x1790 <vfprintf+0x254>
    1788:	b0 c0       	rjmp	.+352    	; 0x18ea <vfprintf+0x3ae>
    178a:	e9 2f       	mov	r30, r25
    178c:	e0 61       	ori	r30, 0x10	; 16
    178e:	be 2e       	mov	r11, r30
    1790:	b4 fe       	sbrs	r11, 4
    1792:	0d c0       	rjmp	.+26     	; 0x17ae <vfprintf+0x272>
    1794:	fb 2d       	mov	r31, r11
    1796:	f4 60       	ori	r31, 0x04	; 4
    1798:	bf 2e       	mov	r11, r31
    179a:	09 c0       	rjmp	.+18     	; 0x17ae <vfprintf+0x272>
    179c:	34 fe       	sbrs	r3, 4
    179e:	0a c0       	rjmp	.+20     	; 0x17b4 <vfprintf+0x278>
    17a0:	29 2f       	mov	r18, r25
    17a2:	26 60       	ori	r18, 0x06	; 6
    17a4:	b2 2e       	mov	r11, r18
    17a6:	06 c0       	rjmp	.+12     	; 0x17b4 <vfprintf+0x278>
    17a8:	28 e0       	ldi	r18, 0x08	; 8
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	05 c0       	rjmp	.+10     	; 0x17b8 <vfprintf+0x27c>
    17ae:	20 e1       	ldi	r18, 0x10	; 16
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <vfprintf+0x27c>
    17b4:	20 e1       	ldi	r18, 0x10	; 16
    17b6:	32 e0       	ldi	r19, 0x02	; 2
    17b8:	f8 01       	movw	r30, r16
    17ba:	b7 fe       	sbrs	r11, 7
    17bc:	07 c0       	rjmp	.+14     	; 0x17cc <vfprintf+0x290>
    17be:	60 81       	ld	r22, Z
    17c0:	71 81       	ldd	r23, Z+1	; 0x01
    17c2:	82 81       	ldd	r24, Z+2	; 0x02
    17c4:	93 81       	ldd	r25, Z+3	; 0x03
    17c6:	0c 5f       	subi	r16, 0xFC	; 252
    17c8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ca:	06 c0       	rjmp	.+12     	; 0x17d8 <vfprintf+0x29c>
    17cc:	60 81       	ld	r22, Z
    17ce:	71 81       	ldd	r23, Z+1	; 0x01
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 5f       	subi	r16, 0xFE	; 254
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
    17d8:	a3 01       	movw	r20, r6
    17da:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__ultoa_invert>
    17de:	88 2e       	mov	r8, r24
    17e0:	86 18       	sub	r8, r6
    17e2:	fb 2d       	mov	r31, r11
    17e4:	ff 77       	andi	r31, 0x7F	; 127
    17e6:	3f 2e       	mov	r3, r31
    17e8:	36 fe       	sbrs	r3, 6
    17ea:	0d c0       	rjmp	.+26     	; 0x1806 <vfprintf+0x2ca>
    17ec:	23 2d       	mov	r18, r3
    17ee:	2e 7f       	andi	r18, 0xFE	; 254
    17f0:	a2 2e       	mov	r10, r18
    17f2:	89 14       	cp	r8, r9
    17f4:	58 f4       	brcc	.+22     	; 0x180c <vfprintf+0x2d0>
    17f6:	34 fe       	sbrs	r3, 4
    17f8:	0b c0       	rjmp	.+22     	; 0x1810 <vfprintf+0x2d4>
    17fa:	32 fc       	sbrc	r3, 2
    17fc:	09 c0       	rjmp	.+18     	; 0x1810 <vfprintf+0x2d4>
    17fe:	83 2d       	mov	r24, r3
    1800:	8e 7e       	andi	r24, 0xEE	; 238
    1802:	a8 2e       	mov	r10, r24
    1804:	05 c0       	rjmp	.+10     	; 0x1810 <vfprintf+0x2d4>
    1806:	b8 2c       	mov	r11, r8
    1808:	a3 2c       	mov	r10, r3
    180a:	03 c0       	rjmp	.+6      	; 0x1812 <vfprintf+0x2d6>
    180c:	b8 2c       	mov	r11, r8
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <vfprintf+0x2d6>
    1810:	b9 2c       	mov	r11, r9
    1812:	a4 fe       	sbrs	r10, 4
    1814:	0f c0       	rjmp	.+30     	; 0x1834 <vfprintf+0x2f8>
    1816:	fe 01       	movw	r30, r28
    1818:	e8 0d       	add	r30, r8
    181a:	f1 1d       	adc	r31, r1
    181c:	80 81       	ld	r24, Z
    181e:	80 33       	cpi	r24, 0x30	; 48
    1820:	21 f4       	brne	.+8      	; 0x182a <vfprintf+0x2ee>
    1822:	9a 2d       	mov	r25, r10
    1824:	99 7e       	andi	r25, 0xE9	; 233
    1826:	a9 2e       	mov	r10, r25
    1828:	09 c0       	rjmp	.+18     	; 0x183c <vfprintf+0x300>
    182a:	a2 fe       	sbrs	r10, 2
    182c:	06 c0       	rjmp	.+12     	; 0x183a <vfprintf+0x2fe>
    182e:	b3 94       	inc	r11
    1830:	b3 94       	inc	r11
    1832:	04 c0       	rjmp	.+8      	; 0x183c <vfprintf+0x300>
    1834:	8a 2d       	mov	r24, r10
    1836:	86 78       	andi	r24, 0x86	; 134
    1838:	09 f0       	breq	.+2      	; 0x183c <vfprintf+0x300>
    183a:	b3 94       	inc	r11
    183c:	a3 fc       	sbrc	r10, 3
    183e:	11 c0       	rjmp	.+34     	; 0x1862 <vfprintf+0x326>
    1840:	a0 fe       	sbrs	r10, 0
    1842:	06 c0       	rjmp	.+12     	; 0x1850 <vfprintf+0x314>
    1844:	b2 14       	cp	r11, r2
    1846:	88 f4       	brcc	.+34     	; 0x186a <vfprintf+0x32e>
    1848:	28 0c       	add	r2, r8
    184a:	92 2c       	mov	r9, r2
    184c:	9b 18       	sub	r9, r11
    184e:	0e c0       	rjmp	.+28     	; 0x186c <vfprintf+0x330>
    1850:	b2 14       	cp	r11, r2
    1852:	60 f4       	brcc	.+24     	; 0x186c <vfprintf+0x330>
    1854:	b6 01       	movw	r22, r12
    1856:	80 e2       	ldi	r24, 0x20	; 32
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e 94 95 0c 	call	0x192a	; 0x192a <fputc>
    185e:	b3 94       	inc	r11
    1860:	f7 cf       	rjmp	.-18     	; 0x1850 <vfprintf+0x314>
    1862:	b2 14       	cp	r11, r2
    1864:	18 f4       	brcc	.+6      	; 0x186c <vfprintf+0x330>
    1866:	2b 18       	sub	r2, r11
    1868:	02 c0       	rjmp	.+4      	; 0x186e <vfprintf+0x332>
    186a:	98 2c       	mov	r9, r8
    186c:	21 2c       	mov	r2, r1
    186e:	a4 fe       	sbrs	r10, 4
    1870:	10 c0       	rjmp	.+32     	; 0x1892 <vfprintf+0x356>
    1872:	b6 01       	movw	r22, r12
    1874:	80 e3       	ldi	r24, 0x30	; 48
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 95 0c 	call	0x192a	; 0x192a <fputc>
    187c:	a2 fe       	sbrs	r10, 2
    187e:	17 c0       	rjmp	.+46     	; 0x18ae <vfprintf+0x372>
    1880:	a1 fc       	sbrc	r10, 1
    1882:	03 c0       	rjmp	.+6      	; 0x188a <vfprintf+0x34e>
    1884:	88 e7       	ldi	r24, 0x78	; 120
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 c0       	rjmp	.+4      	; 0x188e <vfprintf+0x352>
    188a:	88 e5       	ldi	r24, 0x58	; 88
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	b6 01       	movw	r22, r12
    1890:	0c c0       	rjmp	.+24     	; 0x18aa <vfprintf+0x36e>
    1892:	8a 2d       	mov	r24, r10
    1894:	86 78       	andi	r24, 0x86	; 134
    1896:	59 f0       	breq	.+22     	; 0x18ae <vfprintf+0x372>
    1898:	a1 fe       	sbrs	r10, 1
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <vfprintf+0x364>
    189c:	8b e2       	ldi	r24, 0x2B	; 43
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <vfprintf+0x366>
    18a0:	80 e2       	ldi	r24, 0x20	; 32
    18a2:	a7 fc       	sbrc	r10, 7
    18a4:	8d e2       	ldi	r24, 0x2D	; 45
    18a6:	b6 01       	movw	r22, r12
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 95 0c 	call	0x192a	; 0x192a <fputc>
    18ae:	89 14       	cp	r8, r9
    18b0:	38 f4       	brcc	.+14     	; 0x18c0 <vfprintf+0x384>
    18b2:	b6 01       	movw	r22, r12
    18b4:	80 e3       	ldi	r24, 0x30	; 48
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0e 94 95 0c 	call	0x192a	; 0x192a <fputc>
    18bc:	9a 94       	dec	r9
    18be:	f7 cf       	rjmp	.-18     	; 0x18ae <vfprintf+0x372>
    18c0:	8a 94       	dec	r8
    18c2:	f3 01       	movw	r30, r6
    18c4:	e8 0d       	add	r30, r8
    18c6:	f1 1d       	adc	r31, r1
    18c8:	80 81       	ld	r24, Z
    18ca:	b6 01       	movw	r22, r12
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 95 0c 	call	0x192a	; 0x192a <fputc>
    18d2:	81 10       	cpse	r8, r1
    18d4:	f5 cf       	rjmp	.-22     	; 0x18c0 <vfprintf+0x384>
    18d6:	22 20       	and	r2, r2
    18d8:	09 f4       	brne	.+2      	; 0x18dc <vfprintf+0x3a0>
    18da:	42 ce       	rjmp	.-892    	; 0x1560 <vfprintf+0x24>
    18dc:	b6 01       	movw	r22, r12
    18de:	80 e2       	ldi	r24, 0x20	; 32
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	0e 94 95 0c 	call	0x192a	; 0x192a <fputc>
    18e6:	2a 94       	dec	r2
    18e8:	f6 cf       	rjmp	.-20     	; 0x18d6 <vfprintf+0x39a>
    18ea:	f6 01       	movw	r30, r12
    18ec:	86 81       	ldd	r24, Z+6	; 0x06
    18ee:	97 81       	ldd	r25, Z+7	; 0x07
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <vfprintf+0x3ba>
    18f2:	8f ef       	ldi	r24, 0xFF	; 255
    18f4:	9f ef       	ldi	r25, 0xFF	; 255
    18f6:	2b 96       	adiw	r28, 0x0b	; 11
    18f8:	e2 e1       	ldi	r30, 0x12	; 18
    18fa:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__epilogue_restores__>

000018fe <strnlen_P>:
    18fe:	fc 01       	movw	r30, r24
    1900:	05 90       	lpm	r0, Z+
    1902:	61 50       	subi	r22, 0x01	; 1
    1904:	70 40       	sbci	r23, 0x00	; 0
    1906:	01 10       	cpse	r0, r1
    1908:	d8 f7       	brcc	.-10     	; 0x1900 <strnlen_P+0x2>
    190a:	80 95       	com	r24
    190c:	90 95       	com	r25
    190e:	8e 0f       	add	r24, r30
    1910:	9f 1f       	adc	r25, r31
    1912:	08 95       	ret

00001914 <strnlen>:
    1914:	fc 01       	movw	r30, r24
    1916:	61 50       	subi	r22, 0x01	; 1
    1918:	70 40       	sbci	r23, 0x00	; 0
    191a:	01 90       	ld	r0, Z+
    191c:	01 10       	cpse	r0, r1
    191e:	d8 f7       	brcc	.-10     	; 0x1916 <strnlen+0x2>
    1920:	80 95       	com	r24
    1922:	90 95       	com	r25
    1924:	8e 0f       	add	r24, r30
    1926:	9f 1f       	adc	r25, r31
    1928:	08 95       	ret

0000192a <fputc>:
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	fb 01       	movw	r30, r22
    1934:	23 81       	ldd	r18, Z+3	; 0x03
    1936:	21 fd       	sbrc	r18, 1
    1938:	03 c0       	rjmp	.+6      	; 0x1940 <fputc+0x16>
    193a:	8f ef       	ldi	r24, 0xFF	; 255
    193c:	9f ef       	ldi	r25, 0xFF	; 255
    193e:	2c c0       	rjmp	.+88     	; 0x1998 <fputc+0x6e>
    1940:	22 ff       	sbrs	r18, 2
    1942:	16 c0       	rjmp	.+44     	; 0x1970 <fputc+0x46>
    1944:	46 81       	ldd	r20, Z+6	; 0x06
    1946:	57 81       	ldd	r21, Z+7	; 0x07
    1948:	24 81       	ldd	r18, Z+4	; 0x04
    194a:	35 81       	ldd	r19, Z+5	; 0x05
    194c:	42 17       	cp	r20, r18
    194e:	53 07       	cpc	r21, r19
    1950:	44 f4       	brge	.+16     	; 0x1962 <fputc+0x38>
    1952:	a0 81       	ld	r26, Z
    1954:	b1 81       	ldd	r27, Z+1	; 0x01
    1956:	9d 01       	movw	r18, r26
    1958:	2f 5f       	subi	r18, 0xFF	; 255
    195a:	3f 4f       	sbci	r19, 0xFF	; 255
    195c:	31 83       	std	Z+1, r19	; 0x01
    195e:	20 83       	st	Z, r18
    1960:	8c 93       	st	X, r24
    1962:	26 81       	ldd	r18, Z+6	; 0x06
    1964:	37 81       	ldd	r19, Z+7	; 0x07
    1966:	2f 5f       	subi	r18, 0xFF	; 255
    1968:	3f 4f       	sbci	r19, 0xFF	; 255
    196a:	37 83       	std	Z+7, r19	; 0x07
    196c:	26 83       	std	Z+6, r18	; 0x06
    196e:	14 c0       	rjmp	.+40     	; 0x1998 <fputc+0x6e>
    1970:	8b 01       	movw	r16, r22
    1972:	ec 01       	movw	r28, r24
    1974:	fb 01       	movw	r30, r22
    1976:	00 84       	ldd	r0, Z+8	; 0x08
    1978:	f1 85       	ldd	r31, Z+9	; 0x09
    197a:	e0 2d       	mov	r30, r0
    197c:	09 95       	icall
    197e:	89 2b       	or	r24, r25
    1980:	e1 f6       	brne	.-72     	; 0x193a <fputc+0x10>
    1982:	d8 01       	movw	r26, r16
    1984:	16 96       	adiw	r26, 0x06	; 6
    1986:	8d 91       	ld	r24, X+
    1988:	9c 91       	ld	r25, X
    198a:	17 97       	sbiw	r26, 0x07	; 7
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	17 96       	adiw	r26, 0x07	; 7
    1990:	9c 93       	st	X, r25
    1992:	8e 93       	st	-X, r24
    1994:	16 97       	sbiw	r26, 0x06	; 6
    1996:	ce 01       	movw	r24, r28
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	1f 91       	pop	r17
    199e:	0f 91       	pop	r16
    19a0:	08 95       	ret

000019a2 <__ultoa_invert>:
    19a2:	fa 01       	movw	r30, r20
    19a4:	aa 27       	eor	r26, r26
    19a6:	28 30       	cpi	r18, 0x08	; 8
    19a8:	51 f1       	breq	.+84     	; 0x19fe <__ultoa_invert+0x5c>
    19aa:	20 31       	cpi	r18, 0x10	; 16
    19ac:	81 f1       	breq	.+96     	; 0x1a0e <__ultoa_invert+0x6c>
    19ae:	e8 94       	clt
    19b0:	6f 93       	push	r22
    19b2:	6e 7f       	andi	r22, 0xFE	; 254
    19b4:	6e 5f       	subi	r22, 0xFE	; 254
    19b6:	7f 4f       	sbci	r23, 0xFF	; 255
    19b8:	8f 4f       	sbci	r24, 0xFF	; 255
    19ba:	9f 4f       	sbci	r25, 0xFF	; 255
    19bc:	af 4f       	sbci	r26, 0xFF	; 255
    19be:	b1 e0       	ldi	r27, 0x01	; 1
    19c0:	3e d0       	rcall	.+124    	; 0x1a3e <__ultoa_invert+0x9c>
    19c2:	b4 e0       	ldi	r27, 0x04	; 4
    19c4:	3c d0       	rcall	.+120    	; 0x1a3e <__ultoa_invert+0x9c>
    19c6:	67 0f       	add	r22, r23
    19c8:	78 1f       	adc	r23, r24
    19ca:	89 1f       	adc	r24, r25
    19cc:	9a 1f       	adc	r25, r26
    19ce:	a1 1d       	adc	r26, r1
    19d0:	68 0f       	add	r22, r24
    19d2:	79 1f       	adc	r23, r25
    19d4:	8a 1f       	adc	r24, r26
    19d6:	91 1d       	adc	r25, r1
    19d8:	a1 1d       	adc	r26, r1
    19da:	6a 0f       	add	r22, r26
    19dc:	71 1d       	adc	r23, r1
    19de:	81 1d       	adc	r24, r1
    19e0:	91 1d       	adc	r25, r1
    19e2:	a1 1d       	adc	r26, r1
    19e4:	20 d0       	rcall	.+64     	; 0x1a26 <__ultoa_invert+0x84>
    19e6:	09 f4       	brne	.+2      	; 0x19ea <__ultoa_invert+0x48>
    19e8:	68 94       	set
    19ea:	3f 91       	pop	r19
    19ec:	2a e0       	ldi	r18, 0x0A	; 10
    19ee:	26 9f       	mul	r18, r22
    19f0:	11 24       	eor	r1, r1
    19f2:	30 19       	sub	r19, r0
    19f4:	30 5d       	subi	r19, 0xD0	; 208
    19f6:	31 93       	st	Z+, r19
    19f8:	de f6       	brtc	.-74     	; 0x19b0 <__ultoa_invert+0xe>
    19fa:	cf 01       	movw	r24, r30
    19fc:	08 95       	ret
    19fe:	46 2f       	mov	r20, r22
    1a00:	47 70       	andi	r20, 0x07	; 7
    1a02:	40 5d       	subi	r20, 0xD0	; 208
    1a04:	41 93       	st	Z+, r20
    1a06:	b3 e0       	ldi	r27, 0x03	; 3
    1a08:	0f d0       	rcall	.+30     	; 0x1a28 <__ultoa_invert+0x86>
    1a0a:	c9 f7       	brne	.-14     	; 0x19fe <__ultoa_invert+0x5c>
    1a0c:	f6 cf       	rjmp	.-20     	; 0x19fa <__ultoa_invert+0x58>
    1a0e:	46 2f       	mov	r20, r22
    1a10:	4f 70       	andi	r20, 0x0F	; 15
    1a12:	40 5d       	subi	r20, 0xD0	; 208
    1a14:	4a 33       	cpi	r20, 0x3A	; 58
    1a16:	18 f0       	brcs	.+6      	; 0x1a1e <__ultoa_invert+0x7c>
    1a18:	49 5d       	subi	r20, 0xD9	; 217
    1a1a:	31 fd       	sbrc	r19, 1
    1a1c:	40 52       	subi	r20, 0x20	; 32
    1a1e:	41 93       	st	Z+, r20
    1a20:	02 d0       	rcall	.+4      	; 0x1a26 <__ultoa_invert+0x84>
    1a22:	a9 f7       	brne	.-22     	; 0x1a0e <__ultoa_invert+0x6c>
    1a24:	ea cf       	rjmp	.-44     	; 0x19fa <__ultoa_invert+0x58>
    1a26:	b4 e0       	ldi	r27, 0x04	; 4
    1a28:	a6 95       	lsr	r26
    1a2a:	97 95       	ror	r25
    1a2c:	87 95       	ror	r24
    1a2e:	77 95       	ror	r23
    1a30:	67 95       	ror	r22
    1a32:	ba 95       	dec	r27
    1a34:	c9 f7       	brne	.-14     	; 0x1a28 <__ultoa_invert+0x86>
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	61 05       	cpc	r22, r1
    1a3a:	71 05       	cpc	r23, r1
    1a3c:	08 95       	ret
    1a3e:	9b 01       	movw	r18, r22
    1a40:	ac 01       	movw	r20, r24
    1a42:	0a 2e       	mov	r0, r26
    1a44:	06 94       	lsr	r0
    1a46:	57 95       	ror	r21
    1a48:	47 95       	ror	r20
    1a4a:	37 95       	ror	r19
    1a4c:	27 95       	ror	r18
    1a4e:	ba 95       	dec	r27
    1a50:	c9 f7       	brne	.-14     	; 0x1a44 <__ultoa_invert+0xa2>
    1a52:	62 0f       	add	r22, r18
    1a54:	73 1f       	adc	r23, r19
    1a56:	84 1f       	adc	r24, r20
    1a58:	95 1f       	adc	r25, r21
    1a5a:	a0 1d       	adc	r26, r0
    1a5c:	08 95       	ret

00001a5e <__prologue_saves__>:
    1a5e:	2f 92       	push	r2
    1a60:	3f 92       	push	r3
    1a62:	4f 92       	push	r4
    1a64:	5f 92       	push	r5
    1a66:	6f 92       	push	r6
    1a68:	7f 92       	push	r7
    1a6a:	8f 92       	push	r8
    1a6c:	9f 92       	push	r9
    1a6e:	af 92       	push	r10
    1a70:	bf 92       	push	r11
    1a72:	cf 92       	push	r12
    1a74:	df 92       	push	r13
    1a76:	ef 92       	push	r14
    1a78:	ff 92       	push	r15
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	ca 1b       	sub	r28, r26
    1a88:	db 0b       	sbc	r29, r27
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	09 94       	ijmp

00001a96 <__epilogue_restores__>:
    1a96:	2a 88       	ldd	r2, Y+18	; 0x12
    1a98:	39 88       	ldd	r3, Y+17	; 0x11
    1a9a:	48 88       	ldd	r4, Y+16	; 0x10
    1a9c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a9e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1aa0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1aa2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1aa4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1aa6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1aa8:	b9 84       	ldd	r11, Y+9	; 0x09
    1aaa:	c8 84       	ldd	r12, Y+8	; 0x08
    1aac:	df 80       	ldd	r13, Y+7	; 0x07
    1aae:	ee 80       	ldd	r14, Y+6	; 0x06
    1ab0:	fd 80       	ldd	r15, Y+5	; 0x05
    1ab2:	0c 81       	ldd	r16, Y+4	; 0x04
    1ab4:	1b 81       	ldd	r17, Y+3	; 0x03
    1ab6:	aa 81       	ldd	r26, Y+2	; 0x02
    1ab8:	b9 81       	ldd	r27, Y+1	; 0x01
    1aba:	ce 0f       	add	r28, r30
    1abc:	d1 1d       	adc	r29, r1
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	ed 01       	movw	r28, r26
    1aca:	08 95       	ret

00001acc <_exit>:
    1acc:	f8 94       	cli

00001ace <__stop_program>:
    1ace:	ff cf       	rjmp	.-2      	; 0x1ace <__stop_program>
