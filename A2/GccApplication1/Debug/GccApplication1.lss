
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000418  00800100  00002faa  0000303e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002faa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015b  00800518  00800518  00003456  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003456  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000034b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  000034f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f6b  00000000  00000000  00003824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001357  00000000  00000000  0000778f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023b5  00000000  00000000  00008ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a40  00000000  00000000  0000ae9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d50  00000000  00000000  0000b8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026b9  00000000  00000000  0000c62c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000ece5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__ctors_end>
       4:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       8:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      10:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      14:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_5>
      18:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      1c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      20:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      24:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__vector_9>
      28:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      2c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      30:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      34:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      38:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      3c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      40:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__vector_16>
      44:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      48:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      4c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      50:	0c 94 b0 10 	jmp	0x2160	; 0x2160 <__vector_20>
      54:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__vector_21>
      58:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      5c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      60:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      64:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      68:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      6c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      70:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      74:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      78:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2347>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2284>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 20 43 61 69 6c 69 6e 20 44 65 6c 67      by  Cailin Delg
      d4:	61 64 6f 20 2d 20 34 38 30 32 37 39 34 32 00        ado - 48027942.

000000e3 <__c.2282>:
      e3:	20 5c 24 24 20 20 20 5c 24 24 20 20 20 20 20 5c      \$$   \$$     \
      f3:	24 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20     $     \$$   \$$ 
     103:	20 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20           \$$   \$$ 
     113:	20 5c 24 24 24 24 24 24 24 20 5c 24 24 20 20 20      \$$$$$$$ \$$   
     123:	20 20 20 20 20 5c 24 24 24 24 24 24 00                   \$$$$$$.

00000130 <__c.2280>:
     130:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 5c 24     | $$  | $$    \$
     140:	24 24 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20     $$   | $$  | $$ 
     150:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     160:	5c 24 24 20 20 20 20 20 5c 7c 20 24 24 20 20 20     \$$     \| $$   
     170:	20 20 20 20 5c 24 24 20 20 20 20 24 24 00               \$$    $$.

0000017e <__c.2278>:
     17e:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 5c 24 24     | $$  | $$   \$$
     18e:	20 24 24 20 20 7c 20 24 24 20 20 7c 20 24 24 20      $$  | $$  | $$ 
     19e:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 7c          | $$  | $$|
     1ae:	20 24 24 24 24 24 24 24 24 7c 20 24 24 20 20 20      $$$$$$$$| $$   
     1be:	20 20 20 7c 20 24 24 5f 5f 2f 20 24 24 00              | $$__/ $$.

000001cc <__c.2276>:
     1cc:	7c 20 24 24 24 24 24 24 24 24 20 20 5c 24 24 5c     | $$$$$$$$  \$$\
     1dc:	20 20 24 24 20 7c 20 24 24 24 24 24 24 24 5c 20       $$ | $$$$$$$\ 
     1ec:	20 20 20 20 20 7c 20 24 24 24 24 24 24 24 24 7c          | $$$$$$$$|
     1fc:	20 24 24 20 20 20 20 24 24 7c 20 24 24 20 20 20      $$    $$| $$   
     20c:	5c 24 24 7c 20 24 24 20 20 7c 20 24 24 00           \$$| $$  | $$.

0000021a <__c.2274>:
     21a:	7c 20 24 24 20 20 20 20 24 24 20 5c 24 24 5c 20     | $$    $$ \$$\ 
     22a:	2f 20 20 24 24 7c 20 24 24 20 20 20 20 24 24 20     /  $$| $$    $$ 
     23a:	20 20 20 20 20 7c 20 24 24 20 20 20 20 24 24 7c          | $$    $$|
     24a:	20 20 24 24 24 24 24 24 5c 7c 20 20 24 24 24 24       $$$$$$\|  $$$$
     25a:	24 24 5c 7c 20 20 24 24 24 24 24 24 5c 00           $$\|  $$$$$$\.

00000268 <__c.2272>:
     268:	7c 20 24 24 5f 5f 7c 20 24 24 7c 20 24 24 20 20     | $$__| $$| $$  
     278:	20 7c 20 24 24 7c 20 24 24 5f 5f 7c 20 24 24 20      | $$| $$__| $$ 
     288:	20 20 20 20 20 7c 20 24 24 5f 5f 7c 20 24 24 20          | $$__| $$ 
     298:	2f 20 20 20 20 20 20 5c 20 20 2f 20 20 20 20 20     /      \  /     
     2a8:	20 5c 20 20 2f 20 20 20 20 20 20 5c 00               \  /      \.

000002b5 <__c.2270>:
     2b5:	7c 20 20 24 24 24 24 24 24 5c 7c 20 24 24 20 20     |  $$$$$$\| $$  
     2c5:	20 7c 20 24 24 7c 20 24 24 24 24 24 24 24 5c 20      | $$| $$$$$$$\ 
     2d5:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     2e5:	20 5f 5f 5f 5f 5f 5f 20 20 20 20 5f 5f 5f 5f 5f      ______    _____
     2f5:	5f 20 20 20 20 5f 5f 5f 5f 5f 5f 00                 _    ______.

00000301 <__c.2268>:
     301:	20 2f 20 20 20 20 20 20 5c 20 7c 20 20 5c 20 20      /      \ |  \  
     311:	20 7c 20 20 5c 7c 20 20 20 20 20 20 20 5c 20 20      |  \|       \  
     321:	20 20 20 20 20 7c 20 20 5c 20 20 7c 20 20 5c 00          |  \  |  \.

00000331 <__c.2266>:
     331:	20 20 5f 5f 5f 5f 5f 5f 20 20 20 5f 5f 20 20 20       ______   __   
     341:	20 20 5f 5f 20 20 5f 5f 5f 5f 5f 5f 5f 20 20 20       __  _______   
     351:	20 20 20 20 20 20 5f 5f 20 20 20 20 5f 5f 00              __    __.

00000360 <__c.2058>:
     360:	1b 5b 3f 32 35 68 00                                .[?25h.

00000367 <__c.2054>:
     367:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000036e <__c.2050>:
     36e:	1b 5b 25 64 6d 00                                   .[%dm.

00000374 <__c.2045>:
     374:	1b 5b 4b 00                                         .[K.

00000378 <__c.2040>:
     378:	1b 5b 32 4a 00                                      .[2J.

0000037d <__c.2025>:
     37d:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000386 <__ctors_end>:
     386:	11 24       	eor	r1, r1
     388:	1f be       	out	0x3f, r1	; 63
     38a:	cf ef       	ldi	r28, 0xFF	; 255
     38c:	d8 e0       	ldi	r29, 0x08	; 8
     38e:	de bf       	out	0x3e, r29	; 62
     390:	cd bf       	out	0x3d, r28	; 61

00000392 <__do_copy_data>:
     392:	15 e0       	ldi	r17, 0x05	; 5
     394:	a0 e0       	ldi	r26, 0x00	; 0
     396:	b1 e0       	ldi	r27, 0x01	; 1
     398:	ea ea       	ldi	r30, 0xAA	; 170
     39a:	ff e2       	ldi	r31, 0x2F	; 47
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__do_copy_data+0x10>
     39e:	05 90       	lpm	r0, Z+
     3a0:	0d 92       	st	X+, r0
     3a2:	a8 31       	cpi	r26, 0x18	; 24
     3a4:	b1 07       	cpc	r27, r17
     3a6:	d9 f7       	brne	.-10     	; 0x39e <__do_copy_data+0xc>

000003a8 <__do_clear_bss>:
     3a8:	26 e0       	ldi	r18, 0x06	; 6
     3aa:	a8 e1       	ldi	r26, 0x18	; 24
     3ac:	b5 e0       	ldi	r27, 0x05	; 5
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
     3b2:	a3 37       	cpi	r26, 0x73	; 115
     3b4:	b2 07       	cpc	r27, r18
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>
     3b8:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <main>
     3bc:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <_exit>

000003c0 <__bad_interrupt>:
     3c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c4 <init_button_interrupts>:
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void)
{
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     3c4:	e8 e6       	ldi	r30, 0x68	; 104
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	82 60       	ori	r24, 0x02	; 2
     3cc:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     3ce:	8b b3       	in	r24, 0x1b	; 27
     3d0:	82 60       	ori	r24, 0x02	; 2
     3d2:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     3d4:	ec e6       	ldi	r30, 0x6C	; 108
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	8f 60       	ori	r24, 0x0F	; 15
     3dc:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     3de:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <__data_end>
     3e2:	08 95       	ret

000003e4 <button_pushed>:

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0)
     3e4:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <__data_end>
     3e8:	18 16       	cp	r1, r24
     3ea:	14 f5       	brge	.+68     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     3ec:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3f0:	6f b7       	in	r22, 0x3f	; 63
		cli();
     3f2:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	09 c0       	rjmp	.+18     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		{
			button_queue[i - 1] = button_queue[i];
     3f8:	f9 01       	movw	r30, r18
     3fa:	e7 5e       	subi	r30, 0xE7	; 231
     3fc:	fa 4f       	sbci	r31, 0xFA	; 250
     3fe:	40 81       	ld	r20, Z
     400:	f9 01       	movw	r30, r18
     402:	e8 5e       	subi	r30, 0xE8	; 232
     404:	fa 4f       	sbci	r31, 0xFA	; 250
     406:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     408:	9f 5f       	subi	r25, 0xFF	; 255
     40a:	29 2f       	mov	r18, r25
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 91 18 05 	lds	r20, 0x0518	; 0x800518 <__data_end>
     412:	04 2e       	mov	r0, r20
     414:	00 0c       	add	r0, r0
     416:	55 0b       	sbc	r21, r21
     418:	24 17       	cp	r18, r20
     41a:	35 07       	cpc	r19, r21
     41c:	6c f3       	brlt	.-38     	; 0x3f8 <button_pushed+0x14>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     41e:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <__data_end>
     422:	91 50       	subi	r25, 0x01	; 1
     424:	90 93 18 05 	sts	0x0518, r25	; 0x800518 <__data_end>
		
		if (interrupts_were_enabled)
     428:	66 23       	and	r22, r22
     42a:	1c f4       	brge	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		{
			// Turn them back on again
			sei();
     42c:	78 94       	sei
     42e:	08 95       	ret
	queue_length = 0;
}

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     430:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     432:	08 95       	ret

00000434 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect)
{
     434:	1f 92       	push	r1
     436:	0f 92       	push	r0
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     44c:	43 b1       	in	r20, 0x03	; 3
     44e:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	26 c0       	rjmp	.+76     	; 0x4a0 <__vector_5+0x6c>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     454:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <__data_end>
     458:	94 30       	cpi	r25, 0x04	; 4
     45a:	0c f5       	brge	.+66     	; 0x49e <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     45c:	24 2f       	mov	r18, r20
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	08 2e       	mov	r0, r24
     462:	02 c0       	rjmp	.+4      	; 0x468 <__vector_5+0x34>
     464:	35 95       	asr	r19
     466:	27 95       	ror	r18
     468:	0a 94       	dec	r0
     46a:	e2 f7       	brpl	.-8      	; 0x464 <__vector_5+0x30>
     46c:	20 ff       	sbrs	r18, 0
     46e:	17 c0       	rjmp	.+46     	; 0x49e <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin)))
     470:	20 91 1d 05 	lds	r18, 0x051D	; 0x80051d <last_button_state>
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	08 2e       	mov	r0, r24
     478:	02 c0       	rjmp	.+4      	; 0x47e <__vector_5+0x4a>
     47a:	35 95       	asr	r19
     47c:	27 95       	ror	r18
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <__vector_5+0x46>
     482:	20 fd       	sbrc	r18, 0
     484:	0c c0       	rjmp	.+24     	; 0x49e <__vector_5+0x6a>
				{
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     486:	e0 91 18 05 	lds	r30, 0x0518	; 0x800518 <__data_end>
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	9e 0f       	add	r25, r30
     48e:	90 93 18 05 	sts	0x0518, r25	; 0x800518 <__data_end>
     492:	0e 2e       	mov	r0, r30
     494:	00 0c       	add	r0, r0
     496:	ff 0b       	sbc	r31, r31
     498:	e7 5e       	subi	r30, 0xE7	; 231
     49a:	fa 4f       	sbci	r31, 0xFA	; 250
     49c:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	c0 f2       	brcs	.-80     	; 0x454 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     4a4:	40 93 1d 05 	sts	0x051D, r20	; 0x80051d <last_button_state>
}
     4a8:	ff 91       	pop	r31
     4aa:	ef 91       	pop	r30
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <update_start_screen>:

// Update dynamic start screen based on the frame number (0-31)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	18 2f       	mov	r17, r24
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     4c8:	d4 e0       	ldi	r29, 0x04	; 4
     4ca:	36 c0       	rjmp	.+108    	; 0x538 <update_start_screen+0x78>
	{
		for (uint8_t col = 11; col < 16; col++)
		{
			colour = col == 14 ? COLOUR_YELLOW : COLOUR_BLACK;
     4cc:	ce 30       	cpi	r28, 0x0E	; 14
     4ce:	11 f4       	brne	.+4      	; 0x4d4 <update_start_screen+0x14>
     4d0:	4f ef       	ldi	r20, 0xFF	; 255
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <update_start_screen+0x16>
     4d4:	40 e0       	ldi	r20, 0x00	; 0
			if (((32+col-frame_number) & ((1<<(row-2))-1)) == (1<<(row-3))-1)
     4d6:	2c 2f       	mov	r18, r28
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	20 5e       	subi	r18, 0xE0	; 224
     4dc:	3f 4f       	sbci	r19, 0xFF	; 255
     4de:	21 1b       	sub	r18, r17
     4e0:	31 09       	sbc	r19, r1
     4e2:	ed 2f       	mov	r30, r29
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	bf 01       	movw	r22, r30
     4e8:	62 50       	subi	r22, 0x02	; 2
     4ea:	71 09       	sbc	r23, r1
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	dc 01       	movw	r26, r24
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <update_start_screen+0x38>
     4f4:	aa 0f       	add	r26, r26
     4f6:	bb 1f       	adc	r27, r27
     4f8:	6a 95       	dec	r22
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <update_start_screen+0x34>
     4fc:	bd 01       	movw	r22, r26
     4fe:	61 50       	subi	r22, 0x01	; 1
     500:	71 09       	sbc	r23, r1
     502:	26 23       	and	r18, r22
     504:	37 23       	and	r19, r23
     506:	33 97       	sbiw	r30, 0x03	; 3
     508:	02 c0       	rjmp	.+4      	; 0x50e <update_start_screen+0x4e>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	ea 95       	dec	r30
     510:	e2 f7       	brpl	.-8      	; 0x50a <update_start_screen+0x4a>
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	28 17       	cp	r18, r24
     516:	39 07       	cpc	r19, r25
     518:	29 f4       	brne	.+10     	; 0x524 <update_start_screen+0x64>
			{
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
     51a:	ce 30       	cpi	r28, 0x0E	; 14
     51c:	10 f4       	brcc	.+4      	; 0x522 <update_start_screen+0x62>
     51e:	4f e0       	ldi	r20, 0x0F	; 15
     520:	01 c0       	rjmp	.+2      	; 0x524 <update_start_screen+0x64>
     522:	40 ef       	ldi	r20, 0xF0	; 240
			}
			ledmatrix_update_pixel(col, row, colour);
     524:	6d 2f       	mov	r22, r29
     526:	8c 2f       	mov	r24, r28
     528:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
	{
		for (uint8_t col = 11; col < 16; col++)
     52c:	cf 5f       	subi	r28, 0xFF	; 255
     52e:	01 c0       	rjmp	.+2      	; 0x532 <update_start_screen+0x72>
     530:	cb e0       	ldi	r28, 0x0B	; 11
     532:	c0 31       	cpi	r28, 0x10	; 16
     534:	58 f2       	brcs	.-106    	; 0x4cc <update_start_screen+0xc>
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     536:	df 5f       	subi	r29, 0xFF	; 255
     538:	d8 30       	cpi	r29, 0x08	; 8
     53a:	d0 f3       	brcs	.-12     	; 0x530 <update_start_screen+0x70>
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
			}
			ledmatrix_update_pixel(col, row, colour);
		}
	}
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	08 95       	ret

00000544 <show_start_screen>:
// Stored as a 5 x 3 grid pattern going from Left-to-Right, Top-to-Bottom
// Padded with a leading zero so that it fits into a 16-bit value


void show_start_screen(void)
{
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	28 97       	sbiw	r28, 0x08	; 8
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     55a:	0e 94 cc 07 	call	0xf98	; 0xf98 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	31 c0       	rjmp	.+98     	; 0x5c4 <show_start_screen+0x80>
	{
		col_data = pong_display[col];
     562:	e1 2f       	mov	r30, r17
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	ee 5d       	subi	r30, 0xDE	; 222
     568:	fe 4f       	sbci	r31, 0xFE	; 254
     56a:	90 81       	ld	r25, Z
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	21 c0       	rjmp	.+66     	; 0x5b2 <show_start_screen+0x6e>
		{
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data>>row & 1)
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	49 2f       	mov	r20, r25
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	08 2e       	mov	r0, r24
     57a:	02 c0       	rjmp	.+4      	; 0x580 <show_start_screen+0x3c>
     57c:	55 95       	asr	r21
     57e:	47 95       	ror	r20
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <show_start_screen+0x38>
     584:	40 ff       	sbrs	r20, 0
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <show_start_screen+0x5e>
			{
				column_colour_data[row] = (row < 4 ? COLOUR_RED : COLOUR_GREEN);
     588:	84 30       	cpi	r24, 0x04	; 4
     58a:	10 f4       	brcc	.+4      	; 0x590 <show_start_screen+0x4c>
     58c:	4f e0       	ldi	r20, 0x0F	; 15
     58e:	01 c0       	rjmp	.+2      	; 0x592 <show_start_screen+0x4e>
     590:	40 ef       	ldi	r20, 0xF0	; 240
     592:	e1 e0       	ldi	r30, 0x01	; 1
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	ec 0f       	add	r30, r28
     598:	fd 1f       	adc	r31, r29
     59a:	e2 0f       	add	r30, r18
     59c:	f3 1f       	adc	r31, r19
     59e:	40 83       	st	Z, r20
     5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <show_start_screen+0x6c>
			}
			else
			{
				column_colour_data[row] = 0;
     5a2:	e1 e0       	ldi	r30, 0x01	; 1
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	ec 0f       	add	r30, r28
     5a8:	fd 1f       	adc	r31, r29
     5aa:	e2 0f       	add	r30, r18
     5ac:	f3 1f       	adc	r31, r19
     5ae:	10 82       	st	Z, r1
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
	{
		col_data = pong_display[col];
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	88 30       	cpi	r24, 0x08	; 8
     5b4:	e8 f2       	brcs	.-70     	; 0x570 <show_start_screen+0x2c>
			else
			{
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
     5b6:	be 01       	movw	r22, r28
     5b8:	6f 5f       	subi	r22, 0xFF	; 255
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	81 2f       	mov	r24, r17
     5be:	0e 94 af 07 	call	0xf5e	; 0xf5e <ledmatrix_update_column>
{
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     5c2:	1f 5f       	subi	r17, 0xFF	; 255
     5c4:	10 31       	cpi	r17, 0x10	; 16
     5c6:	68 f2       	brcs	.-102    	; 0x562 <show_start_screen+0x1e>
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
	}
	update_start_screen(0);
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
}
     5ce:	28 96       	adiw	r28, 0x08	; 8
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	08 95       	ret

000005e2 <default_grid>:
}

// Initialize the display for the board, this creates the display
// for an empty board.
void default_grid(void)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	28 97       	sbiw	r28, 0x08	; 8
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_clear();
     5f6:	0e 94 cc 07 	call	0xf98	; 0xf98 <ledmatrix_clear>
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <default_grid+0x2e>
	{
		colours[row] = COLOUR_YELLOW;
     5fe:	e1 e0       	ldi	r30, 0x01	; 1
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	e8 0f       	add	r30, r24
     608:	f1 1d       	adc	r31, r1
     60a:	9f ef       	ldi	r25, 0xFF	; 255
     60c:	90 83       	st	Z, r25
void default_grid(void)
{
	ledmatrix_clear();
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     60e:	8f 5f       	subi	r24, 0xFF	; 255
     610:	88 30       	cpi	r24, 0x08	; 8
     612:	a8 f3       	brcs	.-22     	; 0x5fe <default_grid+0x1c>
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
     614:	be 01       	movw	r22, r28
     616:	6f 5f       	subi	r22, 0xFF	; 255
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	8d e0       	ldi	r24, 0x0D	; 13
     61c:	0e 94 af 07 	call	0xf5e	; 0xf5e <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	09 c0       	rjmp	.+18     	; 0x636 <default_grid+0x54>
	{
		colours[row] = COLOUR_HALF_YELLOW;
     624:	e1 e0       	ldi	r30, 0x01	; 1
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ec 0f       	add	r30, r28
     62a:	fd 1f       	adc	r31, r29
     62c:	e8 0f       	add	r30, r24
     62e:	f1 1d       	adc	r31, r1
     630:	95 e5       	ldi	r25, 0x55	; 85
     632:	90 83       	st	Z, r25
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	88 30       	cpi	r24, 0x08	; 8
     638:	a8 f3       	brcs	.-22     	; 0x624 <default_grid+0x42>
	{
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
     63a:	be 01       	movw	r22, r28
     63c:	6f 5f       	subi	r22, 0xFF	; 255
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	8c e0       	ldi	r24, 0x0C	; 12
     642:	0e 94 af 07 	call	0xf5e	; 0xf5e <ledmatrix_update_column>
	ledmatrix_update_column(14, colours);
     646:	be 01       	movw	r22, r28
     648:	6f 5f       	subi	r22, 0xFF	; 255
     64a:	7f 4f       	sbci	r23, 0xFF	; 255
     64c:	8e e0       	ldi	r24, 0x0E	; 14
     64e:	0e 94 af 07 	call	0xf5e	; 0xf5e <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	09 c0       	rjmp	.+18     	; 0x668 <default_grid+0x86>
	{
		colours[row] = COLOUR_QUART_YELLOW;
     656:	e1 e0       	ldi	r30, 0x01	; 1
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	e8 0f       	add	r30, r24
     660:	f1 1d       	adc	r31, r1
     662:	91 e1       	ldi	r25, 0x11	; 17
     664:	90 83       	st	Z, r25
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
	ledmatrix_update_column(14, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	88 30       	cpi	r24, 0x08	; 8
     66a:	a8 f3       	brcs	.-22     	; 0x656 <default_grid+0x74>
	{
		colours[row] = COLOUR_QUART_YELLOW;
	}
	ledmatrix_update_column(11, colours);
     66c:	be 01       	movw	r22, r28
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	8b e0       	ldi	r24, 0x0B	; 11
     674:	0e 94 af 07 	call	0xf5e	; 0xf5e <ledmatrix_update_column>
	ledmatrix_update_column(15, colours);
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	8f e0       	ldi	r24, 0x0F	; 15
     680:	0e 94 af 07 	call	0xf5e	; 0xf5e <ledmatrix_update_column>
}
     684:	28 96       	adiw	r28, 0x08	; 8
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <update_points>:


//updates the points in the terminal
void update_points() {
	//clear terminal line and reprint the game score with the points
	move_terminal_cursor(10, 13);
     696:	6d e0       	ldi	r22, 0x0D	; 13
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	8a e0       	ldi	r24, 0x0A	; 10
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	clear_to_end_of_line();
     6a2:	0e 94 4f 11 	call	0x229e	; 0x229e <clear_to_end_of_line>

	// if x >= 10 and [-9, 0)
	if ((points >= 10) || (points < 0 && points >= -9)) {
     6a6:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <points>
     6aa:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <points+0x1>
     6ae:	8a 30       	cpi	r24, 0x0A	; 10
     6b0:	91 05       	cpc	r25, r1
     6b2:	34 f4       	brge	.+12     	; 0x6c0 <update_points+0x2a>
     6b4:	9c 01       	movw	r18, r24
     6b6:	27 5f       	subi	r18, 0xF7	; 247
     6b8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ba:	29 30       	cpi	r18, 0x09	; 9
     6bc:	31 05       	cpc	r19, r1
     6be:	68 f4       	brcc	.+26     	; 0x6da <update_points+0x44>
		printf("Game Score:   %d", points);
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	82 e3       	ldi	r24, 0x32	; 50
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	08 95       	ret
		
		//if x >= 100 and (-9, -99)
	} else if ((points >= 100) || (points < -9 && points > -99)) {
     6da:	84 36       	cpi	r24, 0x64	; 100
     6dc:	91 05       	cpc	r25, r1
     6de:	34 f4       	brge	.+12     	; 0x6ec <update_points+0x56>
     6e0:	9c 01       	movw	r18, r24
     6e2:	2e 59       	subi	r18, 0x9E	; 158
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255
     6e6:	29 35       	cpi	r18, 0x59	; 89
     6e8:	31 05       	cpc	r19, r1
     6ea:	68 f4       	brcc	.+26     	; 0x706 <update_points+0x70>
		printf("Game Score:  %d", points);
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	83 e4       	ldi	r24, 0x43	; 67
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	08 95       	ret
		
		//if x < -99
	} else if (points < -99) {
     706:	8d 39       	cpi	r24, 0x9D	; 157
     708:	2f ef       	ldi	r18, 0xFF	; 255
     70a:	92 07       	cpc	r25, r18
     70c:	6c f4       	brge	.+26     	; 0x728 <update_points+0x92>
		printf("Game Score: %d", points);
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	83 e5       	ldi	r24, 0x53	; 83
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	08 95       	ret
		
	} else {
		printf("Game Score:    %d", points);
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	82 e6       	ldi	r24, 0x62	; 98
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	9f 93       	push	r25
     732:	8f 93       	push	r24
     734:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	08 95       	ret

00000742 <update_combo>:
}

//updates the combo points in the terminal
void update_combo() {
	//Clear terminal line and reprint the combo count
	move_terminal_cursor(10, 14);
     742:	6e e0       	ldi	r22, 0x0E	; 14
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	8a e0       	ldi	r24, 0x0A	; 10
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	clear_to_end_of_line();
     74e:	0e 94 4f 11 	call	0x229e	; 0x229e <clear_to_end_of_line>
	
	//adjusts the combo count padding so it matches points
	if (combo_count >= 10) {
     752:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <combo_count>
     756:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <combo_count+0x1>
     75a:	8a 30       	cpi	r24, 0x0A	; 10
     75c:	91 05       	cpc	r25, r1
     75e:	6c f0       	brlt	.+26     	; 0x77a <update_combo+0x38>
		printf("Combo Count:  %d", combo_count);
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	84 e7       	ldi	r24, 0x74	; 116
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	9f 93       	push	r25
     76a:	8f 93       	push	r24
     76c:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0c c0       	rjmp	.+24     	; 0x792 <update_combo+0x50>
		
	} else {
		printf("Combo Count:   %d", combo_count);
     77a:	9f 93       	push	r25
     77c:	8f 93       	push	r24
     77e:	85 e8       	ldi	r24, 0x85	; 133
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	9f 93       	push	r25
     784:	8f 93       	push	r24
     786:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
	}
	
	//update combo check accordingly
	if (combo_count >= 3) {
     792:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <combo_count>
     796:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <combo_count+0x1>
     79a:	03 97       	sbiw	r24, 0x03	; 3
     79c:	3c f0       	brlt	.+14     	; 0x7ac <update_combo+0x6a>
		combo_check = 1;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <combo_check+0x1>
     7a6:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <combo_check>
     7aa:	08 95       	ret
	} else {
		combo_check = 0;
     7ac:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <combo_check+0x1>
     7b0:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <combo_check>
     7b4:	08 95       	ret

000007b6 <sound_note>:
	}
}

//play the note sound
void sound_note(int lane, int col) {
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	28 97       	sbiw	r28, 0x08	; 8
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
	advance_count = 0;
     7ca:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <advance_count+0x1>
     7ce:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <advance_count>
	
	if (lane == -1 && col == -1) {
     7d2:	8f 3f       	cpi	r24, 0xFF	; 255
     7d4:	2f ef       	ldi	r18, 0xFF	; 255
     7d6:	92 07       	cpc	r25, r18
     7d8:	59 f4       	brne	.+22     	; 0x7f0 <sound_note+0x3a>
     7da:	6f 3f       	cpi	r22, 0xFF	; 255
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	72 07       	cpc	r23, r18
     7e0:	39 f4       	brne	.+14     	; 0x7f0 <sound_note+0x3a>
		//turn off buzzer
		disable_piezzo = 1;
     7e2:	21 e0       	ldi	r18, 0x01	; 1
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	30 93 2d 05 	sts	0x052D, r19	; 0x80052d <disable_piezzo+0x1>
     7ea:	20 93 2c 05 	sts	0x052C, r18	; 0x80052c <disable_piezzo>
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <sound_note+0x42>
	} else {
		disable_piezzo = 0;
     7f0:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <disable_piezzo+0x1>
     7f4:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <disable_piezzo>
	}
	
	//set frequency appropriately
	int track_frequencies[4] = {523, 622, 698, 784};			//make into a multidimensional array
     7f8:	28 e0       	ldi	r18, 0x08	; 8
     7fa:	ea e1       	ldi	r30, 0x1A	; 26
     7fc:	f1 e0       	ldi	r31, 0x01	; 1
     7fe:	de 01       	movw	r26, r28
     800:	11 96       	adiw	r26, 0x01	; 1
     802:	01 90       	ld	r0, Z+
     804:	0d 92       	st	X+, r0
     806:	2a 95       	dec	r18
     808:	e1 f7       	brne	.-8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	
	freq = track_frequencies[lane];
     80a:	88 0f       	add	r24, r24
     80c:	99 1f       	adc	r25, r25
     80e:	e1 e0       	ldi	r30, 0x01	; 1
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	ec 0f       	add	r30, r28
     814:	fd 1f       	adc	r31, r29
     816:	e8 0f       	add	r30, r24
     818:	f9 1f       	adc	r31, r25
     81a:	80 81       	ld	r24, Z
     81c:	91 81       	ldd	r25, Z+1	; 0x01
     81e:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <freq+0x1>
     822:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <freq>
	
	//set duty cycle appropriately
	if (col == 11) {
     826:	6b 30       	cpi	r22, 0x0B	; 11
     828:	71 05       	cpc	r23, r1
     82a:	69 f4       	brne	.+26     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
		duty_cycle = 2;
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	a0 e0       	ldi	r26, 0x00	; 0
     832:	b0 e4       	ldi	r27, 0x40	; 64
     834:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <duty_cycle>
     838:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <duty_cycle+0x1>
     83c:	a0 93 53 05 	sts	0x0553, r26	; 0x800553 <duty_cycle+0x2>
     840:	b0 93 54 05 	sts	0x0554, r27	; 0x800554 <duty_cycle+0x3>
     844:	3f c0       	rjmp	.+126    	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
		
	} else if (col == 12) {
     846:	6c 30       	cpi	r22, 0x0C	; 12
     848:	71 05       	cpc	r23, r1
     84a:	69 f4       	brne	.+26     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
		duty_cycle = 10;
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	a0 e2       	ldi	r26, 0x20	; 32
     852:	b1 e4       	ldi	r27, 0x41	; 65
     854:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <duty_cycle>
     858:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <duty_cycle+0x1>
     85c:	a0 93 53 05 	sts	0x0553, r26	; 0x800553 <duty_cycle+0x2>
     860:	b0 93 54 05 	sts	0x0554, r27	; 0x800554 <duty_cycle+0x3>
     864:	2f c0       	rjmp	.+94     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
		
	} else if (col == 13) {
     866:	6d 30       	cpi	r22, 0x0D	; 13
     868:	71 05       	cpc	r23, r1
     86a:	69 f4       	brne	.+26     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
		duty_cycle = 50;
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	a8 e4       	ldi	r26, 0x48	; 72
     872:	b2 e4       	ldi	r27, 0x42	; 66
     874:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <duty_cycle>
     878:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <duty_cycle+0x1>
     87c:	a0 93 53 05 	sts	0x0553, r26	; 0x800553 <duty_cycle+0x2>
     880:	b0 93 54 05 	sts	0x0554, r27	; 0x800554 <duty_cycle+0x3>
     884:	1f c0       	rjmp	.+62     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
		
	} else if (col == 14) {
     886:	6e 30       	cpi	r22, 0x0E	; 14
     888:	71 05       	cpc	r23, r1
     88a:	69 f4       	brne	.+26     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
		duty_cycle = 90;
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	a4 eb       	ldi	r26, 0xB4	; 180
     892:	b2 e4       	ldi	r27, 0x42	; 66
     894:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <duty_cycle>
     898:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <duty_cycle+0x1>
     89c:	a0 93 53 05 	sts	0x0553, r26	; 0x800553 <duty_cycle+0x2>
     8a0:	b0 93 54 05 	sts	0x0554, r27	; 0x800554 <duty_cycle+0x3>
     8a4:	0f c0       	rjmp	.+30     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
		
	} else if (col == 15) {
     8a6:	6f 30       	cpi	r22, 0x0F	; 15
     8a8:	71 05       	cpc	r23, r1
     8aa:	61 f4       	brne	.+24     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
		duty_cycle = 98;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	a4 ec       	ldi	r26, 0xC4	; 196
     8b2:	b2 e4       	ldi	r27, 0x42	; 66
     8b4:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <duty_cycle>
     8b8:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <duty_cycle+0x1>
     8bc:	a0 93 53 05 	sts	0x0553, r26	; 0x800553 <duty_cycle+0x2>
     8c0:	b0 93 54 05 	sts	0x0554, r27	; 0x800554 <duty_cycle+0x3>
		
	}
	
	note_sound();
     8c4:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <note_sound>
}
     8c8:	28 96       	adiw	r28, 0x08	; 8
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <draw_notes>:

void draw_notes() {
     8da:	08 95       	ret

000008dc <set_track>:
}

//sets the track
void set_track(int track_number) {
	//to set the track do a matrix of tracks, where each matrix is of size TRACK_LENGTH and the individual elements are the tracks.
	if (track_number == 0) {
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	51 f4       	brne	.+20     	; 0x8f4 <set_track+0x18>
		//track_name = "Through fire and flames";
		strcpy(track_name, "Through fire and flames");
     8e0:	88 e1       	ldi	r24, 0x18	; 24
     8e2:	e7 e9       	ldi	r30, 0x97	; 151
     8e4:	f1 e0       	ldi	r31, 0x01	; 1
     8e6:	a0 e3       	ldi	r26, 0x30	; 48
     8e8:	b5 e0       	ldi	r27, 0x05	; 5
     8ea:	01 90       	ld	r0, Z+
     8ec:	0d 92       	st	X+, r0
     8ee:	8a 95       	dec	r24
     8f0:	e1 f7       	brne	.-8      	; 0x8ea <set_track+0xe>
     8f2:	08 95       	ret
		; // set the track to be Through fire and flames
	
	} else if (track_number == 1) {
     8f4:	81 30       	cpi	r24, 0x01	; 1
     8f6:	91 05       	cpc	r25, r1
     8f8:	51 f4       	brne	.+20     	; 0x90e <__stack+0xf>
		//track_name = "Someone Like You by Adele"
		strcpy(track_name, "Someone like you by Adele");
     8fa:	8a e1       	ldi	r24, 0x1A	; 26
     8fc:	ef ea       	ldi	r30, 0xAF	; 175
     8fe:	f1 e0       	ldi	r31, 0x01	; 1
     900:	a0 e3       	ldi	r26, 0x30	; 48
     902:	b5 e0       	ldi	r27, 0x05	; 5
     904:	01 90       	ld	r0, Z+
     906:	0d 92       	st	X+, r0
     908:	8a 95       	dec	r24
     90a:	e1 f7       	brne	.-8      	; 0x904 <__stack+0x5>
     90c:	08 95       	ret
		; // set the track to be Someone Like You by Adele
		
	} else if (track_number == 2) {
     90e:	02 97       	sbiw	r24, 0x02	; 2
     910:	49 f4       	brne	.+18     	; 0x924 <__stack+0x25>
		//track_name = "Pompeii by Bastille"
		strcpy(track_name, "Pompeii by Bastille");
     912:	84 e1       	ldi	r24, 0x14	; 20
     914:	e9 ec       	ldi	r30, 0xC9	; 201
     916:	f1 e0       	ldi	r31, 0x01	; 1
     918:	a0 e3       	ldi	r26, 0x30	; 48
     91a:	b5 e0       	ldi	r27, 0x05	; 5
     91c:	01 90       	ld	r0, Z+
     91e:	0d 92       	st	X+, r0
     920:	8a 95       	dec	r24
     922:	e1 f7       	brne	.-8      	; 0x91c <__stack+0x1d>
     924:	08 95       	ret

00000926 <initialise_game>:

// Initialize the game by resetting the grid and beat
void initialise_game(void)
{
	// initialize the display we are using.
	default_grid();
     926:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <default_grid>
	
	beat = 0;
     92a:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <beat+0x1>
     92e:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <beat>
	game_over = 0;
     932:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <game_over>
	advance_count = 0;
     936:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <advance_count+0x1>
     93a:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <advance_count>
	
	update_points();
     93e:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
	update_combo();
     942:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
     946:	08 95       	ret

00000948 <play_note>:
}

// Play a note in the given lane
void play_note(uint8_t lane)											//the colors need to be changed in this function.
{	
     948:	ef 92       	push	r14
     94a:	ff 92       	push	r15
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	d8 2f       	mov	r29, r24

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     954:	cb e0       	ldi	r28, 0x0B	; 11
     956:	c5 c0       	rjmp	.+394    	; 0xae2 <play_note+0x19a>
	
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col; //this is the next position that the note will be in
     958:	8f e0       	ldi	r24, 0x0F	; 15
     95a:	8c 1b       	sub	r24, r28
		uint8_t index = (future + beat) / 5; 
     95c:	40 91 55 05 	lds	r20, 0x0555	; 0x800555 <beat>
     960:	50 91 56 05 	lds	r21, 0x0556	; 0x800556 <beat+0x1>
     964:	48 0f       	add	r20, r24
     966:	51 1d       	adc	r21, r1
     968:	9a 01       	movw	r18, r20
     96a:	ad ec       	ldi	r26, 0xCD	; 205
     96c:	bc ec       	ldi	r27, 0xCC	; 204
     96e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__umulhisi3>
     972:	fc 01       	movw	r30, r24
     974:	f6 95       	lsr	r31
     976:	e7 95       	ror	r30
     978:	f6 95       	lsr	r31
     97a:	e7 95       	ror	r30
		
		if ((future + beat) % 5) {
     97c:	cf 01       	movw	r24, r30
     97e:	88 0f       	add	r24, r24
     980:	99 1f       	adc	r25, r25
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	8e 0f       	add	r24, r30
     988:	9f 1f       	adc	r25, r31
     98a:	48 17       	cp	r20, r24
     98c:	59 07       	cpc	r21, r25
     98e:	09 f0       	breq	.+2      	; 0x992 <play_note+0x4a>
     990:	a7 c0       	rjmp	.+334    	; 0xae0 <play_note+0x198>
			continue;
		}
		if (track[index] & (1<<lane))
     992:	ff 27       	eor	r31, r31
     994:	e3 52       	subi	r30, 0x23	; 35
     996:	fe 4f       	sbci	r31, 0xFE	; 254
     998:	80 81       	ld	r24, Z
     99a:	ed 2e       	mov	r14, r29
     99c:	f1 2c       	mov	r15, r1
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0d 2e       	mov	r0, r29
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <play_note+0x60>
     9a4:	95 95       	asr	r25
     9a6:	87 95       	ror	r24
     9a8:	0a 94       	dec	r0
     9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <play_note+0x5c>
     9ac:	80 ff       	sbrs	r24, 0
     9ae:	87 c0       	rjmp	.+270    	; 0xabe <play_note+0x176>
		{	
			if (green_check == lane) {
     9b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     9b4:	08 2e       	mov	r0, r24
     9b6:	00 0c       	add	r0, r0
     9b8:	99 0b       	sbc	r25, r25
     9ba:	e8 16       	cp	r14, r24
     9bc:	f9 06       	cpc	r15, r25
     9be:	c1 f4       	brne	.+48     	; 0x9f0 <play_note+0xa8>
				points--;
     9c0:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <points>
     9c4:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <points+0x1>
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <points+0x1>
     9ce:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <points>
				update_points();
     9d2:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
				
				combo_count = 0;
     9d6:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <combo_count+0x1>
     9da:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <combo_count>
				update_combo();
     9de:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
				
				sound_note(-1,-1);
     9e2:	6f ef       	ldi	r22, 0xFF	; 255
     9e4:	7f ef       	ldi	r23, 0xFF	; 255
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
				
				break;
     9ee:	7c c0       	rjmp	.+248    	; 0xae8 <play_note+0x1a0>
			}
			
			green_check = lane;
     9f0:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			// if so, colour the two pixels green
			ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     9f4:	40 ef       	ldi	r20, 0xF0	; 240
     9f6:	1d 2f       	mov	r17, r29
     9f8:	11 0f       	add	r17, r17
     9fa:	61 2f       	mov	r22, r17
     9fc:	8c 2f       	mov	r24, r28
     9fe:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	61 0f       	add	r22, r17
     a06:	40 ef       	ldi	r20, 0xF0	; 240
     a08:	8c 2f       	mov	r24, r28
     a0a:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			
			//if the note is in the two specified lanes then award the appropriate amount of points
			if (col == 11 || col == 15) {
     a0e:	cb 30       	cpi	r28, 0x0B	; 11
     a10:	11 f0       	breq	.+4      	; 0xa16 <play_note+0xce>
     a12:	cf 30       	cpi	r28, 0x0F	; 15
     a14:	99 f4       	brne	.+38     	; 0xa3c <play_note+0xf4>
				points++;
     a16:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <points>
     a1a:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <points+0x1>
     a1e:	01 96       	adiw	r24, 0x01	; 1
     a20:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <points+0x1>
     a24:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <points>
				combo_count = 0;
     a28:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <combo_count+0x1>
     a2c:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <combo_count>
				sound_note(lane, col);
     a30:	6c 2f       	mov	r22, r28
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	c7 01       	movw	r24, r14
     a36:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
     a3a:	4e c0       	rjmp	.+156    	; 0xad8 <play_note+0x190>
				
			} else if (col == 12 || col == 14) {
     a3c:	cc 30       	cpi	r28, 0x0C	; 12
     a3e:	11 f0       	breq	.+4      	; 0xa44 <play_note+0xfc>
     a40:	ce 30       	cpi	r28, 0x0E	; 14
     a42:	99 f4       	brne	.+38     	; 0xa6a <play_note+0x122>
				points += 2;
     a44:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <points>
     a48:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <points+0x1>
     a4c:	02 96       	adiw	r24, 0x02	; 2
     a4e:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <points+0x1>
     a52:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <points>
				combo_count = 0;
     a56:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <combo_count+0x1>
     a5a:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <combo_count>
				sound_note(lane, col);
     a5e:	6c 2f       	mov	r22, r28
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	c7 01       	movw	r24, r14
     a64:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
     a68:	37 c0       	rjmp	.+110    	; 0xad8 <play_note+0x190>
				
			} else if (col == 13) {
     a6a:	cd 30       	cpi	r28, 0x0D	; 13
     a6c:	a9 f5       	brne	.+106    	; 0xad8 <play_note+0x190>
				combo_count++;
     a6e:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <combo_count>
     a72:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <combo_count+0x1>
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <combo_count+0x1>
     a7c:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <combo_count>
				sound_note(lane, col);
     a80:	6c 2f       	mov	r22, r28
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	c7 01       	movw	r24, r14
     a86:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
				
				if (combo_count > 3) {
     a8a:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <combo_count>
     a8e:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <combo_count+0x1>
     a92:	04 97       	sbiw	r24, 0x04	; 4
     a94:	54 f0       	brlt	.+20     	; 0xaaa <play_note+0x162>
					points += 4;
     a96:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <points>
     a9a:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <points+0x1>
     a9e:	04 96       	adiw	r24, 0x04	; 4
     aa0:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <points+0x1>
     aa4:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <points>
     aa8:	17 c0       	rjmp	.+46     	; 0xad8 <play_note+0x190>
				} else {
					points += 3;
     aaa:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <points>
     aae:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <points+0x1>
     ab2:	03 96       	adiw	r24, 0x03	; 3
     ab4:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <points+0x1>
     ab8:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <points>
     abc:	0d c0       	rjmp	.+26     	; 0xad8 <play_note+0x190>
					
				}
			}
			
		} else {
			points--;
     abe:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <points>
     ac2:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <points+0x1>
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <points+0x1>
     acc:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <points>
			combo_count = 0;
     ad0:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <combo_count+0x1>
     ad4:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <combo_count>
		
		}
			
		update_points();
     ad8:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
		update_combo();
     adc:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>

// Play a note in the given lane
void play_note(uint8_t lane)											//the colors need to be changed in this function.
{	

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     ae0:	cf 5f       	subi	r28, 0xFF	; 255
     ae2:	c0 31       	cpi	r28, 0x10	; 16
     ae4:	08 f4       	brcc	.+2      	; 0xae8 <play_note+0x1a0>
     ae6:	38 cf       	rjmp	.-400    	; 0x958 <play_note+0x10>
		}
			
		update_points();
		update_combo();
		}	
}
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	ff 90       	pop	r15
     af0:	ef 90       	pop	r14
     af2:	08 95       	ret

00000af4 <advance_note>:
	
// Advance the notes one row down the display
void advance_note(void)
{
     af4:	9f 92       	push	r9
     af6:	af 92       	push	r10
     af8:	bf 92       	push	r11
     afa:	cf 92       	push	r12
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	PixelColour color = COLOUR_RED;
	
	if (combo_check) {
     b0a:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <combo_check>
     b0e:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <combo_check+0x1>
     b12:	89 2b       	or	r24, r25
     b14:	39 f4       	brne	.+14     	; 0xb24 <advance_note+0x30>
// Advance the notes one row down the display
void advance_note(void)
{
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	PixelColour color = COLOUR_RED;
     b16:	0f 2e       	mov	r0, r31
     b18:	ff e0       	ldi	r31, 0x0F	; 15
     b1a:	ff 2e       	mov	r15, r31
     b1c:	f0 2d       	mov	r31, r0
	
// Advance the notes one row down the display
void advance_note(void)
{
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
     b1e:	ee 24       	eor	r14, r14
     b20:	e3 94       	inc	r14
     b22:	08 c0       	rjmp	.+16     	; 0xb34 <advance_note+0x40>
	PixelColour color = COLOUR_RED;
	
	if (combo_check) {
		dark_colour = COLOUR_DARK_ORANGE;
		color = COLOUR_ORANGE;
     b24:	0f 2e       	mov	r0, r31
     b26:	fc e3       	ldi	r31, 0x3C	; 60
     b28:	ff 2e       	mov	r15, r31
     b2a:	f0 2d       	mov	r31, r0
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	PixelColour color = COLOUR_RED;
	
	if (combo_check) {
		dark_colour = COLOUR_DARK_ORANGE;
     b2c:	0f 2e       	mov	r0, r31
     b2e:	fc e1       	ldi	r31, 0x1C	; 28
     b30:	ef 2e       	mov	r14, r31
     b32:	f0 2d       	mov	r31, r0
		color = COLOUR_ORANGE;
	}
	
	advance_count++;
     b34:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <advance_count>
     b38:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <advance_count+0x1>
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <advance_count+0x1>
     b42:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <advance_count>
	
	if (advance_count >= 5) {
     b46:	05 97       	sbiw	r24, 0x05	; 5
     b48:	34 f0       	brlt	.+12     	; 0xb56 <advance_note+0x62>
		sound_note(-1, -1);
     b4a:	6f ef       	ldi	r22, 0xFF	; 255
     b4c:	7f ef       	ldi	r23, 0xFF	; 255
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	9f ef       	ldi	r25, 0xFF	; 255
     b52:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
     b56:	10 e0       	ldi	r17, 0x00	; 0
     b58:	0b c1       	rjmp	.+534    	; 0xd70 <advance_note+0x27c>
	
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
	{
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col;
     b5a:	8f e0       	ldi	r24, 0x0F	; 15
     b5c:	81 1b       	sub	r24, r17
		uint8_t index = (future + beat) / 5;
     b5e:	e0 91 55 05 	lds	r30, 0x0555	; 0x800555 <beat>
     b62:	f0 91 56 05 	lds	r31, 0x0556	; 0x800556 <beat+0x1>
     b66:	af 01       	movw	r20, r30
     b68:	48 0f       	add	r20, r24
     b6a:	51 1d       	adc	r21, r1
     b6c:	9a 01       	movw	r18, r20
     b6e:	ad ec       	ldi	r26, 0xCD	; 205
     b70:	bc ec       	ldi	r27, 0xCC	; 204
     b72:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__umulhisi3>
     b76:	ec 01       	movw	r28, r24
     b78:	d6 95       	lsr	r29
     b7a:	c7 95       	ror	r28
     b7c:	d6 95       	lsr	r29
     b7e:	c7 95       	ror	r28
     b80:	0c 2f       	mov	r16, r28
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     b82:	9f 01       	movw	r18, r30
     b84:	21 5f       	subi	r18, 0xF1	; 241
     b86:	3f 4f       	sbci	r19, 0xFF	; 255
     b88:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__umulhisi3>
     b8c:	96 95       	lsr	r25
     b8e:	87 95       	ror	r24
     b90:	96 95       	lsr	r25
     b92:	87 95       	ror	r24
		uint8_t ghost_index = ghost_start_index +1;
     b94:	8f 5f       	subi	r24, 0xFF	; 255
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     b96:	08 c0       	rjmp	.+16     	; 0xba8 <advance_note+0xb4>
			if (track[ghost_index] & 0x0F) {
     b98:	e8 2f       	mov	r30, r24
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	e3 52       	subi	r30, 0x23	; 35
     b9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ba0:	90 81       	ld	r25, Z
     ba2:	9f 70       	andi	r25, 0x0F	; 15
     ba4:	19 f4       	brne	.+6      	; 0xbac <advance_note+0xb8>
		uint8_t index = (future + beat) / 5;
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
		uint8_t ghost_index = ghost_start_index +1;
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     ba6:	8f 5f       	subi	r24, 0xFF	; 255
     ba8:	81 38       	cpi	r24, 0x81	; 129
     baa:	b0 f3       	brcs	.-20     	; 0xb98 <advance_note+0xa4>
			if (track[ghost_index] & 0x0F) {
				break;
			}
		}
		uint8_t ghost_note = track[ghost_index];
     bac:	e8 2f       	mov	r30, r24
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	e3 52       	subi	r30, 0x23	; 35
     bb2:	fe 4f       	sbci	r31, 0xFE	; 254
     bb4:	d0 80       	ld	r13, Z
		
		if (index >= TRACK_LENGTH)
     bb6:	01 38       	cpi	r16, 0x81	; 129
     bb8:	20 f0       	brcs	.+8      	; 0xbc2 <advance_note+0xce>
		{
			//Game Over
			game_over = 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <game_over>
			break;
     bc0:	da c0       	rjmp	.+436    	; 0xd76 <advance_note+0x282>
		}
		if ((future+beat) % 5)
     bc2:	9a 01       	movw	r18, r20
     bc4:	ad ec       	ldi	r26, 0xCD	; 205
     bc6:	bc ec       	ldi	r27, 0xCC	; 204
     bc8:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__umulhisi3>
     bcc:	96 95       	lsr	r25
     bce:	87 95       	ror	r24
     bd0:	96 95       	lsr	r25
     bd2:	87 95       	ror	r24
     bd4:	9c 01       	movw	r18, r24
     bd6:	22 0f       	add	r18, r18
     bd8:	33 1f       	adc	r19, r19
     bda:	22 0f       	add	r18, r18
     bdc:	33 1f       	adc	r19, r19
     bde:	82 0f       	add	r24, r18
     be0:	93 1f       	adc	r25, r19
     be2:	48 17       	cp	r20, r24
     be4:	59 07       	cpc	r21, r25
     be6:	09 f0       	breq	.+2      	; 0xbea <advance_note+0xf6>
     be8:	c2 c0       	rjmp	.+388    	; 0xd6e <advance_note+0x27a>
     bea:	00 e0       	ldi	r16, 0x00	; 0
     bec:	b8 c0       	rjmp	.+368    	; 0xd5e <advance_note+0x26a>
		} 
		
		for (uint8_t lane = 0; lane < 4; lane++)
		{
			//check if the next note is in the appropriate lane
			if ((ghost_note == 0x01) & (lane == 0)) {
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	d9 12       	cpse	r13, r25
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	01 11       	cpse	r16, r1
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	89 23       	and	r24, r25
     bfc:	71 f0       	breq	.+28     	; 0xc1a <advance_note+0x126>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     bfe:	4e 2d       	mov	r20, r14
     c00:	c0 2e       	mov	r12, r16
     c02:	cc 0c       	add	r12, r12
     c04:	6c 2d       	mov	r22, r12
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	6c 0d       	add	r22, r12
     c10:	4e 2d       	mov	r20, r14
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
     c18:	47 c0       	rjmp	.+142    	; 0xca8 <advance_note+0x1b4>
				
			} else if ((ghost_note == 0x02) & (lane == 1)) {
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	d8 12       	cpse	r13, r24
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	01 30       	cpi	r16, 0x01	; 1
     c26:	09 f0       	breq	.+2      	; 0xc2a <advance_note+0x136>
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	89 23       	and	r24, r25
     c2c:	71 f0       	breq	.+28     	; 0xc4a <advance_note+0x156>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     c2e:	4e 2d       	mov	r20, r14
     c30:	c0 2e       	mov	r12, r16
     c32:	cc 0c       	add	r12, r12
     c34:	6c 2d       	mov	r22, r12
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	6c 0d       	add	r22, r12
     c40:	4e 2d       	mov	r20, r14
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
     c48:	2f c0       	rjmp	.+94     	; 0xca8 <advance_note+0x1b4>
			
			} else if ((ghost_note == 0x04) & (lane == 2)) {
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	84 e0       	ldi	r24, 0x04	; 4
     c4e:	d8 12       	cpse	r13, r24
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	02 30       	cpi	r16, 0x02	; 2
     c56:	09 f0       	breq	.+2      	; 0xc5a <advance_note+0x166>
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	89 23       	and	r24, r25
     c5c:	71 f0       	breq	.+28     	; 0xc7a <advance_note+0x186>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     c5e:	4e 2d       	mov	r20, r14
     c60:	c0 2e       	mov	r12, r16
     c62:	cc 0c       	add	r12, r12
     c64:	6c 2d       	mov	r22, r12
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     c6c:	61 e0       	ldi	r22, 0x01	; 1
     c6e:	6c 0d       	add	r22, r12
     c70:	4e 2d       	mov	r20, r14
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
     c78:	17 c0       	rjmp	.+46     	; 0xca8 <advance_note+0x1b4>
			
			} else if ((ghost_note == 0x08) & (lane == 3)) {
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	88 e0       	ldi	r24, 0x08	; 8
     c7e:	d8 12       	cpse	r13, r24
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	03 30       	cpi	r16, 0x03	; 3
     c86:	09 f0       	breq	.+2      	; 0xc8a <advance_note+0x196>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	89 23       	and	r24, r25
     c8c:	69 f0       	breq	.+26     	; 0xca8 <advance_note+0x1b4>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     c8e:	4e 2d       	mov	r20, r14
     c90:	c0 2e       	mov	r12, r16
     c92:	cc 0c       	add	r12, r12
     c94:	6c 2d       	mov	r22, r12
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     c9c:	61 e0       	ldi	r22, 0x01	; 1
     c9e:	6c 0d       	add	r22, r12
     ca0:	4e 2d       	mov	r20, r14
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			
			}
				
			if (track[index] & (1<<lane))
     ca8:	fe 01       	movw	r30, r28
     caa:	ff 27       	eor	r31, r31
     cac:	e3 52       	subi	r30, 0x23	; 35
     cae:	fe 4f       	sbci	r31, 0xFE	; 254
     cb0:	80 81       	ld	r24, Z
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	00 2e       	mov	r0, r16
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <advance_note+0x1c8>
     cb8:	95 95       	asr	r25
     cba:	87 95       	ror	r24
     cbc:	0a 94       	dec	r0
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <advance_note+0x1c4>
     cc0:	80 ff       	sbrs	r24, 0
     cc2:	4c c0       	rjmp	.+152    	; 0xd5c <advance_note+0x268>
			{
				//if note slides off screen and green_check isn't checked to a lane
				if (col == 15 && green_check == -1) {
     cc4:	1f 30       	cpi	r17, 0x0F	; 15
     cc6:	d9 f4       	brne	.+54     	; 0xcfe <advance_note+0x20a>
     cc8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ccc:	8f 3f       	cpi	r24, 0xFF	; 255
     cce:	b9 f4       	brne	.+46     	; 0xcfe <advance_note+0x20a>
					points--;
     cd0:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <points>
     cd4:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <points+0x1>
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <points+0x1>
     cde:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <points>
					update_points();
     ce2:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
					
					if (combo_count != 0) {
     ce6:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <combo_count>
     cea:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <combo_count+0x1>
     cee:	89 2b       	or	r24, r25
     cf0:	31 f0       	breq	.+12     	; 0xcfe <advance_note+0x20a>
						combo_count = 0;
     cf2:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <combo_count+0x1>
     cf6:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <combo_count>
						update_combo();
     cfa:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
					}
				}
				
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
     cfe:	1b 30       	cpi	r17, 0x0B	; 11
     d00:	59 f0       	breq	.+22     	; 0xd18 <advance_note+0x224>
     d02:	1f 30       	cpi	r17, 0x0F	; 15
     d04:	71 f0       	breq	.+28     	; 0xd22 <advance_note+0x22e>
				{
					colour = COLOUR_QUART_YELLOW;
				}
				else if (col==12 || col == 14)
     d06:	1c 30       	cpi	r17, 0x0C	; 12
     d08:	89 f0       	breq	.+34     	; 0xd2c <advance_note+0x238>
     d0a:	1e 30       	cpi	r17, 0x0E	; 14
     d0c:	a1 f0       	breq	.+40     	; 0xd36 <advance_note+0x242>
				{
					colour = COLOUR_HALF_YELLOW;
				}
				else if (col==13)
     d0e:	1d 30       	cpi	r17, 0x0D	; 13
     d10:	b9 f4       	brne	.+46     	; 0xd40 <advance_note+0x24c>
				{
					colour = COLOUR_YELLOW;
     d12:	bb 24       	eor	r11, r11
     d14:	ba 94       	dec	r11
     d16:	15 c0       	rjmp	.+42     	; 0xd42 <advance_note+0x24e>
				
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
				{
					colour = COLOUR_QUART_YELLOW;
     d18:	0f 2e       	mov	r0, r31
     d1a:	f1 e1       	ldi	r31, 0x11	; 17
     d1c:	bf 2e       	mov	r11, r31
     d1e:	f0 2d       	mov	r31, r0
     d20:	10 c0       	rjmp	.+32     	; 0xd42 <advance_note+0x24e>
     d22:	0f 2e       	mov	r0, r31
     d24:	f1 e1       	ldi	r31, 0x11	; 17
     d26:	bf 2e       	mov	r11, r31
     d28:	f0 2d       	mov	r31, r0
     d2a:	0b c0       	rjmp	.+22     	; 0xd42 <advance_note+0x24e>
				}
				else if (col==12 || col == 14)
				{
					colour = COLOUR_HALF_YELLOW;
     d2c:	0f 2e       	mov	r0, r31
     d2e:	f5 e5       	ldi	r31, 0x55	; 85
     d30:	bf 2e       	mov	r11, r31
     d32:	f0 2d       	mov	r31, r0
     d34:	06 c0       	rjmp	.+12     	; 0xd42 <advance_note+0x24e>
     d36:	0f 2e       	mov	r0, r31
     d38:	f5 e5       	ldi	r31, 0x55	; 85
     d3a:	bf 2e       	mov	r11, r31
     d3c:	f0 2d       	mov	r31, r0
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <advance_note+0x24e>
				{
					colour = COLOUR_YELLOW;
				}
				else
				{
					colour = COLOUR_BLACK;
     d40:	b1 2c       	mov	r11, r1
				}
				ledmatrix_update_pixel(col, 2*lane, colour);
     d42:	4b 2d       	mov	r20, r11
     d44:	c0 2e       	mov	r12, r16
     d46:	cc 0c       	add	r12, r12
     d48:	6c 2d       	mov	r22, r12
     d4a:	81 2f       	mov	r24, r17
     d4c:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 2*lane+1, colour);
     d50:	61 e0       	ldi	r22, 0x01	; 1
     d52:	6c 0d       	add	r22, r12
     d54:	4b 2d       	mov	r20, r11
     d56:	81 2f       	mov	r24, r17
     d58:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
		if ((future+beat) % 5)
		{
			continue;
		} 
		
		for (uint8_t lane = 0; lane < 4; lane++)
     d5c:	0f 5f       	subi	r16, 0xFF	; 255
     d5e:	04 30       	cpi	r16, 0x04	; 4
     d60:	08 f4       	brcc	.+2      	; 0xd64 <advance_note+0x270>
     d62:	45 cf       	rjmp	.-374    	; 0xbee <advance_note+0xfa>
			}
		}
		
		
		//check if the current note goes off the screen
		if (col >= 15) {
     d64:	1f 30       	cpi	r17, 0x0F	; 15
     d66:	18 f0       	brcs	.+6      	; 0xd6e <advance_note+0x27a>
			green_check = -1;
     d68:	8f ef       	ldi	r24, 0xFF	; 255
     d6a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		sound_note(-1, -1);
	}
	
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     d6e:	1f 5f       	subi	r17, 0xFF	; 255
     d70:	10 31       	cpi	r17, 0x10	; 16
     d72:	08 f4       	brcc	.+2      	; 0xd76 <advance_note+0x282>
     d74:	f2 ce       	rjmp	.-540    	; 0xb5a <advance_note+0x66>
			green_check = -1;
		}
	}
	
	// increment the beat
	beat++;
     d76:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <beat>
     d7a:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <beat+0x1>
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <beat+0x1>
     d84:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <beat>
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     d88:	c0 e0       	ldi	r28, 0x00	; 0
     d8a:	af c0       	rjmp	.+350    	; 0xeea <advance_note+0x3f6>
	{
		// col counts from one end, future from the other
		uint8_t future = MATRIX_NUM_COLUMNS-1-col;
     d8c:	8f e0       	ldi	r24, 0x0F	; 15
     d8e:	8c 1b       	sub	r24, r28
		
		//is 1 if there is a long note, else 0
		int long_check = 0;
		
		// index of which note in the track to play
		uint8_t index = (future+beat)/5;
     d90:	00 91 55 05 	lds	r16, 0x0555	; 0x800555 <beat>
     d94:	10 91 56 05 	lds	r17, 0x0556	; 0x800556 <beat+0x1>
     d98:	f8 01       	movw	r30, r16
     d9a:	e8 0f       	add	r30, r24
     d9c:	f1 1d       	adc	r31, r1
     d9e:	9f 01       	movw	r18, r30
     da0:	ad ec       	ldi	r26, 0xCD	; 205
     da2:	bc ec       	ldi	r27, 0xCC	; 204
     da4:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__umulhisi3>
     da8:	ac 01       	movw	r20, r24
     daa:	56 95       	lsr	r21
     dac:	47 95       	ror	r20
     dae:	56 95       	lsr	r21
     db0:	47 95       	ror	r20
		
		// notes are only drawn every five columns
		if ((future+beat)%5)
     db2:	ca 01       	movw	r24, r20
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	84 0f       	add	r24, r20
     dbe:	95 1f       	adc	r25, r21
     dc0:	e8 17       	cp	r30, r24
     dc2:	f9 07       	cpc	r31, r25
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <advance_note+0x2d4>
     dc6:	90 c0       	rjmp	.+288    	; 0xee8 <advance_note+0x3f4>
		{
			continue;
		} 
		
		uint8_t ghost_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     dc8:	98 01       	movw	r18, r16
     dca:	21 5f       	subi	r18, 0xF1	; 241
     dcc:	3f 4f       	sbci	r19, 0xFF	; 255
     dce:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__umulhisi3>
     dd2:	96 95       	lsr	r25
     dd4:	87 95       	ror	r24
     dd6:	96 95       	lsr	r25
     dd8:	87 95       	ror	r24
		//next note in track that is coming
		uint8_t ghost_note = track[ghost_index];
     dda:	fc 01       	movw	r30, r24
     ddc:	ff 27       	eor	r31, r31
     dde:	e3 52       	subi	r30, 0x23	; 35
     de0:	fe 4f       	sbci	r31, 0xFE	; 254
     de2:	e0 80       	ld	r14, Z
		
		// if the index is beyond the end of the track,
		// no note can be drawn
		if (index >= TRACK_LENGTH || (index + 1) >= TRACK_LENGTH)
     de4:	41 38       	cpi	r20, 0x81	; 129
     de6:	08 f0       	brcs	.+2      	; 0xdea <advance_note+0x2f6>
     de8:	7f c0       	rjmp	.+254    	; 0xee8 <advance_note+0x3f4>
     dea:	6a 01       	movw	r12, r20
     dec:	dd 24       	eor	r13, r13
     dee:	56 01       	movw	r10, r12
     df0:	8f ef       	ldi	r24, 0xFF	; 255
     df2:	a8 1a       	sub	r10, r24
     df4:	b8 0a       	sbc	r11, r24
     df6:	81 e8       	ldi	r24, 0x81	; 129
     df8:	a8 16       	cp	r10, r24
     dfa:	b1 04       	cpc	r11, r1
     dfc:	0c f0       	brlt	.+2      	; 0xe00 <advance_note+0x30c>
     dfe:	74 c0       	rjmp	.+232    	; 0xee8 <advance_note+0x3f4>
     e00:	d0 e0       	ldi	r29, 0x00	; 0
     e02:	00 e0       	ldi	r16, 0x00	; 0
     e04:	10 e0       	ldi	r17, 0x00	; 0
     e06:	6d c0       	rjmp	.+218    	; 0xee2 <advance_note+0x3ee>
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{									
			
			uint8_t current_note = track[index];
     e08:	f6 01       	movw	r30, r12
     e0a:	e3 52       	subi	r30, 0x23	; 35
     e0c:	fe 4f       	sbci	r31, 0xFE	; 254
     e0e:	80 81       	ld	r24, Z
			
			//check if at the start of a long note
			if (current_note == current_note>>4) {
     e10:	98 2f       	mov	r25, r24
     e12:	92 95       	swap	r25
     e14:	9f 70       	andi	r25, 0x0F	; 15
     e16:	89 17       	cp	r24, r25
     e18:	d1 f0       	breq	.+52     	; 0xe4e <advance_note+0x35a>
				long_check = 1;
			
			//check if in the middle of long note
			} else if ((long_check) && (track[index + 1] == current_note)) {
     e1a:	01 15       	cp	r16, r1
     e1c:	11 05       	cpc	r17, r1
     e1e:	39 f0       	breq	.+14     	; 0xe2e <advance_note+0x33a>
     e20:	f5 01       	movw	r30, r10
     e22:	e3 52       	subi	r30, 0x23	; 35
     e24:	fe 4f       	sbci	r31, 0xFE	; 254
     e26:	20 81       	ld	r18, Z
     e28:	82 17       	cp	r24, r18
     e2a:	09 f4       	brne	.+2      	; 0xe2e <advance_note+0x33a>
     e2c:	59 c0       	rjmp	.+178    	; 0xee0 <advance_note+0x3ec>
				continue; 
			
			//check if at the end of long note
			} else if ((long_check) && (track[index + 1] != track[index - 1])) {
     e2e:	01 15       	cp	r16, r1
     e30:	11 05       	cpc	r17, r1
     e32:	79 f0       	breq	.+30     	; 0xe52 <advance_note+0x35e>
     e34:	f5 01       	movw	r30, r10
     e36:	e3 52       	subi	r30, 0x23	; 35
     e38:	fe 4f       	sbci	r31, 0xFE	; 254
     e3a:	30 81       	ld	r19, Z
     e3c:	f6 01       	movw	r30, r12
     e3e:	e4 52       	subi	r30, 0x24	; 36
     e40:	fe 4f       	sbci	r31, 0xFE	; 254
     e42:	20 81       	ld	r18, Z
     e44:	32 13       	cpse	r19, r18
     e46:	4c c0       	rjmp	.+152    	; 0xee0 <advance_note+0x3ec>
				continue;
			
			//else outside long note.
			} else {
				long_check = 0;
     e48:	00 e0       	ldi	r16, 0x00	; 0
     e4a:	10 e0       	ldi	r17, 0x00	; 0
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <advance_note+0x35e>
			
			uint8_t current_note = track[index];
			
			//check if at the start of a long note
			if (current_note == current_note>>4) {
				long_check = 1;
     e4e:	01 e0       	ldi	r16, 0x01	; 1
     e50:	10 e0       	ldi	r17, 0x00	; 0
			//else outside long note.
			} else {
				long_check = 0;
			}
			
			if (long_check) {
     e52:	01 15       	cp	r16, r1
     e54:	11 05       	cpc	r17, r1
     e56:	09 f4       	brne	.+2      	; 0xe5a <advance_note+0x366>
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{									
			
			uint8_t current_note = track[index];
     e58:	98 2f       	mov	r25, r24
			if (long_check) {
				current_note = current_note>>4;
			}
			
			//check if there's a note in the specific path
			if (current_note & (1<<lane)) {
     e5a:	4d 2f       	mov	r20, r29
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	29 2f       	mov	r18, r25
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	0d 2e       	mov	r0, r29
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <advance_note+0x376>
     e66:	35 95       	asr	r19
     e68:	27 95       	ror	r18
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <advance_note+0x372>
     e6e:	20 ff       	sbrs	r18, 0
     e70:	37 c0       	rjmp	.+110    	; 0xee0 <advance_note+0x3ec>
				
				//check if theres a note in the led matrix section
				if ((green_check == lane) && ((col >= 11) && (col <= 15))) {
     e72:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e76:	02 2e       	mov	r0, r18
     e78:	00 0c       	add	r0, r0
     e7a:	33 0b       	sbc	r19, r19
     e7c:	42 17       	cp	r20, r18
     e7e:	53 07       	cpc	r21, r19
     e80:	91 f4       	brne	.+36     	; 0xea6 <advance_note+0x3b2>
     e82:	85 ef       	ldi	r24, 0xF5	; 245
     e84:	8c 0f       	add	r24, r28
     e86:	85 30       	cpi	r24, 0x05	; 5
     e88:	70 f4       	brcc	.+28     	; 0xea6 <advance_note+0x3b2>
					//if true set pixels to green
					ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     e8a:	40 ef       	ldi	r20, 0xF0	; 240
     e8c:	9d 2e       	mov	r9, r29
     e8e:	99 0c       	add	r9, r9
     e90:	69 2d       	mov	r22, r9
     e92:	8c 2f       	mov	r24, r28
     e94:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	69 0d       	add	r22, r9
     e9c:	40 ef       	ldi	r20, 0xF0	; 240
     e9e:	8c 2f       	mov	r24, r28
     ea0:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
     ea4:	1d c0       	rjmp	.+58     	; 0xee0 <advance_note+0x3ec>
				
				} else if (ghost_note != current_note) {					
     ea6:	9e 15       	cp	r25, r14
     ea8:	71 f0       	breq	.+28     	; 0xec6 <advance_note+0x3d2>
					ledmatrix_update_pixel(col, 2*lane, color);
     eaa:	4f 2d       	mov	r20, r15
     eac:	9d 2e       	mov	r9, r29
     eae:	99 0c       	add	r9, r9
     eb0:	69 2d       	mov	r22, r9
     eb2:	8c 2f       	mov	r24, r28
     eb4:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, color);
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	69 0d       	add	r22, r9
     ebc:	4f 2d       	mov	r20, r15
     ebe:	8c 2f       	mov	r24, r28
     ec0:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
     ec4:	0d c0       	rjmp	.+26     	; 0xee0 <advance_note+0x3ec>
										
				} else {
					ledmatrix_update_pixel(col, 2*lane, color);
     ec6:	4f 2d       	mov	r20, r15
     ec8:	9d 2e       	mov	r9, r29
     eca:	99 0c       	add	r9, r9
     ecc:	69 2d       	mov	r22, r9
     ece:	8c 2f       	mov	r24, r28
     ed0:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, color);	
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	69 0d       	add	r22, r9
     ed8:	4f 2d       	mov	r20, r15
     eda:	8c 2f       	mov	r24, r28
     edc:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
		{
			continue;
		}
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
     ee0:	df 5f       	subi	r29, 0xFF	; 255
     ee2:	d4 30       	cpi	r29, 0x04	; 4
     ee4:	08 f4       	brcc	.+2      	; 0xee8 <advance_note+0x3f4>
     ee6:	90 cf       	rjmp	.-224    	; 0xe08 <advance_note+0x314>
	
	// increment the beat
	beat++;
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     ee8:	cf 5f       	subi	r28, 0xFF	; 255
     eea:	c0 31       	cpi	r28, 0x10	; 16
     eec:	08 f4       	brcc	.+2      	; 0xef0 <advance_note+0x3fc>
     eee:	4e cf       	rjmp	.-356    	; 0xd8c <advance_note+0x298>
				
			}
		}
		
	}
}
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	df 90       	pop	r13
     efe:	cf 90       	pop	r12
     f00:	bf 90       	pop	r11
     f02:	af 90       	pop	r10
     f04:	9f 90       	pop	r9
     f06:	08 95       	ret

00000f08 <is_game_over>:

// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over(void)
{
	// Detect if the game is over i.e. if a player has won.
	if (game_over) {	
     f08:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <game_over>
     f0c:	88 23       	and	r24, r24
     f0e:	19 f0       	breq	.+6      	; 0xf16 <is_game_over+0xe>
		game_over = 0; //reset game over check
     f10:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <game_over>
		return 1;	
     f14:	81 e0       	ldi	r24, 0x01	; 1
	
	} else {
	return 0;
	
	}
     f16:	08 95       	ret

00000f18 <ledmatrix_setup>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     f18:	80 e8       	ldi	r24, 0x80	; 128
     f1a:	0e 94 03 11 	call	0x2206	; 0x2206 <spi_setup_master>
     f1e:	08 95       	ret

00000f20 <ledmatrix_update_pixel>:
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	80 31       	cpi	r24, 0x10	; 16
     f28:	b0 f4       	brcc	.+44     	; 0xf56 <ledmatrix_update_pixel+0x36>
     f2a:	68 30       	cpi	r22, 0x08	; 8
     f2c:	a0 f4       	brcc	.+40     	; 0xf56 <ledmatrix_update_pixel+0x36>
     f2e:	14 2f       	mov	r17, r20
     f30:	c6 2f       	mov	r28, r22
     f32:	d8 2f       	mov	r29, r24
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	0e 94 2f 11 	call	0x225e	; 0x225e <spi_send_byte>
     f3a:	6c 2f       	mov	r22, r28
     f3c:	67 70       	andi	r22, 0x07	; 7
     f3e:	80 e1       	ldi	r24, 0x10	; 16
     f40:	68 9f       	mul	r22, r24
     f42:	90 01       	movw	r18, r0
     f44:	11 24       	eor	r1, r1
     f46:	8d 2f       	mov	r24, r29
     f48:	8f 70       	andi	r24, 0x0F	; 15
     f4a:	82 2b       	or	r24, r18
     f4c:	0e 94 2f 11 	call	0x225e	; 0x225e <spi_send_byte>
     f50:	81 2f       	mov	r24, r17
     f52:	0e 94 2f 11 	call	0x225e	; 0x225e <spi_send_byte>
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	08 95       	ret

00000f5e <ledmatrix_update_column>:
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	80 31       	cpi	r24, 0x10	; 16
     f66:	a0 f4       	brcc	.+40     	; 0xf90 <ledmatrix_update_column+0x32>
     f68:	8b 01       	movw	r16, r22
     f6a:	c8 2f       	mov	r28, r24
     f6c:	83 e0       	ldi	r24, 0x03	; 3
     f6e:	0e 94 2f 11 	call	0x225e	; 0x225e <spi_send_byte>
     f72:	8c 2f       	mov	r24, r28
     f74:	8f 70       	andi	r24, 0x0F	; 15
     f76:	0e 94 2f 11 	call	0x225e	; 0x225e <spi_send_byte>
     f7a:	c0 e0       	ldi	r28, 0x00	; 0
     f7c:	07 c0       	rjmp	.+14     	; 0xf8c <ledmatrix_update_column+0x2e>
     f7e:	f8 01       	movw	r30, r16
     f80:	ec 0f       	add	r30, r28
     f82:	f1 1d       	adc	r31, r1
     f84:	80 81       	ld	r24, Z
     f86:	0e 94 2f 11 	call	0x225e	; 0x225e <spi_send_byte>
     f8a:	cf 5f       	subi	r28, 0xFF	; 255
     f8c:	c8 30       	cpi	r28, 0x08	; 8
     f8e:	b8 f3       	brcs	.-18     	; 0xf7e <ledmatrix_update_column+0x20>
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	08 95       	ret

00000f98 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     f98:	8f e0       	ldi	r24, 0x0F	; 15
     f9a:	0e 94 2f 11 	call	0x225e	; 0x225e <spi_send_byte>
     f9e:	08 95       	ret

00000fa0 <initialise_hardware>:
	}
}

void initialise_hardware(void)
{
	ledmatrix_setup();
     fa0:	0e 94 8c 07 	call	0xf18	; 0xf18 <ledmatrix_setup>
	init_button_interrupts();
     fa4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <init_button_interrupts>
	
	//Make all bits of port C and the upper 5 bits of port D to be output bits
	DDRC = 0xFF; //0xFF => 0b11111111
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFC; //0xFC => 0b11111100	
     fac:	8c ef       	ldi	r24, 0xFC	; 252
     fae:	8a b9       	out	0x0a, r24	; 10
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     fb0:	40 e0       	ldi	r20, 0x00	; 0
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	7b e4       	ldi	r23, 0x4B	; 75
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 1b 10 	call	0x2036	; 0x2036 <init_serial_stdio>
	
	init_timer0();
     fbe:	0e 94 77 11 	call	0x22ee	; 0x22ee <init_timer0>
	init_timer1();
     fc2:	0e 94 c2 11 	call	0x2384	; 0x2384 <init_timer1>
	init_timer2();
     fc6:	0e 94 4b 12 	call	0x2496	; 0x2496 <init_timer2>
	
	// Turn on global interrupts
	sei();
     fca:	78 94       	sei
     fcc:	08 95       	ret

00000fce <start_screen>:
}

void start_screen(void)
{
     fce:	4f 92       	push	r4
     fd0:	5f 92       	push	r5
     fd2:	6f 92       	push	r6
     fd4:	7f 92       	push	r7
     fd6:	8f 92       	push	r8
     fd8:	9f 92       	push	r9
     fda:	af 92       	push	r10
     fdc:	bf 92       	push	r11
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
	// Clear terminal screen and output a message
	clear_terminal();
     fea:	0e 94 46 11 	call	0x228c	; 0x228c <clear_terminal>
	show_cursor();
     fee:	0e 94 6e 11 	call	0x22dc	; 0x22dc <show_cursor>
	clear_terminal();
     ff2:	0e 94 46 11 	call	0x228c	; 0x228c <clear_terminal>
	hide_cursor();
     ff6:	0e 94 65 11 	call	0x22ca	; 0x22ca <hide_cursor>
	set_display_attribute(FG_WHITE);
     ffa:	85 e2       	ldi	r24, 0x25	; 37
     ffc:	0e 94 58 11 	call	0x22b0	; 0x22b0 <set_display_attribute>
	move_terminal_cursor(10,4);
    1000:	64 e0       	ldi	r22, 0x04	; 4
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	8a e0       	ldi	r24, 0x0A	; 10
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	printf_P(PSTR("  ______   __     __  _______         __    __"));
    100c:	81 e3       	ldi	r24, 0x31	; 49
    100e:	93 e0       	ldi	r25, 0x03	; 3
    1010:	9f 93       	push	r25
    1012:	8f 93       	push	r24
    1014:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
	move_terminal_cursor(10,5);
    1018:	65 e0       	ldi	r22, 0x05	; 5
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	8a e0       	ldi	r24, 0x0A	; 10
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	printf_P(PSTR(" /      \\ |  \\   |  \\|       \\       |  \\  |  \\"));
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	93 e0       	ldi	r25, 0x03	; 3
    1028:	9f 93       	push	r25
    102a:	8f 93       	push	r24
    102c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
	move_terminal_cursor(10,6);
    1030:	66 e0       	ldi	r22, 0x06	; 6
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	8a e0       	ldi	r24, 0x0A	; 10
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	printf_P(PSTR("|  $$$$$$\\| $$   | $$| $$$$$$$\\      | $$  | $$  ______    ______    ______"));
    103c:	85 eb       	ldi	r24, 0xB5	; 181
    103e:	92 e0       	ldi	r25, 0x02	; 2
    1040:	9f 93       	push	r25
    1042:	8f 93       	push	r24
    1044:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
	move_terminal_cursor(10,7);
    1048:	67 e0       	ldi	r22, 0x07	; 7
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	8a e0       	ldi	r24, 0x0A	; 10
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	printf_P(PSTR("| $$__| $$| $$   | $$| $$__| $$      | $$__| $$ /      \\  /      \\  /      \\"));
    1054:	88 e6       	ldi	r24, 0x68	; 104
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	9f 93       	push	r25
    105a:	8f 93       	push	r24
    105c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
	move_terminal_cursor(10,8);
    1060:	68 e0       	ldi	r22, 0x08	; 8
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	8a e0       	ldi	r24, 0x0A	; 10
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	printf_P(PSTR("| $$    $$ \\$$\\ /  $$| $$    $$      | $$    $$|  $$$$$$\\|  $$$$$$\\|  $$$$$$\\"));
    106c:	8a e1       	ldi	r24, 0x1A	; 26
    106e:	92 e0       	ldi	r25, 0x02	; 2
    1070:	9f 93       	push	r25
    1072:	8f 93       	push	r24
    1074:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
	move_terminal_cursor(10,9);
    1078:	69 e0       	ldi	r22, 0x09	; 9
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	8a e0       	ldi	r24, 0x0A	; 10
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	printf_P(PSTR("| $$$$$$$$  \\$$\\  $$ | $$$$$$$\\      | $$$$$$$$| $$    $$| $$   \\$$| $$  | $$"));
    1084:	8c ec       	ldi	r24, 0xCC	; 204
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	9f 93       	push	r25
    108a:	8f 93       	push	r24
    108c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
	move_terminal_cursor(10,10);
    1090:	6a e0       	ldi	r22, 0x0A	; 10
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	8a e0       	ldi	r24, 0x0A	; 10
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$   \\$$ $$  | $$  | $$      | $$  | $$| $$$$$$$$| $$      | $$__/ $$"));
    109c:	8e e7       	ldi	r24, 0x7E	; 126
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	9f 93       	push	r25
    10a2:	8f 93       	push	r24
    10a4:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
	move_terminal_cursor(10,11);
    10a8:	6b e0       	ldi	r22, 0x0B	; 11
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	8a e0       	ldi	r24, 0x0A	; 10
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$    \\$$$   | $$  | $$      | $$  | $$ \\$$     \\| $$       \\$$    $$"));
    10b4:	80 e3       	ldi	r24, 0x30	; 48
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	9f 93       	push	r25
    10ba:	8f 93       	push	r24
    10bc:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
	move_terminal_cursor(10,12);
    10c0:	6c e0       	ldi	r22, 0x0C	; 12
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	8a e0       	ldi	r24, 0x0A	; 10
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	printf_P(PSTR(" \\$$   \\$$     \\$     \\$$   \\$$       \\$$   \\$$  \\$$$$$$$ \\$$        \\$$$$$$"));
    10cc:	83 ee       	ldi	r24, 0xE3	; 227
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	9f 93       	push	r25
    10d2:	8f 93       	push	r24
    10d4:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
	move_terminal_cursor(10,14);
    10d8:	6e e0       	ldi	r22, 0x0E	; 14
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	8a e0       	ldi	r24, 0x0A	; 10
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	// change this to your name and student number; remove the chevrons <>
	printf_P(PSTR("CSSE2010/7201 A2 by  Cailin Delgado - 48027942"));
    10e4:	84 eb       	ldi	r24, 0xB4	; 180
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	9f 93       	push	r25
    10ea:	8f 93       	push	r24
    10ec:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
    10f0:	0e 94 a2 02 	call	0x544	; 0x544 <show_start_screen>
	
	set_track(0);
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <set_track>
	
	//Display current track
	move_terminal_cursor(10, 15);
    10fc:	6f e0       	ldi	r22, 0x0F	; 15
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	8a e0       	ldi	r24, 0x0A	; 10
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	printf("Track: %s", track_name);															//do %s and add a new track title at the end.
    1108:	80 e3       	ldi	r24, 0x30	; 48
    110a:	95 e0       	ldi	r25, 0x05	; 5
    110c:	9f 93       	push	r25
    110e:	8f 93       	push	r24
    1110:	8e e5       	ldi	r24, 0x5E	; 94
    1112:	92 e0       	ldi	r25, 0x02	; 2
    1114:	9f 93       	push	r25
    1116:	8f 93       	push	r24
    1118:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
    111c:	0e 94 8d 11 	call	0x231a	; 0x231a <get_current_time>
    1120:	6b 01       	movw	r12, r22
    1122:	7c 01       	movw	r14, r24
	
	uint8_t frame_number = 0;
	game_speed = 1000;
    1124:	88 ee       	ldi	r24, 0xE8	; 232
    1126:	93 e0       	ldi	r25, 0x03	; 3
    1128:	90 93 58 05 	sts	0x0558, r25	; 0x800558 <game_speed+0x1>
    112c:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <game_speed>
	
	move_terminal_cursor(10, 17);
    1130:	61 e1       	ldi	r22, 0x11	; 17
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	8a e0       	ldi	r24, 0x0A	; 10
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	clear_to_end_of_line();
    113c:	0e 94 4f 11 	call	0x229e	; 0x229e <clear_to_end_of_line>
	//update game speed in terminal appropriately
	if (game_speed == 1000) {
    1140:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <game_speed>
    1144:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <game_speed+0x1>
    1148:	2d b7       	in	r18, 0x3d	; 61
    114a:	3e b7       	in	r19, 0x3e	; 62
    114c:	28 5e       	subi	r18, 0xE8	; 232
    114e:	3f 4f       	sbci	r19, 0xFF	; 255
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	3e bf       	out	0x3e, r19	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	2d bf       	out	0x3d, r18	; 61
    115a:	88 3e       	cpi	r24, 0xE8	; 232
    115c:	33 e0       	ldi	r19, 0x03	; 3
    115e:	93 07       	cpc	r25, r19
    1160:	69 f4       	brne	.+26     	; 0x117c <start_screen+0x1ae>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    1162:	9f 93       	push	r25
    1164:	8f 93       	push	r24
    1166:	88 e6       	ldi	r24, 0x68	; 104
    1168:	92 e0       	ldi	r25, 0x02	; 2
    116a:	9f 93       	push	r25
    116c:	8f 93       	push	r24
    116e:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	20 c0       	rjmp	.+64     	; 0x11bc <start_screen+0x1ee>
		
	} else if (game_speed == 500) {
    117c:	84 3f       	cpi	r24, 0xF4	; 244
    117e:	21 e0       	ldi	r18, 0x01	; 1
    1180:	92 07       	cpc	r25, r18
    1182:	69 f4       	brne	.+26     	; 0x119e <start_screen+0x1d0>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1184:	9f 93       	push	r25
    1186:	8f 93       	push	r24
    1188:	8e e8       	ldi	r24, 0x8E	; 142
    118a:	92 e0       	ldi	r25, 0x02	; 2
    118c:	9f 93       	push	r25
    118e:	8f 93       	push	r24
    1190:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f c0       	rjmp	.+30     	; 0x11bc <start_screen+0x1ee>
		
	} else if (game_speed == 250) {
    119e:	8a 3f       	cpi	r24, 0xFA	; 250
    11a0:	91 05       	cpc	r25, r1
    11a2:	61 f4       	brne	.+24     	; 0x11bc <start_screen+0x1ee>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    11a4:	9f 93       	push	r25
    11a6:	8f 93       	push	r24
    11a8:	82 eb       	ldi	r24, 0xB2	; 178
    11aa:	92 e0       	ldi	r25, 0x02	; 2
    11ac:	9f 93       	push	r25
    11ae:	8f 93       	push	r24
    11b0:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
	// Turn on global interrupts
	sei();
}

void start_screen(void)
{
    11bc:	d0 e0       	ldi	r29, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available())
    11be:	0e 94 62 10 	call	0x20c4	; 0x20c4 <serial_input_available>
    11c2:	88 23       	and	r24, r24
    11c4:	41 f0       	breq	.+16     	; 0x11d6 <start_screen+0x208>
		{
			serial_input = fgetc(stdin);
    11c6:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <__iob>
    11ca:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <__iob+0x1>
    11ce:	0e 94 91 14 	call	0x2922	; 0x2922 <fgetc>
    11d2:	c8 2f       	mov	r28, r24
    11d4:	01 c0       	rjmp	.+2      	; 0x11d8 <start_screen+0x20a>
	{
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
    11d6:	cf ef       	ldi	r28, 0xFF	; 255
		if (serial_input_available())
		{
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S')
    11d8:	c3 37       	cpi	r28, 0x73	; 115
    11da:	09 f4       	brne	.+2      	; 0x11de <start_screen+0x210>
    11dc:	f6 c0       	rjmp	.+492    	; 0x13ca <start_screen+0x3fc>
    11de:	c3 35       	cpi	r28, 0x53	; 83
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <start_screen+0x216>
    11e2:	f3 c0       	rjmp	.+486    	; 0x13ca <start_screen+0x3fc>
			break;
		} 
		
		
		//display the game speed to the terminal
		if (serial_input == '1') {
    11e4:	c1 33       	cpi	r28, 0x31	; 49
    11e6:	f9 f4       	brne	.+62     	; 0x1226 <start_screen+0x258>
			game_speed = 1000; //set game speed to 1000ms
    11e8:	88 ee       	ldi	r24, 0xE8	; 232
    11ea:	93 e0       	ldi	r25, 0x03	; 3
    11ec:	90 93 58 05 	sts	0x0558, r25	; 0x800558 <game_speed+0x1>
    11f0:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <game_speed>
			
			move_terminal_cursor(10, 17);
    11f4:	61 e1       	ldi	r22, 0x11	; 17
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	8a e0       	ldi	r24, 0x0A	; 10
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
			clear_to_end_of_line();
    1200:	0e 94 4f 11 	call	0x229e	; 0x229e <clear_to_end_of_line>
			printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    1204:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <game_speed+0x1>
    1208:	8f 93       	push	r24
    120a:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <game_speed>
    120e:	8f 93       	push	r24
    1210:	88 e6       	ldi	r24, 0x68	; 104
    1212:	92 e0       	ldi	r25, 0x02	; 2
    1214:	9f 93       	push	r25
    1216:	8f 93       	push	r24
    1218:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	41 c0       	rjmp	.+130    	; 0x12a8 <start_screen+0x2da>
			
		} else if (serial_input == '2') {
    1226:	c2 33       	cpi	r28, 0x32	; 50
    1228:	f9 f4       	brne	.+62     	; 0x1268 <start_screen+0x29a>
			game_speed = 500; //set game speed to 500ms
    122a:	84 ef       	ldi	r24, 0xF4	; 244
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	90 93 58 05 	sts	0x0558, r25	; 0x800558 <game_speed+0x1>
    1232:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <game_speed>
			
			move_terminal_cursor(10, 17);
    1236:	61 e1       	ldi	r22, 0x11	; 17
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	8a e0       	ldi	r24, 0x0A	; 10
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
			clear_to_end_of_line();
    1242:	0e 94 4f 11 	call	0x229e	; 0x229e <clear_to_end_of_line>
			printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1246:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <game_speed+0x1>
    124a:	8f 93       	push	r24
    124c:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <game_speed>
    1250:	8f 93       	push	r24
    1252:	8e e8       	ldi	r24, 0x8E	; 142
    1254:	92 e0       	ldi	r25, 0x02	; 2
    1256:	9f 93       	push	r25
    1258:	8f 93       	push	r24
    125a:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	20 c0       	rjmp	.+64     	; 0x12a8 <start_screen+0x2da>
			
		} else if (serial_input == '3') {
    1268:	c3 33       	cpi	r28, 0x33	; 51
    126a:	f1 f4       	brne	.+60     	; 0x12a8 <start_screen+0x2da>
			game_speed = 250; //set game speed to 250ms
    126c:	8a ef       	ldi	r24, 0xFA	; 250
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	90 93 58 05 	sts	0x0558, r25	; 0x800558 <game_speed+0x1>
    1274:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <game_speed>
			
			move_terminal_cursor(10, 17);
    1278:	61 e1       	ldi	r22, 0x11	; 17
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	8a e0       	ldi	r24, 0x0A	; 10
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
			clear_to_end_of_line();
    1284:	0e 94 4f 11 	call	0x229e	; 0x229e <clear_to_end_of_line>
			printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1288:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <game_speed+0x1>
    128c:	8f 93       	push	r24
    128e:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <game_speed>
    1292:	8f 93       	push	r24
    1294:	82 eb       	ldi	r24, 0xB2	; 178
    1296:	92 e0       	ldi	r25, 0x02	; 2
    1298:	9f 93       	push	r25
    129a:	8f 93       	push	r24
    129c:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
		}
		
		
		// Next check for any button presses
		int8_t btn = button_pushed();
    12a8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
		if (btn != NO_BUTTON_PUSHED)
    12ac:	8f 3f       	cpi	r24, 0xFF	; 255
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <start_screen+0x2e4>
    12b0:	8c c0       	rjmp	.+280    	; 0x13ca <start_screen+0x3fc>
		{
			break;
			
		} else if (serial_input == 'm' || serial_input == 'M') {
    12b2:	cd 36       	cpi	r28, 0x6D	; 109
    12b4:	11 f0       	breq	.+4      	; 0x12ba <start_screen+0x2ec>
    12b6:	cd 34       	cpi	r28, 0x4D	; 77
    12b8:	11 f5       	brne	.+68     	; 0x12fe <start_screen+0x330>
			//clear manual mode alert
			move_terminal_cursor(10, 16);
    12ba:	60 e1       	ldi	r22, 0x10	; 16
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	8a e0       	ldi	r24, 0x0A	; 10
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
			clear_to_end_of_line();
    12c6:	0e 94 4f 11 	call	0x229e	; 0x229e <clear_to_end_of_line>
			
			if (man_mode) {
    12ca:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <man_mode>
    12ce:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <man_mode+0x1>
    12d2:	89 2b       	or	r24, r25
    12d4:	29 f0       	breq	.+10     	; 0x12e0 <start_screen+0x312>
				man_mode = 0;  // toggle manual mode checker
    12d6:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <man_mode+0x1>
    12da:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <man_mode>
    12de:	3e c0       	rjmp	.+124    	; 0x135c <start_screen+0x38e>
				
			} else {
				man_mode = 1; //toggle manual mode checker				
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	90 93 24 05 	sts	0x0524, r25	; 0x800524 <man_mode+0x1>
    12e8:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <man_mode>
				//print to terminal that manual mode is on
				printf("Manual Mode: ON");
    12ec:	89 ed       	ldi	r24, 0xD9	; 217
    12ee:	92 e0       	ldi	r25, 0x02	; 2
    12f0:	9f 93       	push	r25
    12f2:	8f 93       	push	r24
    12f4:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	2f c0       	rjmp	.+94     	; 0x135c <start_screen+0x38e>
			}
		} else if (serial_input == 't' || serial_input == 'T') { //select track
    12fe:	c4 37       	cpi	r28, 0x74	; 116
    1300:	11 f0       	breq	.+4      	; 0x1306 <start_screen+0x338>
    1302:	c4 35       	cpi	r28, 0x54	; 84
    1304:	59 f5       	brne	.+86     	; 0x135c <start_screen+0x38e>
			track_no++;
    1306:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <track_no>
    130a:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <track_no+0x1>
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <track_no+0x1>
    1314:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <track_no>
			
			if (track_no > 2) {
    1318:	03 97       	sbiw	r24, 0x03	; 3
    131a:	24 f0       	brlt	.+8      	; 0x1324 <start_screen+0x356>
				track_no = 0;
    131c:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <track_no+0x1>
    1320:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <track_no>
			}
			
			
			//sets the track and renames track_name
			set_track(track_no);
    1324:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <track_no>
    1328:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <track_no+0x1>
    132c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <set_track>

			//Display current track
			move_terminal_cursor(10, 15);
    1330:	6f e0       	ldi	r22, 0x0F	; 15
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	8a e0       	ldi	r24, 0x0A	; 10
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
			clear_to_end_of_line();
    133c:	0e 94 4f 11 	call	0x229e	; 0x229e <clear_to_end_of_line>
			printf("Track: %s", track_name);																//do %s and add a new track title at the end.
    1340:	80 e3       	ldi	r24, 0x30	; 48
    1342:	95 e0       	ldi	r25, 0x05	; 5
    1344:	9f 93       	push	r25
    1346:	8f 93       	push	r24
    1348:	8e e5       	ldi	r24, 0x5E	; 94
    134a:	92 e0       	ldi	r25, 0x02	; 2
    134c:	9f 93       	push	r25
    134e:	8f 93       	push	r24
    1350:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
		}	

		if (!man_mode) {
    135c:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <man_mode>
    1360:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <man_mode+0x1>
    1364:	89 2b       	or	r24, r25
    1366:	09 f0       	breq	.+2      	; 0x136a <start_screen+0x39c>
    1368:	2a cf       	rjmp	.-428    	; 0x11be <start_screen+0x1f0>
			// every 200 ms, update the animation
			current_time = get_current_time();
    136a:	0e 94 8d 11 	call	0x231a	; 0x231a <get_current_time>
    136e:	4b 01       	movw	r8, r22
    1370:	5c 01       	movw	r10, r24
			if (current_time - last_screen_update > game_speed/5)
    1372:	2b 01       	movw	r4, r22
    1374:	3c 01       	movw	r6, r24
    1376:	4c 18       	sub	r4, r12
    1378:	5d 08       	sbc	r5, r13
    137a:	6e 08       	sbc	r6, r14
    137c:	7f 08       	sbc	r7, r15
    137e:	20 91 57 05 	lds	r18, 0x0557	; 0x800557 <game_speed>
    1382:	30 91 58 05 	lds	r19, 0x0558	; 0x800558 <game_speed+0x1>
    1386:	ad ec       	ldi	r26, 0xCD	; 205
    1388:	bc ec       	ldi	r27, 0xCC	; 204
    138a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__umulhisi3>
    138e:	96 95       	lsr	r25
    1390:	87 95       	ror	r24
    1392:	96 95       	lsr	r25
    1394:	87 95       	ror	r24
    1396:	a0 e0       	ldi	r26, 0x00	; 0
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	84 15       	cp	r24, r4
    139c:	95 05       	cpc	r25, r5
    139e:	a6 05       	cpc	r26, r6
    13a0:	b7 05       	cpc	r27, r7
    13a2:	08 f0       	brcs	.+2      	; 0x13a6 <start_screen+0x3d8>
    13a4:	0c cf       	rjmp	.-488    	; 0x11be <start_screen+0x1f0>
			{
				update_start_screen(frame_number);
    13a6:	8d 2f       	mov	r24, r29
    13a8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
				frame_number = (frame_number + 1) % 32;
    13ac:	8d 2f       	mov	r24, r29
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	8f 71       	andi	r24, 0x1F	; 31
    13b4:	90 78       	andi	r25, 0x80	; 128
    13b6:	99 23       	and	r25, r25
    13b8:	24 f4       	brge	.+8      	; 0x13c2 <start_screen+0x3f4>
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	80 6e       	ori	r24, 0xE0	; 224
    13be:	9f 6f       	ori	r25, 0xFF	; 255
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	d8 2f       	mov	r29, r24
				last_screen_update = current_time;
    13c4:	75 01       	movw	r14, r10
    13c6:	64 01       	movw	r12, r8
    13c8:	fa ce       	rjmp	.-524    	; 0x11be <start_screen+0x1f0>
			} 
		}
	}
}
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	df 90       	pop	r13
    13d4:	cf 90       	pop	r12
    13d6:	bf 90       	pop	r11
    13d8:	af 90       	pop	r10
    13da:	9f 90       	pop	r9
    13dc:	8f 90       	pop	r8
    13de:	7f 90       	pop	r7
    13e0:	6f 90       	pop	r6
    13e2:	5f 90       	pop	r5
    13e4:	4f 90       	pop	r4
    13e6:	08 95       	ret

000013e8 <display_countdown>:

void display_countdown(int countdown) {
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	ec 01       	movw	r28, r24
	//clear display
	ledmatrix_clear();
    13ee:	0e 94 cc 07 	call	0xf98	; 0xf98 <ledmatrix_clear>
	
	switch (countdown) {
    13f2:	c2 30       	cpi	r28, 0x02	; 2
    13f4:	d1 05       	cpc	r29, r1
    13f6:	a9 f1       	breq	.+106    	; 0x1462 <display_countdown+0x7a>
    13f8:	1c f4       	brge	.+6      	; 0x1400 <display_countdown+0x18>
    13fa:	21 97       	sbiw	r28, 0x01	; 1
    13fc:	71 f1       	breq	.+92     	; 0x145a <display_countdown+0x72>
    13fe:	74 c1       	rjmp	.+744    	; 0x16e8 <display_countdown+0x300>
    1400:	c3 30       	cpi	r28, 0x03	; 3
    1402:	d1 05       	cpc	r29, r1
    1404:	09 f4       	brne	.+2      	; 0x1408 <display_countdown+0x20>
    1406:	f3 c0       	rjmp	.+486    	; 0x15ee <display_countdown+0x206>
    1408:	24 97       	sbiw	r28, 0x04	; 4
    140a:	09 f4       	brne	.+2      	; 0x140e <display_countdown+0x26>
    140c:	f5 c0       	rjmp	.+490    	; 0x15f8 <display_countdown+0x210>
    140e:	6c c1       	rjmp	.+728    	; 0x16e8 <display_countdown+0x300>
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
				ledmatrix_update_pixel(col, 3, COLOUR_YELLOW);
    1410:	4f ef       	ldi	r20, 0xFF	; 255
    1412:	63 e0       	ldi	r22, 0x03	; 3
    1414:	8c 2f       	mov	r24, r28
    1416:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 4, COLOUR_YELLOW);
    141a:	4f ef       	ldi	r20, 0xFF	; 255
    141c:	64 e0       	ldi	r22, 0x04	; 4
    141e:	8c 2f       	mov	r24, r28
    1420:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
				
				if (col == 5) {
    1424:	c5 30       	cpi	r28, 0x05	; 5
    1426:	59 f4       	brne	.+22     	; 0x143e <display_countdown+0x56>
					ledmatrix_update_pixel(col, 2, COLOUR_YELLOW);
    1428:	4f ef       	ldi	r20, 0xFF	; 255
    142a:	62 e0       	ldi	r22, 0x02	; 2
    142c:	8c 2f       	mov	r24, r28
    142e:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_YELLOW);
    1432:	4f ef       	ldi	r20, 0xFF	; 255
    1434:	64 e0       	ldi	r22, 0x04	; 4
    1436:	8c 2f       	mov	r24, r28
    1438:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
    143c:	0c c0       	rjmp	.+24     	; 0x1456 <display_countdown+0x6e>
					
					} else if (col == 10) {
    143e:	ca 30       	cpi	r28, 0x0A	; 10
    1440:	51 f4       	brne	.+20     	; 0x1456 <display_countdown+0x6e>
					ledmatrix_update_pixel(col, 2, COLOUR_YELLOW);
    1442:	4f ef       	ldi	r20, 0xFF	; 255
    1444:	62 e0       	ldi	r22, 0x02	; 2
    1446:	8c 2f       	mov	r24, r28
    1448:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_YELLOW);
    144c:	4f ef       	ldi	r20, 0xFF	; 255
    144e:	65 e0       	ldi	r22, 0x05	; 5
    1450:	8c 2f       	mov	r24, r28
    1452:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
    1456:	cf 5f       	subi	r28, 0xFF	; 255
    1458:	01 c0       	rjmp	.+2      	; 0x145c <display_countdown+0x74>

void display_countdown(int countdown) {
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
    145a:	c4 e0       	ldi	r28, 0x04	; 4
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
    145c:	cb 30       	cpi	r28, 0x0B	; 11
    145e:	c0 f2       	brcs	.-80     	; 0x1410 <display_countdown+0x28>
    1460:	43 c1       	rjmp	.+646    	; 0x16e8 <display_countdown+0x300>
				}
			}
			break;
			
		case 2:  //Then draw the 2
			ledmatrix_update_pixel(4, 2, COLOUR_RED);
    1462:	4f e0       	ldi	r20, 0x0F	; 15
    1464:	62 e0       	ldi	r22, 0x02	; 2
    1466:	84 e0       	ldi	r24, 0x04	; 4
    1468:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 3, COLOUR_RED);
    146c:	4f e0       	ldi	r20, 0x0F	; 15
    146e:	63 e0       	ldi	r22, 0x03	; 3
    1470:	84 e0       	ldi	r24, 0x04	; 4
    1472:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 4, COLOUR_RED);
    1476:	4f e0       	ldi	r20, 0x0F	; 15
    1478:	64 e0       	ldi	r22, 0x04	; 4
    147a:	84 e0       	ldi	r24, 0x04	; 4
    147c:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 5, COLOUR_RED);
    1480:	4f e0       	ldi	r20, 0x0F	; 15
    1482:	65 e0       	ldi	r22, 0x05	; 5
    1484:	84 e0       	ldi	r24, 0x04	; 4
    1486:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(5, 1, COLOUR_RED);
    148a:	4f e0       	ldi	r20, 0x0F	; 15
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	85 e0       	ldi	r24, 0x05	; 5
    1490:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 2, COLOUR_RED);
    1494:	4f e0       	ldi	r20, 0x0F	; 15
    1496:	62 e0       	ldi	r22, 0x02	; 2
    1498:	85 e0       	ldi	r24, 0x05	; 5
    149a:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 5, COLOUR_RED);
    149e:	4f e0       	ldi	r20, 0x0F	; 15
    14a0:	65 e0       	ldi	r22, 0x05	; 5
    14a2:	85 e0       	ldi	r24, 0x05	; 5
    14a4:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 6, COLOUR_RED);
    14a8:	4f e0       	ldi	r20, 0x0F	; 15
    14aa:	66 e0       	ldi	r22, 0x06	; 6
    14ac:	85 e0       	ldi	r24, 0x05	; 5
    14ae:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(6, 5, COLOUR_RED);
    14b2:	4f e0       	ldi	r20, 0x0F	; 15
    14b4:	65 e0       	ldi	r22, 0x05	; 5
    14b6:	86 e0       	ldi	r24, 0x06	; 6
    14b8:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 6, COLOUR_RED);
    14bc:	4f e0       	ldi	r20, 0x0F	; 15
    14be:	66 e0       	ldi	r22, 0x06	; 6
    14c0:	86 e0       	ldi	r24, 0x06	; 6
    14c2:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(7, 5, COLOUR_RED);
    14c6:	4f e0       	ldi	r20, 0x0F	; 15
    14c8:	65 e0       	ldi	r22, 0x05	; 5
    14ca:	87 e0       	ldi	r24, 0x07	; 7
    14cc:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 6, COLOUR_RED);
    14d0:	4f e0       	ldi	r20, 0x0F	; 15
    14d2:	66 e0       	ldi	r22, 0x06	; 6
    14d4:	87 e0       	ldi	r24, 0x07	; 7
    14d6:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(8, 2, COLOUR_RED);
    14da:	4f e0       	ldi	r20, 0x0F	; 15
    14dc:	62 e0       	ldi	r22, 0x02	; 2
    14de:	88 e0       	ldi	r24, 0x08	; 8
    14e0:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 3, COLOUR_RED);
    14e4:	4f e0       	ldi	r20, 0x0F	; 15
    14e6:	63 e0       	ldi	r22, 0x03	; 3
    14e8:	88 e0       	ldi	r24, 0x08	; 8
    14ea:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 4, COLOUR_RED);
    14ee:	4f e0       	ldi	r20, 0x0F	; 15
    14f0:	64 e0       	ldi	r22, 0x04	; 4
    14f2:	88 e0       	ldi	r24, 0x08	; 8
    14f4:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(9, 1, COLOUR_RED);
    14f8:	4f e0       	ldi	r20, 0x0F	; 15
    14fa:	61 e0       	ldi	r22, 0x01	; 1
    14fc:	89 e0       	ldi	r24, 0x09	; 9
    14fe:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 2, COLOUR_RED);
    1502:	4f e0       	ldi	r20, 0x0F	; 15
    1504:	62 e0       	ldi	r22, 0x02	; 2
    1506:	89 e0       	ldi	r24, 0x09	; 9
    1508:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(10, 1, COLOUR_RED);
    150c:	4f e0       	ldi	r20, 0x0F	; 15
    150e:	61 e0       	ldi	r22, 0x01	; 1
    1510:	8a e0       	ldi	r24, 0x0A	; 10
    1512:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 2, COLOUR_RED);
    1516:	4f e0       	ldi	r20, 0x0F	; 15
    1518:	62 e0       	ldi	r22, 0x02	; 2
    151a:	8a e0       	ldi	r24, 0x0A	; 10
    151c:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 3, COLOUR_RED);
    1520:	4f e0       	ldi	r20, 0x0F	; 15
    1522:	63 e0       	ldi	r22, 0x03	; 3
    1524:	8a e0       	ldi	r24, 0x0A	; 10
    1526:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 4, COLOUR_RED);
    152a:	4f e0       	ldi	r20, 0x0F	; 15
    152c:	64 e0       	ldi	r22, 0x04	; 4
    152e:	8a e0       	ldi	r24, 0x0A	; 10
    1530:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
    1534:	4f e0       	ldi	r20, 0x0F	; 15
    1536:	65 e0       	ldi	r22, 0x05	; 5
    1538:	8a e0       	ldi	r24, 0x0A	; 10
    153a:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
    153e:	4f e0       	ldi	r20, 0x0F	; 15
    1540:	66 e0       	ldi	r22, 0x06	; 6
    1542:	8a e0       	ldi	r24, 0x0A	; 10
    1544:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			break;
    1548:	cf c0       	rjmp	.+414    	; 0x16e8 <display_countdown+0x300>
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
				if (col == 4 || col == 10) {
    154a:	c4 30       	cpi	r28, 0x04	; 4
    154c:	11 f0       	breq	.+4      	; 0x1552 <display_countdown+0x16a>
    154e:	ca 30       	cpi	r28, 0x0A	; 10
    1550:	a9 f4       	brne	.+42     	; 0x157c <display_countdown+0x194>
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    1552:	4f e0       	ldi	r20, 0x0F	; 15
    1554:	62 e0       	ldi	r22, 0x02	; 2
    1556:	8c 2f       	mov	r24, r28
    1558:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 3, COLOUR_RED);
    155c:	4f e0       	ldi	r20, 0x0F	; 15
    155e:	63 e0       	ldi	r22, 0x03	; 3
    1560:	8c 2f       	mov	r24, r28
    1562:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_RED);
    1566:	4f e0       	ldi	r20, 0x0F	; 15
    1568:	64 e0       	ldi	r22, 0x04	; 4
    156a:	8c 2f       	mov	r24, r28
    156c:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_RED);
    1570:	4f e0       	ldi	r20, 0x0F	; 15
    1572:	65 e0       	ldi	r22, 0x05	; 5
    1574:	8c 2f       	mov	r24, r28
    1576:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
    157a:	37 c0       	rjmp	.+110    	; 0x15ea <display_countdown+0x202>
					
					} else if (col == 5 || col == 9) {
    157c:	c5 30       	cpi	r28, 0x05	; 5
    157e:	11 f0       	breq	.+4      	; 0x1584 <display_countdown+0x19c>
    1580:	c9 30       	cpi	r28, 0x09	; 9
    1582:	a9 f4       	brne	.+42     	; 0x15ae <display_countdown+0x1c6>
					ledmatrix_update_pixel(col, 1, COLOUR_RED);
    1584:	4f e0       	ldi	r20, 0x0F	; 15
    1586:	61 e0       	ldi	r22, 0x01	; 1
    1588:	8c 2f       	mov	r24, r28
    158a:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    158e:	4f e0       	ldi	r20, 0x0F	; 15
    1590:	62 e0       	ldi	r22, 0x02	; 2
    1592:	8c 2f       	mov	r24, r28
    1594:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_RED);
    1598:	4f e0       	ldi	r20, 0x0F	; 15
    159a:	65 e0       	ldi	r22, 0x05	; 5
    159c:	8c 2f       	mov	r24, r28
    159e:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 6, COLOUR_RED);
    15a2:	4f e0       	ldi	r20, 0x0F	; 15
    15a4:	66 e0       	ldi	r22, 0x06	; 6
    15a6:	8c 2f       	mov	r24, r28
    15a8:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
    15ac:	1e c0       	rjmp	.+60     	; 0x15ea <display_countdown+0x202>
					
					} else if (col == 6 || col == 8) {
    15ae:	c6 30       	cpi	r28, 0x06	; 6
    15b0:	11 f0       	breq	.+4      	; 0x15b6 <display_countdown+0x1ce>
    15b2:	c8 30       	cpi	r28, 0x08	; 8
    15b4:	59 f4       	brne	.+22     	; 0x15cc <display_countdown+0x1e4>
					ledmatrix_update_pixel(col, 5, COLOUR_RED);
    15b6:	4f e0       	ldi	r20, 0x0F	; 15
    15b8:	65 e0       	ldi	r22, 0x05	; 5
    15ba:	8c 2f       	mov	r24, r28
    15bc:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 6, COLOUR_RED);
    15c0:	4f e0       	ldi	r20, 0x0F	; 15
    15c2:	66 e0       	ldi	r22, 0x06	; 6
    15c4:	8c 2f       	mov	r24, r28
    15c6:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
    15ca:	0f c0       	rjmp	.+30     	; 0x15ea <display_countdown+0x202>
					
					} else {
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    15cc:	4f e0       	ldi	r20, 0x0F	; 15
    15ce:	62 e0       	ldi	r22, 0x02	; 2
    15d0:	8c 2f       	mov	r24, r28
    15d2:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 3, COLOUR_RED);
    15d6:	4f e0       	ldi	r20, 0x0F	; 15
    15d8:	63 e0       	ldi	r22, 0x03	; 3
    15da:	8c 2f       	mov	r24, r28
    15dc:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_RED);
    15e0:	4f e0       	ldi	r20, 0x0F	; 15
    15e2:	64 e0       	ldi	r22, 0x04	; 4
    15e4:	8c 2f       	mov	r24, r28
    15e6:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
			break;
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
    15ea:	cf 5f       	subi	r28, 0xFF	; 255
    15ec:	01 c0       	rjmp	.+2      	; 0x15f0 <display_countdown+0x208>

void display_countdown(int countdown) {
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
    15ee:	c4 e0       	ldi	r28, 0x04	; 4
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
			break;
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
    15f0:	cb 30       	cpi	r28, 0x0B	; 11
    15f2:	08 f4       	brcc	.+2      	; 0x15f6 <display_countdown+0x20e>
    15f4:	aa cf       	rjmp	.-172    	; 0x154a <display_countdown+0x162>
    15f6:	78 c0       	rjmp	.+240    	; 0x16e8 <display_countdown+0x300>
				}
			}
			break;
		
		case 4: //Then draw the Go
			ledmatrix_update_pixel(5, 1, COLOUR_GREEN);
    15f8:	40 ef       	ldi	r20, 0xF0	; 240
    15fa:	61 e0       	ldi	r22, 0x01	; 1
    15fc:	85 e0       	ldi	r24, 0x05	; 5
    15fe:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 2, COLOUR_GREEN);
    1602:	40 ef       	ldi	r20, 0xF0	; 240
    1604:	62 e0       	ldi	r22, 0x02	; 2
    1606:	85 e0       	ldi	r24, 0x05	; 5
    1608:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 3, COLOUR_GREEN);
    160c:	40 ef       	ldi	r20, 0xF0	; 240
    160e:	63 e0       	ldi	r22, 0x03	; 3
    1610:	85 e0       	ldi	r24, 0x05	; 5
    1612:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 5, COLOUR_GREEN);
    1616:	40 ef       	ldi	r20, 0xF0	; 240
    1618:	65 e0       	ldi	r22, 0x05	; 5
    161a:	85 e0       	ldi	r24, 0x05	; 5
    161c:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 6, COLOUR_GREEN);
    1620:	40 ef       	ldi	r20, 0xF0	; 240
    1622:	66 e0       	ldi	r22, 0x06	; 6
    1624:	85 e0       	ldi	r24, 0x05	; 5
    1626:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 7, COLOUR_GREEN);
    162a:	40 ef       	ldi	r20, 0xF0	; 240
    162c:	67 e0       	ldi	r22, 0x07	; 7
    162e:	85 e0       	ldi	r24, 0x05	; 5
    1630:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(6, 0, COLOUR_GREEN);
    1634:	40 ef       	ldi	r20, 0xF0	; 240
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	86 e0       	ldi	r24, 0x06	; 6
    163a:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 5, COLOUR_GREEN);
    163e:	40 ef       	ldi	r20, 0xF0	; 240
    1640:	65 e0       	ldi	r22, 0x05	; 5
    1642:	86 e0       	ldi	r24, 0x06	; 6
    1644:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 7, COLOUR_GREEN);
    1648:	40 ef       	ldi	r20, 0xF0	; 240
    164a:	67 e0       	ldi	r22, 0x07	; 7
    164c:	86 e0       	ldi	r24, 0x06	; 6
    164e:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(7, 0, COLOUR_GREEN);
    1652:	40 ef       	ldi	r20, 0xF0	; 240
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	87 e0       	ldi	r24, 0x07	; 7
    1658:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 2, COLOUR_GREEN);
    165c:	40 ef       	ldi	r20, 0xF0	; 240
    165e:	62 e0       	ldi	r22, 0x02	; 2
    1660:	87 e0       	ldi	r24, 0x07	; 7
    1662:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 3, COLOUR_GREEN);
    1666:	40 ef       	ldi	r20, 0xF0	; 240
    1668:	63 e0       	ldi	r22, 0x03	; 3
    166a:	87 e0       	ldi	r24, 0x07	; 7
    166c:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 5, COLOUR_GREEN);
    1670:	40 ef       	ldi	r20, 0xF0	; 240
    1672:	65 e0       	ldi	r22, 0x05	; 5
    1674:	87 e0       	ldi	r24, 0x07	; 7
    1676:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 7, COLOUR_GREEN);
    167a:	40 ef       	ldi	r20, 0xF0	; 240
    167c:	67 e0       	ldi	r22, 0x07	; 7
    167e:	87 e0       	ldi	r24, 0x07	; 7
    1680:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(8, 0, COLOUR_GREEN);
    1684:	40 ef       	ldi	r20, 0xF0	; 240
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	88 e0       	ldi	r24, 0x08	; 8
    168a:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 3, COLOUR_GREEN);
    168e:	40 ef       	ldi	r20, 0xF0	; 240
    1690:	63 e0       	ldi	r22, 0x03	; 3
    1692:	88 e0       	ldi	r24, 0x08	; 8
    1694:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 5, COLOUR_GREEN);
    1698:	40 ef       	ldi	r20, 0xF0	; 240
    169a:	65 e0       	ldi	r22, 0x05	; 5
    169c:	88 e0       	ldi	r24, 0x08	; 8
    169e:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 7, COLOUR_GREEN);
    16a2:	40 ef       	ldi	r20, 0xF0	; 240
    16a4:	67 e0       	ldi	r22, 0x07	; 7
    16a6:	88 e0       	ldi	r24, 0x08	; 8
    16a8:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(9, 1, COLOUR_GREEN);
    16ac:	40 ef       	ldi	r20, 0xF0	; 240
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	89 e0       	ldi	r24, 0x09	; 9
    16b2:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 2, COLOUR_GREEN);
    16b6:	40 ef       	ldi	r20, 0xF0	; 240
    16b8:	62 e0       	ldi	r22, 0x02	; 2
    16ba:	89 e0       	ldi	r24, 0x09	; 9
    16bc:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 3, COLOUR_GREEN);
    16c0:	40 ef       	ldi	r20, 0xF0	; 240
    16c2:	63 e0       	ldi	r22, 0x03	; 3
    16c4:	85 e0       	ldi	r24, 0x05	; 5
    16c6:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 5, COLOUR_GREEN);
    16ca:	40 ef       	ldi	r20, 0xF0	; 240
    16cc:	65 e0       	ldi	r22, 0x05	; 5
    16ce:	89 e0       	ldi	r24, 0x09	; 9
    16d0:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 6, COLOUR_GREEN);
    16d4:	40 ef       	ldi	r20, 0xF0	; 240
    16d6:	66 e0       	ldi	r22, 0x06	; 6
    16d8:	89 e0       	ldi	r24, 0x09	; 9
    16da:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 7, COLOUR_GREEN);
    16de:	40 ef       	ldi	r20, 0xF0	; 240
    16e0:	67 e0       	ldi	r22, 0x07	; 7
    16e2:	89 e0       	ldi	r24, 0x09	; 9
    16e4:	0e 94 90 07 	call	0xf20	; 0xf20 <ledmatrix_update_pixel>
		
		default:
			break;
	}
	
}
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	08 95       	ret

000016ee <game_countdown>:

void game_countdown() {
    16ee:	8f 92       	push	r8
    16f0:	9f 92       	push	r9
    16f2:	af 92       	push	r10
    16f4:	bf 92       	push	r11
    16f6:	cf 92       	push	r12
    16f8:	df 92       	push	r13
    16fa:	ef 92       	push	r14
    16fc:	ff 92       	push	r15
	
	uint32_t current_time = get_current_time();
    16fe:	0e 94 8d 11 	call	0x231a	; 0x231a <get_current_time>
    1702:	4b 01       	movw	r8, r22
    1704:	5c 01       	movw	r10, r24
	uint32_t last_recorded_time = current_time;

	display_countdown(3); // display 1
    1706:	83 e0       	ldi	r24, 0x03	; 3
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <display_countdown>
	
	while (1) {
		//update current time
		current_time = get_current_time();
    170e:	0e 94 8d 11 	call	0x231a	; 0x231a <get_current_time>
    1712:	6b 01       	movw	r12, r22
    1714:	7c 01       	movw	r14, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    1716:	ab 01       	movw	r20, r22
    1718:	bc 01       	movw	r22, r24
    171a:	48 19       	sub	r20, r8
    171c:	59 09       	sbc	r21, r9
    171e:	6a 09       	sbc	r22, r10
    1720:	7b 09       	sbc	r23, r11
    1722:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <game_speed>
    1726:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <game_speed+0x1>
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	a0 e0       	ldi	r26, 0x00	; 0
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	48 17       	cp	r20, r24
    1734:	59 07       	cpc	r21, r25
    1736:	6a 07       	cpc	r22, r26
    1738:	7b 07       	cpc	r23, r27
    173a:	48 f3       	brcs	.-46     	; 0x170e <game_countdown+0x20>
			display_countdown(2); //display 2
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <display_countdown>
		}
	}
	
	while (1) {
		//update current time
		current_time = get_current_time();
    1744:	0e 94 8d 11 	call	0x231a	; 0x231a <get_current_time>
    1748:	4b 01       	movw	r8, r22
    174a:	5c 01       	movw	r10, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    174c:	ab 01       	movw	r20, r22
    174e:	bc 01       	movw	r22, r24
    1750:	4c 19       	sub	r20, r12
    1752:	5d 09       	sbc	r21, r13
    1754:	6e 09       	sbc	r22, r14
    1756:	7f 09       	sbc	r23, r15
    1758:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <game_speed>
    175c:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <game_speed+0x1>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	a0 e0       	ldi	r26, 0x00	; 0
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	48 17       	cp	r20, r24
    176a:	59 07       	cpc	r21, r25
    176c:	6a 07       	cpc	r22, r26
    176e:	7b 07       	cpc	r23, r27
    1770:	48 f3       	brcs	.-46     	; 0x1744 <game_countdown+0x56>
			display_countdown(1); //display 3
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <display_countdown>
		}
	}
	
	while (1) {
		//update current time
		current_time = get_current_time();
    177a:	0e 94 8d 11 	call	0x231a	; 0x231a <get_current_time>
    177e:	6b 01       	movw	r12, r22
    1780:	7c 01       	movw	r14, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    1782:	ab 01       	movw	r20, r22
    1784:	bc 01       	movw	r22, r24
    1786:	48 19       	sub	r20, r8
    1788:	59 09       	sbc	r21, r9
    178a:	6a 09       	sbc	r22, r10
    178c:	7b 09       	sbc	r23, r11
    178e:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <game_speed>
    1792:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <game_speed+0x1>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	a0 e0       	ldi	r26, 0x00	; 0
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	48 17       	cp	r20, r24
    17a0:	59 07       	cpc	r21, r25
    17a2:	6a 07       	cpc	r22, r26
    17a4:	7b 07       	cpc	r23, r27
    17a6:	48 f3       	brcs	.-46     	; 0x177a <game_countdown+0x8c>
			display_countdown(4); //display go
    17a8:	84 e0       	ldi	r24, 0x04	; 4
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <display_countdown>
		}
	}
																														//turn into a loop
	while (1) {
		//update current time
		current_time = get_current_time();
    17b0:	0e 94 8d 11 	call	0x231a	; 0x231a <get_current_time>
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    17b4:	ab 01       	movw	r20, r22
    17b6:	bc 01       	movw	r22, r24
    17b8:	4c 19       	sub	r20, r12
    17ba:	5d 09       	sbc	r21, r13
    17bc:	6e 09       	sbc	r22, r14
    17be:	7f 09       	sbc	r23, r15
    17c0:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <game_speed>
    17c4:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <game_speed+0x1>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	a0 e0       	ldi	r26, 0x00	; 0
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	48 17       	cp	r20, r24
    17d2:	59 07       	cpc	r21, r25
    17d4:	6a 07       	cpc	r22, r26
    17d6:	7b 07       	cpc	r23, r27
    17d8:	58 f3       	brcs	.-42     	; 0x17b0 <game_countdown+0xc2>
			break;
		}
	}
}
    17da:	ff 90       	pop	r15
    17dc:	ef 90       	pop	r14
    17de:	df 90       	pop	r13
    17e0:	cf 90       	pop	r12
    17e2:	bf 90       	pop	r11
    17e4:	af 90       	pop	r10
    17e6:	9f 90       	pop	r9
    17e8:	8f 90       	pop	r8
    17ea:	08 95       	ret

000017ec <ssd_display>:

void ssd_display() {
	//SSD section  //maybe put into the interrupt section
	//change displayed digit,
	int left_digit = points;
    17ec:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <points>
    17f0:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <points+0x1>
	int right_digit = 0;
	
	if (!((points < 10) && (points >= 0))) {
    17f4:	8a 30       	cpi	r24, 0x0A	; 10
    17f6:	91 05       	cpc	r25, r1
    17f8:	08 f4       	brcc	.+2      	; 0x17fc <ssd_display+0x10>
    17fa:	61 c0       	rjmp	.+194    	; 0x18be <ssd_display+0xd2>
		if ((points > 9) && (points < 100)) {
    17fc:	9c 01       	movw	r18, r24
    17fe:	2a 50       	subi	r18, 0x0A	; 10
    1800:	31 09       	sbc	r19, r1
    1802:	2a 35       	cpi	r18, 0x5A	; 90
    1804:	31 05       	cpc	r19, r1
    1806:	28 f4       	brcc	.+10     	; 0x1812 <ssd_display+0x26>
			left_digit = points	/ 10; // tens column
			right_digit = points % 10; //ones column
    1808:	6a e0       	ldi	r22, 0x0A	; 10
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	0e 94 19 14 	call	0x2832	; 0x2832 <__divmodhi4>
    1810:	2a c0       	rjmp	.+84     	; 0x1866 <ssd_display+0x7a>
		
		} else if ((points >= 100)) {
    1812:	84 36       	cpi	r24, 0x64	; 100
    1814:	91 05       	cpc	r25, r1
    1816:	7c f0       	brlt	.+30     	; 0x1836 <ssd_display+0x4a>
			left_digit = points /10 % 10; //tens column
    1818:	2a e0       	ldi	r18, 0x0A	; 10
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	b9 01       	movw	r22, r18
    181e:	0e 94 19 14 	call	0x2832	; 0x2832 <__divmodhi4>
    1822:	e8 2f       	mov	r30, r24
    1824:	49 2f       	mov	r20, r25
    1826:	cb 01       	movw	r24, r22
    1828:	b9 01       	movw	r22, r18
    182a:	0e 94 19 14 	call	0x2832	; 0x2832 <__divmodhi4>
    182e:	bc 01       	movw	r22, r24
			right_digit = points % 10;
    1830:	8e 2f       	mov	r24, r30
    1832:	94 2f       	mov	r25, r20
    1834:	18 c0       	rjmp	.+48     	; 0x1866 <ssd_display+0x7a>
			
		} else if ((points < 0) && (points > -10)) {
    1836:	9c 01       	movw	r18, r24
    1838:	27 5f       	subi	r18, 0xF7	; 247
    183a:	3f 4f       	sbci	r19, 0xFF	; 255
    183c:	29 30       	cpi	r18, 0x09	; 9
    183e:	31 05       	cpc	r19, r1
    1840:	30 f4       	brcc	.+12     	; 0x184e <ssd_display+0x62>
			right_digit = -1 * points;
    1842:	91 95       	neg	r25
    1844:	81 95       	neg	r24
    1846:	91 09       	sbc	r25, r1
			left_digit = 10;
    1848:	6a e0       	ldi	r22, 0x0A	; 10
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	0c c0       	rjmp	.+24     	; 0x1866 <ssd_display+0x7a>
	
		} else if (points <= -10) {
    184e:	87 3f       	cpi	r24, 0xF7	; 247
    1850:	2f ef       	ldi	r18, 0xFF	; 255
    1852:	92 07       	cpc	r25, r18
    1854:	24 f0       	brlt	.+8      	; 0x185e <ssd_display+0x72>
}

void ssd_display() {
	//SSD section  //maybe put into the interrupt section
	//change displayed digit,
	int left_digit = points;
    1856:	bc 01       	movw	r22, r24
	int right_digit = 0;
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	04 c0       	rjmp	.+8      	; 0x1866 <ssd_display+0x7a>
			right_digit = -1 * points;
			left_digit = 10;
	
		} else if (points <= -10) {
			//SSD displays "--"
			right_digit = 10;
    185e:	8a e0       	ldi	r24, 0x0A	; 10
    1860:	90 e0       	ldi	r25, 0x00	; 0
			left_digit = 10;
    1862:	6a e0       	ldi	r22, 0x0A	; 10
    1864:	70 e0       	ldi	r23, 0x00	; 0
		}
	
		if (seven_seg_cc) { //is seven_seg_cc, then ssd displays to the left
    1866:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <seven_seg_cc>
    186a:	30 91 20 05 	lds	r19, 0x0520	; 0x800520 <seven_seg_cc+0x1>
    186e:	23 2b       	or	r18, r19
    1870:	99 f0       	breq	.+38     	; 0x1898 <ssd_display+0xac>
			PORTD = PORTD | (1<<2);	
    1872:	8b b1       	in	r24, 0x0b	; 11
    1874:	84 60       	ori	r24, 0x04	; 4
    1876:	8b b9       	out	0x0b, r24	; 11
			PORTC = seven_seg_data[left_digit];
    1878:	fb 01       	movw	r30, r22
    187a:	ef 5f       	subi	r30, 0xFF	; 255
    187c:	fe 4f       	sbci	r31, 0xFE	; 254
    187e:	80 81       	ld	r24, Z
    1880:	88 b9       	out	0x08, r24	; 8
		
			seven_seg_cc ^= 1;
    1882:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <seven_seg_cc>
    1886:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <seven_seg_cc+0x1>
    188a:	21 e0       	ldi	r18, 0x01	; 1
    188c:	82 27       	eor	r24, r18
    188e:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <seven_seg_cc+0x1>
    1892:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <seven_seg_cc>
    1896:	08 95       	ret
		
		} else {
			PORTD = PORTD & 0b11111011;				//Display Right digit
    1898:	2b b1       	in	r18, 0x0b	; 11
    189a:	2b 7f       	andi	r18, 0xFB	; 251
    189c:	2b b9       	out	0x0b, r18	; 11
			PORTC = seven_seg_data[right_digit];
    189e:	fc 01       	movw	r30, r24
    18a0:	ef 5f       	subi	r30, 0xFF	; 255
    18a2:	fe 4f       	sbci	r31, 0xFE	; 254
    18a4:	80 81       	ld	r24, Z
    18a6:	88 b9       	out	0x08, r24	; 8
			
			seven_seg_cc ^= 1;
    18a8:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <seven_seg_cc>
    18ac:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <seven_seg_cc+0x1>
    18b0:	21 e0       	ldi	r18, 0x01	; 1
    18b2:	82 27       	eor	r24, r18
    18b4:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <seven_seg_cc+0x1>
    18b8:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <seven_seg_cc>
    18bc:	08 95       	ret
		}
		
	} else {
		if (seven_seg_cc) {
    18be:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <seven_seg_cc>
    18c2:	30 91 20 05 	lds	r19, 0x0520	; 0x800520 <seven_seg_cc+0x1>
    18c6:	23 2b       	or	r18, r19
    18c8:	31 f0       	breq	.+12     	; 0x18d6 <ssd_display+0xea>
			PORTC = seven_seg_data[left_digit];
    18ca:	fc 01       	movw	r30, r24
    18cc:	ef 5f       	subi	r30, 0xFF	; 255
    18ce:	fe 4f       	sbci	r31, 0xFE	; 254
    18d0:	80 81       	ld	r24, Z
    18d2:	88 b9       	out	0x08, r24	; 8
    18d4:	08 95       	ret
		} else {
			seven_seg_cc ^= 1;
    18d6:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <seven_seg_cc>
    18da:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <seven_seg_cc+0x1>
    18de:	21 e0       	ldi	r18, 0x01	; 1
    18e0:	82 27       	eor	r24, r18
    18e2:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <seven_seg_cc+0x1>
    18e6:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <seven_seg_cc>
    18ea:	08 95       	ret

000018ec <new_game>:
}

void new_game(void)
{
	// Clear the serial terminal
	clear_terminal();
    18ec:	0e 94 46 11 	call	0x228c	; 0x228c <clear_terminal>
	
	//reset number of points player has
	points = 0;
    18f0:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <points+0x1>
    18f4:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <points>
	combo_count = 0;
    18f8:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <combo_count+0x1>
    18fc:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <combo_count>
	
	//Start Game Countdown
	game_countdown();								
    1900:	0e 94 77 0b 	call	0x16ee	; 0x16ee <game_countdown>
		
	// Initialize the game and display
	initialise_game();
    1904:	0e 94 93 04 	call	0x926	; 0x926 <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    1908:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
	clear_serial_input_buffer();
    190c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <clear_serial_input_buffer>
    1910:	08 95       	ret

00001912 <play_game>:
}

void play_game(void)
{
    1912:	4f 92       	push	r4
    1914:	5f 92       	push	r5
    1916:	6f 92       	push	r6
    1918:	7f 92       	push	r7
    191a:	8f 92       	push	r8
    191c:	9f 92       	push	r9
    191e:	af 92       	push	r10
    1920:	bf 92       	push	r11
    1922:	cf 92       	push	r12
    1924:	df 92       	push	r13
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	00 d0       	rcall	.+0      	; 0x1934 <play_game+0x22>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <play_game+0x24>
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
	
	int8_t btn; // The button pushed
	
	int combo_line = 0;
	
	last_advance_time = get_current_time();
    193a:	0e 94 8d 11 	call	0x231a	; 0x231a <get_current_time>
    193e:	2b 01       	movw	r4, r22
    1940:	3c 01       	movw	r6, r24
	
	//Display current track
	move_terminal_cursor(10, 15);
    1942:	6f e0       	ldi	r22, 0x0F	; 15
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	8a e0       	ldi	r24, 0x0A	; 10
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	printf("Track: %s", track_name);													//do %s and add a new track title at the end.
    194e:	80 e3       	ldi	r24, 0x30	; 48
    1950:	95 e0       	ldi	r25, 0x05	; 5
    1952:	9f 93       	push	r25
    1954:	8f 93       	push	r24
    1956:	8e e5       	ldi	r24, 0x5E	; 94
    1958:	92 e0       	ldi	r25, 0x02	; 2
    195a:	9f 93       	push	r25
    195c:	8f 93       	push	r24
    195e:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
	
	move_terminal_cursor(10, 18);
    1962:	62 e1       	ldi	r22, 0x12	; 18
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	8a e0       	ldi	r24, 0x0A	; 10
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	clear_to_end_of_line();
    196e:	0e 94 4f 11 	call	0x229e	; 0x229e <clear_to_end_of_line>
	//update terminal line appropriately
	if (game_speed == 1000) {
    1972:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <game_speed>
    1976:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <game_speed+0x1>
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	88 3e       	cpi	r24, 0xE8	; 232
    1984:	23 e0       	ldi	r18, 0x03	; 3
    1986:	92 07       	cpc	r25, r18
    1988:	69 f4       	brne	.+26     	; 0x19a4 <play_game+0x92>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    198a:	9f 93       	push	r25
    198c:	8f 93       	push	r24
    198e:	88 e6       	ldi	r24, 0x68	; 104
    1990:	92 e0       	ldi	r25, 0x02	; 2
    1992:	9f 93       	push	r25
    1994:	8f 93       	push	r24
    1996:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	20 c0       	rjmp	.+64     	; 0x19e4 <play_game+0xd2>
		
	} else if (game_speed == 500) {
    19a4:	84 3f       	cpi	r24, 0xF4	; 244
    19a6:	31 e0       	ldi	r19, 0x01	; 1
    19a8:	93 07       	cpc	r25, r19
    19aa:	69 f4       	brne	.+26     	; 0x19c6 <play_game+0xb4>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    19ac:	9f 93       	push	r25
    19ae:	8f 93       	push	r24
    19b0:	8e e8       	ldi	r24, 0x8E	; 142
    19b2:	92 e0       	ldi	r25, 0x02	; 2
    19b4:	9f 93       	push	r25
    19b6:	8f 93       	push	r24
    19b8:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <play_game+0xd2>
		
	} else if (game_speed == 250) {
    19c6:	8a 3f       	cpi	r24, 0xFA	; 250
    19c8:	91 05       	cpc	r25, r1
    19ca:	61 f4       	brne	.+24     	; 0x19e4 <play_game+0xd2>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    19cc:	9f 93       	push	r25
    19ce:	8f 93       	push	r24
    19d0:	82 eb       	ldi	r24, 0xB2	; 178
    19d2:	92 e0       	ldi	r25, 0x02	; 2
    19d4:	9f 93       	push	r25
    19d6:	8f 93       	push	r24
    19d8:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
		if (!man_mode & !paused) {
			current_time = get_current_time();
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
			{
				pause_time = 0;
    19e4:	00 e0       	ldi	r16, 0x00	; 0
    19e6:	10 e0       	ldi	r17, 0x00	; 0
    19e8:	81 2c       	mov	r8, r1
    19ea:	91 2c       	mov	r9, r1
    19ec:	54 01       	movw	r10, r8
    19ee:	f8 c1       	rjmp	.+1008   	; 0x1de0 <play_game+0x4ce>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
    19f0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    19f4:	89 83       	std	Y+1, r24	; 0x01
		
		char keyboard_input = -1;
		
		if (serial_input_available()) {
    19f6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <serial_input_available>
    19fa:	88 23       	and	r24, r24
    19fc:	41 f0       	breq	.+16     	; 0x1a0e <play_game+0xfc>
			keyboard_input = fgetc(stdin);
    19fe:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <__iob>
    1a02:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <__iob+0x1>
    1a06:	0e 94 91 14 	call	0x2922	; 0x2922 <fgetc>
    1a0a:	f8 2e       	mov	r15, r24
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <play_game+0x100>
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
		
		char keyboard_input = -1;
    1a0e:	ff 24       	eor	r15, r15
    1a10:	fa 94       	dec	r15
		
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		if (!paused) {
    1a12:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <paused>
    1a16:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <paused+0x1>
    1a1a:	89 2b       	or	r24, r25
    1a1c:	99 f5       	brne	.+102    	; 0x1a84 <play_game+0x172>
			if ((btn == BUTTON0_PUSHED) || (keyboard_input == 'f' || keyboard_input == 'F')) {
    1a1e:	49 81       	ldd	r20, Y+1	; 0x01
    1a20:	44 23       	and	r20, r20
    1a22:	31 f0       	breq	.+12     	; 0x1a30 <play_game+0x11e>
    1a24:	56 e6       	ldi	r21, 0x66	; 102
    1a26:	f5 16       	cp	r15, r21
    1a28:	19 f0       	breq	.+6      	; 0x1a30 <play_game+0x11e>
    1a2a:	86 e4       	ldi	r24, 0x46	; 70
    1a2c:	f8 12       	cpse	r15, r24
    1a2e:	04 c0       	rjmp	.+8      	; 0x1a38 <play_game+0x126>
				// If button 0 play the lowest note (right lane)
				play_note(3);
    1a30:	83 e0       	ldi	r24, 0x03	; 3
    1a32:	0e 94 a4 04 	call	0x948	; 0x948 <play_note>
    1a36:	26 c0       	rjmp	.+76     	; 0x1a84 <play_game+0x172>
		
			} else if ((btn == BUTTON1_PUSHED) || (keyboard_input == 'd' || keyboard_input == 'D')) {
    1a38:	99 81       	ldd	r25, Y+1	; 0x01
    1a3a:	91 30       	cpi	r25, 0x01	; 1
    1a3c:	31 f0       	breq	.+12     	; 0x1a4a <play_game+0x138>
    1a3e:	24 e6       	ldi	r18, 0x64	; 100
    1a40:	f2 16       	cp	r15, r18
    1a42:	19 f0       	breq	.+6      	; 0x1a4a <play_game+0x138>
    1a44:	34 e4       	ldi	r19, 0x44	; 68
    1a46:	f3 12       	cpse	r15, r19
    1a48:	04 c0       	rjmp	.+8      	; 0x1a52 <play_game+0x140>
				//If button 1 is pushed play the second lowest note
				play_note(2);		
    1a4a:	82 e0       	ldi	r24, 0x02	; 2
    1a4c:	0e 94 a4 04 	call	0x948	; 0x948 <play_note>
    1a50:	19 c0       	rjmp	.+50     	; 0x1a84 <play_game+0x172>
		
			} else if ((btn == BUTTON2_PUSHED) || (keyboard_input == 's' || keyboard_input == 'S')) {
    1a52:	49 81       	ldd	r20, Y+1	; 0x01
    1a54:	42 30       	cpi	r20, 0x02	; 2
    1a56:	31 f0       	breq	.+12     	; 0x1a64 <play_game+0x152>
    1a58:	53 e7       	ldi	r21, 0x73	; 115
    1a5a:	f5 16       	cp	r15, r21
    1a5c:	19 f0       	breq	.+6      	; 0x1a64 <play_game+0x152>
    1a5e:	83 e5       	ldi	r24, 0x53	; 83
    1a60:	f8 12       	cpse	r15, r24
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <play_game+0x15a>
				//If button 2 is pushed play the second highest note
				play_note(1); 
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	0e 94 a4 04 	call	0x948	; 0x948 <play_note>
    1a6a:	0c c0       	rjmp	.+24     	; 0x1a84 <play_game+0x172>
				
			} else if ((btn == BUTTON3_PUSHED) || (keyboard_input == 'a' || keyboard_input == 'A')) {
    1a6c:	99 81       	ldd	r25, Y+1	; 0x01
    1a6e:	93 30       	cpi	r25, 0x03	; 3
    1a70:	31 f0       	breq	.+12     	; 0x1a7e <play_game+0x16c>
    1a72:	21 e6       	ldi	r18, 0x61	; 97
    1a74:	f2 16       	cp	r15, r18
    1a76:	19 f0       	breq	.+6      	; 0x1a7e <play_game+0x16c>
    1a78:	31 e4       	ldi	r19, 0x41	; 65
    1a7a:	f3 12       	cpse	r15, r19
    1a7c:	03 c0       	rjmp	.+6      	; 0x1a84 <play_game+0x172>
				//If button 3 is pushed play the highest note
				play_note(0);
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	0e 94 a4 04 	call	0x948	; 0x948 <play_note>
			
			} 
		}
		
		if (keyboard_input == 'm' || keyboard_input == 'M') {
    1a84:	4d e6       	ldi	r20, 0x6D	; 109
    1a86:	f4 16       	cp	r15, r20
    1a88:	19 f0       	breq	.+6      	; 0x1a90 <play_game+0x17e>
    1a8a:	5d e4       	ldi	r21, 0x4D	; 77
    1a8c:	f5 12       	cpse	r15, r21
    1a8e:	27 c0       	rjmp	.+78     	; 0x1ade <play_game+0x1cc>
			//check to see if the game is currently paused
			if (!paused) {
    1a90:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <paused>
    1a94:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <paused+0x1>
    1a98:	89 2b       	or	r24, r25
    1a9a:	09 f5       	brne	.+66     	; 0x1ade <play_game+0x1cc>
				//clear manual mode alert
				move_terminal_cursor(10, 16);
    1a9c:	60 e1       	ldi	r22, 0x10	; 16
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	8a e0       	ldi	r24, 0x0A	; 10
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
				clear_to_end_of_line();
    1aa8:	0e 94 4f 11 	call	0x229e	; 0x229e <clear_to_end_of_line>
				if (man_mode) {
    1aac:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <man_mode>
    1ab0:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <man_mode+0x1>
    1ab4:	89 2b       	or	r24, r25
    1ab6:	29 f0       	breq	.+10     	; 0x1ac2 <play_game+0x1b0>
					man_mode = 0;
    1ab8:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <man_mode+0x1>
    1abc:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <man_mode>
    1ac0:	0e c0       	rjmp	.+28     	; 0x1ade <play_game+0x1cc>
		
				} else {
					man_mode = 1;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	90 93 24 05 	sts	0x0524, r25	; 0x800524 <man_mode+0x1>
    1aca:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <man_mode>
					
					//print to terminal that manual mode is on
					printf("Manual Mode: ON");
    1ace:	89 ed       	ldi	r24, 0xD9	; 217
    1ad0:	92 e0       	ldi	r25, 0x02	; 2
    1ad2:	9f 93       	push	r25
    1ad4:	8f 93       	push	r24
    1ad6:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
				}
			}	
		}
		
		if (keyboard_input == 'p' || keyboard_input == 'P') {
    1ade:	80 e7       	ldi	r24, 0x70	; 112
    1ae0:	f8 16       	cp	r15, r24
    1ae2:	19 f0       	breq	.+6      	; 0x1aea <play_game+0x1d8>
    1ae4:	90 e5       	ldi	r25, 0x50	; 80
    1ae6:	f9 12       	cpse	r15, r25
    1ae8:	3b c0       	rjmp	.+118    	; 0x1b60 <play_game+0x24e>
			//clear pause line in terminal
			move_terminal_cursor(10, 17);
    1aea:	61 e1       	ldi	r22, 0x11	; 17
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	8a e0       	ldi	r24, 0x0A	; 10
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
			clear_to_end_of_line();
    1af6:	0e 94 4f 11 	call	0x229e	; 0x229e <clear_to_end_of_line>
			if (paused) {
    1afa:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <paused>
    1afe:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <paused+0x1>
    1b02:	89 2b       	or	r24, r25
    1b04:	71 f0       	breq	.+28     	; 0x1b22 <play_game+0x210>
				paused = 0;
    1b06:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <paused+0x1>
    1b0a:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <paused>
				PORTD = PORTD & 0b11110111;
    1b0e:	8b b1       	in	r24, 0x0b	; 11
    1b10:	87 7f       	andi	r24, 0xF7	; 247
    1b12:	8b b9       	out	0x0b, r24	; 11
				
				//un-pause sound
				pause_control(paused);
    1b14:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <paused>
    1b18:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <paused+0x1>
    1b1c:	0e 94 37 12 	call	0x246e	; 0x246e <pause_control>
    1b20:	1f c0       	rjmp	.+62     	; 0x1b60 <play_game+0x24e>
			
			} else {
				paused = 1;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	90 93 22 05 	sts	0x0522, r25	; 0x800522 <paused+0x1>
    1b2a:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <paused>
				pause_time = get_current_time() - last_advance_time; 
    1b2e:	0e 94 8d 11 	call	0x231a	; 0x231a <get_current_time>
    1b32:	4b 01       	movw	r8, r22
    1b34:	5c 01       	movw	r10, r24
    1b36:	84 18       	sub	r8, r4
    1b38:	95 08       	sbc	r9, r5
    1b3a:	a6 08       	sbc	r10, r6
    1b3c:	b7 08       	sbc	r11, r7
					
				PORTD = PORTD | (1<<3); //essentially just PORTD | 0b00001000
    1b3e:	8b b1       	in	r24, 0x0b	; 11
    1b40:	88 60       	ori	r24, 0x08	; 8
    1b42:	8b b9       	out	0x0b, r24	; 11
									
				//pause the sound
				pause_control(paused);
    1b44:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <paused>
    1b48:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <paused+0x1>
    1b4c:	0e 94 37 12 	call	0x246e	; 0x246e <pause_control>
					
				//tell user that game is currently paused
				printf("Game Paused");
    1b50:	89 ee       	ldi	r24, 0xE9	; 233
    1b52:	92 e0       	ldi	r25, 0x02	; 2
    1b54:	9f 93       	push	r25
    1b56:	8f 93       	push	r24
    1b58:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
			}
				
		}
		
		//Combo IO board LED's
		if (combo_count == 0) {
    1b60:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <combo_count>
    1b64:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <combo_count+0x1>
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	21 f4       	brne	.+8      	; 0x1b74 <play_game+0x262>
			//set portD outputs to the I/O boards LED matrix to be 0
			PORTD = PORTD & 0b00011111;
    1b6c:	8b b1       	in	r24, 0x0b	; 11
    1b6e:	8f 71       	andi	r24, 0x1F	; 31
    1b70:	8b b9       	out	0x0b, r24	; 11
    1b72:	13 c0       	rjmp	.+38     	; 0x1b9a <play_game+0x288>

		} else if (combo_count == 1) {
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	91 05       	cpc	r25, r1
    1b78:	21 f4       	brne	.+8      	; 0x1b82 <play_game+0x270>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<5); 
    1b7a:	8b b1       	in	r24, 0x0b	; 11
    1b7c:	80 62       	ori	r24, 0x20	; 32
    1b7e:	8b b9       	out	0x0b, r24	; 11
    1b80:	0c c0       	rjmp	.+24     	; 0x1b9a <play_game+0x288>
			
		} else if (combo_count == 2) {
    1b82:	82 30       	cpi	r24, 0x02	; 2
    1b84:	91 05       	cpc	r25, r1
    1b86:	21 f4       	brne	.+8      	; 0x1b90 <play_game+0x27e>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<6);
    1b88:	8b b1       	in	r24, 0x0b	; 11
    1b8a:	80 64       	ori	r24, 0x40	; 64
    1b8c:	8b b9       	out	0x0b, r24	; 11
    1b8e:	05 c0       	rjmp	.+10     	; 0x1b9a <play_game+0x288>
			
		} else if (combo_count >= 3) {
    1b90:	03 97       	sbiw	r24, 0x03	; 3
    1b92:	1c f0       	brlt	.+6      	; 0x1b9a <play_game+0x288>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<7);
    1b94:	8b b1       	in	r24, 0x0b	; 11
    1b96:	80 68       	ori	r24, 0x80	; 128
    1b98:	8b b9       	out	0x0b, r24	; 11
		}
		
		//Combo display
		if ((combo_check) && (combo_line == 0)) {
    1b9a:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <combo_check>
    1b9e:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <combo_check+0x1>
    1ba2:	89 2b       	or	r24, r25
    1ba4:	a1 f0       	breq	.+40     	; 0x1bce <play_game+0x2bc>
    1ba6:	01 15       	cp	r16, r1
    1ba8:	11 05       	cpc	r17, r1
    1baa:	89 f4       	brne	.+34     	; 0x1bce <play_game+0x2bc>
			move_terminal_cursor(10, 3);
    1bac:	63 e0       	ldi	r22, 0x03	; 3
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	8a e0       	ldi	r24, 0x0A	; 10
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
			printf("  ______                           __                  __");
    1bb8:	85 ef       	ldi	r24, 0xF5	; 245
    1bba:	92 e0       	ldi	r25, 0x02	; 2
    1bbc:	9f 93       	push	r25
    1bbe:	8f 93       	push	r24
    1bc0:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
			
			combo_line++; //increment combo line so in next loop the next line is printed of ascii art
    1bc4:	0f 5f       	subi	r16, 0xFF	; 255
    1bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	9f c0       	rjmp	.+318    	; 0x1d0c <play_game+0x3fa>
		} else if (combo_line == 1) {
    1bce:	01 30       	cpi	r16, 0x01	; 1
    1bd0:	11 05       	cpc	r17, r1
    1bd2:	89 f4       	brne	.+34     	; 0x1bf6 <play_game+0x2e4>
			move_terminal_cursor(10,4);
    1bd4:	64 e0       	ldi	r22, 0x04	; 4
    1bd6:	70 e0       	ldi	r23, 0x00	; 0
    1bd8:	8a e0       	ldi	r24, 0x0A	; 10
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
			printf(" /      \\                         |  \\                |  \\");
    1be0:	8f e2       	ldi	r24, 0x2F	; 47
    1be2:	93 e0       	ldi	r25, 0x03	; 3
    1be4:	9f 93       	push	r25
    1be6:	8f 93       	push	r24
    1be8:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
			
			combo_line++;
    1bec:	0f 5f       	subi	r16, 0xFF	; 255
    1bee:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	8b c0       	rjmp	.+278    	; 0x1d0c <play_game+0x3fa>
		} else if (combo_line == 2) {
    1bf6:	02 30       	cpi	r16, 0x02	; 2
    1bf8:	11 05       	cpc	r17, r1
    1bfa:	89 f4       	brne	.+34     	; 0x1c1e <play_game+0x30c>
			move_terminal_cursor(10,5);
    1bfc:	65 e0       	ldi	r22, 0x05	; 5
    1bfe:	70 e0       	ldi	r23, 0x00	; 0
    1c00:	8a e0       	ldi	r24, 0x0A	; 10
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
			printf("|  $$$$$$\\  ______   ______ ____  | $$____    ______  | $$");
    1c08:	8a e6       	ldi	r24, 0x6A	; 106
    1c0a:	93 e0       	ldi	r25, 0x03	; 3
    1c0c:	9f 93       	push	r25
    1c0e:	8f 93       	push	r24
    1c10:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
			
			combo_line++;
    1c14:	0f 5f       	subi	r16, 0xFF	; 255
    1c16:	1f 4f       	sbci	r17, 0xFF	; 255
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	77 c0       	rjmp	.+238    	; 0x1d0c <play_game+0x3fa>
		} else if (combo_line == 3) {
    1c1e:	03 30       	cpi	r16, 0x03	; 3
    1c20:	11 05       	cpc	r17, r1
    1c22:	89 f4       	brne	.+34     	; 0x1c46 <play_game+0x334>
			move_terminal_cursor(10,6);
    1c24:	66 e0       	ldi	r22, 0x06	; 6
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	8a e0       	ldi	r24, 0x0A	; 10
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
			printf("| $$   \\$$ /      \\ |      \\    \\ | $$    \\  /      \\ | $$");
    1c30:	85 ea       	ldi	r24, 0xA5	; 165
    1c32:	93 e0       	ldi	r25, 0x03	; 3
    1c34:	9f 93       	push	r25
    1c36:	8f 93       	push	r24
    1c38:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
			
			combo_line++;
    1c3c:	0f 5f       	subi	r16, 0xFF	; 255
    1c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	63 c0       	rjmp	.+198    	; 0x1d0c <play_game+0x3fa>
		} else if (combo_line == 4) {
    1c46:	04 30       	cpi	r16, 0x04	; 4
    1c48:	11 05       	cpc	r17, r1
    1c4a:	89 f4       	brne	.+34     	; 0x1c6e <play_game+0x35c>
			move_terminal_cursor(10,7);
    1c4c:	67 e0       	ldi	r22, 0x07	; 7
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	8a e0       	ldi	r24, 0x0A	; 10
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
			printf("| $$      |  $$$$$$\\| $$$$$$\\$$$$\\| $$$$$$$\\|  $$$$$$\\| $$");
    1c58:	80 ee       	ldi	r24, 0xE0	; 224
    1c5a:	93 e0       	ldi	r25, 0x03	; 3
    1c5c:	9f 93       	push	r25
    1c5e:	8f 93       	push	r24
    1c60:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
			
			combo_line++;
    1c64:	0f 5f       	subi	r16, 0xFF	; 255
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	4f c0       	rjmp	.+158    	; 0x1d0c <play_game+0x3fa>
		}  else if (combo_line == 5) {
    1c6e:	05 30       	cpi	r16, 0x05	; 5
    1c70:	11 05       	cpc	r17, r1
    1c72:	89 f4       	brne	.+34     	; 0x1c96 <play_game+0x384>
			move_terminal_cursor(10,8);
    1c74:	68 e0       	ldi	r22, 0x08	; 8
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	8a e0       	ldi	r24, 0x0A	; 10
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
			printf("| $$   __ | $$  | $$| $$ | $$ | $$| $$  | $$| $$  | $$ \\$$");
    1c80:	8b e1       	ldi	r24, 0x1B	; 27
    1c82:	94 e0       	ldi	r25, 0x04	; 4
    1c84:	9f 93       	push	r25
    1c86:	8f 93       	push	r24
    1c88:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
			
			combo_line++;
    1c8c:	0f 5f       	subi	r16, 0xFF	; 255
    1c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	3b c0       	rjmp	.+118    	; 0x1d0c <play_game+0x3fa>
		} else if (combo_line == 6) {
    1c96:	06 30       	cpi	r16, 0x06	; 6
    1c98:	11 05       	cpc	r17, r1
    1c9a:	89 f4       	brne	.+34     	; 0x1cbe <play_game+0x3ac>
			move_terminal_cursor(10,9);
    1c9c:	69 e0       	ldi	r22, 0x09	; 9
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	8a e0       	ldi	r24, 0x0A	; 10
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
			printf("| $$__/  \\| $$__/ $$| $$ | $$ | $$| $$__/ $$| $$__/ $$ __");
    1ca8:	86 e5       	ldi	r24, 0x56	; 86
    1caa:	94 e0       	ldi	r25, 0x04	; 4
    1cac:	9f 93       	push	r25
    1cae:	8f 93       	push	r24
    1cb0:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
			
			combo_line++;
    1cb4:	0f 5f       	subi	r16, 0xFF	; 255
    1cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	27 c0       	rjmp	.+78     	; 0x1d0c <play_game+0x3fa>
		} else if (combo_line == 7) {
    1cbe:	07 30       	cpi	r16, 0x07	; 7
    1cc0:	11 05       	cpc	r17, r1
    1cc2:	89 f4       	brne	.+34     	; 0x1ce6 <play_game+0x3d4>
			move_terminal_cursor(10,10);
    1cc4:	6a e0       	ldi	r22, 0x0A	; 10
    1cc6:	70 e0       	ldi	r23, 0x00	; 0
    1cc8:	8a e0       	ldi	r24, 0x0A	; 10
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
			printf(" \\$$    $$ \\$$    $$| $$ | $$ | $$| $$    $$ \\$$    $$|  \\");
    1cd0:	80 e9       	ldi	r24, 0x90	; 144
    1cd2:	94 e0       	ldi	r25, 0x04	; 4
    1cd4:	9f 93       	push	r25
    1cd6:	8f 93       	push	r24
    1cd8:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
			
			combo_line++;
    1cdc:	0f 5f       	subi	r16, 0xFF	; 255
    1cde:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	13 c0       	rjmp	.+38     	; 0x1d0c <play_game+0x3fa>
		} else if (combo_line == 8) {
    1ce6:	08 30       	cpi	r16, 0x08	; 8
    1ce8:	11 05       	cpc	r17, r1
    1cea:	81 f4       	brne	.+32     	; 0x1d0c <play_game+0x3fa>
			move_terminal_cursor(10,11);
    1cec:	6b e0       	ldi	r22, 0x0B	; 11
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	8a e0       	ldi	r24, 0x0A	; 10
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
			printf("  \\$$$$$$   \\$$$$$$  \\$$  \\$$  \\$$ \\$$$$$$$   \\$$$$$$  \\$$");
    1cf8:	8b ec       	ldi	r24, 0xCB	; 203
    1cfa:	94 e0       	ldi	r25, 0x04	; 4
    1cfc:	9f 93       	push	r25
    1cfe:	8f 93       	push	r24
    1d00:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
			
			combo_line = 0;
    1d08:	00 e0       	ldi	r16, 0x00	; 0
    1d0a:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		if (!combo_check) {
    1d0c:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <combo_check>
    1d10:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <combo_check+0x1>
    1d14:	89 2b       	or	r24, r25
    1d16:	81 f0       	breq	.+32     	; 0x1d38 <play_game+0x426>
    1d18:	17 c0       	rjmp	.+46     	; 0x1d48 <play_game+0x436>
			for (int term_line = 3; term_line < 12; term_line++) {
				move_terminal_cursor(10, term_line);
    1d1a:	69 81       	ldd	r22, Y+1	; 0x01
    1d1c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d1e:	8a e0       	ldi	r24, 0x0A	; 10
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
				clear_to_end_of_line();
    1d26:	0e 94 4f 11 	call	0x229e	; 0x229e <clear_to_end_of_line>
			
			combo_line = 0;
		}
		
		if (!combo_check) {
			for (int term_line = 3; term_line < 12; term_line++) {
    1d2a:	29 81       	ldd	r18, Y+1	; 0x01
    1d2c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d2e:	2f 5f       	subi	r18, 0xFF	; 255
    1d30:	3f 4f       	sbci	r19, 0xFF	; 255
    1d32:	3a 83       	std	Y+2, r19	; 0x02
    1d34:	29 83       	std	Y+1, r18	; 0x01
    1d36:	04 c0       	rjmp	.+8      	; 0x1d40 <play_game+0x42e>
    1d38:	43 e0       	ldi	r20, 0x03	; 3
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	5a 83       	std	Y+2, r21	; 0x02
    1d3e:	49 83       	std	Y+1, r20	; 0x01
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	9a 81       	ldd	r25, Y+2	; 0x02
    1d44:	0c 97       	sbiw	r24, 0x0c	; 12
    1d46:	4c f3       	brlt	.-46     	; 0x1d1a <play_game+0x408>
				
			}	
		}
		

		if (!man_mode & !paused) {
    1d48:	20 91 23 05 	lds	r18, 0x0523	; 0x800523 <man_mode>
    1d4c:	30 91 24 05 	lds	r19, 0x0524	; 0x800524 <man_mode+0x1>
    1d50:	91 e0       	ldi	r25, 0x01	; 1
    1d52:	40 91 21 05 	lds	r20, 0x0521	; 0x800521 <paused>
    1d56:	50 91 22 05 	lds	r21, 0x0522	; 0x800522 <paused+0x1>
    1d5a:	45 2b       	or	r20, r21
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <play_game+0x44e>
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	21 15       	cp	r18, r1
    1d64:	31 05       	cpc	r19, r1
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <play_game+0x458>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	89 23       	and	r24, r25
    1d6c:	69 f1       	breq	.+90     	; 0x1dc8 <play_game+0x4b6>
			current_time = get_current_time();
    1d6e:	0e 94 8d 11 	call	0x231a	; 0x231a <get_current_time>
    1d72:	69 83       	std	Y+1, r22	; 0x01
    1d74:	7a 83       	std	Y+2, r23	; 0x02
    1d76:	8b 83       	std	Y+3, r24	; 0x03
    1d78:	9c 83       	std	Y+4, r25	; 0x04
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
    1d7a:	6b 01       	movw	r12, r22
    1d7c:	7c 01       	movw	r14, r24
    1d7e:	c8 18       	sub	r12, r8
    1d80:	d9 08       	sbc	r13, r9
    1d82:	ea 08       	sbc	r14, r10
    1d84:	fb 08       	sbc	r15, r11
    1d86:	20 91 57 05 	lds	r18, 0x0557	; 0x800557 <game_speed>
    1d8a:	30 91 58 05 	lds	r19, 0x0558	; 0x800558 <game_speed+0x1>
    1d8e:	ad ec       	ldi	r26, 0xCD	; 205
    1d90:	bc ec       	ldi	r27, 0xCC	; 204
    1d92:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__umulhisi3>
    1d96:	96 95       	lsr	r25
    1d98:	87 95       	ror	r24
    1d9a:	96 95       	lsr	r25
    1d9c:	87 95       	ror	r24
    1d9e:	a3 01       	movw	r20, r6
    1da0:	92 01       	movw	r18, r4
    1da2:	28 0f       	add	r18, r24
    1da4:	39 1f       	adc	r19, r25
    1da6:	41 1d       	adc	r20, r1
    1da8:	51 1d       	adc	r21, r1
    1daa:	c2 16       	cp	r12, r18
    1dac:	d3 06       	cpc	r13, r19
    1dae:	e4 06       	cpc	r14, r20
    1db0:	f5 06       	cpc	r15, r21
    1db2:	b0 f0       	brcs	.+44     	; 0x1de0 <play_game+0x4ce>
			{
				pause_time = 0;
				// 200ms (0.2 second) has passed since the last time we advance the
				// notes here, so update the advance the notes
				advance_note();
    1db4:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <advance_note>
				
				// Update the most recent time the notes were advanced
				last_advance_time = current_time;
    1db8:	49 80       	ldd	r4, Y+1	; 0x01
    1dba:	5a 80       	ldd	r5, Y+2	; 0x02
    1dbc:	6b 80       	ldd	r6, Y+3	; 0x03
    1dbe:	7c 80       	ldd	r7, Y+4	; 0x04
		if (!man_mode & !paused) {
			current_time = get_current_time();
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
			{
				pause_time = 0;
    1dc0:	81 2c       	mov	r8, r1
    1dc2:	91 2c       	mov	r9, r1
    1dc4:	54 01       	movw	r10, r8
    1dc6:	0c c0       	rjmp	.+24     	; 0x1de0 <play_game+0x4ce>
				
				// Update the most recent time the notes were advanced
				last_advance_time = current_time;
			}
			
		} else if (man_mode) {
    1dc8:	23 2b       	or	r18, r19
    1dca:	51 f0       	breq	.+20     	; 0x1de0 <play_game+0x4ce>
			if (keyboard_input == 'n' || keyboard_input == 'N') {
    1dcc:	3e e6       	ldi	r19, 0x6E	; 110
    1dce:	f3 16       	cp	r15, r19
    1dd0:	19 f0       	breq	.+6      	; 0x1dd8 <play_game+0x4c6>
    1dd2:	4e e4       	ldi	r20, 0x4E	; 78
    1dd4:	f4 12       	cpse	r15, r20
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <play_game+0x4ca>
				advance_note();
    1dd8:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <advance_note>
			}
			draw_notes();
    1ddc:	0e 94 6d 04 	call	0x8da	; 0x8da <draw_notes>
	} else if (game_speed == 250) {
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
	}
	
	// We play the game until it's over
	while (!is_game_over())
    1de0:	0e 94 84 07 	call	0xf08	; 0xf08 <is_game_over>
    1de4:	88 23       	and	r24, r24
    1de6:	09 f4       	brne	.+2      	; 0x1dea <play_game+0x4d8>
    1de8:	03 ce       	rjmp	.-1018   	; 0x19f0 <play_game+0xde>
				advance_note();
			}
			draw_notes();
		}
	}
}
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	df 91       	pop	r29
    1df4:	cf 91       	pop	r28
    1df6:	1f 91       	pop	r17
    1df8:	0f 91       	pop	r16
    1dfa:	ff 90       	pop	r15
    1dfc:	ef 90       	pop	r14
    1dfe:	df 90       	pop	r13
    1e00:	cf 90       	pop	r12
    1e02:	bf 90       	pop	r11
    1e04:	af 90       	pop	r10
    1e06:	9f 90       	pop	r9
    1e08:	8f 90       	pop	r8
    1e0a:	7f 90       	pop	r7
    1e0c:	6f 90       	pop	r6
    1e0e:	5f 90       	pop	r5
    1e10:	4f 90       	pop	r4
    1e12:	08 95       	ret

00001e14 <handle_game_over>:

void handle_game_over()
{
	clear_terminal();
    1e14:	0e 94 46 11 	call	0x228c	; 0x228c <clear_terminal>
	move_terminal_cursor(10,13);
    1e18:	6d e0       	ldi	r22, 0x0D	; 13
    1e1a:	70 e0       	ldi	r23, 0x00	; 0
    1e1c:	8a e0       	ldi	r24, 0x0A	; 10
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    1e24:	8a ea       	ldi	r24, 0xAA	; 170
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	9f 93       	push	r25
    1e2a:	8f 93       	push	r24
    1e2c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
	move_terminal_cursor(10,14);
    1e30:	6e e0       	ldi	r22, 0x0E	; 14
    1e32:	70 e0       	ldi	r23, 0x00	; 0
    1e34:	8a e0       	ldi	r24, 0x0A	; 10
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	printf("Final Score: %d\n", points);
    1e3c:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <points+0x1>
    1e40:	8f 93       	push	r24
    1e42:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <points>
    1e46:	8f 93       	push	r24
    1e48:	86 e0       	ldi	r24, 0x06	; 6
    1e4a:	95 e0       	ldi	r25, 0x05	; 5
    1e4c:	9f 93       	push	r25
    1e4e:	8f 93       	push	r24
    1e50:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
	//Display current track
	move_terminal_cursor(10, 15);
    1e54:	6f e0       	ldi	r22, 0x0F	; 15
    1e56:	70 e0       	ldi	r23, 0x00	; 0
    1e58:	8a e0       	ldi	r24, 0x0A	; 10
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	printf("Track: %s", track_name);														//do %s and add a new track title at the end.
    1e60:	80 e3       	ldi	r24, 0x30	; 48
    1e62:	95 e0       	ldi	r25, 0x05	; 5
    1e64:	9f 93       	push	r25
    1e66:	8f 93       	push	r24
    1e68:	8e e5       	ldi	r24, 0x5E	; 94
    1e6a:	92 e0       	ldi	r25, 0x02	; 2
    1e6c:	9f 93       	push	r25
    1e6e:	8f 93       	push	r24
    1e70:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
	move_terminal_cursor(10, 16);
    1e74:	60 e1       	ldi	r22, 0x10	; 16
    1e76:	70 e0       	ldi	r23, 0x00	; 0
    1e78:	8a e0       	ldi	r24, 0x0A	; 10
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	clear_to_end_of_line();
    1e80:	0e 94 4f 11 	call	0x229e	; 0x229e <clear_to_end_of_line>
	//display game sped
	if (game_speed == 1000) {
    1e84:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <game_speed>
    1e88:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <game_speed+0x1>
    1e8c:	2d b7       	in	r18, 0x3d	; 61
    1e8e:	3e b7       	in	r19, 0x3e	; 62
    1e90:	26 5f       	subi	r18, 0xF6	; 246
    1e92:	3f 4f       	sbci	r19, 0xFF	; 255
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	3e bf       	out	0x3e, r19	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	2d bf       	out	0x3d, r18	; 61
    1e9e:	88 3e       	cpi	r24, 0xE8	; 232
    1ea0:	33 e0       	ldi	r19, 0x03	; 3
    1ea2:	93 07       	cpc	r25, r19
    1ea4:	69 f4       	brne	.+26     	; 0x1ec0 <handle_game_over+0xac>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    1ea6:	9f 93       	push	r25
    1ea8:	8f 93       	push	r24
    1eaa:	88 e6       	ldi	r24, 0x68	; 104
    1eac:	92 e0       	ldi	r25, 0x02	; 2
    1eae:	9f 93       	push	r25
    1eb0:	8f 93       	push	r24
    1eb2:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	20 c0       	rjmp	.+64     	; 0x1f00 <handle_game_over+0xec>
		
		} else if (game_speed == 500) {
    1ec0:	84 3f       	cpi	r24, 0xF4	; 244
    1ec2:	21 e0       	ldi	r18, 0x01	; 1
    1ec4:	92 07       	cpc	r25, r18
    1ec6:	69 f4       	brne	.+26     	; 0x1ee2 <handle_game_over+0xce>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1ec8:	9f 93       	push	r25
    1eca:	8f 93       	push	r24
    1ecc:	8e e8       	ldi	r24, 0x8E	; 142
    1ece:	92 e0       	ldi	r25, 0x02	; 2
    1ed0:	9f 93       	push	r25
    1ed2:	8f 93       	push	r24
    1ed4:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f c0       	rjmp	.+30     	; 0x1f00 <handle_game_over+0xec>
		
		} else if (game_speed == 250) {
    1ee2:	8a 3f       	cpi	r24, 0xFA	; 250
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	61 f4       	brne	.+24     	; 0x1f00 <handle_game_over+0xec>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1ee8:	9f 93       	push	r25
    1eea:	8f 93       	push	r24
    1eec:	82 eb       	ldi	r24, 0xB2	; 178
    1eee:	92 e0       	ldi	r25, 0x02	; 2
    1ef0:	9f 93       	push	r25
    1ef2:	8f 93       	push	r24
    1ef4:	0e 94 cf 14 	call	0x299e	; 0x299e <printf>
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
	}
	
	move_terminal_cursor(10, 17);
    1f00:	61 e1       	ldi	r22, 0x11	; 17
    1f02:	70 e0       	ldi	r23, 0x00	; 0
    1f04:	8a e0       	ldi	r24, 0x0A	; 10
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	0e 94 35 11 	call	0x226a	; 0x226a <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
    1f0c:	8c e7       	ldi	r24, 0x7C	; 124
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9f 93       	push	r25
    1f12:	8f 93       	push	r24
    1f14:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	10 c0       	rjmp	.+32     	; 0x1f3e <handle_game_over+0x12a>
	{
		char keyboard_input = -1;
				
		if (serial_input_available()) {
    1f1e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <serial_input_available>
    1f22:	88 23       	and	r24, r24
    1f24:	39 f0       	breq	.+14     	; 0x1f34 <handle_game_over+0x120>
			keyboard_input = fgetc(stdin);
    1f26:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <__iob>
    1f2a:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <__iob+0x1>
    1f2e:	0e 94 91 14 	call	0x2922	; 0x2922 <fgetc>
    1f32:	01 c0       	rjmp	.+2      	; 0x1f36 <handle_game_over+0x122>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
	{
		char keyboard_input = -1;
    1f34:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		//check if the user presses s
		if (keyboard_input == 's' || keyboard_input == 'S') {
    1f36:	83 37       	cpi	r24, 0x73	; 115
    1f38:	31 f0       	breq	.+12     	; 0x1f46 <handle_game_over+0x132>
    1f3a:	83 35       	cpi	r24, 0x53	; 83
    1f3c:	21 f0       	breq	.+8      	; 0x1f46 <handle_game_over+0x132>
	move_terminal_cursor(10, 17);
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    1f3e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    1f42:	8f 3f       	cpi	r24, 0xFF	; 255
    1f44:	61 f3       	breq	.-40     	; 0x1f1e <handle_game_over+0x10a>
		if (keyboard_input == 's' || keyboard_input == 'S') {
			break;
		}
	}	
	
	start_screen();
    1f46:	0e 94 e7 07 	call	0xfce	; 0xfce <start_screen>
    1f4a:	08 95       	ret

00001f4c <main>:
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1f4c:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <initialise_hardware>
	
	points = 0;
    1f50:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <points+0x1>
    1f54:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <points>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
    1f58:	0e 94 e7 07 	call	0xfce	; 0xfce <start_screen>
	
	// Loop forever and continuously play the game.
	while(1)
	{
		new_game();
    1f5c:	0e 94 76 0c 	call	0x18ec	; 0x18ec <new_game>
		play_game();
    1f60:	0e 94 89 0c 	call	0x1912	; 0x1912 <play_game>
		handle_game_over();
    1f64:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <handle_game_over>
    1f68:	f9 cf       	rjmp	.-14     	; 0x1f5c <main+0x10>

00001f6a <uart_put_char>:
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream)
{
    1f6a:	cf 93       	push	r28
    1f6c:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n')
    1f6e:	8a 30       	cpi	r24, 0x0A	; 10
    1f70:	19 f4       	brne	.+6      	; 0x1f78 <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
    1f72:	8d e0       	ldi	r24, 0x0D	; 13
    1f74:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1f78:	9f b7       	in	r25, 0x3f	; 63
    1f7a:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
    1f7e:	99 23       	and	r25, r25
    1f80:	29 f1       	breq	.+74     	; 0x1fcc <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1f82:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <bytes_in_out_buffer>
    1f86:	8f 3f       	cpi	r24, 0xFF	; 255
    1f88:	d1 f3       	breq	.-12     	; 0x1f7e <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1f8a:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1f8c:	e0 91 59 05 	lds	r30, 0x0559	; 0x800559 <out_insert_pos>
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	8e 0f       	add	r24, r30
    1f94:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <out_insert_pos>
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	e5 5a       	subi	r30, 0xA5	; 165
    1f9c:	fa 4f       	sbci	r31, 0xFA	; 250
    1f9e:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1fa0:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <bytes_in_out_buffer>
    1fa4:	8f 5f       	subi	r24, 0xFF	; 255
    1fa6:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
    1faa:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <out_insert_pos>
    1fae:	8f 3f       	cpi	r24, 0xFF	; 255
    1fb0:	11 f4       	brne	.+4      	; 0x1fb6 <uart_put_char+0x4c>
	{
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1fb2:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1fb6:	e1 ec       	ldi	r30, 0xC1	; 193
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	80 62       	ori	r24, 0x20	; 32
    1fbe:	80 83       	st	Z, r24
	if (interrupts_enabled)
    1fc0:	99 23       	and	r25, r25
    1fc2:	39 f0       	breq	.+14     	; 0x1fd2 <uart_put_char+0x68>
	{
		sei();
    1fc4:	78 94       	sei
	}
	return 0;
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	05 c0       	rjmp	.+10     	; 0x1fd6 <uart_put_char+0x6c>
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
}
    1fd6:	cf 91       	pop	r28
    1fd8:	08 95       	ret

00001fda <uart_get_char>:

int uart_get_char(FILE* stream)
{
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0)
    1fda:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <bytes_in_input_buffer>
    1fde:	88 23       	and	r24, r24
    1fe0:	e1 f3       	breq	.-8      	; 0x1fda <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1fe2:	2f b7       	in	r18, 0x3f	; 63
    1fe4:	20 78       	andi	r18, 0x80	; 128
	cli();
    1fe6:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
    1fe8:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <input_insert_pos>
    1fec:	30 91 6c 06 	lds	r19, 0x066C	; 0x80066c <bytes_in_input_buffer>
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	83 1b       	sub	r24, r19
    1ff4:	91 09       	sbc	r25, r1
    1ff6:	5a f4       	brpl	.+22     	; 0x200e <uart_get_char+0x34>
	{
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1ff8:	e0 91 5a 06 	lds	r30, 0x065A	; 0x80065a <input_insert_pos>
    1ffc:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <bytes_in_input_buffer>
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	e8 1b       	sub	r30, r24
    2004:	f1 09       	sbc	r31, r1
    2006:	e5 59       	subi	r30, 0x95	; 149
    2008:	f9 4f       	sbci	r31, 0xF9	; 249
    200a:	80 81       	ld	r24, Z
    200c:	0a c0       	rjmp	.+20     	; 0x2022 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    200e:	e0 91 5a 06 	lds	r30, 0x065A	; 0x80065a <input_insert_pos>
    2012:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <bytes_in_input_buffer>
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	e8 1b       	sub	r30, r24
    201a:	f1 09       	sbc	r31, r1
    201c:	e5 5a       	subi	r30, 0xA5	; 165
    201e:	f9 4f       	sbci	r31, 0xF9	; 249
    2020:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    2022:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <bytes_in_input_buffer>
    2026:	91 50       	subi	r25, 0x01	; 1
    2028:	90 93 6c 06 	sts	0x066C, r25	; 0x80066c <bytes_in_input_buffer>
	if (interrupts_enabled)
    202c:	22 23       	and	r18, r18
    202e:	09 f0       	breq	.+2      	; 0x2032 <uart_get_char+0x58>
	{
		sei();
    2030:	78 94       	sei
	}	
	return c;
}
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	08 95       	ret

00002036 <init_serial_stdio>:
{
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    2036:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <out_insert_pos>
	bytes_in_out_buffer = 0;
    203a:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <bytes_in_out_buffer>
	input_insert_pos = 0;
    203e:	10 92 5a 06 	sts	0x065A, r1	; 0x80065a <input_insert_pos>
	bytes_in_input_buffer = 0;
    2042:	10 92 6c 06 	sts	0x066C, r1	; 0x80066c <bytes_in_input_buffer>
	input_overrun = 0;
    2046:	10 92 6b 06 	sts	0x066B, r1	; 0x80066b <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    204a:	40 93 25 05 	sts	0x0525, r20	; 0x800525 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	aa 1f       	adc	r26, r26
    2058:	bb 1f       	adc	r27, r27
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	aa 1f       	adc	r26, r26
    2060:	bb 1f       	adc	r27, r27
    2062:	9c 01       	movw	r18, r24
    2064:	ad 01       	movw	r20, r26
    2066:	22 0f       	add	r18, r18
    2068:	33 1f       	adc	r19, r19
    206a:	44 1f       	adc	r20, r20
    206c:	55 1f       	adc	r21, r21
    206e:	60 e0       	ldi	r22, 0x00	; 0
    2070:	72 e1       	ldi	r23, 0x12	; 18
    2072:	8a e7       	ldi	r24, 0x7A	; 122
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 4f 14 	call	0x289e	; 0x289e <__divmodsi4>
    207a:	ba 01       	movw	r22, r20
    207c:	a9 01       	movw	r20, r18
    207e:	4f 5f       	subi	r20, 0xFF	; 255
    2080:	5f 4f       	sbci	r21, 0xFF	; 255
    2082:	6f 4f       	sbci	r22, 0xFF	; 255
    2084:	7f 4f       	sbci	r23, 0xFF	; 255
    2086:	db 01       	movw	r26, r22
    2088:	ca 01       	movw	r24, r20
    208a:	1a f4       	brpl	.+6      	; 0x2092 <init_serial_stdio+0x5c>
    208c:	01 96       	adiw	r24, 0x01	; 1
    208e:	a1 1d       	adc	r26, r1
    2090:	b1 1d       	adc	r27, r1
    2092:	b5 95       	asr	r27
    2094:	a7 95       	ror	r26
    2096:	97 95       	ror	r25
    2098:	87 95       	ror	r24
    209a:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    209c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    20a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    20a4:	e1 ec       	ldi	r30, 0xC1	; 193
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	88 e1       	ldi	r24, 0x18	; 24
    20aa:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
    20ac:	80 81       	ld	r24, Z
    20ae:	80 68       	ori	r24, 0x80	; 128
    20b0:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    20b2:	ed e6       	ldi	r30, 0x6D	; 109
    20b4:	f6 e0       	ldi	r31, 0x06	; 6
    20b6:	8c e0       	ldi	r24, 0x0C	; 12
    20b8:	91 e0       	ldi	r25, 0x01	; 1
    20ba:	93 83       	std	Z+3, r25	; 0x03
    20bc:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    20be:	91 83       	std	Z+1, r25	; 0x01
    20c0:	80 83       	st	Z, r24
    20c2:	08 95       	ret

000020c4 <serial_input_available>:
}

int8_t serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
    20c4:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <bytes_in_input_buffer>
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	91 11       	cpse	r25, r1
    20cc:	01 c0       	rjmp	.+2      	; 0x20d0 <serial_input_available+0xc>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
}
    20d0:	08 95       	ret

000020d2 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    20d2:	10 92 5a 06 	sts	0x065A, r1	; 0x80065a <input_insert_pos>
	bytes_in_input_buffer = 0;
    20d6:	10 92 6c 06 	sts	0x066C, r1	; 0x80066c <bytes_in_input_buffer>
    20da:	08 95       	ret

000020dc <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    20dc:	1f 92       	push	r1
    20de:	0f 92       	push	r0
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	0f 92       	push	r0
    20e4:	11 24       	eor	r1, r1
    20e6:	2f 93       	push	r18
    20e8:	8f 93       	push	r24
    20ea:	9f 93       	push	r25
    20ec:	ef 93       	push	r30
    20ee:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0)
    20f0:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <bytes_in_out_buffer>
    20f4:	88 23       	and	r24, r24
    20f6:	29 f1       	breq	.+74     	; 0x2142 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
    20f8:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <out_insert_pos>
    20fc:	20 91 5a 05 	lds	r18, 0x055A	; 0x80055a <bytes_in_out_buffer>
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	82 1b       	sub	r24, r18
    2104:	91 09       	sbc	r25, r1
    2106:	5a f4       	brpl	.+22     	; 0x211e <__vector_21+0x42>
		{
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    2108:	e0 91 59 05 	lds	r30, 0x0559	; 0x800559 <out_insert_pos>
    210c:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <bytes_in_out_buffer>
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	e8 1b       	sub	r30, r24
    2114:	f1 09       	sbc	r31, r1
    2116:	e6 5a       	subi	r30, 0xA6	; 166
    2118:	f9 4f       	sbci	r31, 0xF9	; 249
    211a:	90 81       	ld	r25, Z
    211c:	0a c0       	rjmp	.+20     	; 0x2132 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    211e:	e0 91 59 05 	lds	r30, 0x0559	; 0x800559 <out_insert_pos>
    2122:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <bytes_in_out_buffer>
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	e8 1b       	sub	r30, r24
    212a:	f1 09       	sbc	r31, r1
    212c:	e5 5a       	subi	r30, 0xA5	; 165
    212e:	fa 4f       	sbci	r31, 0xFA	; 250
    2130:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    2132:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <bytes_in_out_buffer>
    2136:	81 50       	subi	r24, 0x01	; 1
    2138:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    213c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2140:	05 c0       	rjmp	.+10     	; 0x214c <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
    2142:	e1 ec       	ldi	r30, 0xC1	; 193
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	8f 7d       	andi	r24, 0xDF	; 223
    214a:	80 83       	st	Z, r24
	}
}
    214c:	ff 91       	pop	r31
    214e:	ef 91       	pop	r30
    2150:	9f 91       	pop	r25
    2152:	8f 91       	pop	r24
    2154:	2f 91       	pop	r18
    2156:	0f 90       	pop	r0
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	0f 90       	pop	r0
    215c:	1f 90       	pop	r1
    215e:	18 95       	reti

00002160 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    2160:	1f 92       	push	r1
    2162:	0f 92       	push	r0
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	0f 92       	push	r0
    2168:	11 24       	eor	r1, r1
    216a:	2f 93       	push	r18
    216c:	3f 93       	push	r19
    216e:	4f 93       	push	r20
    2170:	5f 93       	push	r21
    2172:	6f 93       	push	r22
    2174:	7f 93       	push	r23
    2176:	8f 93       	push	r24
    2178:	9f 93       	push	r25
    217a:	af 93       	push	r26
    217c:	bf 93       	push	r27
    217e:	cf 93       	push	r28
    2180:	ef 93       	push	r30
    2182:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    2184:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
    2188:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <do_echo>
    218c:	88 23       	and	r24, r24
    218e:	49 f0       	breq	.+18     	; 0x21a2 <__vector_20+0x42>
    2190:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <bytes_in_out_buffer>
    2194:	8f 3f       	cpi	r24, 0xFF	; 255
    2196:	29 f0       	breq	.+10     	; 0x21a2 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    2198:	60 e0       	ldi	r22, 0x00	; 0
    219a:	70 e0       	ldi	r23, 0x00	; 0
    219c:	8c 2f       	mov	r24, r28
    219e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
    21a2:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <bytes_in_input_buffer>
    21a6:	80 31       	cpi	r24, 0x10	; 16
    21a8:	20 f0       	brcs	.+8      	; 0x21b2 <__vector_20+0x52>
	{
		input_overrun = 1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <input_overrun>
    21b0:	18 c0       	rjmp	.+48     	; 0x21e2 <__vector_20+0x82>
	} else
	{
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r')
    21b2:	cd 30       	cpi	r28, 0x0D	; 13
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <__vector_20+0x58>
		{
			c = '\n';
    21b6:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    21b8:	e0 91 5a 06 	lds	r30, 0x065A	; 0x80065a <input_insert_pos>
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	8e 0f       	add	r24, r30
    21c0:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <input_insert_pos>
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	e5 5a       	subi	r30, 0xA5	; 165
    21c8:	f9 4f       	sbci	r31, 0xF9	; 249
    21ca:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    21cc:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <bytes_in_input_buffer>
    21d0:	8f 5f       	subi	r24, 0xFF	; 255
    21d2:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
    21d6:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <input_insert_pos>
    21da:	80 31       	cpi	r24, 0x10	; 16
    21dc:	11 f4       	brne	.+4      	; 0x21e2 <__vector_20+0x82>
		{
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    21de:	10 92 5a 06 	sts	0x065A, r1	; 0x80065a <input_insert_pos>
		}
	}
}
    21e2:	ff 91       	pop	r31
    21e4:	ef 91       	pop	r30
    21e6:	cf 91       	pop	r28
    21e8:	bf 91       	pop	r27
    21ea:	af 91       	pop	r26
    21ec:	9f 91       	pop	r25
    21ee:	8f 91       	pop	r24
    21f0:	7f 91       	pop	r23
    21f2:	6f 91       	pop	r22
    21f4:	5f 91       	pop	r21
    21f6:	4f 91       	pop	r20
    21f8:	3f 91       	pop	r19
    21fa:	2f 91       	pop	r18
    21fc:	0f 90       	pop	r0
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	0f 90       	pop	r0
    2202:	1f 90       	pop	r1
    2204:	18 95       	reti

00002206 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider)
{
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    2206:	94 b1       	in	r25, 0x04	; 4
    2208:	90 6b       	ori	r25, 0xB0	; 176
    220a:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
    220c:	95 b1       	in	r25, 0x05	; 5
    220e:	90 61       	ori	r25, 0x10	; 16
    2210:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    2212:	90 e5       	ldi	r25, 0x50	; 80
    2214:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider)
    2216:	88 30       	cpi	r24, 0x08	; 8
    2218:	21 f0       	breq	.+8      	; 0x2222 <spi_setup_master+0x1c>
    221a:	80 32       	cpi	r24, 0x20	; 32
    221c:	11 f0       	breq	.+4      	; 0x2222 <spi_setup_master+0x1c>
    221e:	82 30       	cpi	r24, 0x02	; 2
    2220:	19 f4       	brne	.+6      	; 0x2228 <spi_setup_master+0x22>
	{
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
    2222:	91 e0       	ldi	r25, 0x01	; 1
    2224:	9d bd       	out	0x2d, r25	; 45
			break;
    2226:	01 c0       	rjmp	.+2      	; 0x222a <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    2228:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
    222a:	80 32       	cpi	r24, 0x20	; 32
    222c:	69 f0       	breq	.+26     	; 0x2248 <spi_setup_master+0x42>
    222e:	28 f4       	brcc	.+10     	; 0x223a <spi_setup_master+0x34>
    2230:	88 30       	cpi	r24, 0x08	; 8
    2232:	71 f0       	breq	.+28     	; 0x2250 <spi_setup_master+0x4a>
    2234:	80 31       	cpi	r24, 0x10	; 16
    2236:	61 f0       	breq	.+24     	; 0x2250 <spi_setup_master+0x4a>
    2238:	0e c0       	rjmp	.+28     	; 0x2256 <spi_setup_master+0x50>
    223a:	80 34       	cpi	r24, 0x40	; 64
    223c:	29 f0       	breq	.+10     	; 0x2248 <spi_setup_master+0x42>
    223e:	80 38       	cpi	r24, 0x80	; 128
    2240:	51 f4       	brne	.+20     	; 0x2256 <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
    2242:	8c b5       	in	r24, 0x2c	; 44
    2244:	81 60       	ori	r24, 0x01	; 1
    2246:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
    2248:	8c b5       	in	r24, 0x2c	; 44
    224a:	82 60       	ori	r24, 0x02	; 2
    224c:	8c bd       	out	0x2c, r24	; 44
			break;
    224e:	03 c0       	rjmp	.+6      	; 0x2256 <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
    2250:	8c b5       	in	r24, 0x2c	; 44
    2252:	81 60       	ori	r24, 0x01	; 1
    2254:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
    2256:	85 b1       	in	r24, 0x05	; 5
    2258:	8f 7e       	andi	r24, 0xEF	; 239
    225a:	85 b9       	out	0x05, r24	; 5
    225c:	08 95       	ret

0000225e <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    225e:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    2260:	0d b4       	in	r0, 0x2d	; 45
    2262:	07 fe       	sbrs	r0, 7
    2264:	fd cf       	rjmp	.-6      	; 0x2260 <spi_send_byte+0x2>
	{
		; // wait
	}
	return SPDR0;
    2266:	8e b5       	in	r24, 0x2e	; 46
}
    2268:	08 95       	ret

0000226a <move_terminal_cursor>:
}

void reverse_video(void)
{
	printf_P(PSTR("\x1b[7m"));
}
    226a:	9f 93       	push	r25
    226c:	8f 93       	push	r24
    226e:	7f 93       	push	r23
    2270:	6f 93       	push	r22
    2272:	8d e7       	ldi	r24, 0x7D	; 125
    2274:	93 e0       	ldi	r25, 0x03	; 3
    2276:	9f 93       	push	r25
    2278:	8f 93       	push	r24
    227a:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	08 95       	ret

0000228c <clear_terminal>:

void clear_terminal(void)
{
	printf_P(PSTR("\x1b[2J"));
    228c:	88 e7       	ldi	r24, 0x78	; 120
    228e:	93 e0       	ldi	r25, 0x03	; 3
    2290:	9f 93       	push	r25
    2292:	8f 93       	push	r24
    2294:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
}
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	08 95       	ret

0000229e <clear_to_end_of_line>:

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
    229e:	84 e7       	ldi	r24, 0x74	; 116
    22a0:	93 e0       	ldi	r25, 0x03	; 3
    22a2:	9f 93       	push	r25
    22a4:	8f 93       	push	r24
    22a6:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	08 95       	ret

000022b0 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    22b0:	1f 92       	push	r1
    22b2:	8f 93       	push	r24
    22b4:	8e e6       	ldi	r24, 0x6E	; 110
    22b6:	93 e0       	ldi	r25, 0x03	; 3
    22b8:	9f 93       	push	r25
    22ba:	8f 93       	push	r24
    22bc:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
}
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	08 95       	ret

000022ca <hide_cursor>:

void hide_cursor()
{
	printf_P(PSTR("\x1b[?25l"));
    22ca:	87 e6       	ldi	r24, 0x67	; 103
    22cc:	93 e0       	ldi	r25, 0x03	; 3
    22ce:	9f 93       	push	r25
    22d0:	8f 93       	push	r24
    22d2:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
}
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	08 95       	ret

000022dc <show_cursor>:

void show_cursor()
{
	printf_P(PSTR("\x1b[?25h"));
    22dc:	80 e6       	ldi	r24, 0x60	; 96
    22de:	93 e0       	ldi	r25, 0x03	; 3
    22e0:	9f 93       	push	r25
    22e2:	8f 93       	push	r24
    22e4:	0e 94 e5 14 	call	0x29ca	; 0x29ca <printf_P>
}
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	08 95       	ret

000022ee <init_timer0>:
void init_timer0(void)
{
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
    22ee:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <clock_ticks_ms>
    22f2:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <clock_ticks_ms+0x1>
    22f6:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <clock_ticks_ms+0x2>
    22fa:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    22fe:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    2300:	8c e7       	ldi	r24, 0x7C	; 124
    2302:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
    2304:	92 e0       	ldi	r25, 0x02	; 2
    2306:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    2308:	83 e0       	ldi	r24, 0x03	; 3
    230a:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
    230c:	ee e6       	ldi	r30, 0x6E	; 110
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	82 60       	ori	r24, 0x02	; 2
    2314:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
    2316:	95 bb       	out	0x15, r25	; 21
    2318:	08 95       	ret

0000231a <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    231a:	8f b7       	in	r24, 0x3f	; 63
    231c:	28 2f       	mov	r18, r24
    231e:	20 78       	andi	r18, 0x80	; 128
	cli();
    2320:	f8 94       	cli
	return_value = clock_ticks_ms;
    2322:	60 91 26 05 	lds	r22, 0x0526	; 0x800526 <clock_ticks_ms>
    2326:	70 91 27 05 	lds	r23, 0x0527	; 0x800527 <clock_ticks_ms+0x1>
    232a:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <clock_ticks_ms+0x2>
    232e:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    2332:	22 23       	and	r18, r18
    2334:	09 f0       	breq	.+2      	; 0x2338 <get_current_time+0x1e>
	{
		sei();
    2336:	78 94       	sei
	}
	return return_value;
}
    2338:	08 95       	ret

0000233a <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
    233a:	1f 92       	push	r1
    233c:	0f 92       	push	r0
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	0f 92       	push	r0
    2342:	11 24       	eor	r1, r1
    2344:	8f 93       	push	r24
    2346:	9f 93       	push	r25
    2348:	af 93       	push	r26
    234a:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
    234c:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <clock_ticks_ms>
    2350:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <clock_ticks_ms+0x1>
    2354:	a0 91 28 05 	lds	r26, 0x0528	; 0x800528 <clock_ticks_ms+0x2>
    2358:	b0 91 29 05 	lds	r27, 0x0529	; 0x800529 <clock_ticks_ms+0x3>
    235c:	01 96       	adiw	r24, 0x01	; 1
    235e:	a1 1d       	adc	r26, r1
    2360:	b1 1d       	adc	r27, r1
    2362:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <clock_ticks_ms>
    2366:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <clock_ticks_ms+0x1>
    236a:	a0 93 28 05 	sts	0x0528, r26	; 0x800528 <clock_ticks_ms+0x2>
    236e:	b0 93 29 05 	sts	0x0529, r27	; 0x800529 <clock_ticks_ms+0x3>
}
    2372:	bf 91       	pop	r27
    2374:	af 91       	pop	r26
    2376:	9f 91       	pop	r25
    2378:	8f 91       	pop	r24
    237a:	0f 90       	pop	r0
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	0f 90       	pop	r0
    2380:	1f 90       	pop	r1
    2382:	18 95       	reti

00002384 <init_timer1>:
 */


void init_timer1(void)
{
	freq = 1;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <freq+0x1>
    238c:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <freq>
	duty_cycle = 0;
    2390:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <duty_cycle>
    2394:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <duty_cycle+0x1>
    2398:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <duty_cycle+0x2>
    239c:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <duty_cycle+0x3>
	
	uint16_t clockperiod = (1000000UL / freq);
	uint16_t pulsewidth = (duty_cycle * clockperiod)/100;
	
	// Set the maximum count value for timer/counter 1 to be one less than the clockperiod
	OCR1A = clockperiod - 1;
    23a0:	8f e3       	ldi	r24, 0x3F	; 63
    23a2:	92 e4       	ldi	r25, 0x42	; 66
    23a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    23a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// Set the count compare value based on the pulse width. The value will be 1 less
	// than the pulse width - unless the pulse width is 0.
	if(pulsewidth == 0) {
		OCR1B = 0;
    23ac:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    23b0:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	//set up timer 1 for;
	//Fast PWM, counting from 0 to the value in OCR1A
	//before reseting to 0. Count at 1MHz (CLK/8).
	//Configure output OC1B to be CTC non-inverting mode.
	TCCR1A = (1 << COM1B1) | (1 << WGM10) | (1 <<WGM11);
    23b4:	83 e2       	ldi	r24, 0x23	; 35
    23b6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << CS11) | (1 << WGM12) |(1 << WGM13);
    23ba:	8a e1       	ldi	r24, 0x1A	; 26
    23bc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    23c0:	08 95       	ret

000023c2 <note_sound>:
	
}

void note_sound() {
    23c2:	cf 92       	push	r12
    23c4:	df 92       	push	r13
    23c6:	ef 92       	push	r14
    23c8:	ff 92       	push	r15
	
	if (!disable_piezzo) { //if you dont want to turn off the piezzo do the following
    23ca:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <disable_piezzo>
    23ce:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <disable_piezzo+0x1>
    23d2:	89 2b       	or	r24, r25
    23d4:	c9 f5       	brne	.+114    	; 0x2448 <note_sound+0x86>
		//turn on PORTd4 and set DDRD4 to be output
		DDRD |= 0b00010000;
    23d6:	8a b1       	in	r24, 0x0a	; 10
    23d8:	80 61       	ori	r24, 0x10	; 16
    23da:	8a b9       	out	0x0a, r24	; 10
		PORTD |= 0b00010000;
    23dc:	8b b1       	in	r24, 0x0b	; 11
    23de:	80 61       	ori	r24, 0x10	; 16
    23e0:	8b b9       	out	0x0b, r24	; 11
		
		uint16_t clockperiod = (1000000UL / freq);
    23e2:	20 91 2e 05 	lds	r18, 0x052E	; 0x80052e <freq>
    23e6:	30 91 2f 05 	lds	r19, 0x052F	; 0x80052f <freq+0x1>
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	50 e0       	ldi	r21, 0x00	; 0
    23ee:	60 e4       	ldi	r22, 0x40	; 64
    23f0:	72 e4       	ldi	r23, 0x42	; 66
    23f2:	8f e0       	ldi	r24, 0x0F	; 15
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	0e 94 2d 14 	call	0x285a	; 0x285a <__udivmodsi4>
    23fa:	69 01       	movw	r12, r18
    23fc:	7a 01       	movw	r14, r20
		uint16_t pulsewidth = (duty_cycle * clockperiod)/100;
    23fe:	b9 01       	movw	r22, r18
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	0e 94 1e 13 	call	0x263c	; 0x263c <__floatunsisf>
    2408:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <duty_cycle>
    240c:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <duty_cycle+0x1>
    2410:	40 91 53 05 	lds	r20, 0x0553	; 0x800553 <duty_cycle+0x2>
    2414:	50 91 54 05 	lds	r21, 0x0554	; 0x800554 <duty_cycle+0x3>
    2418:	0e 94 ac 13 	call	0x2758	; 0x2758 <__mulsf3>
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	48 ec       	ldi	r20, 0xC8	; 200
    2422:	52 e4       	ldi	r21, 0x42	; 66
    2424:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__divsf3>
    2428:	0e 94 ef 12 	call	0x25de	; 0x25de <__fixunssfsi>
	
		OCR1A = clockperiod - 1;
    242c:	21 e0       	ldi	r18, 0x01	; 1
    242e:	c2 1a       	sub	r12, r18
    2430:	d1 08       	sbc	r13, r1
    2432:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2436:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = pulsewidth - 1;
    243a:	61 50       	subi	r22, 0x01	; 1
    243c:	71 09       	sbc	r23, r1
    243e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2442:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    2446:	0e c0       	rjmp	.+28     	; 0x2464 <note_sound+0xa2>
		
	} else { //if you want to turn off the piezzo do the following
		//set bot checks to be 0
		OCR1A = 0;
    2448:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    244c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = 0;
    2450:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2454:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		
		//make DDRD4 to be input and PORTD4 to be off
		DDRD &= ~(1<<4);	//inverse of 1<<4
    2458:	8a b1       	in	r24, 0x0a	; 10
    245a:	8f 7e       	andi	r24, 0xEF	; 239
    245c:	8a b9       	out	0x0a, r24	; 10
		PORTD &= 0b11101111;
    245e:	8b b1       	in	r24, 0x0b	; 11
    2460:	8f 7e       	andi	r24, 0xEF	; 239
    2462:	8b b9       	out	0x0b, r24	; 11
			
	}
}
    2464:	ff 90       	pop	r15
    2466:	ef 90       	pop	r14
    2468:	df 90       	pop	r13
    246a:	cf 90       	pop	r12
    246c:	08 95       	ret

0000246e <pause_control>:

void pause_control(int is_paused) {
	if (is_paused) {
    246e:	89 2b       	or	r24, r25
    2470:	79 f0       	breq	.+30     	; 0x2490 <pause_control+0x22>
		OCR1A = 0;
    2472:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2476:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = 0;
    247a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    247e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		
		DDRD &= ~(1<<4);	//inverse of 1<<4
    2482:	8a b1       	in	r24, 0x0a	; 10
    2484:	8f 7e       	andi	r24, 0xEF	; 239
    2486:	8a b9       	out	0x0a, r24	; 10
		PORTD &= 0b11101111;
    2488:	8b b1       	in	r24, 0x0b	; 11
    248a:	8f 7e       	andi	r24, 0xEF	; 239
    248c:	8b b9       	out	0x0b, r24	; 11
    248e:	08 95       	ret
		
	} else {
		note_sound();
    2490:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <note_sound>
    2494:	08 95       	ret

00002496 <init_timer2>:
void init_timer2(void)
{
	
	//TCNT2 = 0;
	//set up so that there is an interrupt every 10ms (100 times per second)
	OCR2A = 77; //clock divided by 1024 - count for 10000 cycles
    2496:	8d e4       	ldi	r24, 0x4D	; 77
    2498:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = 0; //CTC mode
    249c:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1<<WGM22) | (1<<CS22) | (1<<CS20); // Divide clock by 1024(PRE) 
    24a0:	8d e0       	ldi	r24, 0x0D	; 13
    24a2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	//enable interrupt on timer on output compare match
	TIMSK2 = (1<<OCIE2A);
    24a6:	82 e0       	ldi	r24, 0x02	; 2
    24a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	 
	//Ensure interrupt flag is cleared
	TIFR2 = (1<<OCF2A);
    24ac:	87 bb       	out	0x17, r24	; 23
	
	// Turn on global interrupts
	sei();
    24ae:	78 94       	sei
    24b0:	08 95       	ret

000024b2 <__vector_9>:
}

ISR(TIMER2_COMPA_vect) {
    24b2:	1f 92       	push	r1
    24b4:	0f 92       	push	r0
    24b6:	0f b6       	in	r0, 0x3f	; 63
    24b8:	0f 92       	push	r0
    24ba:	11 24       	eor	r1, r1
    24bc:	2f 93       	push	r18
    24be:	3f 93       	push	r19
    24c0:	4f 93       	push	r20
    24c2:	5f 93       	push	r21
    24c4:	6f 93       	push	r22
    24c6:	7f 93       	push	r23
    24c8:	8f 93       	push	r24
    24ca:	9f 93       	push	r25
    24cc:	af 93       	push	r26
    24ce:	bf 93       	push	r27
    24d0:	ef 93       	push	r30
    24d2:	ff 93       	push	r31
	ssd_display();
    24d4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <ssd_display>
}
    24d8:	ff 91       	pop	r31
    24da:	ef 91       	pop	r30
    24dc:	bf 91       	pop	r27
    24de:	af 91       	pop	r26
    24e0:	9f 91       	pop	r25
    24e2:	8f 91       	pop	r24
    24e4:	7f 91       	pop	r23
    24e6:	6f 91       	pop	r22
    24e8:	5f 91       	pop	r21
    24ea:	4f 91       	pop	r20
    24ec:	3f 91       	pop	r19
    24ee:	2f 91       	pop	r18
    24f0:	0f 90       	pop	r0
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	0f 90       	pop	r0
    24f6:	1f 90       	pop	r1
    24f8:	18 95       	reti

000024fa <__divsf3>:
    24fa:	0e 94 91 12 	call	0x2522	; 0x2522 <__divsf3x>
    24fe:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_round>
    2502:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fp_pscB>
    2506:	58 f0       	brcs	.+22     	; 0x251e <__divsf3+0x24>
    2508:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__fp_pscA>
    250c:	40 f0       	brcs	.+16     	; 0x251e <__divsf3+0x24>
    250e:	29 f4       	brne	.+10     	; 0x251a <__divsf3+0x20>
    2510:	5f 3f       	cpi	r21, 0xFF	; 255
    2512:	29 f0       	breq	.+10     	; 0x251e <__divsf3+0x24>
    2514:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__fp_inf>
    2518:	51 11       	cpse	r21, r1
    251a:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__fp_szero>
    251e:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__fp_nan>

00002522 <__divsf3x>:
    2522:	0e 94 83 13 	call	0x2706	; 0x2706 <__fp_split3>
    2526:	68 f3       	brcs	.-38     	; 0x2502 <__divsf3+0x8>

00002528 <__divsf3_pse>:
    2528:	99 23       	and	r25, r25
    252a:	b1 f3       	breq	.-20     	; 0x2518 <__divsf3+0x1e>
    252c:	55 23       	and	r21, r21
    252e:	91 f3       	breq	.-28     	; 0x2514 <__divsf3+0x1a>
    2530:	95 1b       	sub	r25, r21
    2532:	55 0b       	sbc	r21, r21
    2534:	bb 27       	eor	r27, r27
    2536:	aa 27       	eor	r26, r26
    2538:	62 17       	cp	r22, r18
    253a:	73 07       	cpc	r23, r19
    253c:	84 07       	cpc	r24, r20
    253e:	38 f0       	brcs	.+14     	; 0x254e <__divsf3_pse+0x26>
    2540:	9f 5f       	subi	r25, 0xFF	; 255
    2542:	5f 4f       	sbci	r21, 0xFF	; 255
    2544:	22 0f       	add	r18, r18
    2546:	33 1f       	adc	r19, r19
    2548:	44 1f       	adc	r20, r20
    254a:	aa 1f       	adc	r26, r26
    254c:	a9 f3       	breq	.-22     	; 0x2538 <__divsf3_pse+0x10>
    254e:	35 d0       	rcall	.+106    	; 0x25ba <__divsf3_pse+0x92>
    2550:	0e 2e       	mov	r0, r30
    2552:	3a f0       	brmi	.+14     	; 0x2562 <__divsf3_pse+0x3a>
    2554:	e0 e8       	ldi	r30, 0x80	; 128
    2556:	32 d0       	rcall	.+100    	; 0x25bc <__divsf3_pse+0x94>
    2558:	91 50       	subi	r25, 0x01	; 1
    255a:	50 40       	sbci	r21, 0x00	; 0
    255c:	e6 95       	lsr	r30
    255e:	00 1c       	adc	r0, r0
    2560:	ca f7       	brpl	.-14     	; 0x2554 <__divsf3_pse+0x2c>
    2562:	2b d0       	rcall	.+86     	; 0x25ba <__divsf3_pse+0x92>
    2564:	fe 2f       	mov	r31, r30
    2566:	29 d0       	rcall	.+82     	; 0x25ba <__divsf3_pse+0x92>
    2568:	66 0f       	add	r22, r22
    256a:	77 1f       	adc	r23, r23
    256c:	88 1f       	adc	r24, r24
    256e:	bb 1f       	adc	r27, r27
    2570:	26 17       	cp	r18, r22
    2572:	37 07       	cpc	r19, r23
    2574:	48 07       	cpc	r20, r24
    2576:	ab 07       	cpc	r26, r27
    2578:	b0 e8       	ldi	r27, 0x80	; 128
    257a:	09 f0       	breq	.+2      	; 0x257e <__divsf3_pse+0x56>
    257c:	bb 0b       	sbc	r27, r27
    257e:	80 2d       	mov	r24, r0
    2580:	bf 01       	movw	r22, r30
    2582:	ff 27       	eor	r31, r31
    2584:	93 58       	subi	r25, 0x83	; 131
    2586:	5f 4f       	sbci	r21, 0xFF	; 255
    2588:	3a f0       	brmi	.+14     	; 0x2598 <__divsf3_pse+0x70>
    258a:	9e 3f       	cpi	r25, 0xFE	; 254
    258c:	51 05       	cpc	r21, r1
    258e:	78 f0       	brcs	.+30     	; 0x25ae <__divsf3_pse+0x86>
    2590:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__fp_inf>
    2594:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__fp_szero>
    2598:	5f 3f       	cpi	r21, 0xFF	; 255
    259a:	e4 f3       	brlt	.-8      	; 0x2594 <__divsf3_pse+0x6c>
    259c:	98 3e       	cpi	r25, 0xE8	; 232
    259e:	d4 f3       	brlt	.-12     	; 0x2594 <__divsf3_pse+0x6c>
    25a0:	86 95       	lsr	r24
    25a2:	77 95       	ror	r23
    25a4:	67 95       	ror	r22
    25a6:	b7 95       	ror	r27
    25a8:	f7 95       	ror	r31
    25aa:	9f 5f       	subi	r25, 0xFF	; 255
    25ac:	c9 f7       	brne	.-14     	; 0x25a0 <__divsf3_pse+0x78>
    25ae:	88 0f       	add	r24, r24
    25b0:	91 1d       	adc	r25, r1
    25b2:	96 95       	lsr	r25
    25b4:	87 95       	ror	r24
    25b6:	97 f9       	bld	r25, 7
    25b8:	08 95       	ret
    25ba:	e1 e0       	ldi	r30, 0x01	; 1
    25bc:	66 0f       	add	r22, r22
    25be:	77 1f       	adc	r23, r23
    25c0:	88 1f       	adc	r24, r24
    25c2:	bb 1f       	adc	r27, r27
    25c4:	62 17       	cp	r22, r18
    25c6:	73 07       	cpc	r23, r19
    25c8:	84 07       	cpc	r24, r20
    25ca:	ba 07       	cpc	r27, r26
    25cc:	20 f0       	brcs	.+8      	; 0x25d6 <__divsf3_pse+0xae>
    25ce:	62 1b       	sub	r22, r18
    25d0:	73 0b       	sbc	r23, r19
    25d2:	84 0b       	sbc	r24, r20
    25d4:	ba 0b       	sbc	r27, r26
    25d6:	ee 1f       	adc	r30, r30
    25d8:	88 f7       	brcc	.-30     	; 0x25bc <__divsf3_pse+0x94>
    25da:	e0 95       	com	r30
    25dc:	08 95       	ret

000025de <__fixunssfsi>:
    25de:	0e 94 8b 13 	call	0x2716	; 0x2716 <__fp_splitA>
    25e2:	88 f0       	brcs	.+34     	; 0x2606 <__fixunssfsi+0x28>
    25e4:	9f 57       	subi	r25, 0x7F	; 127
    25e6:	98 f0       	brcs	.+38     	; 0x260e <__fixunssfsi+0x30>
    25e8:	b9 2f       	mov	r27, r25
    25ea:	99 27       	eor	r25, r25
    25ec:	b7 51       	subi	r27, 0x17	; 23
    25ee:	b0 f0       	brcs	.+44     	; 0x261c <__fixunssfsi+0x3e>
    25f0:	e1 f0       	breq	.+56     	; 0x262a <__fixunssfsi+0x4c>
    25f2:	66 0f       	add	r22, r22
    25f4:	77 1f       	adc	r23, r23
    25f6:	88 1f       	adc	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	1a f0       	brmi	.+6      	; 0x2602 <__fixunssfsi+0x24>
    25fc:	ba 95       	dec	r27
    25fe:	c9 f7       	brne	.-14     	; 0x25f2 <__fixunssfsi+0x14>
    2600:	14 c0       	rjmp	.+40     	; 0x262a <__fixunssfsi+0x4c>
    2602:	b1 30       	cpi	r27, 0x01	; 1
    2604:	91 f0       	breq	.+36     	; 0x262a <__fixunssfsi+0x4c>
    2606:	0e 94 a5 13 	call	0x274a	; 0x274a <__fp_zero>
    260a:	b1 e0       	ldi	r27, 0x01	; 1
    260c:	08 95       	ret
    260e:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__fp_zero>
    2612:	67 2f       	mov	r22, r23
    2614:	78 2f       	mov	r23, r24
    2616:	88 27       	eor	r24, r24
    2618:	b8 5f       	subi	r27, 0xF8	; 248
    261a:	39 f0       	breq	.+14     	; 0x262a <__fixunssfsi+0x4c>
    261c:	b9 3f       	cpi	r27, 0xF9	; 249
    261e:	cc f3       	brlt	.-14     	; 0x2612 <__fixunssfsi+0x34>
    2620:	86 95       	lsr	r24
    2622:	77 95       	ror	r23
    2624:	67 95       	ror	r22
    2626:	b3 95       	inc	r27
    2628:	d9 f7       	brne	.-10     	; 0x2620 <__fixunssfsi+0x42>
    262a:	3e f4       	brtc	.+14     	; 0x263a <__fixunssfsi+0x5c>
    262c:	90 95       	com	r25
    262e:	80 95       	com	r24
    2630:	70 95       	com	r23
    2632:	61 95       	neg	r22
    2634:	7f 4f       	sbci	r23, 0xFF	; 255
    2636:	8f 4f       	sbci	r24, 0xFF	; 255
    2638:	9f 4f       	sbci	r25, 0xFF	; 255
    263a:	08 95       	ret

0000263c <__floatunsisf>:
    263c:	e8 94       	clt
    263e:	09 c0       	rjmp	.+18     	; 0x2652 <__floatsisf+0x12>

00002640 <__floatsisf>:
    2640:	97 fb       	bst	r25, 7
    2642:	3e f4       	brtc	.+14     	; 0x2652 <__floatsisf+0x12>
    2644:	90 95       	com	r25
    2646:	80 95       	com	r24
    2648:	70 95       	com	r23
    264a:	61 95       	neg	r22
    264c:	7f 4f       	sbci	r23, 0xFF	; 255
    264e:	8f 4f       	sbci	r24, 0xFF	; 255
    2650:	9f 4f       	sbci	r25, 0xFF	; 255
    2652:	99 23       	and	r25, r25
    2654:	a9 f0       	breq	.+42     	; 0x2680 <__floatsisf+0x40>
    2656:	f9 2f       	mov	r31, r25
    2658:	96 e9       	ldi	r25, 0x96	; 150
    265a:	bb 27       	eor	r27, r27
    265c:	93 95       	inc	r25
    265e:	f6 95       	lsr	r31
    2660:	87 95       	ror	r24
    2662:	77 95       	ror	r23
    2664:	67 95       	ror	r22
    2666:	b7 95       	ror	r27
    2668:	f1 11       	cpse	r31, r1
    266a:	f8 cf       	rjmp	.-16     	; 0x265c <__floatsisf+0x1c>
    266c:	fa f4       	brpl	.+62     	; 0x26ac <__floatsisf+0x6c>
    266e:	bb 0f       	add	r27, r27
    2670:	11 f4       	brne	.+4      	; 0x2676 <__floatsisf+0x36>
    2672:	60 ff       	sbrs	r22, 0
    2674:	1b c0       	rjmp	.+54     	; 0x26ac <__floatsisf+0x6c>
    2676:	6f 5f       	subi	r22, 0xFF	; 255
    2678:	7f 4f       	sbci	r23, 0xFF	; 255
    267a:	8f 4f       	sbci	r24, 0xFF	; 255
    267c:	9f 4f       	sbci	r25, 0xFF	; 255
    267e:	16 c0       	rjmp	.+44     	; 0x26ac <__floatsisf+0x6c>
    2680:	88 23       	and	r24, r24
    2682:	11 f0       	breq	.+4      	; 0x2688 <__floatsisf+0x48>
    2684:	96 e9       	ldi	r25, 0x96	; 150
    2686:	11 c0       	rjmp	.+34     	; 0x26aa <__floatsisf+0x6a>
    2688:	77 23       	and	r23, r23
    268a:	21 f0       	breq	.+8      	; 0x2694 <__floatsisf+0x54>
    268c:	9e e8       	ldi	r25, 0x8E	; 142
    268e:	87 2f       	mov	r24, r23
    2690:	76 2f       	mov	r23, r22
    2692:	05 c0       	rjmp	.+10     	; 0x269e <__floatsisf+0x5e>
    2694:	66 23       	and	r22, r22
    2696:	71 f0       	breq	.+28     	; 0x26b4 <__floatsisf+0x74>
    2698:	96 e8       	ldi	r25, 0x86	; 134
    269a:	86 2f       	mov	r24, r22
    269c:	70 e0       	ldi	r23, 0x00	; 0
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	2a f0       	brmi	.+10     	; 0x26ac <__floatsisf+0x6c>
    26a2:	9a 95       	dec	r25
    26a4:	66 0f       	add	r22, r22
    26a6:	77 1f       	adc	r23, r23
    26a8:	88 1f       	adc	r24, r24
    26aa:	da f7       	brpl	.-10     	; 0x26a2 <__floatsisf+0x62>
    26ac:	88 0f       	add	r24, r24
    26ae:	96 95       	lsr	r25
    26b0:	87 95       	ror	r24
    26b2:	97 f9       	bld	r25, 7
    26b4:	08 95       	ret

000026b6 <__fp_inf>:
    26b6:	97 f9       	bld	r25, 7
    26b8:	9f 67       	ori	r25, 0x7F	; 127
    26ba:	80 e8       	ldi	r24, 0x80	; 128
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	60 e0       	ldi	r22, 0x00	; 0
    26c0:	08 95       	ret

000026c2 <__fp_nan>:
    26c2:	9f ef       	ldi	r25, 0xFF	; 255
    26c4:	80 ec       	ldi	r24, 0xC0	; 192
    26c6:	08 95       	ret

000026c8 <__fp_pscA>:
    26c8:	00 24       	eor	r0, r0
    26ca:	0a 94       	dec	r0
    26cc:	16 16       	cp	r1, r22
    26ce:	17 06       	cpc	r1, r23
    26d0:	18 06       	cpc	r1, r24
    26d2:	09 06       	cpc	r0, r25
    26d4:	08 95       	ret

000026d6 <__fp_pscB>:
    26d6:	00 24       	eor	r0, r0
    26d8:	0a 94       	dec	r0
    26da:	12 16       	cp	r1, r18
    26dc:	13 06       	cpc	r1, r19
    26de:	14 06       	cpc	r1, r20
    26e0:	05 06       	cpc	r0, r21
    26e2:	08 95       	ret

000026e4 <__fp_round>:
    26e4:	09 2e       	mov	r0, r25
    26e6:	03 94       	inc	r0
    26e8:	00 0c       	add	r0, r0
    26ea:	11 f4       	brne	.+4      	; 0x26f0 <__fp_round+0xc>
    26ec:	88 23       	and	r24, r24
    26ee:	52 f0       	brmi	.+20     	; 0x2704 <__fp_round+0x20>
    26f0:	bb 0f       	add	r27, r27
    26f2:	40 f4       	brcc	.+16     	; 0x2704 <__fp_round+0x20>
    26f4:	bf 2b       	or	r27, r31
    26f6:	11 f4       	brne	.+4      	; 0x26fc <__fp_round+0x18>
    26f8:	60 ff       	sbrs	r22, 0
    26fa:	04 c0       	rjmp	.+8      	; 0x2704 <__fp_round+0x20>
    26fc:	6f 5f       	subi	r22, 0xFF	; 255
    26fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2700:	8f 4f       	sbci	r24, 0xFF	; 255
    2702:	9f 4f       	sbci	r25, 0xFF	; 255
    2704:	08 95       	ret

00002706 <__fp_split3>:
    2706:	57 fd       	sbrc	r21, 7
    2708:	90 58       	subi	r25, 0x80	; 128
    270a:	44 0f       	add	r20, r20
    270c:	55 1f       	adc	r21, r21
    270e:	59 f0       	breq	.+22     	; 0x2726 <__fp_splitA+0x10>
    2710:	5f 3f       	cpi	r21, 0xFF	; 255
    2712:	71 f0       	breq	.+28     	; 0x2730 <__fp_splitA+0x1a>
    2714:	47 95       	ror	r20

00002716 <__fp_splitA>:
    2716:	88 0f       	add	r24, r24
    2718:	97 fb       	bst	r25, 7
    271a:	99 1f       	adc	r25, r25
    271c:	61 f0       	breq	.+24     	; 0x2736 <__fp_splitA+0x20>
    271e:	9f 3f       	cpi	r25, 0xFF	; 255
    2720:	79 f0       	breq	.+30     	; 0x2740 <__fp_splitA+0x2a>
    2722:	87 95       	ror	r24
    2724:	08 95       	ret
    2726:	12 16       	cp	r1, r18
    2728:	13 06       	cpc	r1, r19
    272a:	14 06       	cpc	r1, r20
    272c:	55 1f       	adc	r21, r21
    272e:	f2 cf       	rjmp	.-28     	; 0x2714 <__fp_split3+0xe>
    2730:	46 95       	lsr	r20
    2732:	f1 df       	rcall	.-30     	; 0x2716 <__fp_splitA>
    2734:	08 c0       	rjmp	.+16     	; 0x2746 <__fp_splitA+0x30>
    2736:	16 16       	cp	r1, r22
    2738:	17 06       	cpc	r1, r23
    273a:	18 06       	cpc	r1, r24
    273c:	99 1f       	adc	r25, r25
    273e:	f1 cf       	rjmp	.-30     	; 0x2722 <__fp_splitA+0xc>
    2740:	86 95       	lsr	r24
    2742:	71 05       	cpc	r23, r1
    2744:	61 05       	cpc	r22, r1
    2746:	08 94       	sec
    2748:	08 95       	ret

0000274a <__fp_zero>:
    274a:	e8 94       	clt

0000274c <__fp_szero>:
    274c:	bb 27       	eor	r27, r27
    274e:	66 27       	eor	r22, r22
    2750:	77 27       	eor	r23, r23
    2752:	cb 01       	movw	r24, r22
    2754:	97 f9       	bld	r25, 7
    2756:	08 95       	ret

00002758 <__mulsf3>:
    2758:	0e 94 bf 13 	call	0x277e	; 0x277e <__mulsf3x>
    275c:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_round>
    2760:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__fp_pscA>
    2764:	38 f0       	brcs	.+14     	; 0x2774 <__mulsf3+0x1c>
    2766:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fp_pscB>
    276a:	20 f0       	brcs	.+8      	; 0x2774 <__mulsf3+0x1c>
    276c:	95 23       	and	r25, r21
    276e:	11 f0       	breq	.+4      	; 0x2774 <__mulsf3+0x1c>
    2770:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__fp_inf>
    2774:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__fp_nan>
    2778:	11 24       	eor	r1, r1
    277a:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__fp_szero>

0000277e <__mulsf3x>:
    277e:	0e 94 83 13 	call	0x2706	; 0x2706 <__fp_split3>
    2782:	70 f3       	brcs	.-36     	; 0x2760 <__mulsf3+0x8>

00002784 <__mulsf3_pse>:
    2784:	95 9f       	mul	r25, r21
    2786:	c1 f3       	breq	.-16     	; 0x2778 <__mulsf3+0x20>
    2788:	95 0f       	add	r25, r21
    278a:	50 e0       	ldi	r21, 0x00	; 0
    278c:	55 1f       	adc	r21, r21
    278e:	62 9f       	mul	r22, r18
    2790:	f0 01       	movw	r30, r0
    2792:	72 9f       	mul	r23, r18
    2794:	bb 27       	eor	r27, r27
    2796:	f0 0d       	add	r31, r0
    2798:	b1 1d       	adc	r27, r1
    279a:	63 9f       	mul	r22, r19
    279c:	aa 27       	eor	r26, r26
    279e:	f0 0d       	add	r31, r0
    27a0:	b1 1d       	adc	r27, r1
    27a2:	aa 1f       	adc	r26, r26
    27a4:	64 9f       	mul	r22, r20
    27a6:	66 27       	eor	r22, r22
    27a8:	b0 0d       	add	r27, r0
    27aa:	a1 1d       	adc	r26, r1
    27ac:	66 1f       	adc	r22, r22
    27ae:	82 9f       	mul	r24, r18
    27b0:	22 27       	eor	r18, r18
    27b2:	b0 0d       	add	r27, r0
    27b4:	a1 1d       	adc	r26, r1
    27b6:	62 1f       	adc	r22, r18
    27b8:	73 9f       	mul	r23, r19
    27ba:	b0 0d       	add	r27, r0
    27bc:	a1 1d       	adc	r26, r1
    27be:	62 1f       	adc	r22, r18
    27c0:	83 9f       	mul	r24, r19
    27c2:	a0 0d       	add	r26, r0
    27c4:	61 1d       	adc	r22, r1
    27c6:	22 1f       	adc	r18, r18
    27c8:	74 9f       	mul	r23, r20
    27ca:	33 27       	eor	r19, r19
    27cc:	a0 0d       	add	r26, r0
    27ce:	61 1d       	adc	r22, r1
    27d0:	23 1f       	adc	r18, r19
    27d2:	84 9f       	mul	r24, r20
    27d4:	60 0d       	add	r22, r0
    27d6:	21 1d       	adc	r18, r1
    27d8:	82 2f       	mov	r24, r18
    27da:	76 2f       	mov	r23, r22
    27dc:	6a 2f       	mov	r22, r26
    27de:	11 24       	eor	r1, r1
    27e0:	9f 57       	subi	r25, 0x7F	; 127
    27e2:	50 40       	sbci	r21, 0x00	; 0
    27e4:	9a f0       	brmi	.+38     	; 0x280c <__mulsf3_pse+0x88>
    27e6:	f1 f0       	breq	.+60     	; 0x2824 <__mulsf3_pse+0xa0>
    27e8:	88 23       	and	r24, r24
    27ea:	4a f0       	brmi	.+18     	; 0x27fe <__mulsf3_pse+0x7a>
    27ec:	ee 0f       	add	r30, r30
    27ee:	ff 1f       	adc	r31, r31
    27f0:	bb 1f       	adc	r27, r27
    27f2:	66 1f       	adc	r22, r22
    27f4:	77 1f       	adc	r23, r23
    27f6:	88 1f       	adc	r24, r24
    27f8:	91 50       	subi	r25, 0x01	; 1
    27fa:	50 40       	sbci	r21, 0x00	; 0
    27fc:	a9 f7       	brne	.-22     	; 0x27e8 <__mulsf3_pse+0x64>
    27fe:	9e 3f       	cpi	r25, 0xFE	; 254
    2800:	51 05       	cpc	r21, r1
    2802:	80 f0       	brcs	.+32     	; 0x2824 <__mulsf3_pse+0xa0>
    2804:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__fp_inf>
    2808:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__fp_szero>
    280c:	5f 3f       	cpi	r21, 0xFF	; 255
    280e:	e4 f3       	brlt	.-8      	; 0x2808 <__mulsf3_pse+0x84>
    2810:	98 3e       	cpi	r25, 0xE8	; 232
    2812:	d4 f3       	brlt	.-12     	; 0x2808 <__mulsf3_pse+0x84>
    2814:	86 95       	lsr	r24
    2816:	77 95       	ror	r23
    2818:	67 95       	ror	r22
    281a:	b7 95       	ror	r27
    281c:	f7 95       	ror	r31
    281e:	e7 95       	ror	r30
    2820:	9f 5f       	subi	r25, 0xFF	; 255
    2822:	c1 f7       	brne	.-16     	; 0x2814 <__mulsf3_pse+0x90>
    2824:	fe 2b       	or	r31, r30
    2826:	88 0f       	add	r24, r24
    2828:	91 1d       	adc	r25, r1
    282a:	96 95       	lsr	r25
    282c:	87 95       	ror	r24
    282e:	97 f9       	bld	r25, 7
    2830:	08 95       	ret

00002832 <__divmodhi4>:
    2832:	97 fb       	bst	r25, 7
    2834:	07 2e       	mov	r0, r23
    2836:	16 f4       	brtc	.+4      	; 0x283c <__divmodhi4+0xa>
    2838:	00 94       	com	r0
    283a:	07 d0       	rcall	.+14     	; 0x284a <__divmodhi4_neg1>
    283c:	77 fd       	sbrc	r23, 7
    283e:	09 d0       	rcall	.+18     	; 0x2852 <__divmodhi4_neg2>
    2840:	0e 94 7d 14 	call	0x28fa	; 0x28fa <__udivmodhi4>
    2844:	07 fc       	sbrc	r0, 7
    2846:	05 d0       	rcall	.+10     	; 0x2852 <__divmodhi4_neg2>
    2848:	3e f4       	brtc	.+14     	; 0x2858 <__divmodhi4_exit>

0000284a <__divmodhi4_neg1>:
    284a:	90 95       	com	r25
    284c:	81 95       	neg	r24
    284e:	9f 4f       	sbci	r25, 0xFF	; 255
    2850:	08 95       	ret

00002852 <__divmodhi4_neg2>:
    2852:	70 95       	com	r23
    2854:	61 95       	neg	r22
    2856:	7f 4f       	sbci	r23, 0xFF	; 255

00002858 <__divmodhi4_exit>:
    2858:	08 95       	ret

0000285a <__udivmodsi4>:
    285a:	a1 e2       	ldi	r26, 0x21	; 33
    285c:	1a 2e       	mov	r1, r26
    285e:	aa 1b       	sub	r26, r26
    2860:	bb 1b       	sub	r27, r27
    2862:	fd 01       	movw	r30, r26
    2864:	0d c0       	rjmp	.+26     	; 0x2880 <__udivmodsi4_ep>

00002866 <__udivmodsi4_loop>:
    2866:	aa 1f       	adc	r26, r26
    2868:	bb 1f       	adc	r27, r27
    286a:	ee 1f       	adc	r30, r30
    286c:	ff 1f       	adc	r31, r31
    286e:	a2 17       	cp	r26, r18
    2870:	b3 07       	cpc	r27, r19
    2872:	e4 07       	cpc	r30, r20
    2874:	f5 07       	cpc	r31, r21
    2876:	20 f0       	brcs	.+8      	; 0x2880 <__udivmodsi4_ep>
    2878:	a2 1b       	sub	r26, r18
    287a:	b3 0b       	sbc	r27, r19
    287c:	e4 0b       	sbc	r30, r20
    287e:	f5 0b       	sbc	r31, r21

00002880 <__udivmodsi4_ep>:
    2880:	66 1f       	adc	r22, r22
    2882:	77 1f       	adc	r23, r23
    2884:	88 1f       	adc	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	1a 94       	dec	r1
    288a:	69 f7       	brne	.-38     	; 0x2866 <__udivmodsi4_loop>
    288c:	60 95       	com	r22
    288e:	70 95       	com	r23
    2890:	80 95       	com	r24
    2892:	90 95       	com	r25
    2894:	9b 01       	movw	r18, r22
    2896:	ac 01       	movw	r20, r24
    2898:	bd 01       	movw	r22, r26
    289a:	cf 01       	movw	r24, r30
    289c:	08 95       	ret

0000289e <__divmodsi4>:
    289e:	05 2e       	mov	r0, r21
    28a0:	97 fb       	bst	r25, 7
    28a2:	1e f4       	brtc	.+6      	; 0x28aa <__divmodsi4+0xc>
    28a4:	00 94       	com	r0
    28a6:	0e 94 66 14 	call	0x28cc	; 0x28cc <__negsi2>
    28aa:	57 fd       	sbrc	r21, 7
    28ac:	07 d0       	rcall	.+14     	; 0x28bc <__divmodsi4_neg2>
    28ae:	0e 94 2d 14 	call	0x285a	; 0x285a <__udivmodsi4>
    28b2:	07 fc       	sbrc	r0, 7
    28b4:	03 d0       	rcall	.+6      	; 0x28bc <__divmodsi4_neg2>
    28b6:	4e f4       	brtc	.+18     	; 0x28ca <__divmodsi4_exit>
    28b8:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__negsi2>

000028bc <__divmodsi4_neg2>:
    28bc:	50 95       	com	r21
    28be:	40 95       	com	r20
    28c0:	30 95       	com	r19
    28c2:	21 95       	neg	r18
    28c4:	3f 4f       	sbci	r19, 0xFF	; 255
    28c6:	4f 4f       	sbci	r20, 0xFF	; 255
    28c8:	5f 4f       	sbci	r21, 0xFF	; 255

000028ca <__divmodsi4_exit>:
    28ca:	08 95       	ret

000028cc <__negsi2>:
    28cc:	90 95       	com	r25
    28ce:	80 95       	com	r24
    28d0:	70 95       	com	r23
    28d2:	61 95       	neg	r22
    28d4:	7f 4f       	sbci	r23, 0xFF	; 255
    28d6:	8f 4f       	sbci	r24, 0xFF	; 255
    28d8:	9f 4f       	sbci	r25, 0xFF	; 255
    28da:	08 95       	ret

000028dc <__umulhisi3>:
    28dc:	a2 9f       	mul	r26, r18
    28de:	b0 01       	movw	r22, r0
    28e0:	b3 9f       	mul	r27, r19
    28e2:	c0 01       	movw	r24, r0
    28e4:	a3 9f       	mul	r26, r19
    28e6:	70 0d       	add	r23, r0
    28e8:	81 1d       	adc	r24, r1
    28ea:	11 24       	eor	r1, r1
    28ec:	91 1d       	adc	r25, r1
    28ee:	b2 9f       	mul	r27, r18
    28f0:	70 0d       	add	r23, r0
    28f2:	81 1d       	adc	r24, r1
    28f4:	11 24       	eor	r1, r1
    28f6:	91 1d       	adc	r25, r1
    28f8:	08 95       	ret

000028fa <__udivmodhi4>:
    28fa:	aa 1b       	sub	r26, r26
    28fc:	bb 1b       	sub	r27, r27
    28fe:	51 e1       	ldi	r21, 0x11	; 17
    2900:	07 c0       	rjmp	.+14     	; 0x2910 <__udivmodhi4_ep>

00002902 <__udivmodhi4_loop>:
    2902:	aa 1f       	adc	r26, r26
    2904:	bb 1f       	adc	r27, r27
    2906:	a6 17       	cp	r26, r22
    2908:	b7 07       	cpc	r27, r23
    290a:	10 f0       	brcs	.+4      	; 0x2910 <__udivmodhi4_ep>
    290c:	a6 1b       	sub	r26, r22
    290e:	b7 0b       	sbc	r27, r23

00002910 <__udivmodhi4_ep>:
    2910:	88 1f       	adc	r24, r24
    2912:	99 1f       	adc	r25, r25
    2914:	5a 95       	dec	r21
    2916:	a9 f7       	brne	.-22     	; 0x2902 <__udivmodhi4_loop>
    2918:	80 95       	com	r24
    291a:	90 95       	com	r25
    291c:	bc 01       	movw	r22, r24
    291e:	cd 01       	movw	r24, r26
    2920:	08 95       	ret

00002922 <fgetc>:
    2922:	cf 93       	push	r28
    2924:	df 93       	push	r29
    2926:	ec 01       	movw	r28, r24
    2928:	2b 81       	ldd	r18, Y+3	; 0x03
    292a:	20 ff       	sbrs	r18, 0
    292c:	33 c0       	rjmp	.+102    	; 0x2994 <fgetc+0x72>
    292e:	26 ff       	sbrs	r18, 6
    2930:	0a c0       	rjmp	.+20     	; 0x2946 <fgetc+0x24>
    2932:	2f 7b       	andi	r18, 0xBF	; 191
    2934:	2b 83       	std	Y+3, r18	; 0x03
    2936:	8e 81       	ldd	r24, Y+6	; 0x06
    2938:	9f 81       	ldd	r25, Y+7	; 0x07
    293a:	01 96       	adiw	r24, 0x01	; 1
    293c:	9f 83       	std	Y+7, r25	; 0x07
    293e:	8e 83       	std	Y+6, r24	; 0x06
    2940:	8a 81       	ldd	r24, Y+2	; 0x02
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	29 c0       	rjmp	.+82     	; 0x2998 <fgetc+0x76>
    2946:	22 ff       	sbrs	r18, 2
    2948:	0f c0       	rjmp	.+30     	; 0x2968 <fgetc+0x46>
    294a:	e8 81       	ld	r30, Y
    294c:	f9 81       	ldd	r31, Y+1	; 0x01
    294e:	80 81       	ld	r24, Z
    2950:	08 2e       	mov	r0, r24
    2952:	00 0c       	add	r0, r0
    2954:	99 0b       	sbc	r25, r25
    2956:	00 97       	sbiw	r24, 0x00	; 0
    2958:	19 f4       	brne	.+6      	; 0x2960 <fgetc+0x3e>
    295a:	20 62       	ori	r18, 0x20	; 32
    295c:	2b 83       	std	Y+3, r18	; 0x03
    295e:	1a c0       	rjmp	.+52     	; 0x2994 <fgetc+0x72>
    2960:	31 96       	adiw	r30, 0x01	; 1
    2962:	f9 83       	std	Y+1, r31	; 0x01
    2964:	e8 83       	st	Y, r30
    2966:	0e c0       	rjmp	.+28     	; 0x2984 <fgetc+0x62>
    2968:	ea 85       	ldd	r30, Y+10	; 0x0a
    296a:	fb 85       	ldd	r31, Y+11	; 0x0b
    296c:	09 95       	icall
    296e:	97 ff       	sbrs	r25, 7
    2970:	09 c0       	rjmp	.+18     	; 0x2984 <fgetc+0x62>
    2972:	2b 81       	ldd	r18, Y+3	; 0x03
    2974:	01 96       	adiw	r24, 0x01	; 1
    2976:	11 f0       	breq	.+4      	; 0x297c <fgetc+0x5a>
    2978:	80 e2       	ldi	r24, 0x20	; 32
    297a:	01 c0       	rjmp	.+2      	; 0x297e <fgetc+0x5c>
    297c:	80 e1       	ldi	r24, 0x10	; 16
    297e:	82 2b       	or	r24, r18
    2980:	8b 83       	std	Y+3, r24	; 0x03
    2982:	08 c0       	rjmp	.+16     	; 0x2994 <fgetc+0x72>
    2984:	2e 81       	ldd	r18, Y+6	; 0x06
    2986:	3f 81       	ldd	r19, Y+7	; 0x07
    2988:	2f 5f       	subi	r18, 0xFF	; 255
    298a:	3f 4f       	sbci	r19, 0xFF	; 255
    298c:	3f 83       	std	Y+7, r19	; 0x07
    298e:	2e 83       	std	Y+6, r18	; 0x06
    2990:	99 27       	eor	r25, r25
    2992:	02 c0       	rjmp	.+4      	; 0x2998 <fgetc+0x76>
    2994:	8f ef       	ldi	r24, 0xFF	; 255
    2996:	9f ef       	ldi	r25, 0xFF	; 255
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	08 95       	ret

0000299e <printf>:
    299e:	a0 e0       	ldi	r26, 0x00	; 0
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e5 ed       	ldi	r30, 0xD5	; 213
    29a4:	f4 e1       	ldi	r31, 0x14	; 20
    29a6:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__prologue_saves__+0x20>
    29aa:	ae 01       	movw	r20, r28
    29ac:	4b 5f       	subi	r20, 0xFB	; 251
    29ae:	5f 4f       	sbci	r21, 0xFF	; 255
    29b0:	fa 01       	movw	r30, r20
    29b2:	61 91       	ld	r22, Z+
    29b4:	71 91       	ld	r23, Z+
    29b6:	af 01       	movw	r20, r30
    29b8:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <__iob+0x2>
    29bc:	90 91 70 06 	lds	r25, 0x0670	; 0x800670 <__iob+0x3>
    29c0:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <vfprintf>
    29c4:	e2 e0       	ldi	r30, 0x02	; 2
    29c6:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__epilogue_restores__+0x20>

000029ca <printf_P>:
    29ca:	a0 e0       	ldi	r26, 0x00	; 0
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	eb ee       	ldi	r30, 0xEB	; 235
    29d0:	f4 e1       	ldi	r31, 0x14	; 20
    29d2:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__prologue_saves__+0x1c>
    29d6:	ae 01       	movw	r20, r28
    29d8:	49 5f       	subi	r20, 0xF9	; 249
    29da:	5f 4f       	sbci	r21, 0xFF	; 255
    29dc:	da 01       	movw	r26, r20
    29de:	6d 91       	ld	r22, X+
    29e0:	7d 91       	ld	r23, X+
    29e2:	ad 01       	movw	r20, r26
    29e4:	0d e6       	ldi	r16, 0x6D	; 109
    29e6:	16 e0       	ldi	r17, 0x06	; 6
    29e8:	f8 01       	movw	r30, r16
    29ea:	82 81       	ldd	r24, Z+2	; 0x02
    29ec:	93 81       	ldd	r25, Z+3	; 0x03
    29ee:	dc 01       	movw	r26, r24
    29f0:	13 96       	adiw	r26, 0x03	; 3
    29f2:	2c 91       	ld	r18, X
    29f4:	13 97       	sbiw	r26, 0x03	; 3
    29f6:	28 60       	ori	r18, 0x08	; 8
    29f8:	13 96       	adiw	r26, 0x03	; 3
    29fa:	2c 93       	st	X, r18
    29fc:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <vfprintf>
    2a00:	d8 01       	movw	r26, r16
    2a02:	12 96       	adiw	r26, 0x02	; 2
    2a04:	ed 91       	ld	r30, X+
    2a06:	fc 91       	ld	r31, X
    2a08:	13 97       	sbiw	r26, 0x03	; 3
    2a0a:	23 81       	ldd	r18, Z+3	; 0x03
    2a0c:	27 7f       	andi	r18, 0xF7	; 247
    2a0e:	23 83       	std	Z+3, r18	; 0x03
    2a10:	e4 e0       	ldi	r30, 0x04	; 4
    2a12:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__epilogue_restores__+0x1c>

00002a16 <vfprintf>:
    2a16:	ab e0       	ldi	r26, 0x0B	; 11
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	e1 e1       	ldi	r30, 0x11	; 17
    2a1c:	f5 e1       	ldi	r31, 0x15	; 21
    2a1e:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__prologue_saves__>
    2a22:	6c 01       	movw	r12, r24
    2a24:	7b 01       	movw	r14, r22
    2a26:	8a 01       	movw	r16, r20
    2a28:	fc 01       	movw	r30, r24
    2a2a:	17 82       	std	Z+7, r1	; 0x07
    2a2c:	16 82       	std	Z+6, r1	; 0x06
    2a2e:	83 81       	ldd	r24, Z+3	; 0x03
    2a30:	81 ff       	sbrs	r24, 1
    2a32:	cc c1       	rjmp	.+920    	; 0x2dcc <vfprintf+0x3b6>
    2a34:	ce 01       	movw	r24, r28
    2a36:	01 96       	adiw	r24, 0x01	; 1
    2a38:	3c 01       	movw	r6, r24
    2a3a:	f6 01       	movw	r30, r12
    2a3c:	93 81       	ldd	r25, Z+3	; 0x03
    2a3e:	f7 01       	movw	r30, r14
    2a40:	93 fd       	sbrc	r25, 3
    2a42:	85 91       	lpm	r24, Z+
    2a44:	93 ff       	sbrs	r25, 3
    2a46:	81 91       	ld	r24, Z+
    2a48:	7f 01       	movw	r14, r30
    2a4a:	88 23       	and	r24, r24
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <vfprintf+0x3a>
    2a4e:	ba c1       	rjmp	.+884    	; 0x2dc4 <vfprintf+0x3ae>
    2a50:	85 32       	cpi	r24, 0x25	; 37
    2a52:	39 f4       	brne	.+14     	; 0x2a62 <vfprintf+0x4c>
    2a54:	93 fd       	sbrc	r25, 3
    2a56:	85 91       	lpm	r24, Z+
    2a58:	93 ff       	sbrs	r25, 3
    2a5a:	81 91       	ld	r24, Z+
    2a5c:	7f 01       	movw	r14, r30
    2a5e:	85 32       	cpi	r24, 0x25	; 37
    2a60:	29 f4       	brne	.+10     	; 0x2a6c <vfprintf+0x56>
    2a62:	b6 01       	movw	r22, r12
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2a6a:	e7 cf       	rjmp	.-50     	; 0x2a3a <vfprintf+0x24>
    2a6c:	91 2c       	mov	r9, r1
    2a6e:	21 2c       	mov	r2, r1
    2a70:	31 2c       	mov	r3, r1
    2a72:	ff e1       	ldi	r31, 0x1F	; 31
    2a74:	f3 15       	cp	r31, r3
    2a76:	d8 f0       	brcs	.+54     	; 0x2aae <vfprintf+0x98>
    2a78:	8b 32       	cpi	r24, 0x2B	; 43
    2a7a:	79 f0       	breq	.+30     	; 0x2a9a <vfprintf+0x84>
    2a7c:	38 f4       	brcc	.+14     	; 0x2a8c <vfprintf+0x76>
    2a7e:	80 32       	cpi	r24, 0x20	; 32
    2a80:	79 f0       	breq	.+30     	; 0x2aa0 <vfprintf+0x8a>
    2a82:	83 32       	cpi	r24, 0x23	; 35
    2a84:	a1 f4       	brne	.+40     	; 0x2aae <vfprintf+0x98>
    2a86:	23 2d       	mov	r18, r3
    2a88:	20 61       	ori	r18, 0x10	; 16
    2a8a:	1d c0       	rjmp	.+58     	; 0x2ac6 <vfprintf+0xb0>
    2a8c:	8d 32       	cpi	r24, 0x2D	; 45
    2a8e:	61 f0       	breq	.+24     	; 0x2aa8 <vfprintf+0x92>
    2a90:	80 33       	cpi	r24, 0x30	; 48
    2a92:	69 f4       	brne	.+26     	; 0x2aae <vfprintf+0x98>
    2a94:	23 2d       	mov	r18, r3
    2a96:	21 60       	ori	r18, 0x01	; 1
    2a98:	16 c0       	rjmp	.+44     	; 0x2ac6 <vfprintf+0xb0>
    2a9a:	83 2d       	mov	r24, r3
    2a9c:	82 60       	ori	r24, 0x02	; 2
    2a9e:	38 2e       	mov	r3, r24
    2aa0:	e3 2d       	mov	r30, r3
    2aa2:	e4 60       	ori	r30, 0x04	; 4
    2aa4:	3e 2e       	mov	r3, r30
    2aa6:	2a c0       	rjmp	.+84     	; 0x2afc <vfprintf+0xe6>
    2aa8:	f3 2d       	mov	r31, r3
    2aaa:	f8 60       	ori	r31, 0x08	; 8
    2aac:	1d c0       	rjmp	.+58     	; 0x2ae8 <vfprintf+0xd2>
    2aae:	37 fc       	sbrc	r3, 7
    2ab0:	2d c0       	rjmp	.+90     	; 0x2b0c <vfprintf+0xf6>
    2ab2:	20 ed       	ldi	r18, 0xD0	; 208
    2ab4:	28 0f       	add	r18, r24
    2ab6:	2a 30       	cpi	r18, 0x0A	; 10
    2ab8:	40 f0       	brcs	.+16     	; 0x2aca <vfprintf+0xb4>
    2aba:	8e 32       	cpi	r24, 0x2E	; 46
    2abc:	b9 f4       	brne	.+46     	; 0x2aec <vfprintf+0xd6>
    2abe:	36 fc       	sbrc	r3, 6
    2ac0:	81 c1       	rjmp	.+770    	; 0x2dc4 <vfprintf+0x3ae>
    2ac2:	23 2d       	mov	r18, r3
    2ac4:	20 64       	ori	r18, 0x40	; 64
    2ac6:	32 2e       	mov	r3, r18
    2ac8:	19 c0       	rjmp	.+50     	; 0x2afc <vfprintf+0xe6>
    2aca:	36 fe       	sbrs	r3, 6
    2acc:	06 c0       	rjmp	.+12     	; 0x2ada <vfprintf+0xc4>
    2ace:	8a e0       	ldi	r24, 0x0A	; 10
    2ad0:	98 9e       	mul	r9, r24
    2ad2:	20 0d       	add	r18, r0
    2ad4:	11 24       	eor	r1, r1
    2ad6:	92 2e       	mov	r9, r18
    2ad8:	11 c0       	rjmp	.+34     	; 0x2afc <vfprintf+0xe6>
    2ada:	ea e0       	ldi	r30, 0x0A	; 10
    2adc:	2e 9e       	mul	r2, r30
    2ade:	20 0d       	add	r18, r0
    2ae0:	11 24       	eor	r1, r1
    2ae2:	22 2e       	mov	r2, r18
    2ae4:	f3 2d       	mov	r31, r3
    2ae6:	f0 62       	ori	r31, 0x20	; 32
    2ae8:	3f 2e       	mov	r3, r31
    2aea:	08 c0       	rjmp	.+16     	; 0x2afc <vfprintf+0xe6>
    2aec:	8c 36       	cpi	r24, 0x6C	; 108
    2aee:	21 f4       	brne	.+8      	; 0x2af8 <vfprintf+0xe2>
    2af0:	83 2d       	mov	r24, r3
    2af2:	80 68       	ori	r24, 0x80	; 128
    2af4:	38 2e       	mov	r3, r24
    2af6:	02 c0       	rjmp	.+4      	; 0x2afc <vfprintf+0xe6>
    2af8:	88 36       	cpi	r24, 0x68	; 104
    2afa:	41 f4       	brne	.+16     	; 0x2b0c <vfprintf+0xf6>
    2afc:	f7 01       	movw	r30, r14
    2afe:	93 fd       	sbrc	r25, 3
    2b00:	85 91       	lpm	r24, Z+
    2b02:	93 ff       	sbrs	r25, 3
    2b04:	81 91       	ld	r24, Z+
    2b06:	7f 01       	movw	r14, r30
    2b08:	81 11       	cpse	r24, r1
    2b0a:	b3 cf       	rjmp	.-154    	; 0x2a72 <vfprintf+0x5c>
    2b0c:	98 2f       	mov	r25, r24
    2b0e:	9f 7d       	andi	r25, 0xDF	; 223
    2b10:	95 54       	subi	r25, 0x45	; 69
    2b12:	93 30       	cpi	r25, 0x03	; 3
    2b14:	28 f4       	brcc	.+10     	; 0x2b20 <vfprintf+0x10a>
    2b16:	0c 5f       	subi	r16, 0xFC	; 252
    2b18:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1a:	9f e3       	ldi	r25, 0x3F	; 63
    2b1c:	99 83       	std	Y+1, r25	; 0x01
    2b1e:	0d c0       	rjmp	.+26     	; 0x2b3a <vfprintf+0x124>
    2b20:	83 36       	cpi	r24, 0x63	; 99
    2b22:	31 f0       	breq	.+12     	; 0x2b30 <vfprintf+0x11a>
    2b24:	83 37       	cpi	r24, 0x73	; 115
    2b26:	71 f0       	breq	.+28     	; 0x2b44 <vfprintf+0x12e>
    2b28:	83 35       	cpi	r24, 0x53	; 83
    2b2a:	09 f0       	breq	.+2      	; 0x2b2e <vfprintf+0x118>
    2b2c:	59 c0       	rjmp	.+178    	; 0x2be0 <vfprintf+0x1ca>
    2b2e:	21 c0       	rjmp	.+66     	; 0x2b72 <vfprintf+0x15c>
    2b30:	f8 01       	movw	r30, r16
    2b32:	80 81       	ld	r24, Z
    2b34:	89 83       	std	Y+1, r24	; 0x01
    2b36:	0e 5f       	subi	r16, 0xFE	; 254
    2b38:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3a:	88 24       	eor	r8, r8
    2b3c:	83 94       	inc	r8
    2b3e:	91 2c       	mov	r9, r1
    2b40:	53 01       	movw	r10, r6
    2b42:	13 c0       	rjmp	.+38     	; 0x2b6a <vfprintf+0x154>
    2b44:	28 01       	movw	r4, r16
    2b46:	f2 e0       	ldi	r31, 0x02	; 2
    2b48:	4f 0e       	add	r4, r31
    2b4a:	51 1c       	adc	r5, r1
    2b4c:	f8 01       	movw	r30, r16
    2b4e:	a0 80       	ld	r10, Z
    2b50:	b1 80       	ldd	r11, Z+1	; 0x01
    2b52:	36 fe       	sbrs	r3, 6
    2b54:	03 c0       	rjmp	.+6      	; 0x2b5c <vfprintf+0x146>
    2b56:	69 2d       	mov	r22, r9
    2b58:	70 e0       	ldi	r23, 0x00	; 0
    2b5a:	02 c0       	rjmp	.+4      	; 0x2b60 <vfprintf+0x14a>
    2b5c:	6f ef       	ldi	r22, 0xFF	; 255
    2b5e:	7f ef       	ldi	r23, 0xFF	; 255
    2b60:	c5 01       	movw	r24, r10
    2b62:	0e 94 f7 16 	call	0x2dee	; 0x2dee <strnlen>
    2b66:	4c 01       	movw	r8, r24
    2b68:	82 01       	movw	r16, r4
    2b6a:	f3 2d       	mov	r31, r3
    2b6c:	ff 77       	andi	r31, 0x7F	; 127
    2b6e:	3f 2e       	mov	r3, r31
    2b70:	16 c0       	rjmp	.+44     	; 0x2b9e <vfprintf+0x188>
    2b72:	28 01       	movw	r4, r16
    2b74:	22 e0       	ldi	r18, 0x02	; 2
    2b76:	42 0e       	add	r4, r18
    2b78:	51 1c       	adc	r5, r1
    2b7a:	f8 01       	movw	r30, r16
    2b7c:	a0 80       	ld	r10, Z
    2b7e:	b1 80       	ldd	r11, Z+1	; 0x01
    2b80:	36 fe       	sbrs	r3, 6
    2b82:	03 c0       	rjmp	.+6      	; 0x2b8a <vfprintf+0x174>
    2b84:	69 2d       	mov	r22, r9
    2b86:	70 e0       	ldi	r23, 0x00	; 0
    2b88:	02 c0       	rjmp	.+4      	; 0x2b8e <vfprintf+0x178>
    2b8a:	6f ef       	ldi	r22, 0xFF	; 255
    2b8c:	7f ef       	ldi	r23, 0xFF	; 255
    2b8e:	c5 01       	movw	r24, r10
    2b90:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <strnlen_P>
    2b94:	4c 01       	movw	r8, r24
    2b96:	f3 2d       	mov	r31, r3
    2b98:	f0 68       	ori	r31, 0x80	; 128
    2b9a:	3f 2e       	mov	r3, r31
    2b9c:	82 01       	movw	r16, r4
    2b9e:	33 fc       	sbrc	r3, 3
    2ba0:	1b c0       	rjmp	.+54     	; 0x2bd8 <vfprintf+0x1c2>
    2ba2:	82 2d       	mov	r24, r2
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	88 16       	cp	r8, r24
    2ba8:	99 06       	cpc	r9, r25
    2baa:	b0 f4       	brcc	.+44     	; 0x2bd8 <vfprintf+0x1c2>
    2bac:	b6 01       	movw	r22, r12
    2bae:	80 e2       	ldi	r24, 0x20	; 32
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2bb6:	2a 94       	dec	r2
    2bb8:	f4 cf       	rjmp	.-24     	; 0x2ba2 <vfprintf+0x18c>
    2bba:	f5 01       	movw	r30, r10
    2bbc:	37 fc       	sbrc	r3, 7
    2bbe:	85 91       	lpm	r24, Z+
    2bc0:	37 fe       	sbrs	r3, 7
    2bc2:	81 91       	ld	r24, Z+
    2bc4:	5f 01       	movw	r10, r30
    2bc6:	b6 01       	movw	r22, r12
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2bce:	21 10       	cpse	r2, r1
    2bd0:	2a 94       	dec	r2
    2bd2:	21 e0       	ldi	r18, 0x01	; 1
    2bd4:	82 1a       	sub	r8, r18
    2bd6:	91 08       	sbc	r9, r1
    2bd8:	81 14       	cp	r8, r1
    2bda:	91 04       	cpc	r9, r1
    2bdc:	71 f7       	brne	.-36     	; 0x2bba <vfprintf+0x1a4>
    2bde:	e8 c0       	rjmp	.+464    	; 0x2db0 <vfprintf+0x39a>
    2be0:	84 36       	cpi	r24, 0x64	; 100
    2be2:	11 f0       	breq	.+4      	; 0x2be8 <vfprintf+0x1d2>
    2be4:	89 36       	cpi	r24, 0x69	; 105
    2be6:	41 f5       	brne	.+80     	; 0x2c38 <vfprintf+0x222>
    2be8:	f8 01       	movw	r30, r16
    2bea:	37 fe       	sbrs	r3, 7
    2bec:	07 c0       	rjmp	.+14     	; 0x2bfc <vfprintf+0x1e6>
    2bee:	60 81       	ld	r22, Z
    2bf0:	71 81       	ldd	r23, Z+1	; 0x01
    2bf2:	82 81       	ldd	r24, Z+2	; 0x02
    2bf4:	93 81       	ldd	r25, Z+3	; 0x03
    2bf6:	0c 5f       	subi	r16, 0xFC	; 252
    2bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bfa:	08 c0       	rjmp	.+16     	; 0x2c0c <vfprintf+0x1f6>
    2bfc:	60 81       	ld	r22, Z
    2bfe:	71 81       	ldd	r23, Z+1	; 0x01
    2c00:	07 2e       	mov	r0, r23
    2c02:	00 0c       	add	r0, r0
    2c04:	88 0b       	sbc	r24, r24
    2c06:	99 0b       	sbc	r25, r25
    2c08:	0e 5f       	subi	r16, 0xFE	; 254
    2c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0c:	f3 2d       	mov	r31, r3
    2c0e:	ff 76       	andi	r31, 0x6F	; 111
    2c10:	3f 2e       	mov	r3, r31
    2c12:	97 ff       	sbrs	r25, 7
    2c14:	09 c0       	rjmp	.+18     	; 0x2c28 <vfprintf+0x212>
    2c16:	90 95       	com	r25
    2c18:	80 95       	com	r24
    2c1a:	70 95       	com	r23
    2c1c:	61 95       	neg	r22
    2c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c20:	8f 4f       	sbci	r24, 0xFF	; 255
    2c22:	9f 4f       	sbci	r25, 0xFF	; 255
    2c24:	f0 68       	ori	r31, 0x80	; 128
    2c26:	3f 2e       	mov	r3, r31
    2c28:	2a e0       	ldi	r18, 0x0A	; 10
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	a3 01       	movw	r20, r6
    2c2e:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__ultoa_invert>
    2c32:	88 2e       	mov	r8, r24
    2c34:	86 18       	sub	r8, r6
    2c36:	45 c0       	rjmp	.+138    	; 0x2cc2 <vfprintf+0x2ac>
    2c38:	85 37       	cpi	r24, 0x75	; 117
    2c3a:	31 f4       	brne	.+12     	; 0x2c48 <vfprintf+0x232>
    2c3c:	23 2d       	mov	r18, r3
    2c3e:	2f 7e       	andi	r18, 0xEF	; 239
    2c40:	b2 2e       	mov	r11, r18
    2c42:	2a e0       	ldi	r18, 0x0A	; 10
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	25 c0       	rjmp	.+74     	; 0x2c92 <vfprintf+0x27c>
    2c48:	93 2d       	mov	r25, r3
    2c4a:	99 7f       	andi	r25, 0xF9	; 249
    2c4c:	b9 2e       	mov	r11, r25
    2c4e:	8f 36       	cpi	r24, 0x6F	; 111
    2c50:	c1 f0       	breq	.+48     	; 0x2c82 <vfprintf+0x26c>
    2c52:	18 f4       	brcc	.+6      	; 0x2c5a <vfprintf+0x244>
    2c54:	88 35       	cpi	r24, 0x58	; 88
    2c56:	79 f0       	breq	.+30     	; 0x2c76 <vfprintf+0x260>
    2c58:	b5 c0       	rjmp	.+362    	; 0x2dc4 <vfprintf+0x3ae>
    2c5a:	80 37       	cpi	r24, 0x70	; 112
    2c5c:	19 f0       	breq	.+6      	; 0x2c64 <vfprintf+0x24e>
    2c5e:	88 37       	cpi	r24, 0x78	; 120
    2c60:	21 f0       	breq	.+8      	; 0x2c6a <vfprintf+0x254>
    2c62:	b0 c0       	rjmp	.+352    	; 0x2dc4 <vfprintf+0x3ae>
    2c64:	e9 2f       	mov	r30, r25
    2c66:	e0 61       	ori	r30, 0x10	; 16
    2c68:	be 2e       	mov	r11, r30
    2c6a:	b4 fe       	sbrs	r11, 4
    2c6c:	0d c0       	rjmp	.+26     	; 0x2c88 <vfprintf+0x272>
    2c6e:	fb 2d       	mov	r31, r11
    2c70:	f4 60       	ori	r31, 0x04	; 4
    2c72:	bf 2e       	mov	r11, r31
    2c74:	09 c0       	rjmp	.+18     	; 0x2c88 <vfprintf+0x272>
    2c76:	34 fe       	sbrs	r3, 4
    2c78:	0a c0       	rjmp	.+20     	; 0x2c8e <vfprintf+0x278>
    2c7a:	29 2f       	mov	r18, r25
    2c7c:	26 60       	ori	r18, 0x06	; 6
    2c7e:	b2 2e       	mov	r11, r18
    2c80:	06 c0       	rjmp	.+12     	; 0x2c8e <vfprintf+0x278>
    2c82:	28 e0       	ldi	r18, 0x08	; 8
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	05 c0       	rjmp	.+10     	; 0x2c92 <vfprintf+0x27c>
    2c88:	20 e1       	ldi	r18, 0x10	; 16
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	02 c0       	rjmp	.+4      	; 0x2c92 <vfprintf+0x27c>
    2c8e:	20 e1       	ldi	r18, 0x10	; 16
    2c90:	32 e0       	ldi	r19, 0x02	; 2
    2c92:	f8 01       	movw	r30, r16
    2c94:	b7 fe       	sbrs	r11, 7
    2c96:	07 c0       	rjmp	.+14     	; 0x2ca6 <vfprintf+0x290>
    2c98:	60 81       	ld	r22, Z
    2c9a:	71 81       	ldd	r23, Z+1	; 0x01
    2c9c:	82 81       	ldd	r24, Z+2	; 0x02
    2c9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ca0:	0c 5f       	subi	r16, 0xFC	; 252
    2ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca4:	06 c0       	rjmp	.+12     	; 0x2cb2 <vfprintf+0x29c>
    2ca6:	60 81       	ld	r22, Z
    2ca8:	71 81       	ldd	r23, Z+1	; 0x01
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	0e 5f       	subi	r16, 0xFE	; 254
    2cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb2:	a3 01       	movw	r20, r6
    2cb4:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__ultoa_invert>
    2cb8:	88 2e       	mov	r8, r24
    2cba:	86 18       	sub	r8, r6
    2cbc:	fb 2d       	mov	r31, r11
    2cbe:	ff 77       	andi	r31, 0x7F	; 127
    2cc0:	3f 2e       	mov	r3, r31
    2cc2:	36 fe       	sbrs	r3, 6
    2cc4:	0d c0       	rjmp	.+26     	; 0x2ce0 <vfprintf+0x2ca>
    2cc6:	23 2d       	mov	r18, r3
    2cc8:	2e 7f       	andi	r18, 0xFE	; 254
    2cca:	a2 2e       	mov	r10, r18
    2ccc:	89 14       	cp	r8, r9
    2cce:	58 f4       	brcc	.+22     	; 0x2ce6 <vfprintf+0x2d0>
    2cd0:	34 fe       	sbrs	r3, 4
    2cd2:	0b c0       	rjmp	.+22     	; 0x2cea <vfprintf+0x2d4>
    2cd4:	32 fc       	sbrc	r3, 2
    2cd6:	09 c0       	rjmp	.+18     	; 0x2cea <vfprintf+0x2d4>
    2cd8:	83 2d       	mov	r24, r3
    2cda:	8e 7e       	andi	r24, 0xEE	; 238
    2cdc:	a8 2e       	mov	r10, r24
    2cde:	05 c0       	rjmp	.+10     	; 0x2cea <vfprintf+0x2d4>
    2ce0:	b8 2c       	mov	r11, r8
    2ce2:	a3 2c       	mov	r10, r3
    2ce4:	03 c0       	rjmp	.+6      	; 0x2cec <vfprintf+0x2d6>
    2ce6:	b8 2c       	mov	r11, r8
    2ce8:	01 c0       	rjmp	.+2      	; 0x2cec <vfprintf+0x2d6>
    2cea:	b9 2c       	mov	r11, r9
    2cec:	a4 fe       	sbrs	r10, 4
    2cee:	0f c0       	rjmp	.+30     	; 0x2d0e <vfprintf+0x2f8>
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e8 0d       	add	r30, r8
    2cf4:	f1 1d       	adc	r31, r1
    2cf6:	80 81       	ld	r24, Z
    2cf8:	80 33       	cpi	r24, 0x30	; 48
    2cfa:	21 f4       	brne	.+8      	; 0x2d04 <vfprintf+0x2ee>
    2cfc:	9a 2d       	mov	r25, r10
    2cfe:	99 7e       	andi	r25, 0xE9	; 233
    2d00:	a9 2e       	mov	r10, r25
    2d02:	09 c0       	rjmp	.+18     	; 0x2d16 <vfprintf+0x300>
    2d04:	a2 fe       	sbrs	r10, 2
    2d06:	06 c0       	rjmp	.+12     	; 0x2d14 <vfprintf+0x2fe>
    2d08:	b3 94       	inc	r11
    2d0a:	b3 94       	inc	r11
    2d0c:	04 c0       	rjmp	.+8      	; 0x2d16 <vfprintf+0x300>
    2d0e:	8a 2d       	mov	r24, r10
    2d10:	86 78       	andi	r24, 0x86	; 134
    2d12:	09 f0       	breq	.+2      	; 0x2d16 <vfprintf+0x300>
    2d14:	b3 94       	inc	r11
    2d16:	a3 fc       	sbrc	r10, 3
    2d18:	11 c0       	rjmp	.+34     	; 0x2d3c <vfprintf+0x326>
    2d1a:	a0 fe       	sbrs	r10, 0
    2d1c:	06 c0       	rjmp	.+12     	; 0x2d2a <vfprintf+0x314>
    2d1e:	b2 14       	cp	r11, r2
    2d20:	88 f4       	brcc	.+34     	; 0x2d44 <vfprintf+0x32e>
    2d22:	28 0c       	add	r2, r8
    2d24:	92 2c       	mov	r9, r2
    2d26:	9b 18       	sub	r9, r11
    2d28:	0e c0       	rjmp	.+28     	; 0x2d46 <vfprintf+0x330>
    2d2a:	b2 14       	cp	r11, r2
    2d2c:	60 f4       	brcc	.+24     	; 0x2d46 <vfprintf+0x330>
    2d2e:	b6 01       	movw	r22, r12
    2d30:	80 e2       	ldi	r24, 0x20	; 32
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2d38:	b3 94       	inc	r11
    2d3a:	f7 cf       	rjmp	.-18     	; 0x2d2a <vfprintf+0x314>
    2d3c:	b2 14       	cp	r11, r2
    2d3e:	18 f4       	brcc	.+6      	; 0x2d46 <vfprintf+0x330>
    2d40:	2b 18       	sub	r2, r11
    2d42:	02 c0       	rjmp	.+4      	; 0x2d48 <vfprintf+0x332>
    2d44:	98 2c       	mov	r9, r8
    2d46:	21 2c       	mov	r2, r1
    2d48:	a4 fe       	sbrs	r10, 4
    2d4a:	10 c0       	rjmp	.+32     	; 0x2d6c <vfprintf+0x356>
    2d4c:	b6 01       	movw	r22, r12
    2d4e:	80 e3       	ldi	r24, 0x30	; 48
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2d56:	a2 fe       	sbrs	r10, 2
    2d58:	17 c0       	rjmp	.+46     	; 0x2d88 <vfprintf+0x372>
    2d5a:	a1 fc       	sbrc	r10, 1
    2d5c:	03 c0       	rjmp	.+6      	; 0x2d64 <vfprintf+0x34e>
    2d5e:	88 e7       	ldi	r24, 0x78	; 120
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <vfprintf+0x352>
    2d64:	88 e5       	ldi	r24, 0x58	; 88
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	b6 01       	movw	r22, r12
    2d6a:	0c c0       	rjmp	.+24     	; 0x2d84 <vfprintf+0x36e>
    2d6c:	8a 2d       	mov	r24, r10
    2d6e:	86 78       	andi	r24, 0x86	; 134
    2d70:	59 f0       	breq	.+22     	; 0x2d88 <vfprintf+0x372>
    2d72:	a1 fe       	sbrs	r10, 1
    2d74:	02 c0       	rjmp	.+4      	; 0x2d7a <vfprintf+0x364>
    2d76:	8b e2       	ldi	r24, 0x2B	; 43
    2d78:	01 c0       	rjmp	.+2      	; 0x2d7c <vfprintf+0x366>
    2d7a:	80 e2       	ldi	r24, 0x20	; 32
    2d7c:	a7 fc       	sbrc	r10, 7
    2d7e:	8d e2       	ldi	r24, 0x2D	; 45
    2d80:	b6 01       	movw	r22, r12
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2d88:	89 14       	cp	r8, r9
    2d8a:	38 f4       	brcc	.+14     	; 0x2d9a <vfprintf+0x384>
    2d8c:	b6 01       	movw	r22, r12
    2d8e:	80 e3       	ldi	r24, 0x30	; 48
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2d96:	9a 94       	dec	r9
    2d98:	f7 cf       	rjmp	.-18     	; 0x2d88 <vfprintf+0x372>
    2d9a:	8a 94       	dec	r8
    2d9c:	f3 01       	movw	r30, r6
    2d9e:	e8 0d       	add	r30, r8
    2da0:	f1 1d       	adc	r31, r1
    2da2:	80 81       	ld	r24, Z
    2da4:	b6 01       	movw	r22, r12
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2dac:	81 10       	cpse	r8, r1
    2dae:	f5 cf       	rjmp	.-22     	; 0x2d9a <vfprintf+0x384>
    2db0:	22 20       	and	r2, r2
    2db2:	09 f4       	brne	.+2      	; 0x2db6 <vfprintf+0x3a0>
    2db4:	42 ce       	rjmp	.-892    	; 0x2a3a <vfprintf+0x24>
    2db6:	b6 01       	movw	r22, r12
    2db8:	80 e2       	ldi	r24, 0x20	; 32
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2dc0:	2a 94       	dec	r2
    2dc2:	f6 cf       	rjmp	.-20     	; 0x2db0 <vfprintf+0x39a>
    2dc4:	f6 01       	movw	r30, r12
    2dc6:	86 81       	ldd	r24, Z+6	; 0x06
    2dc8:	97 81       	ldd	r25, Z+7	; 0x07
    2dca:	02 c0       	rjmp	.+4      	; 0x2dd0 <vfprintf+0x3ba>
    2dcc:	8f ef       	ldi	r24, 0xFF	; 255
    2dce:	9f ef       	ldi	r25, 0xFF	; 255
    2dd0:	2b 96       	adiw	r28, 0x0b	; 11
    2dd2:	e2 e1       	ldi	r30, 0x12	; 18
    2dd4:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__epilogue_restores__>

00002dd8 <strnlen_P>:
    2dd8:	fc 01       	movw	r30, r24
    2dda:	05 90       	lpm	r0, Z+
    2ddc:	61 50       	subi	r22, 0x01	; 1
    2dde:	70 40       	sbci	r23, 0x00	; 0
    2de0:	01 10       	cpse	r0, r1
    2de2:	d8 f7       	brcc	.-10     	; 0x2dda <strnlen_P+0x2>
    2de4:	80 95       	com	r24
    2de6:	90 95       	com	r25
    2de8:	8e 0f       	add	r24, r30
    2dea:	9f 1f       	adc	r25, r31
    2dec:	08 95       	ret

00002dee <strnlen>:
    2dee:	fc 01       	movw	r30, r24
    2df0:	61 50       	subi	r22, 0x01	; 1
    2df2:	70 40       	sbci	r23, 0x00	; 0
    2df4:	01 90       	ld	r0, Z+
    2df6:	01 10       	cpse	r0, r1
    2df8:	d8 f7       	brcc	.-10     	; 0x2df0 <strnlen+0x2>
    2dfa:	80 95       	com	r24
    2dfc:	90 95       	com	r25
    2dfe:	8e 0f       	add	r24, r30
    2e00:	9f 1f       	adc	r25, r31
    2e02:	08 95       	ret

00002e04 <fputc>:
    2e04:	0f 93       	push	r16
    2e06:	1f 93       	push	r17
    2e08:	cf 93       	push	r28
    2e0a:	df 93       	push	r29
    2e0c:	fb 01       	movw	r30, r22
    2e0e:	23 81       	ldd	r18, Z+3	; 0x03
    2e10:	21 fd       	sbrc	r18, 1
    2e12:	03 c0       	rjmp	.+6      	; 0x2e1a <fputc+0x16>
    2e14:	8f ef       	ldi	r24, 0xFF	; 255
    2e16:	9f ef       	ldi	r25, 0xFF	; 255
    2e18:	2c c0       	rjmp	.+88     	; 0x2e72 <fputc+0x6e>
    2e1a:	22 ff       	sbrs	r18, 2
    2e1c:	16 c0       	rjmp	.+44     	; 0x2e4a <fputc+0x46>
    2e1e:	46 81       	ldd	r20, Z+6	; 0x06
    2e20:	57 81       	ldd	r21, Z+7	; 0x07
    2e22:	24 81       	ldd	r18, Z+4	; 0x04
    2e24:	35 81       	ldd	r19, Z+5	; 0x05
    2e26:	42 17       	cp	r20, r18
    2e28:	53 07       	cpc	r21, r19
    2e2a:	44 f4       	brge	.+16     	; 0x2e3c <fputc+0x38>
    2e2c:	a0 81       	ld	r26, Z
    2e2e:	b1 81       	ldd	r27, Z+1	; 0x01
    2e30:	9d 01       	movw	r18, r26
    2e32:	2f 5f       	subi	r18, 0xFF	; 255
    2e34:	3f 4f       	sbci	r19, 0xFF	; 255
    2e36:	31 83       	std	Z+1, r19	; 0x01
    2e38:	20 83       	st	Z, r18
    2e3a:	8c 93       	st	X, r24
    2e3c:	26 81       	ldd	r18, Z+6	; 0x06
    2e3e:	37 81       	ldd	r19, Z+7	; 0x07
    2e40:	2f 5f       	subi	r18, 0xFF	; 255
    2e42:	3f 4f       	sbci	r19, 0xFF	; 255
    2e44:	37 83       	std	Z+7, r19	; 0x07
    2e46:	26 83       	std	Z+6, r18	; 0x06
    2e48:	14 c0       	rjmp	.+40     	; 0x2e72 <fputc+0x6e>
    2e4a:	8b 01       	movw	r16, r22
    2e4c:	ec 01       	movw	r28, r24
    2e4e:	fb 01       	movw	r30, r22
    2e50:	00 84       	ldd	r0, Z+8	; 0x08
    2e52:	f1 85       	ldd	r31, Z+9	; 0x09
    2e54:	e0 2d       	mov	r30, r0
    2e56:	09 95       	icall
    2e58:	89 2b       	or	r24, r25
    2e5a:	e1 f6       	brne	.-72     	; 0x2e14 <fputc+0x10>
    2e5c:	d8 01       	movw	r26, r16
    2e5e:	16 96       	adiw	r26, 0x06	; 6
    2e60:	8d 91       	ld	r24, X+
    2e62:	9c 91       	ld	r25, X
    2e64:	17 97       	sbiw	r26, 0x07	; 7
    2e66:	01 96       	adiw	r24, 0x01	; 1
    2e68:	17 96       	adiw	r26, 0x07	; 7
    2e6a:	9c 93       	st	X, r25
    2e6c:	8e 93       	st	-X, r24
    2e6e:	16 97       	sbiw	r26, 0x06	; 6
    2e70:	ce 01       	movw	r24, r28
    2e72:	df 91       	pop	r29
    2e74:	cf 91       	pop	r28
    2e76:	1f 91       	pop	r17
    2e78:	0f 91       	pop	r16
    2e7a:	08 95       	ret

00002e7c <__ultoa_invert>:
    2e7c:	fa 01       	movw	r30, r20
    2e7e:	aa 27       	eor	r26, r26
    2e80:	28 30       	cpi	r18, 0x08	; 8
    2e82:	51 f1       	breq	.+84     	; 0x2ed8 <__ultoa_invert+0x5c>
    2e84:	20 31       	cpi	r18, 0x10	; 16
    2e86:	81 f1       	breq	.+96     	; 0x2ee8 <__ultoa_invert+0x6c>
    2e88:	e8 94       	clt
    2e8a:	6f 93       	push	r22
    2e8c:	6e 7f       	andi	r22, 0xFE	; 254
    2e8e:	6e 5f       	subi	r22, 0xFE	; 254
    2e90:	7f 4f       	sbci	r23, 0xFF	; 255
    2e92:	8f 4f       	sbci	r24, 0xFF	; 255
    2e94:	9f 4f       	sbci	r25, 0xFF	; 255
    2e96:	af 4f       	sbci	r26, 0xFF	; 255
    2e98:	b1 e0       	ldi	r27, 0x01	; 1
    2e9a:	3e d0       	rcall	.+124    	; 0x2f18 <__ultoa_invert+0x9c>
    2e9c:	b4 e0       	ldi	r27, 0x04	; 4
    2e9e:	3c d0       	rcall	.+120    	; 0x2f18 <__ultoa_invert+0x9c>
    2ea0:	67 0f       	add	r22, r23
    2ea2:	78 1f       	adc	r23, r24
    2ea4:	89 1f       	adc	r24, r25
    2ea6:	9a 1f       	adc	r25, r26
    2ea8:	a1 1d       	adc	r26, r1
    2eaa:	68 0f       	add	r22, r24
    2eac:	79 1f       	adc	r23, r25
    2eae:	8a 1f       	adc	r24, r26
    2eb0:	91 1d       	adc	r25, r1
    2eb2:	a1 1d       	adc	r26, r1
    2eb4:	6a 0f       	add	r22, r26
    2eb6:	71 1d       	adc	r23, r1
    2eb8:	81 1d       	adc	r24, r1
    2eba:	91 1d       	adc	r25, r1
    2ebc:	a1 1d       	adc	r26, r1
    2ebe:	20 d0       	rcall	.+64     	; 0x2f00 <__ultoa_invert+0x84>
    2ec0:	09 f4       	brne	.+2      	; 0x2ec4 <__ultoa_invert+0x48>
    2ec2:	68 94       	set
    2ec4:	3f 91       	pop	r19
    2ec6:	2a e0       	ldi	r18, 0x0A	; 10
    2ec8:	26 9f       	mul	r18, r22
    2eca:	11 24       	eor	r1, r1
    2ecc:	30 19       	sub	r19, r0
    2ece:	30 5d       	subi	r19, 0xD0	; 208
    2ed0:	31 93       	st	Z+, r19
    2ed2:	de f6       	brtc	.-74     	; 0x2e8a <__ultoa_invert+0xe>
    2ed4:	cf 01       	movw	r24, r30
    2ed6:	08 95       	ret
    2ed8:	46 2f       	mov	r20, r22
    2eda:	47 70       	andi	r20, 0x07	; 7
    2edc:	40 5d       	subi	r20, 0xD0	; 208
    2ede:	41 93       	st	Z+, r20
    2ee0:	b3 e0       	ldi	r27, 0x03	; 3
    2ee2:	0f d0       	rcall	.+30     	; 0x2f02 <__ultoa_invert+0x86>
    2ee4:	c9 f7       	brne	.-14     	; 0x2ed8 <__ultoa_invert+0x5c>
    2ee6:	f6 cf       	rjmp	.-20     	; 0x2ed4 <__ultoa_invert+0x58>
    2ee8:	46 2f       	mov	r20, r22
    2eea:	4f 70       	andi	r20, 0x0F	; 15
    2eec:	40 5d       	subi	r20, 0xD0	; 208
    2eee:	4a 33       	cpi	r20, 0x3A	; 58
    2ef0:	18 f0       	brcs	.+6      	; 0x2ef8 <__ultoa_invert+0x7c>
    2ef2:	49 5d       	subi	r20, 0xD9	; 217
    2ef4:	31 fd       	sbrc	r19, 1
    2ef6:	40 52       	subi	r20, 0x20	; 32
    2ef8:	41 93       	st	Z+, r20
    2efa:	02 d0       	rcall	.+4      	; 0x2f00 <__ultoa_invert+0x84>
    2efc:	a9 f7       	brne	.-22     	; 0x2ee8 <__ultoa_invert+0x6c>
    2efe:	ea cf       	rjmp	.-44     	; 0x2ed4 <__ultoa_invert+0x58>
    2f00:	b4 e0       	ldi	r27, 0x04	; 4
    2f02:	a6 95       	lsr	r26
    2f04:	97 95       	ror	r25
    2f06:	87 95       	ror	r24
    2f08:	77 95       	ror	r23
    2f0a:	67 95       	ror	r22
    2f0c:	ba 95       	dec	r27
    2f0e:	c9 f7       	brne	.-14     	; 0x2f02 <__ultoa_invert+0x86>
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	61 05       	cpc	r22, r1
    2f14:	71 05       	cpc	r23, r1
    2f16:	08 95       	ret
    2f18:	9b 01       	movw	r18, r22
    2f1a:	ac 01       	movw	r20, r24
    2f1c:	0a 2e       	mov	r0, r26
    2f1e:	06 94       	lsr	r0
    2f20:	57 95       	ror	r21
    2f22:	47 95       	ror	r20
    2f24:	37 95       	ror	r19
    2f26:	27 95       	ror	r18
    2f28:	ba 95       	dec	r27
    2f2a:	c9 f7       	brne	.-14     	; 0x2f1e <__ultoa_invert+0xa2>
    2f2c:	62 0f       	add	r22, r18
    2f2e:	73 1f       	adc	r23, r19
    2f30:	84 1f       	adc	r24, r20
    2f32:	95 1f       	adc	r25, r21
    2f34:	a0 1d       	adc	r26, r0
    2f36:	08 95       	ret

00002f38 <__prologue_saves__>:
    2f38:	2f 92       	push	r2
    2f3a:	3f 92       	push	r3
    2f3c:	4f 92       	push	r4
    2f3e:	5f 92       	push	r5
    2f40:	6f 92       	push	r6
    2f42:	7f 92       	push	r7
    2f44:	8f 92       	push	r8
    2f46:	9f 92       	push	r9
    2f48:	af 92       	push	r10
    2f4a:	bf 92       	push	r11
    2f4c:	cf 92       	push	r12
    2f4e:	df 92       	push	r13
    2f50:	ef 92       	push	r14
    2f52:	ff 92       	push	r15
    2f54:	0f 93       	push	r16
    2f56:	1f 93       	push	r17
    2f58:	cf 93       	push	r28
    2f5a:	df 93       	push	r29
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62
    2f60:	ca 1b       	sub	r28, r26
    2f62:	db 0b       	sbc	r29, r27
    2f64:	0f b6       	in	r0, 0x3f	; 63
    2f66:	f8 94       	cli
    2f68:	de bf       	out	0x3e, r29	; 62
    2f6a:	0f be       	out	0x3f, r0	; 63
    2f6c:	cd bf       	out	0x3d, r28	; 61
    2f6e:	09 94       	ijmp

00002f70 <__epilogue_restores__>:
    2f70:	2a 88       	ldd	r2, Y+18	; 0x12
    2f72:	39 88       	ldd	r3, Y+17	; 0x11
    2f74:	48 88       	ldd	r4, Y+16	; 0x10
    2f76:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f78:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f7a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f7c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f7e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f80:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f82:	b9 84       	ldd	r11, Y+9	; 0x09
    2f84:	c8 84       	ldd	r12, Y+8	; 0x08
    2f86:	df 80       	ldd	r13, Y+7	; 0x07
    2f88:	ee 80       	ldd	r14, Y+6	; 0x06
    2f8a:	fd 80       	ldd	r15, Y+5	; 0x05
    2f8c:	0c 81       	ldd	r16, Y+4	; 0x04
    2f8e:	1b 81       	ldd	r17, Y+3	; 0x03
    2f90:	aa 81       	ldd	r26, Y+2	; 0x02
    2f92:	b9 81       	ldd	r27, Y+1	; 0x01
    2f94:	ce 0f       	add	r28, r30
    2f96:	d1 1d       	adc	r29, r1
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	f8 94       	cli
    2f9c:	de bf       	out	0x3e, r29	; 62
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	cd bf       	out	0x3d, r28	; 61
    2fa2:	ed 01       	movw	r28, r26
    2fa4:	08 95       	ret

00002fa6 <_exit>:
    2fa6:	f8 94       	cli

00002fa8 <__stop_program>:
    2fa8:	ff cf       	rjmp	.-2      	; 0x2fa8 <__stop_program>
