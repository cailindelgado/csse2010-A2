
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000410  00800100  00002f98  0000302c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015b  00800510  00800510  0000343c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000343c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  000034d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f29  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001357  00000000  00000000  00007731  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023cd  00000000  00000000  00008a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a30  00000000  00000000  0000ae58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d3e  00000000  00000000  0000b888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026cc  00000000  00000000  0000c5c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000ec92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__ctors_end>
       4:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       8:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      10:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      14:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_5>
      18:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      1c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      20:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      24:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__vector_9>
      28:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      2c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      30:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      34:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      38:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      3c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      40:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__vector_16>
      44:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      48:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      4c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      50:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_20>
      54:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__vector_21>
      58:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      5c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      60:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      64:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      68:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      6c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      70:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      74:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      78:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2347>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2284>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 20 43 61 69 6c 69 6e 20 44 65 6c 67      by  Cailin Delg
      d4:	61 64 6f 20 2d 20 34 38 30 32 37 39 34 32 00        ado - 48027942.

000000e3 <__c.2282>:
      e3:	20 5c 24 24 20 20 20 5c 24 24 20 20 20 20 20 5c      \$$   \$$     \
      f3:	24 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20     $     \$$   \$$ 
     103:	20 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20           \$$   \$$ 
     113:	20 5c 24 24 24 24 24 24 24 20 5c 24 24 20 20 20      \$$$$$$$ \$$   
     123:	20 20 20 20 20 5c 24 24 24 24 24 24 00                   \$$$$$$.

00000130 <__c.2280>:
     130:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 5c 24     | $$  | $$    \$
     140:	24 24 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20     $$   | $$  | $$ 
     150:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     160:	5c 24 24 20 20 20 20 20 5c 7c 20 24 24 20 20 20     \$$     \| $$   
     170:	20 20 20 20 5c 24 24 20 20 20 20 24 24 00               \$$    $$.

0000017e <__c.2278>:
     17e:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 5c 24 24     | $$  | $$   \$$
     18e:	20 24 24 20 20 7c 20 24 24 20 20 7c 20 24 24 20      $$  | $$  | $$ 
     19e:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 7c          | $$  | $$|
     1ae:	20 24 24 24 24 24 24 24 24 7c 20 24 24 20 20 20      $$$$$$$$| $$   
     1be:	20 20 20 7c 20 24 24 5f 5f 2f 20 24 24 00              | $$__/ $$.

000001cc <__c.2276>:
     1cc:	7c 20 24 24 24 24 24 24 24 24 20 20 5c 24 24 5c     | $$$$$$$$  \$$\
     1dc:	20 20 24 24 20 7c 20 24 24 24 24 24 24 24 5c 20       $$ | $$$$$$$\ 
     1ec:	20 20 20 20 20 7c 20 24 24 24 24 24 24 24 24 7c          | $$$$$$$$|
     1fc:	20 24 24 20 20 20 20 24 24 7c 20 24 24 20 20 20      $$    $$| $$   
     20c:	5c 24 24 7c 20 24 24 20 20 7c 20 24 24 00           \$$| $$  | $$.

0000021a <__c.2274>:
     21a:	7c 20 24 24 20 20 20 20 24 24 20 5c 24 24 5c 20     | $$    $$ \$$\ 
     22a:	2f 20 20 24 24 7c 20 24 24 20 20 20 20 24 24 20     /  $$| $$    $$ 
     23a:	20 20 20 20 20 7c 20 24 24 20 20 20 20 24 24 7c          | $$    $$|
     24a:	20 20 24 24 24 24 24 24 5c 7c 20 20 24 24 24 24       $$$$$$\|  $$$$
     25a:	24 24 5c 7c 20 20 24 24 24 24 24 24 5c 00           $$\|  $$$$$$\.

00000268 <__c.2272>:
     268:	7c 20 24 24 5f 5f 7c 20 24 24 7c 20 24 24 20 20     | $$__| $$| $$  
     278:	20 7c 20 24 24 7c 20 24 24 5f 5f 7c 20 24 24 20      | $$| $$__| $$ 
     288:	20 20 20 20 20 7c 20 24 24 5f 5f 7c 20 24 24 20          | $$__| $$ 
     298:	2f 20 20 20 20 20 20 5c 20 20 2f 20 20 20 20 20     /      \  /     
     2a8:	20 5c 20 20 2f 20 20 20 20 20 20 5c 00               \  /      \.

000002b5 <__c.2270>:
     2b5:	7c 20 20 24 24 24 24 24 24 5c 7c 20 24 24 20 20     |  $$$$$$\| $$  
     2c5:	20 7c 20 24 24 7c 20 24 24 24 24 24 24 24 5c 20      | $$| $$$$$$$\ 
     2d5:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     2e5:	20 5f 5f 5f 5f 5f 5f 20 20 20 20 5f 5f 5f 5f 5f      ______    _____
     2f5:	5f 20 20 20 20 5f 5f 5f 5f 5f 5f 00                 _    ______.

00000301 <__c.2268>:
     301:	20 2f 20 20 20 20 20 20 5c 20 7c 20 20 5c 20 20      /      \ |  \  
     311:	20 7c 20 20 5c 7c 20 20 20 20 20 20 20 5c 20 20      |  \|       \  
     321:	20 20 20 20 20 7c 20 20 5c 20 20 7c 20 20 5c 00          |  \  |  \.

00000331 <__c.2266>:
     331:	20 20 5f 5f 5f 5f 5f 5f 20 20 20 5f 5f 20 20 20       ______   __   
     341:	20 20 5f 5f 20 20 5f 5f 5f 5f 5f 5f 5f 20 20 20       __  _______   
     351:	20 20 20 20 20 20 5f 5f 20 20 20 20 5f 5f 00              __    __.

00000360 <__c.2058>:
     360:	1b 5b 3f 32 35 68 00                                .[?25h.

00000367 <__c.2054>:
     367:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000036e <__c.2050>:
     36e:	1b 5b 25 64 6d 00                                   .[%dm.

00000374 <__c.2045>:
     374:	1b 5b 4b 00                                         .[K.

00000378 <__c.2040>:
     378:	1b 5b 32 4a 00                                      .[2J.

0000037d <__c.2025>:
     37d:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000386 <__ctors_end>:
     386:	11 24       	eor	r1, r1
     388:	1f be       	out	0x3f, r1	; 63
     38a:	cf ef       	ldi	r28, 0xFF	; 255
     38c:	d8 e0       	ldi	r29, 0x08	; 8
     38e:	de bf       	out	0x3e, r29	; 62
     390:	cd bf       	out	0x3d, r28	; 61

00000392 <__do_copy_data>:
     392:	15 e0       	ldi	r17, 0x05	; 5
     394:	a0 e0       	ldi	r26, 0x00	; 0
     396:	b1 e0       	ldi	r27, 0x01	; 1
     398:	e8 e9       	ldi	r30, 0x98	; 152
     39a:	ff e2       	ldi	r31, 0x2F	; 47
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__do_copy_data+0x10>
     39e:	05 90       	lpm	r0, Z+
     3a0:	0d 92       	st	X+, r0
     3a2:	a0 31       	cpi	r26, 0x10	; 16
     3a4:	b1 07       	cpc	r27, r17
     3a6:	d9 f7       	brne	.-10     	; 0x39e <__do_copy_data+0xc>

000003a8 <__do_clear_bss>:
     3a8:	26 e0       	ldi	r18, 0x06	; 6
     3aa:	a0 e1       	ldi	r26, 0x10	; 16
     3ac:	b5 e0       	ldi	r27, 0x05	; 5
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
     3b2:	ab 36       	cpi	r26, 0x6B	; 107
     3b4:	b2 07       	cpc	r27, r18
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>
     3b8:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <main>
     3bc:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <_exit>

000003c0 <__bad_interrupt>:
     3c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c4 <init_button_interrupts>:
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void)
{
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     3c4:	e8 e6       	ldi	r30, 0x68	; 104
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	82 60       	ori	r24, 0x02	; 2
     3cc:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     3ce:	8b b3       	in	r24, 0x1b	; 27
     3d0:	82 60       	ori	r24, 0x02	; 2
     3d2:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     3d4:	ec e6       	ldi	r30, 0x6C	; 108
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	8f 60       	ori	r24, 0x0F	; 15
     3dc:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     3de:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <__data_end>
     3e2:	08 95       	ret

000003e4 <button_pushed>:

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0)
     3e4:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <__data_end>
     3e8:	18 16       	cp	r1, r24
     3ea:	14 f5       	brge	.+68     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     3ec:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3f0:	6f b7       	in	r22, 0x3f	; 63
		cli();
     3f2:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	09 c0       	rjmp	.+18     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		{
			button_queue[i - 1] = button_queue[i];
     3f8:	f9 01       	movw	r30, r18
     3fa:	ef 5e       	subi	r30, 0xEF	; 239
     3fc:	fa 4f       	sbci	r31, 0xFA	; 250
     3fe:	40 81       	ld	r20, Z
     400:	f9 01       	movw	r30, r18
     402:	e0 5f       	subi	r30, 0xF0	; 240
     404:	fa 4f       	sbci	r31, 0xFA	; 250
     406:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     408:	9f 5f       	subi	r25, 0xFF	; 255
     40a:	29 2f       	mov	r18, r25
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 91 10 05 	lds	r20, 0x0510	; 0x800510 <__data_end>
     412:	04 2e       	mov	r0, r20
     414:	00 0c       	add	r0, r0
     416:	55 0b       	sbc	r21, r21
     418:	24 17       	cp	r18, r20
     41a:	35 07       	cpc	r19, r21
     41c:	6c f3       	brlt	.-38     	; 0x3f8 <button_pushed+0x14>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     41e:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <__data_end>
     422:	91 50       	subi	r25, 0x01	; 1
     424:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <__data_end>
		
		if (interrupts_were_enabled)
     428:	66 23       	and	r22, r22
     42a:	1c f4       	brge	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		{
			// Turn them back on again
			sei();
     42c:	78 94       	sei
     42e:	08 95       	ret
	queue_length = 0;
}

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     430:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     432:	08 95       	ret

00000434 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect)
{
     434:	1f 92       	push	r1
     436:	0f 92       	push	r0
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     44c:	43 b1       	in	r20, 0x03	; 3
     44e:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	26 c0       	rjmp	.+76     	; 0x4a0 <__vector_5+0x6c>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     454:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <__data_end>
     458:	94 30       	cpi	r25, 0x04	; 4
     45a:	0c f5       	brge	.+66     	; 0x49e <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     45c:	24 2f       	mov	r18, r20
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	08 2e       	mov	r0, r24
     462:	02 c0       	rjmp	.+4      	; 0x468 <__vector_5+0x34>
     464:	35 95       	asr	r19
     466:	27 95       	ror	r18
     468:	0a 94       	dec	r0
     46a:	e2 f7       	brpl	.-8      	; 0x464 <__vector_5+0x30>
     46c:	20 ff       	sbrs	r18, 0
     46e:	17 c0       	rjmp	.+46     	; 0x49e <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin)))
     470:	20 91 15 05 	lds	r18, 0x0515	; 0x800515 <last_button_state>
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	08 2e       	mov	r0, r24
     478:	02 c0       	rjmp	.+4      	; 0x47e <__vector_5+0x4a>
     47a:	35 95       	asr	r19
     47c:	27 95       	ror	r18
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <__vector_5+0x46>
     482:	20 fd       	sbrc	r18, 0
     484:	0c c0       	rjmp	.+24     	; 0x49e <__vector_5+0x6a>
				{
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     486:	e0 91 10 05 	lds	r30, 0x0510	; 0x800510 <__data_end>
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	9e 0f       	add	r25, r30
     48e:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <__data_end>
     492:	0e 2e       	mov	r0, r30
     494:	00 0c       	add	r0, r0
     496:	ff 0b       	sbc	r31, r31
     498:	ef 5e       	subi	r30, 0xEF	; 239
     49a:	fa 4f       	sbci	r31, 0xFA	; 250
     49c:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	c0 f2       	brcs	.-80     	; 0x454 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     4a4:	40 93 15 05 	sts	0x0515, r20	; 0x800515 <last_button_state>
}
     4a8:	ff 91       	pop	r31
     4aa:	ef 91       	pop	r30
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <update_start_screen>:

// Update dynamic start screen based on the frame number (0-31)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	18 2f       	mov	r17, r24
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     4c8:	d4 e0       	ldi	r29, 0x04	; 4
     4ca:	36 c0       	rjmp	.+108    	; 0x538 <update_start_screen+0x78>
	{
		for (uint8_t col = 11; col < 16; col++)
		{
			colour = col == 14 ? COLOUR_YELLOW : COLOUR_BLACK;
     4cc:	ce 30       	cpi	r28, 0x0E	; 14
     4ce:	11 f4       	brne	.+4      	; 0x4d4 <update_start_screen+0x14>
     4d0:	4f ef       	ldi	r20, 0xFF	; 255
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <update_start_screen+0x16>
     4d4:	40 e0       	ldi	r20, 0x00	; 0
			if (((32+col-frame_number) & ((1<<(row-2))-1)) == (1<<(row-3))-1)
     4d6:	2c 2f       	mov	r18, r28
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	20 5e       	subi	r18, 0xE0	; 224
     4dc:	3f 4f       	sbci	r19, 0xFF	; 255
     4de:	21 1b       	sub	r18, r17
     4e0:	31 09       	sbc	r19, r1
     4e2:	ed 2f       	mov	r30, r29
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	bf 01       	movw	r22, r30
     4e8:	62 50       	subi	r22, 0x02	; 2
     4ea:	71 09       	sbc	r23, r1
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	dc 01       	movw	r26, r24
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <update_start_screen+0x38>
     4f4:	aa 0f       	add	r26, r26
     4f6:	bb 1f       	adc	r27, r27
     4f8:	6a 95       	dec	r22
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <update_start_screen+0x34>
     4fc:	bd 01       	movw	r22, r26
     4fe:	61 50       	subi	r22, 0x01	; 1
     500:	71 09       	sbc	r23, r1
     502:	26 23       	and	r18, r22
     504:	37 23       	and	r19, r23
     506:	33 97       	sbiw	r30, 0x03	; 3
     508:	02 c0       	rjmp	.+4      	; 0x50e <update_start_screen+0x4e>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	ea 95       	dec	r30
     510:	e2 f7       	brpl	.-8      	; 0x50a <update_start_screen+0x4a>
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	28 17       	cp	r18, r24
     516:	39 07       	cpc	r19, r25
     518:	29 f4       	brne	.+10     	; 0x524 <update_start_screen+0x64>
			{
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
     51a:	ce 30       	cpi	r28, 0x0E	; 14
     51c:	10 f4       	brcc	.+4      	; 0x522 <update_start_screen+0x62>
     51e:	4f e0       	ldi	r20, 0x0F	; 15
     520:	01 c0       	rjmp	.+2      	; 0x524 <update_start_screen+0x64>
     522:	40 ef       	ldi	r20, 0xF0	; 240
			}
			ledmatrix_update_pixel(col, row, colour);
     524:	6d 2f       	mov	r22, r29
     526:	8c 2f       	mov	r24, r28
     528:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
	{
		for (uint8_t col = 11; col < 16; col++)
     52c:	cf 5f       	subi	r28, 0xFF	; 255
     52e:	01 c0       	rjmp	.+2      	; 0x532 <update_start_screen+0x72>
     530:	cb e0       	ldi	r28, 0x0B	; 11
     532:	c0 31       	cpi	r28, 0x10	; 16
     534:	58 f2       	brcs	.-106    	; 0x4cc <update_start_screen+0xc>
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     536:	df 5f       	subi	r29, 0xFF	; 255
     538:	d8 30       	cpi	r29, 0x08	; 8
     53a:	d0 f3       	brcs	.-12     	; 0x530 <update_start_screen+0x70>
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
			}
			ledmatrix_update_pixel(col, row, colour);
		}
	}
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	08 95       	ret

00000544 <show_start_screen>:
// Stored as a 5 x 3 grid pattern going from Left-to-Right, Top-to-Bottom
// Padded with a leading zero so that it fits into a 16-bit value


void show_start_screen(void)
{
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	28 97       	sbiw	r28, 0x08	; 8
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     55a:	0e 94 c3 07 	call	0xf86	; 0xf86 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	31 c0       	rjmp	.+98     	; 0x5c4 <show_start_screen+0x80>
	{
		col_data = pong_display[col];
     562:	e1 2f       	mov	r30, r17
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	e6 5e       	subi	r30, 0xE6	; 230
     568:	fe 4f       	sbci	r31, 0xFE	; 254
     56a:	90 81       	ld	r25, Z
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	21 c0       	rjmp	.+66     	; 0x5b2 <show_start_screen+0x6e>
		{
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data>>row & 1)
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	49 2f       	mov	r20, r25
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	08 2e       	mov	r0, r24
     57a:	02 c0       	rjmp	.+4      	; 0x580 <show_start_screen+0x3c>
     57c:	55 95       	asr	r21
     57e:	47 95       	ror	r20
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <show_start_screen+0x38>
     584:	40 ff       	sbrs	r20, 0
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <show_start_screen+0x5e>
			{
				column_colour_data[row] = (row < 4 ? COLOUR_RED : COLOUR_GREEN);
     588:	84 30       	cpi	r24, 0x04	; 4
     58a:	10 f4       	brcc	.+4      	; 0x590 <show_start_screen+0x4c>
     58c:	4f e0       	ldi	r20, 0x0F	; 15
     58e:	01 c0       	rjmp	.+2      	; 0x592 <show_start_screen+0x4e>
     590:	40 ef       	ldi	r20, 0xF0	; 240
     592:	e1 e0       	ldi	r30, 0x01	; 1
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	ec 0f       	add	r30, r28
     598:	fd 1f       	adc	r31, r29
     59a:	e2 0f       	add	r30, r18
     59c:	f3 1f       	adc	r31, r19
     59e:	40 83       	st	Z, r20
     5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <show_start_screen+0x6c>
			}
			else
			{
				column_colour_data[row] = 0;
     5a2:	e1 e0       	ldi	r30, 0x01	; 1
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	ec 0f       	add	r30, r28
     5a8:	fd 1f       	adc	r31, r29
     5aa:	e2 0f       	add	r30, r18
     5ac:	f3 1f       	adc	r31, r19
     5ae:	10 82       	st	Z, r1
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
	{
		col_data = pong_display[col];
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	88 30       	cpi	r24, 0x08	; 8
     5b4:	e8 f2       	brcs	.-70     	; 0x570 <show_start_screen+0x2c>
			else
			{
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
     5b6:	be 01       	movw	r22, r28
     5b8:	6f 5f       	subi	r22, 0xFF	; 255
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	81 2f       	mov	r24, r17
     5be:	0e 94 a6 07 	call	0xf4c	; 0xf4c <ledmatrix_update_column>
{
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     5c2:	1f 5f       	subi	r17, 0xFF	; 255
     5c4:	10 31       	cpi	r17, 0x10	; 16
     5c6:	68 f2       	brcs	.-102    	; 0x562 <show_start_screen+0x1e>
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
	}
	update_start_screen(0);
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
}
     5ce:	28 96       	adiw	r28, 0x08	; 8
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	08 95       	ret

000005e2 <default_grid>:
}

// Initialize the display for the board, this creates the display
// for an empty board.
void default_grid(void)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	28 97       	sbiw	r28, 0x08	; 8
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_clear();
     5f6:	0e 94 c3 07 	call	0xf86	; 0xf86 <ledmatrix_clear>
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <default_grid+0x2e>
	{
		colours[row] = COLOUR_YELLOW;
     5fe:	e1 e0       	ldi	r30, 0x01	; 1
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	e8 0f       	add	r30, r24
     608:	f1 1d       	adc	r31, r1
     60a:	9f ef       	ldi	r25, 0xFF	; 255
     60c:	90 83       	st	Z, r25
void default_grid(void)
{
	ledmatrix_clear();
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     60e:	8f 5f       	subi	r24, 0xFF	; 255
     610:	88 30       	cpi	r24, 0x08	; 8
     612:	a8 f3       	brcs	.-22     	; 0x5fe <default_grid+0x1c>
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
     614:	be 01       	movw	r22, r28
     616:	6f 5f       	subi	r22, 0xFF	; 255
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	8d e0       	ldi	r24, 0x0D	; 13
     61c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	09 c0       	rjmp	.+18     	; 0x636 <default_grid+0x54>
	{
		colours[row] = COLOUR_HALF_YELLOW;
     624:	e1 e0       	ldi	r30, 0x01	; 1
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ec 0f       	add	r30, r28
     62a:	fd 1f       	adc	r31, r29
     62c:	e8 0f       	add	r30, r24
     62e:	f1 1d       	adc	r31, r1
     630:	95 e5       	ldi	r25, 0x55	; 85
     632:	90 83       	st	Z, r25
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	88 30       	cpi	r24, 0x08	; 8
     638:	a8 f3       	brcs	.-22     	; 0x624 <default_grid+0x42>
	{
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
     63a:	be 01       	movw	r22, r28
     63c:	6f 5f       	subi	r22, 0xFF	; 255
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	8c e0       	ldi	r24, 0x0C	; 12
     642:	0e 94 a6 07 	call	0xf4c	; 0xf4c <ledmatrix_update_column>
	ledmatrix_update_column(14, colours);
     646:	be 01       	movw	r22, r28
     648:	6f 5f       	subi	r22, 0xFF	; 255
     64a:	7f 4f       	sbci	r23, 0xFF	; 255
     64c:	8e e0       	ldi	r24, 0x0E	; 14
     64e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	09 c0       	rjmp	.+18     	; 0x668 <default_grid+0x86>
	{
		colours[row] = COLOUR_QUART_YELLOW;
     656:	e1 e0       	ldi	r30, 0x01	; 1
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	e8 0f       	add	r30, r24
     660:	f1 1d       	adc	r31, r1
     662:	91 e1       	ldi	r25, 0x11	; 17
     664:	90 83       	st	Z, r25
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
	ledmatrix_update_column(14, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	88 30       	cpi	r24, 0x08	; 8
     66a:	a8 f3       	brcs	.-22     	; 0x656 <default_grid+0x74>
	{
		colours[row] = COLOUR_QUART_YELLOW;
	}
	ledmatrix_update_column(11, colours);
     66c:	be 01       	movw	r22, r28
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	8b e0       	ldi	r24, 0x0B	; 11
     674:	0e 94 a6 07 	call	0xf4c	; 0xf4c <ledmatrix_update_column>
	ledmatrix_update_column(15, colours);
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	8f e0       	ldi	r24, 0x0F	; 15
     680:	0e 94 a6 07 	call	0xf4c	; 0xf4c <ledmatrix_update_column>
}
     684:	28 96       	adiw	r28, 0x08	; 8
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <update_points>:


//updates the points in the terminal
void update_points() {
	//clear terminal line and reprint the game score with the points
	move_terminal_cursor(10, 13);
     696:	6d e0       	ldi	r22, 0x0D	; 13
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	8a e0       	ldi	r24, 0x0A	; 10
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	clear_to_end_of_line();
     6a2:	0e 94 46 11 	call	0x228c	; 0x228c <clear_to_end_of_line>

	// if x >= 10 and [-9, 0)
	if ((points >= 10) || (points < 0 && points >= -9)) {
     6a6:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <points>
     6aa:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <points+0x1>
     6ae:	8a 30       	cpi	r24, 0x0A	; 10
     6b0:	91 05       	cpc	r25, r1
     6b2:	34 f4       	brge	.+12     	; 0x6c0 <update_points+0x2a>
     6b4:	9c 01       	movw	r18, r24
     6b6:	27 5f       	subi	r18, 0xF7	; 247
     6b8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ba:	29 30       	cpi	r18, 0x09	; 9
     6bc:	31 05       	cpc	r19, r1
     6be:	68 f4       	brcc	.+26     	; 0x6da <update_points+0x44>
		printf("Game Score:   %d", points);
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	8a e2       	ldi	r24, 0x2A	; 42
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	08 95       	ret
		
		//if x >= 100 and (-9, -99)
	} else if ((points >= 100) || (points < -9 && points > -99)) {
     6da:	84 36       	cpi	r24, 0x64	; 100
     6dc:	91 05       	cpc	r25, r1
     6de:	34 f4       	brge	.+12     	; 0x6ec <update_points+0x56>
     6e0:	9c 01       	movw	r18, r24
     6e2:	2e 59       	subi	r18, 0x9E	; 158
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255
     6e6:	29 35       	cpi	r18, 0x59	; 89
     6e8:	31 05       	cpc	r19, r1
     6ea:	68 f4       	brcc	.+26     	; 0x706 <update_points+0x70>
		printf("Game Score:  %d", points);
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	8b e3       	ldi	r24, 0x3B	; 59
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	08 95       	ret
		
		//if x < -99
	} else if (points < -99) {
     706:	8d 39       	cpi	r24, 0x9D	; 157
     708:	2f ef       	ldi	r18, 0xFF	; 255
     70a:	92 07       	cpc	r25, r18
     70c:	6c f4       	brge	.+26     	; 0x728 <update_points+0x92>
		printf("Game Score: %d", points);
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	8b e4       	ldi	r24, 0x4B	; 75
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	08 95       	ret
		
	} else {
		printf("Game Score:    %d", points);
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	8a e5       	ldi	r24, 0x5A	; 90
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	9f 93       	push	r25
     732:	8f 93       	push	r24
     734:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	08 95       	ret

00000742 <update_combo>:
}

//updates the combo points in the terminal
void update_combo() {
	//Clear terminal line and reprint the combo count
	move_terminal_cursor(10, 14);
     742:	6e e0       	ldi	r22, 0x0E	; 14
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	8a e0       	ldi	r24, 0x0A	; 10
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	clear_to_end_of_line();
     74e:	0e 94 46 11 	call	0x228c	; 0x228c <clear_to_end_of_line>
	
	//adjusts the combo count padding so it matches points
	if (combo_count >= 10) {
     752:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <combo_count>
     756:	90 91 46 05 	lds	r25, 0x0546	; 0x800546 <combo_count+0x1>
     75a:	8a 30       	cpi	r24, 0x0A	; 10
     75c:	91 05       	cpc	r25, r1
     75e:	6c f0       	brlt	.+26     	; 0x77a <update_combo+0x38>
		printf("Combo Count:  %d", combo_count);
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	8c e6       	ldi	r24, 0x6C	; 108
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	9f 93       	push	r25
     76a:	8f 93       	push	r24
     76c:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0c c0       	rjmp	.+24     	; 0x792 <update_combo+0x50>
		
	} else {
		printf("Combo Count:   %d", combo_count);
     77a:	9f 93       	push	r25
     77c:	8f 93       	push	r24
     77e:	8d e7       	ldi	r24, 0x7D	; 125
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	9f 93       	push	r25
     784:	8f 93       	push	r24
     786:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
	}
	
	//update combo check accordingly
	if (combo_count >= 3) {
     792:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <combo_count>
     796:	90 91 46 05 	lds	r25, 0x0546	; 0x800546 <combo_count+0x1>
     79a:	03 97       	sbiw	r24, 0x03	; 3
     79c:	3c f0       	brlt	.+14     	; 0x7ac <update_combo+0x6a>
		combo_check = 1;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	90 93 48 05 	sts	0x0548, r25	; 0x800548 <combo_check+0x1>
     7a6:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <combo_check>
     7aa:	08 95       	ret
	} else {
		combo_check = 0;
     7ac:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <combo_check+0x1>
     7b0:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <combo_check>
     7b4:	08 95       	ret

000007b6 <sound_note>:
	}
}

//play the note sound
void sound_note(int lane, int col) {
	advance_count = 0;
     7b6:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <advance_count+0x1>
     7ba:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <advance_count>
	
	if (lane == -1 && col == -1) {
     7be:	8f 3f       	cpi	r24, 0xFF	; 255
     7c0:	2f ef       	ldi	r18, 0xFF	; 255
     7c2:	92 07       	cpc	r25, r18
     7c4:	59 f4       	brne	.+22     	; 0x7dc <sound_note+0x26>
     7c6:	6f 3f       	cpi	r22, 0xFF	; 255
     7c8:	2f ef       	ldi	r18, 0xFF	; 255
     7ca:	72 07       	cpc	r23, r18
     7cc:	39 f4       	brne	.+14     	; 0x7dc <sound_note+0x26>
		//turn off buzzer
		disable_piezzo = 1;
     7ce:	21 e0       	ldi	r18, 0x01	; 1
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	30 93 25 05 	sts	0x0525, r19	; 0x800525 <disable_piezzo+0x1>
     7d6:	20 93 24 05 	sts	0x0524, r18	; 0x800524 <disable_piezzo>
     7da:	04 c0       	rjmp	.+8      	; 0x7e4 <sound_note+0x2e>
	} else {
		disable_piezzo = 0;
     7dc:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <disable_piezzo+0x1>
     7e0:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <disable_piezzo>
	}
	
	//set frequency appropriately
	if (lane == 3) {
     7e4:	83 30       	cpi	r24, 0x03	; 3
     7e6:	91 05       	cpc	r25, r1
     7e8:	39 f4       	brne	.+14     	; 0x7f8 <sound_note+0x42>
		freq = 784;
     7ea:	80 e1       	ldi	r24, 0x10	; 16
     7ec:	93 e0       	ldi	r25, 0x03	; 3
     7ee:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <freq+0x1>
     7f2:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <freq>
     7f6:	1c c0       	rjmp	.+56     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
		
	} else if (lane == 2) {
     7f8:	82 30       	cpi	r24, 0x02	; 2
     7fa:	91 05       	cpc	r25, r1
     7fc:	39 f4       	brne	.+14     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
		freq = 698;
     7fe:	8a eb       	ldi	r24, 0xBA	; 186
     800:	92 e0       	ldi	r25, 0x02	; 2
     802:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <freq+0x1>
     806:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <freq>
     80a:	12 c0       	rjmp	.+36     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
		
	} else if (lane == 1) {
     80c:	81 30       	cpi	r24, 0x01	; 1
     80e:	91 05       	cpc	r25, r1
     810:	39 f4       	brne	.+14     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		freq = 622;
     812:	8e e6       	ldi	r24, 0x6E	; 110
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <freq+0x1>
     81a:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <freq>
     81e:	08 c0       	rjmp	.+16     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
		
	} else if (!lane) {
     820:	89 2b       	or	r24, r25
     822:	31 f4       	brne	.+12     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
		freq = 523;
     824:	8b e0       	ldi	r24, 0x0B	; 11
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <freq+0x1>
     82c:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <freq>
	}

	//set duty cycle appropriately
	if (col == 11) {
     830:	6b 30       	cpi	r22, 0x0B	; 11
     832:	71 05       	cpc	r23, r1
     834:	69 f4       	brne	.+26     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
		duty_cycle = 2;
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	a0 e0       	ldi	r26, 0x00	; 0
     83c:	b0 e4       	ldi	r27, 0x40	; 64
     83e:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <duty_cycle>
     842:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <duty_cycle+0x1>
     846:	a0 93 4b 05 	sts	0x054B, r26	; 0x80054b <duty_cycle+0x2>
     84a:	b0 93 4c 05 	sts	0x054C, r27	; 0x80054c <duty_cycle+0x3>
     84e:	3f c0       	rjmp	.+126    	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
		
	} else if (col == 12) {
     850:	6c 30       	cpi	r22, 0x0C	; 12
     852:	71 05       	cpc	r23, r1
     854:	69 f4       	brne	.+26     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
		duty_cycle = 10;
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	a0 e2       	ldi	r26, 0x20	; 32
     85c:	b1 e4       	ldi	r27, 0x41	; 65
     85e:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <duty_cycle>
     862:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <duty_cycle+0x1>
     866:	a0 93 4b 05 	sts	0x054B, r26	; 0x80054b <duty_cycle+0x2>
     86a:	b0 93 4c 05 	sts	0x054C, r27	; 0x80054c <duty_cycle+0x3>
     86e:	2f c0       	rjmp	.+94     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
		
	} else if (col == 13) {
     870:	6d 30       	cpi	r22, 0x0D	; 13
     872:	71 05       	cpc	r23, r1
     874:	69 f4       	brne	.+26     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
		duty_cycle = 50;
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	a8 e4       	ldi	r26, 0x48	; 72
     87c:	b2 e4       	ldi	r27, 0x42	; 66
     87e:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <duty_cycle>
     882:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <duty_cycle+0x1>
     886:	a0 93 4b 05 	sts	0x054B, r26	; 0x80054b <duty_cycle+0x2>
     88a:	b0 93 4c 05 	sts	0x054C, r27	; 0x80054c <duty_cycle+0x3>
     88e:	1f c0       	rjmp	.+62     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
		
	} else if (col == 14) {
     890:	6e 30       	cpi	r22, 0x0E	; 14
     892:	71 05       	cpc	r23, r1
     894:	69 f4       	brne	.+26     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
		duty_cycle = 90;
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	a4 eb       	ldi	r26, 0xB4	; 180
     89c:	b2 e4       	ldi	r27, 0x42	; 66
     89e:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <duty_cycle>
     8a2:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <duty_cycle+0x1>
     8a6:	a0 93 4b 05 	sts	0x054B, r26	; 0x80054b <duty_cycle+0x2>
     8aa:	b0 93 4c 05 	sts	0x054C, r27	; 0x80054c <duty_cycle+0x3>
     8ae:	0f c0       	rjmp	.+30     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
		
	} else if (col == 15) {
     8b0:	6f 30       	cpi	r22, 0x0F	; 15
     8b2:	71 05       	cpc	r23, r1
     8b4:	61 f4       	brne	.+24     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
		duty_cycle = 98;
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	a4 ec       	ldi	r26, 0xC4	; 196
     8bc:	b2 e4       	ldi	r27, 0x42	; 66
     8be:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <duty_cycle>
     8c2:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <duty_cycle+0x1>
     8c6:	a0 93 4b 05 	sts	0x054B, r26	; 0x80054b <duty_cycle+0x2>
     8ca:	b0 93 4c 05 	sts	0x054C, r27	; 0x80054c <duty_cycle+0x3>
		
	}
	
	note_sound();
     8ce:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <note_sound>
     8d2:	08 95       	ret

000008d4 <draw_notes>:
}

void draw_notes() {
     8d4:	08 95       	ret

000008d6 <set_track>:
}

//sets the track
void set_track(int track_number) {
	//to set the track do a matrix of tracks, where each matrix is of size TRACK_LENGTH and the individual elements are the tracks.
	if (track_number == 0) {
     8d6:	00 97       	sbiw	r24, 0x00	; 0
     8d8:	51 f4       	brne	.+20     	; 0x8ee <set_track+0x18>
		//track_name = "Through fire and flames";
		strcpy(track_name, "Through fire and flames");
     8da:	88 e1       	ldi	r24, 0x18	; 24
     8dc:	ef e8       	ldi	r30, 0x8F	; 143
     8de:	f1 e0       	ldi	r31, 0x01	; 1
     8e0:	a8 e2       	ldi	r26, 0x28	; 40
     8e2:	b5 e0       	ldi	r27, 0x05	; 5
     8e4:	01 90       	ld	r0, Z+
     8e6:	0d 92       	st	X+, r0
     8e8:	8a 95       	dec	r24
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <set_track+0xe>
     8ec:	08 95       	ret
		; // set the track to be Through fire and flames
	
	} else if (track_number == 1) {
     8ee:	81 30       	cpi	r24, 0x01	; 1
     8f0:	91 05       	cpc	r25, r1
     8f2:	51 f4       	brne	.+20     	; 0x908 <__stack+0x9>
		//track_name = "Someone Like You by Adele"
		strcpy(track_name, "Someone like you by Adele");
     8f4:	8a e1       	ldi	r24, 0x1A	; 26
     8f6:	e7 ea       	ldi	r30, 0xA7	; 167
     8f8:	f1 e0       	ldi	r31, 0x01	; 1
     8fa:	a8 e2       	ldi	r26, 0x28	; 40
     8fc:	b5 e0       	ldi	r27, 0x05	; 5
     8fe:	01 90       	ld	r0, Z+
     900:	0d 92       	st	X+, r0
     902:	8a 95       	dec	r24
     904:	e1 f7       	brne	.-8      	; 0x8fe <set_track+0x28>
     906:	08 95       	ret
		; // set the track to be Someone Like You by Adele
		
	} else if (track_number == 2) {
     908:	02 97       	sbiw	r24, 0x02	; 2
     90a:	49 f4       	brne	.+18     	; 0x91e <__stack+0x1f>
		//track_name = "Pompeii by Bastille"
		strcpy(track_name, "Pompeii by Bastille");
     90c:	84 e1       	ldi	r24, 0x14	; 20
     90e:	e1 ec       	ldi	r30, 0xC1	; 193
     910:	f1 e0       	ldi	r31, 0x01	; 1
     912:	a8 e2       	ldi	r26, 0x28	; 40
     914:	b5 e0       	ldi	r27, 0x05	; 5
     916:	01 90       	ld	r0, Z+
     918:	0d 92       	st	X+, r0
     91a:	8a 95       	dec	r24
     91c:	e1 f7       	brne	.-8      	; 0x916 <__stack+0x17>
     91e:	08 95       	ret

00000920 <initialise_game>:

// Initialize the game by resetting the grid and beat
void initialise_game(void)
{
	// initialize the display we are using.
	default_grid();
     920:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <default_grid>
	
	beat = 0;
     924:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <beat+0x1>
     928:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <beat>
	game_over = 0;
     92c:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <game_over>
	advance_count = 0;
     930:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <advance_count+0x1>
     934:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <advance_count>
	
	update_points();
     938:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
	update_combo();
     93c:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
     940:	08 95       	ret

00000942 <play_note>:
}

// Play a note in the given lane
void play_note(uint8_t lane)
{	
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	d8 2f       	mov	r29, r24

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     94e:	cb e0       	ldi	r28, 0x0B	; 11
     950:	bf c0       	rjmp	.+382    	; 0xad0 <play_note+0x18e>
	
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col; //this is the next position that the note will be in
     952:	8f e0       	ldi	r24, 0x0F	; 15
     954:	8c 1b       	sub	r24, r28
		uint8_t index = (future + beat) / 5; 
     956:	40 91 4d 05 	lds	r20, 0x054D	; 0x80054d <beat>
     95a:	50 91 4e 05 	lds	r21, 0x054E	; 0x80054e <beat+0x1>
     95e:	48 0f       	add	r20, r24
     960:	51 1d       	adc	r21, r1
     962:	9a 01       	movw	r18, r20
     964:	ad ec       	ldi	r26, 0xCD	; 205
     966:	bc ec       	ldi	r27, 0xCC	; 204
     968:	0e 94 65 14 	call	0x28ca	; 0x28ca <__umulhisi3>
     96c:	fc 01       	movw	r30, r24
     96e:	f6 95       	lsr	r31
     970:	e7 95       	ror	r30
     972:	f6 95       	lsr	r31
     974:	e7 95       	ror	r30
		
		if ((future + beat) % 5) {
     976:	cf 01       	movw	r24, r30
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	88 0f       	add	r24, r24
     97e:	99 1f       	adc	r25, r25
     980:	8e 0f       	add	r24, r30
     982:	9f 1f       	adc	r25, r31
     984:	48 17       	cp	r20, r24
     986:	59 07       	cpc	r21, r25
     988:	09 f0       	breq	.+2      	; 0x98c <play_note+0x4a>
     98a:	a1 c0       	rjmp	.+322    	; 0xace <play_note+0x18c>
			continue;
		}
		if (track[index] & (1<<lane))
     98c:	ff 27       	eor	r31, r31
     98e:	eb 52       	subi	r30, 0x2B	; 43
     990:	fe 4f       	sbci	r31, 0xFE	; 254
     992:	80 81       	ld	r24, Z
     994:	ed 2e       	mov	r14, r29
     996:	f1 2c       	mov	r15, r1
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0d 2e       	mov	r0, r29
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <play_note+0x60>
     99e:	95 95       	asr	r25
     9a0:	87 95       	ror	r24
     9a2:	0a 94       	dec	r0
     9a4:	e2 f7       	brpl	.-8      	; 0x99e <play_note+0x5c>
     9a6:	80 ff       	sbrs	r24, 0
     9a8:	81 c0       	rjmp	.+258    	; 0xaac <play_note+0x16a>
		{	
			if (green_check == lane) {
     9aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     9ae:	08 2e       	mov	r0, r24
     9b0:	00 0c       	add	r0, r0
     9b2:	99 0b       	sbc	r25, r25
     9b4:	e8 16       	cp	r14, r24
     9b6:	f9 06       	cpc	r15, r25
     9b8:	91 f4       	brne	.+36     	; 0x9de <play_note+0x9c>
				points--;
     9ba:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <points>
     9be:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <points+0x1>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <points+0x1>
     9c8:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <points>
				update_points();
     9cc:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
				
				combo_count = 0;
     9d0:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <combo_count+0x1>
     9d4:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <combo_count>
				update_combo();
     9d8:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
				
				break;
     9dc:	7c c0       	rjmp	.+248    	; 0xad6 <play_note+0x194>
			}
			
			green_check = lane;
     9de:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			// if so, colour the two pixels green
			ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     9e2:	40 ef       	ldi	r20, 0xF0	; 240
     9e4:	1d 2f       	mov	r17, r29
     9e6:	11 0f       	add	r17, r17
     9e8:	61 2f       	mov	r22, r17
     9ea:	8c 2f       	mov	r24, r28
     9ec:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     9f0:	61 e0       	ldi	r22, 0x01	; 1
     9f2:	61 0f       	add	r22, r17
     9f4:	40 ef       	ldi	r20, 0xF0	; 240
     9f6:	8c 2f       	mov	r24, r28
     9f8:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			
			//if the note is in the two specified lanes then award the appropriate amount of points
			if (col == 11 || col == 15) {
     9fc:	cb 30       	cpi	r28, 0x0B	; 11
     9fe:	11 f0       	breq	.+4      	; 0xa04 <play_note+0xc2>
     a00:	cf 30       	cpi	r28, 0x0F	; 15
     a02:	99 f4       	brne	.+38     	; 0xa2a <play_note+0xe8>
				points++;
     a04:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <points>
     a08:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <points+0x1>
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <points+0x1>
     a12:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <points>
				combo_count = 0;
     a16:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <combo_count+0x1>
     a1a:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <combo_count>
				sound_note(lane, col);
     a1e:	6c 2f       	mov	r22, r28
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	c7 01       	movw	r24, r14
     a24:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
     a28:	4e c0       	rjmp	.+156    	; 0xac6 <play_note+0x184>
				
			} else if (col == 12 || col == 14) {
     a2a:	cc 30       	cpi	r28, 0x0C	; 12
     a2c:	11 f0       	breq	.+4      	; 0xa32 <play_note+0xf0>
     a2e:	ce 30       	cpi	r28, 0x0E	; 14
     a30:	99 f4       	brne	.+38     	; 0xa58 <play_note+0x116>
				points += 2;
     a32:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <points>
     a36:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <points+0x1>
     a3a:	02 96       	adiw	r24, 0x02	; 2
     a3c:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <points+0x1>
     a40:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <points>
				combo_count = 0;
     a44:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <combo_count+0x1>
     a48:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <combo_count>
				sound_note(lane, col);
     a4c:	6c 2f       	mov	r22, r28
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	c7 01       	movw	r24, r14
     a52:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
     a56:	37 c0       	rjmp	.+110    	; 0xac6 <play_note+0x184>
				
			} else if (col == 13) {
     a58:	cd 30       	cpi	r28, 0x0D	; 13
     a5a:	a9 f5       	brne	.+106    	; 0xac6 <play_note+0x184>
				combo_count++;
     a5c:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <combo_count>
     a60:	90 91 46 05 	lds	r25, 0x0546	; 0x800546 <combo_count+0x1>
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	90 93 46 05 	sts	0x0546, r25	; 0x800546 <combo_count+0x1>
     a6a:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <combo_count>
				sound_note(lane, col);
     a6e:	6c 2f       	mov	r22, r28
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	c7 01       	movw	r24, r14
     a74:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
				
				if (combo_count > 3) {
     a78:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <combo_count>
     a7c:	90 91 46 05 	lds	r25, 0x0546	; 0x800546 <combo_count+0x1>
     a80:	04 97       	sbiw	r24, 0x04	; 4
     a82:	54 f0       	brlt	.+20     	; 0xa98 <play_note+0x156>
					points += 4;
     a84:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <points>
     a88:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <points+0x1>
     a8c:	04 96       	adiw	r24, 0x04	; 4
     a8e:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <points+0x1>
     a92:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <points>
     a96:	17 c0       	rjmp	.+46     	; 0xac6 <play_note+0x184>
				} else {
					points += 3;
     a98:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <points>
     a9c:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <points+0x1>
     aa0:	03 96       	adiw	r24, 0x03	; 3
     aa2:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <points+0x1>
     aa6:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <points>
     aaa:	0d c0       	rjmp	.+26     	; 0xac6 <play_note+0x184>
					
				}
			}
			
		} else {
			points--;
     aac:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <points>
     ab0:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <points+0x1>
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <points+0x1>
     aba:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <points>
			combo_count = 0;
     abe:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <combo_count+0x1>
     ac2:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <combo_count>
		
		}
			
		update_points();
     ac6:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
		update_combo();
     aca:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>

// Play a note in the given lane
void play_note(uint8_t lane)
{	

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     ace:	cf 5f       	subi	r28, 0xFF	; 255
     ad0:	c0 31       	cpi	r28, 0x10	; 16
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <play_note+0x194>
     ad4:	3e cf       	rjmp	.-388    	; 0x952 <play_note+0x10>
		}
			
		update_points();
		update_combo();
		}	
}
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <advance_note>:
	
// Advance the notes one row down the display
void advance_note(void)
{
     ae2:	9f 92       	push	r9
     ae4:	af 92       	push	r10
     ae6:	bf 92       	push	r11
     ae8:	cf 92       	push	r12
     aea:	df 92       	push	r13
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	PixelColour color = COLOUR_RED;
	
	if (combo_check) {
     af8:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <combo_check>
     afc:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <combo_check+0x1>
     b00:	89 2b       	or	r24, r25
     b02:	39 f4       	brne	.+14     	; 0xb12 <advance_note+0x30>
// Advance the notes one row down the display
void advance_note(void)
{
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	PixelColour color = COLOUR_RED;
     b04:	0f 2e       	mov	r0, r31
     b06:	ff e0       	ldi	r31, 0x0F	; 15
     b08:	ff 2e       	mov	r15, r31
     b0a:	f0 2d       	mov	r31, r0
	
// Advance the notes one row down the display
void advance_note(void)
{
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
     b0c:	ee 24       	eor	r14, r14
     b0e:	e3 94       	inc	r14
     b10:	08 c0       	rjmp	.+16     	; 0xb22 <advance_note+0x40>
	PixelColour color = COLOUR_RED;
	
	if (combo_check) {
		dark_colour = COLOUR_DARK_ORANGE;
		color = COLOUR_ORANGE;
     b12:	0f 2e       	mov	r0, r31
     b14:	fc e3       	ldi	r31, 0x3C	; 60
     b16:	ff 2e       	mov	r15, r31
     b18:	f0 2d       	mov	r31, r0
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	PixelColour color = COLOUR_RED;
	
	if (combo_check) {
		dark_colour = COLOUR_DARK_ORANGE;
     b1a:	0f 2e       	mov	r0, r31
     b1c:	fc e1       	ldi	r31, 0x1C	; 28
     b1e:	ef 2e       	mov	r14, r31
     b20:	f0 2d       	mov	r31, r0
		color = COLOUR_ORANGE;
	}
	
	advance_count++;
     b22:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <advance_count>
     b26:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <advance_count+0x1>
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <advance_count+0x1>
     b30:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <advance_count>
	
	if (advance_count >= 5) {
     b34:	05 97       	sbiw	r24, 0x05	; 5
     b36:	34 f0       	brlt	.+12     	; 0xb44 <advance_note+0x62>
		sound_note(-1, -1);
     b38:	6f ef       	ldi	r22, 0xFF	; 255
     b3a:	7f ef       	ldi	r23, 0xFF	; 255
     b3c:	8f ef       	ldi	r24, 0xFF	; 255
     b3e:	9f ef       	ldi	r25, 0xFF	; 255
     b40:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
     b44:	10 e0       	ldi	r17, 0x00	; 0
     b46:	0b c1       	rjmp	.+534    	; 0xd5e <advance_note+0x27c>
	
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
	{
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col;
     b48:	8f e0       	ldi	r24, 0x0F	; 15
     b4a:	81 1b       	sub	r24, r17
		uint8_t index = (future + beat) / 5;
     b4c:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <beat>
     b50:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <beat+0x1>
     b54:	af 01       	movw	r20, r30
     b56:	48 0f       	add	r20, r24
     b58:	51 1d       	adc	r21, r1
     b5a:	9a 01       	movw	r18, r20
     b5c:	ad ec       	ldi	r26, 0xCD	; 205
     b5e:	bc ec       	ldi	r27, 0xCC	; 204
     b60:	0e 94 65 14 	call	0x28ca	; 0x28ca <__umulhisi3>
     b64:	ec 01       	movw	r28, r24
     b66:	d6 95       	lsr	r29
     b68:	c7 95       	ror	r28
     b6a:	d6 95       	lsr	r29
     b6c:	c7 95       	ror	r28
     b6e:	0c 2f       	mov	r16, r28
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     b70:	9f 01       	movw	r18, r30
     b72:	21 5f       	subi	r18, 0xF1	; 241
     b74:	3f 4f       	sbci	r19, 0xFF	; 255
     b76:	0e 94 65 14 	call	0x28ca	; 0x28ca <__umulhisi3>
     b7a:	96 95       	lsr	r25
     b7c:	87 95       	ror	r24
     b7e:	96 95       	lsr	r25
     b80:	87 95       	ror	r24
		uint8_t ghost_index = ghost_start_index +1;
     b82:	8f 5f       	subi	r24, 0xFF	; 255
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     b84:	08 c0       	rjmp	.+16     	; 0xb96 <advance_note+0xb4>
			if (track[ghost_index] & 0x0F) {
     b86:	e8 2f       	mov	r30, r24
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	eb 52       	subi	r30, 0x2B	; 43
     b8c:	fe 4f       	sbci	r31, 0xFE	; 254
     b8e:	90 81       	ld	r25, Z
     b90:	9f 70       	andi	r25, 0x0F	; 15
     b92:	19 f4       	brne	.+6      	; 0xb9a <advance_note+0xb8>
		uint8_t index = (future + beat) / 5;
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
		uint8_t ghost_index = ghost_start_index +1;
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     b94:	8f 5f       	subi	r24, 0xFF	; 255
     b96:	81 38       	cpi	r24, 0x81	; 129
     b98:	b0 f3       	brcs	.-20     	; 0xb86 <advance_note+0xa4>
			if (track[ghost_index] & 0x0F) {
				break;
			}
		}
		uint8_t ghost_note = track[ghost_index];
     b9a:	e8 2f       	mov	r30, r24
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	eb 52       	subi	r30, 0x2B	; 43
     ba0:	fe 4f       	sbci	r31, 0xFE	; 254
     ba2:	d0 80       	ld	r13, Z
		
		if (index >= TRACK_LENGTH)
     ba4:	01 38       	cpi	r16, 0x81	; 129
     ba6:	20 f0       	brcs	.+8      	; 0xbb0 <advance_note+0xce>
		{
			//Game Over
			game_over = 1;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <game_over>
			break;
     bae:	da c0       	rjmp	.+436    	; 0xd64 <advance_note+0x282>
		}
		if ((future+beat) % 5)
     bb0:	9a 01       	movw	r18, r20
     bb2:	ad ec       	ldi	r26, 0xCD	; 205
     bb4:	bc ec       	ldi	r27, 0xCC	; 204
     bb6:	0e 94 65 14 	call	0x28ca	; 0x28ca <__umulhisi3>
     bba:	96 95       	lsr	r25
     bbc:	87 95       	ror	r24
     bbe:	96 95       	lsr	r25
     bc0:	87 95       	ror	r24
     bc2:	9c 01       	movw	r18, r24
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
     bc8:	22 0f       	add	r18, r18
     bca:	33 1f       	adc	r19, r19
     bcc:	82 0f       	add	r24, r18
     bce:	93 1f       	adc	r25, r19
     bd0:	48 17       	cp	r20, r24
     bd2:	59 07       	cpc	r21, r25
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <advance_note+0xf6>
     bd6:	c2 c0       	rjmp	.+388    	; 0xd5c <advance_note+0x27a>
     bd8:	00 e0       	ldi	r16, 0x00	; 0
     bda:	b8 c0       	rjmp	.+368    	; 0xd4c <advance_note+0x26a>
		} 
		
		for (uint8_t lane = 0; lane < 4; lane++)
		{
			//check if the next note is in the appropriate lane
			if ((ghost_note == 0x01) & (lane == 0)) {
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	d9 12       	cpse	r13, r25
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	01 11       	cpse	r16, r1
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	89 23       	and	r24, r25
     bea:	71 f0       	breq	.+28     	; 0xc08 <advance_note+0x126>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     bec:	4e 2d       	mov	r20, r14
     bee:	c0 2e       	mov	r12, r16
     bf0:	cc 0c       	add	r12, r12
     bf2:	6c 2d       	mov	r22, r12
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     bfa:	61 e0       	ldi	r22, 0x01	; 1
     bfc:	6c 0d       	add	r22, r12
     bfe:	4e 2d       	mov	r20, r14
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
     c06:	47 c0       	rjmp	.+142    	; 0xc96 <advance_note+0x1b4>
				
			} else if ((ghost_note == 0x02) & (lane == 1)) {
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	d8 12       	cpse	r13, r24
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	01 30       	cpi	r16, 0x01	; 1
     c14:	09 f0       	breq	.+2      	; 0xc18 <advance_note+0x136>
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	89 23       	and	r24, r25
     c1a:	71 f0       	breq	.+28     	; 0xc38 <advance_note+0x156>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     c1c:	4e 2d       	mov	r20, r14
     c1e:	c0 2e       	mov	r12, r16
     c20:	cc 0c       	add	r12, r12
     c22:	6c 2d       	mov	r22, r12
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	6c 0d       	add	r22, r12
     c2e:	4e 2d       	mov	r20, r14
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
     c36:	2f c0       	rjmp	.+94     	; 0xc96 <advance_note+0x1b4>
			
			} else if ((ghost_note == 0x04) & (lane == 2)) {
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	84 e0       	ldi	r24, 0x04	; 4
     c3c:	d8 12       	cpse	r13, r24
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	02 30       	cpi	r16, 0x02	; 2
     c44:	09 f0       	breq	.+2      	; 0xc48 <advance_note+0x166>
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	89 23       	and	r24, r25
     c4a:	71 f0       	breq	.+28     	; 0xc68 <advance_note+0x186>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     c4c:	4e 2d       	mov	r20, r14
     c4e:	c0 2e       	mov	r12, r16
     c50:	cc 0c       	add	r12, r12
     c52:	6c 2d       	mov	r22, r12
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     c5a:	61 e0       	ldi	r22, 0x01	; 1
     c5c:	6c 0d       	add	r22, r12
     c5e:	4e 2d       	mov	r20, r14
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
     c66:	17 c0       	rjmp	.+46     	; 0xc96 <advance_note+0x1b4>
			
			} else if ((ghost_note == 0x08) & (lane == 3)) {
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	88 e0       	ldi	r24, 0x08	; 8
     c6c:	d8 12       	cpse	r13, r24
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	03 30       	cpi	r16, 0x03	; 3
     c74:	09 f0       	breq	.+2      	; 0xc78 <advance_note+0x196>
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	89 23       	and	r24, r25
     c7a:	69 f0       	breq	.+26     	; 0xc96 <advance_note+0x1b4>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     c7c:	4e 2d       	mov	r20, r14
     c7e:	c0 2e       	mov	r12, r16
     c80:	cc 0c       	add	r12, r12
     c82:	6c 2d       	mov	r22, r12
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	6c 0d       	add	r22, r12
     c8e:	4e 2d       	mov	r20, r14
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			
			}
				
			if (track[index] & (1<<lane))
     c96:	fe 01       	movw	r30, r28
     c98:	ff 27       	eor	r31, r31
     c9a:	eb 52       	subi	r30, 0x2B	; 43
     c9c:	fe 4f       	sbci	r31, 0xFE	; 254
     c9e:	80 81       	ld	r24, Z
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	00 2e       	mov	r0, r16
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <advance_note+0x1c8>
     ca6:	95 95       	asr	r25
     ca8:	87 95       	ror	r24
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <advance_note+0x1c4>
     cae:	80 ff       	sbrs	r24, 0
     cb0:	4c c0       	rjmp	.+152    	; 0xd4a <advance_note+0x268>
			{
				//if note slides off screen and green_check isn't checked to a lane
				if (col == 15 && green_check == -1) {
     cb2:	1f 30       	cpi	r17, 0x0F	; 15
     cb4:	d9 f4       	brne	.+54     	; 0xcec <advance_note+0x20a>
     cb6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     cba:	8f 3f       	cpi	r24, 0xFF	; 255
     cbc:	b9 f4       	brne	.+46     	; 0xcec <advance_note+0x20a>
					points--;
     cbe:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <points>
     cc2:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <points+0x1>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <points+0x1>
     ccc:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <points>
					update_points();
     cd0:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
					
					if (combo_count != 0) {
     cd4:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <combo_count>
     cd8:	90 91 46 05 	lds	r25, 0x0546	; 0x800546 <combo_count+0x1>
     cdc:	89 2b       	or	r24, r25
     cde:	31 f0       	breq	.+12     	; 0xcec <advance_note+0x20a>
						combo_count = 0;
     ce0:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <combo_count+0x1>
     ce4:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <combo_count>
						update_combo();
     ce8:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
					}
				}
				
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
     cec:	1b 30       	cpi	r17, 0x0B	; 11
     cee:	59 f0       	breq	.+22     	; 0xd06 <advance_note+0x224>
     cf0:	1f 30       	cpi	r17, 0x0F	; 15
     cf2:	71 f0       	breq	.+28     	; 0xd10 <advance_note+0x22e>
				{
					colour = COLOUR_QUART_YELLOW;
				}
				else if (col==12 || col == 14)
     cf4:	1c 30       	cpi	r17, 0x0C	; 12
     cf6:	89 f0       	breq	.+34     	; 0xd1a <advance_note+0x238>
     cf8:	1e 30       	cpi	r17, 0x0E	; 14
     cfa:	a1 f0       	breq	.+40     	; 0xd24 <advance_note+0x242>
				{
					colour = COLOUR_HALF_YELLOW;
				}
				else if (col==13)
     cfc:	1d 30       	cpi	r17, 0x0D	; 13
     cfe:	b9 f4       	brne	.+46     	; 0xd2e <advance_note+0x24c>
				{
					colour = COLOUR_YELLOW;
     d00:	bb 24       	eor	r11, r11
     d02:	ba 94       	dec	r11
     d04:	15 c0       	rjmp	.+42     	; 0xd30 <advance_note+0x24e>
				
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
				{
					colour = COLOUR_QUART_YELLOW;
     d06:	0f 2e       	mov	r0, r31
     d08:	f1 e1       	ldi	r31, 0x11	; 17
     d0a:	bf 2e       	mov	r11, r31
     d0c:	f0 2d       	mov	r31, r0
     d0e:	10 c0       	rjmp	.+32     	; 0xd30 <advance_note+0x24e>
     d10:	0f 2e       	mov	r0, r31
     d12:	f1 e1       	ldi	r31, 0x11	; 17
     d14:	bf 2e       	mov	r11, r31
     d16:	f0 2d       	mov	r31, r0
     d18:	0b c0       	rjmp	.+22     	; 0xd30 <advance_note+0x24e>
				}
				else if (col==12 || col == 14)
				{
					colour = COLOUR_HALF_YELLOW;
     d1a:	0f 2e       	mov	r0, r31
     d1c:	f5 e5       	ldi	r31, 0x55	; 85
     d1e:	bf 2e       	mov	r11, r31
     d20:	f0 2d       	mov	r31, r0
     d22:	06 c0       	rjmp	.+12     	; 0xd30 <advance_note+0x24e>
     d24:	0f 2e       	mov	r0, r31
     d26:	f5 e5       	ldi	r31, 0x55	; 85
     d28:	bf 2e       	mov	r11, r31
     d2a:	f0 2d       	mov	r31, r0
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <advance_note+0x24e>
				{
					colour = COLOUR_YELLOW;
				}
				else
				{
					colour = COLOUR_BLACK;
     d2e:	b1 2c       	mov	r11, r1
				}
				ledmatrix_update_pixel(col, 2*lane, colour);
     d30:	4b 2d       	mov	r20, r11
     d32:	c0 2e       	mov	r12, r16
     d34:	cc 0c       	add	r12, r12
     d36:	6c 2d       	mov	r22, r12
     d38:	81 2f       	mov	r24, r17
     d3a:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 2*lane+1, colour);
     d3e:	61 e0       	ldi	r22, 0x01	; 1
     d40:	6c 0d       	add	r22, r12
     d42:	4b 2d       	mov	r20, r11
     d44:	81 2f       	mov	r24, r17
     d46:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
		if ((future+beat) % 5)
		{
			continue;
		} 
		
		for (uint8_t lane = 0; lane < 4; lane++)
     d4a:	0f 5f       	subi	r16, 0xFF	; 255
     d4c:	04 30       	cpi	r16, 0x04	; 4
     d4e:	08 f4       	brcc	.+2      	; 0xd52 <advance_note+0x270>
     d50:	45 cf       	rjmp	.-374    	; 0xbdc <advance_note+0xfa>
			}
		}
		
		
		//check if the current note goes off the screen
		if (col >= 15) {
     d52:	1f 30       	cpi	r17, 0x0F	; 15
     d54:	18 f0       	brcs	.+6      	; 0xd5c <advance_note+0x27a>
			green_check = -1;
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		sound_note(-1, -1);
	}
	
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     d5c:	1f 5f       	subi	r17, 0xFF	; 255
     d5e:	10 31       	cpi	r17, 0x10	; 16
     d60:	08 f4       	brcc	.+2      	; 0xd64 <advance_note+0x282>
     d62:	f2 ce       	rjmp	.-540    	; 0xb48 <advance_note+0x66>
			green_check = -1;
		}
	}
	
	// increment the beat
	beat++;
     d64:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <beat>
     d68:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <beat+0x1>
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <beat+0x1>
     d72:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <beat>
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     d76:	c0 e0       	ldi	r28, 0x00	; 0
     d78:	af c0       	rjmp	.+350    	; 0xed8 <advance_note+0x3f6>
	{
		// col counts from one end, future from the other
		uint8_t future = MATRIX_NUM_COLUMNS-1-col;
     d7a:	8f e0       	ldi	r24, 0x0F	; 15
     d7c:	8c 1b       	sub	r24, r28
		
		//is 1 if there is a long note, else 0
		int long_check = 0;
		
		// index of which note in the track to play
		uint8_t index = (future+beat)/5;
     d7e:	00 91 4d 05 	lds	r16, 0x054D	; 0x80054d <beat>
     d82:	10 91 4e 05 	lds	r17, 0x054E	; 0x80054e <beat+0x1>
     d86:	f8 01       	movw	r30, r16
     d88:	e8 0f       	add	r30, r24
     d8a:	f1 1d       	adc	r31, r1
     d8c:	9f 01       	movw	r18, r30
     d8e:	ad ec       	ldi	r26, 0xCD	; 205
     d90:	bc ec       	ldi	r27, 0xCC	; 204
     d92:	0e 94 65 14 	call	0x28ca	; 0x28ca <__umulhisi3>
     d96:	ac 01       	movw	r20, r24
     d98:	56 95       	lsr	r21
     d9a:	47 95       	ror	r20
     d9c:	56 95       	lsr	r21
     d9e:	47 95       	ror	r20
		
		// notes are only drawn every five columns
		if ((future+beat)%5)
     da0:	ca 01       	movw	r24, r20
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	84 0f       	add	r24, r20
     dac:	95 1f       	adc	r25, r21
     dae:	e8 17       	cp	r30, r24
     db0:	f9 07       	cpc	r31, r25
     db2:	09 f0       	breq	.+2      	; 0xdb6 <advance_note+0x2d4>
     db4:	90 c0       	rjmp	.+288    	; 0xed6 <advance_note+0x3f4>
		{
			continue;
		} 
		
		uint8_t ghost_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     db6:	98 01       	movw	r18, r16
     db8:	21 5f       	subi	r18, 0xF1	; 241
     dba:	3f 4f       	sbci	r19, 0xFF	; 255
     dbc:	0e 94 65 14 	call	0x28ca	; 0x28ca <__umulhisi3>
     dc0:	96 95       	lsr	r25
     dc2:	87 95       	ror	r24
     dc4:	96 95       	lsr	r25
     dc6:	87 95       	ror	r24
		//next note in track that is coming
		uint8_t ghost_note = track[ghost_index];
     dc8:	fc 01       	movw	r30, r24
     dca:	ff 27       	eor	r31, r31
     dcc:	eb 52       	subi	r30, 0x2B	; 43
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	e0 80       	ld	r14, Z
		
		// if the index is beyond the end of the track,
		// no note can be drawn
		if (index >= TRACK_LENGTH || (index + 1) >= TRACK_LENGTH)
     dd2:	41 38       	cpi	r20, 0x81	; 129
     dd4:	08 f0       	brcs	.+2      	; 0xdd8 <advance_note+0x2f6>
     dd6:	7f c0       	rjmp	.+254    	; 0xed6 <advance_note+0x3f4>
     dd8:	6a 01       	movw	r12, r20
     dda:	dd 24       	eor	r13, r13
     ddc:	56 01       	movw	r10, r12
     dde:	8f ef       	ldi	r24, 0xFF	; 255
     de0:	a8 1a       	sub	r10, r24
     de2:	b8 0a       	sbc	r11, r24
     de4:	81 e8       	ldi	r24, 0x81	; 129
     de6:	a8 16       	cp	r10, r24
     de8:	b1 04       	cpc	r11, r1
     dea:	0c f0       	brlt	.+2      	; 0xdee <advance_note+0x30c>
     dec:	74 c0       	rjmp	.+232    	; 0xed6 <advance_note+0x3f4>
     dee:	d0 e0       	ldi	r29, 0x00	; 0
     df0:	00 e0       	ldi	r16, 0x00	; 0
     df2:	10 e0       	ldi	r17, 0x00	; 0
     df4:	6d c0       	rjmp	.+218    	; 0xed0 <advance_note+0x3ee>
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{									
			
			uint8_t current_note = track[index];
     df6:	f6 01       	movw	r30, r12
     df8:	eb 52       	subi	r30, 0x2B	; 43
     dfa:	fe 4f       	sbci	r31, 0xFE	; 254
     dfc:	80 81       	ld	r24, Z
			
			//check if at the start of a long note
			if (current_note == current_note>>4) {
     dfe:	98 2f       	mov	r25, r24
     e00:	92 95       	swap	r25
     e02:	9f 70       	andi	r25, 0x0F	; 15
     e04:	89 17       	cp	r24, r25
     e06:	d1 f0       	breq	.+52     	; 0xe3c <advance_note+0x35a>
				long_check = 1;
			
			//check if in the middle of long note
			} else if ((long_check) && (track[index + 1] == current_note)) {
     e08:	01 15       	cp	r16, r1
     e0a:	11 05       	cpc	r17, r1
     e0c:	39 f0       	breq	.+14     	; 0xe1c <advance_note+0x33a>
     e0e:	f5 01       	movw	r30, r10
     e10:	eb 52       	subi	r30, 0x2B	; 43
     e12:	fe 4f       	sbci	r31, 0xFE	; 254
     e14:	20 81       	ld	r18, Z
     e16:	82 17       	cp	r24, r18
     e18:	09 f4       	brne	.+2      	; 0xe1c <advance_note+0x33a>
     e1a:	59 c0       	rjmp	.+178    	; 0xece <advance_note+0x3ec>
				continue; 
			
			//check if at the end of long note
			} else if ((long_check) && (track[index + 1] != track[index - 1])) {
     e1c:	01 15       	cp	r16, r1
     e1e:	11 05       	cpc	r17, r1
     e20:	79 f0       	breq	.+30     	; 0xe40 <advance_note+0x35e>
     e22:	f5 01       	movw	r30, r10
     e24:	eb 52       	subi	r30, 0x2B	; 43
     e26:	fe 4f       	sbci	r31, 0xFE	; 254
     e28:	30 81       	ld	r19, Z
     e2a:	f6 01       	movw	r30, r12
     e2c:	ec 52       	subi	r30, 0x2C	; 44
     e2e:	fe 4f       	sbci	r31, 0xFE	; 254
     e30:	20 81       	ld	r18, Z
     e32:	32 13       	cpse	r19, r18
     e34:	4c c0       	rjmp	.+152    	; 0xece <advance_note+0x3ec>
				continue;
			
			//else outside long note.
			} else {
				long_check = 0;
     e36:	00 e0       	ldi	r16, 0x00	; 0
     e38:	10 e0       	ldi	r17, 0x00	; 0
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <advance_note+0x35e>
			
			uint8_t current_note = track[index];
			
			//check if at the start of a long note
			if (current_note == current_note>>4) {
				long_check = 1;
     e3c:	01 e0       	ldi	r16, 0x01	; 1
     e3e:	10 e0       	ldi	r17, 0x00	; 0
			} else {
				long_check = 0;
				
			}
			
			if (long_check) {
     e40:	01 15       	cp	r16, r1
     e42:	11 05       	cpc	r17, r1
     e44:	09 f4       	brne	.+2      	; 0xe48 <advance_note+0x366>
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{									
			
			uint8_t current_note = track[index];
     e46:	98 2f       	mov	r25, r24
			if (long_check) {
				current_note = current_note>>4;
			}
			
			//check if there's a note in the specific path
			if (current_note & (1<<lane)) {
     e48:	4d 2f       	mov	r20, r29
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	29 2f       	mov	r18, r25
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	0d 2e       	mov	r0, r29
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <advance_note+0x376>
     e54:	35 95       	asr	r19
     e56:	27 95       	ror	r18
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <advance_note+0x372>
     e5c:	20 ff       	sbrs	r18, 0
     e5e:	37 c0       	rjmp	.+110    	; 0xece <advance_note+0x3ec>
				
				//check if theres a note in the led matrix section
				if ((green_check == lane) && ((col >= 11) && (col <= 15))) {
     e60:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e64:	02 2e       	mov	r0, r18
     e66:	00 0c       	add	r0, r0
     e68:	33 0b       	sbc	r19, r19
     e6a:	42 17       	cp	r20, r18
     e6c:	53 07       	cpc	r21, r19
     e6e:	91 f4       	brne	.+36     	; 0xe94 <advance_note+0x3b2>
     e70:	85 ef       	ldi	r24, 0xF5	; 245
     e72:	8c 0f       	add	r24, r28
     e74:	85 30       	cpi	r24, 0x05	; 5
     e76:	70 f4       	brcc	.+28     	; 0xe94 <advance_note+0x3b2>
					//if true set pixels to green
					ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     e78:	40 ef       	ldi	r20, 0xF0	; 240
     e7a:	9d 2e       	mov	r9, r29
     e7c:	99 0c       	add	r9, r9
     e7e:	69 2d       	mov	r22, r9
     e80:	8c 2f       	mov	r24, r28
     e82:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	69 0d       	add	r22, r9
     e8a:	40 ef       	ldi	r20, 0xF0	; 240
     e8c:	8c 2f       	mov	r24, r28
     e8e:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
     e92:	1d c0       	rjmp	.+58     	; 0xece <advance_note+0x3ec>
				
				} else if (ghost_note != current_note) {					
     e94:	9e 15       	cp	r25, r14
     e96:	71 f0       	breq	.+28     	; 0xeb4 <advance_note+0x3d2>
					ledmatrix_update_pixel(col, 2*lane, color);
     e98:	4f 2d       	mov	r20, r15
     e9a:	9d 2e       	mov	r9, r29
     e9c:	99 0c       	add	r9, r9
     e9e:	69 2d       	mov	r22, r9
     ea0:	8c 2f       	mov	r24, r28
     ea2:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, color);
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	69 0d       	add	r22, r9
     eaa:	4f 2d       	mov	r20, r15
     eac:	8c 2f       	mov	r24, r28
     eae:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
     eb2:	0d c0       	rjmp	.+26     	; 0xece <advance_note+0x3ec>
										
				} else {
					ledmatrix_update_pixel(col, 2*lane, color);
     eb4:	4f 2d       	mov	r20, r15
     eb6:	9d 2e       	mov	r9, r29
     eb8:	99 0c       	add	r9, r9
     eba:	69 2d       	mov	r22, r9
     ebc:	8c 2f       	mov	r24, r28
     ebe:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, color);	
     ec2:	61 e0       	ldi	r22, 0x01	; 1
     ec4:	69 0d       	add	r22, r9
     ec6:	4f 2d       	mov	r20, r15
     ec8:	8c 2f       	mov	r24, r28
     eca:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
		{
			continue;
		}
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
     ece:	df 5f       	subi	r29, 0xFF	; 255
     ed0:	d4 30       	cpi	r29, 0x04	; 4
     ed2:	08 f4       	brcc	.+2      	; 0xed6 <advance_note+0x3f4>
     ed4:	90 cf       	rjmp	.-224    	; 0xdf6 <advance_note+0x314>
	
	// increment the beat
	beat++;
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     ed6:	cf 5f       	subi	r28, 0xFF	; 255
     ed8:	c0 31       	cpi	r28, 0x10	; 16
     eda:	08 f4       	brcc	.+2      	; 0xede <advance_note+0x3fc>
     edc:	4e cf       	rjmp	.-356    	; 0xd7a <advance_note+0x298>
				
			}
		}
		
	}
}
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	df 90       	pop	r13
     eec:	cf 90       	pop	r12
     eee:	bf 90       	pop	r11
     ef0:	af 90       	pop	r10
     ef2:	9f 90       	pop	r9
     ef4:	08 95       	ret

00000ef6 <is_game_over>:

// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over(void)
{
	// Detect if the game is over i.e. if a player has won.
	if (game_over) {	
     ef6:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <game_over>
     efa:	88 23       	and	r24, r24
     efc:	19 f0       	breq	.+6      	; 0xf04 <is_game_over+0xe>
		game_over = 0; //reset game over check
     efe:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <game_over>
		return 1;	
     f02:	81 e0       	ldi	r24, 0x01	; 1
	
	} else {
	return 0;
	
	}
     f04:	08 95       	ret

00000f06 <ledmatrix_setup>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     f06:	80 e8       	ldi	r24, 0x80	; 128
     f08:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <spi_setup_master>
     f0c:	08 95       	ret

00000f0e <ledmatrix_update_pixel>:
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	80 31       	cpi	r24, 0x10	; 16
     f16:	b0 f4       	brcc	.+44     	; 0xf44 <ledmatrix_update_pixel+0x36>
     f18:	68 30       	cpi	r22, 0x08	; 8
     f1a:	a0 f4       	brcc	.+40     	; 0xf44 <ledmatrix_update_pixel+0x36>
     f1c:	14 2f       	mov	r17, r20
     f1e:	c6 2f       	mov	r28, r22
     f20:	d8 2f       	mov	r29, r24
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	0e 94 26 11 	call	0x224c	; 0x224c <spi_send_byte>
     f28:	6c 2f       	mov	r22, r28
     f2a:	67 70       	andi	r22, 0x07	; 7
     f2c:	80 e1       	ldi	r24, 0x10	; 16
     f2e:	68 9f       	mul	r22, r24
     f30:	90 01       	movw	r18, r0
     f32:	11 24       	eor	r1, r1
     f34:	8d 2f       	mov	r24, r29
     f36:	8f 70       	andi	r24, 0x0F	; 15
     f38:	82 2b       	or	r24, r18
     f3a:	0e 94 26 11 	call	0x224c	; 0x224c <spi_send_byte>
     f3e:	81 2f       	mov	r24, r17
     f40:	0e 94 26 11 	call	0x224c	; 0x224c <spi_send_byte>
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	08 95       	ret

00000f4c <ledmatrix_update_column>:
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	80 31       	cpi	r24, 0x10	; 16
     f54:	a0 f4       	brcc	.+40     	; 0xf7e <ledmatrix_update_column+0x32>
     f56:	8b 01       	movw	r16, r22
     f58:	c8 2f       	mov	r28, r24
     f5a:	83 e0       	ldi	r24, 0x03	; 3
     f5c:	0e 94 26 11 	call	0x224c	; 0x224c <spi_send_byte>
     f60:	8c 2f       	mov	r24, r28
     f62:	8f 70       	andi	r24, 0x0F	; 15
     f64:	0e 94 26 11 	call	0x224c	; 0x224c <spi_send_byte>
     f68:	c0 e0       	ldi	r28, 0x00	; 0
     f6a:	07 c0       	rjmp	.+14     	; 0xf7a <ledmatrix_update_column+0x2e>
     f6c:	f8 01       	movw	r30, r16
     f6e:	ec 0f       	add	r30, r28
     f70:	f1 1d       	adc	r31, r1
     f72:	80 81       	ld	r24, Z
     f74:	0e 94 26 11 	call	0x224c	; 0x224c <spi_send_byte>
     f78:	cf 5f       	subi	r28, 0xFF	; 255
     f7a:	c8 30       	cpi	r28, 0x08	; 8
     f7c:	b8 f3       	brcs	.-18     	; 0xf6c <ledmatrix_update_column+0x20>
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	08 95       	ret

00000f86 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     f86:	8f e0       	ldi	r24, 0x0F	; 15
     f88:	0e 94 26 11 	call	0x224c	; 0x224c <spi_send_byte>
     f8c:	08 95       	ret

00000f8e <initialise_hardware>:
	}
}

void initialise_hardware(void)
{
	ledmatrix_setup();
     f8e:	0e 94 83 07 	call	0xf06	; 0xf06 <ledmatrix_setup>
	init_button_interrupts();
     f92:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <init_button_interrupts>
	
	//Make all bits of port C and the upper 5 bits of port D to be output bits
	DDRC = 0xFF; //0xFF => 0b11111111
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFC; //0xFC => 0b11111100	
     f9a:	8c ef       	ldi	r24, 0xFC	; 252
     f9c:	8a b9       	out	0x0a, r24	; 10
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     f9e:	40 e0       	ldi	r20, 0x00	; 0
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	7b e4       	ldi	r23, 0x4B	; 75
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 12 10 	call	0x2024	; 0x2024 <init_serial_stdio>
	
	init_timer0();
     fac:	0e 94 6e 11 	call	0x22dc	; 0x22dc <init_timer0>
	init_timer1();
     fb0:	0e 94 b9 11 	call	0x2372	; 0x2372 <init_timer1>
	init_timer2();
     fb4:	0e 94 42 12 	call	0x2484	; 0x2484 <init_timer2>
	
	// Turn on global interrupts
	sei();
     fb8:	78 94       	sei
     fba:	08 95       	ret

00000fbc <start_screen>:
}

void start_screen(void)
{
     fbc:	4f 92       	push	r4
     fbe:	5f 92       	push	r5
     fc0:	6f 92       	push	r6
     fc2:	7f 92       	push	r7
     fc4:	8f 92       	push	r8
     fc6:	9f 92       	push	r9
     fc8:	af 92       	push	r10
     fca:	bf 92       	push	r11
     fcc:	cf 92       	push	r12
     fce:	df 92       	push	r13
     fd0:	ef 92       	push	r14
     fd2:	ff 92       	push	r15
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
	// Clear terminal screen and output a message
	clear_terminal();
     fd8:	0e 94 3d 11 	call	0x227a	; 0x227a <clear_terminal>
	show_cursor();
     fdc:	0e 94 65 11 	call	0x22ca	; 0x22ca <show_cursor>
	clear_terminal();
     fe0:	0e 94 3d 11 	call	0x227a	; 0x227a <clear_terminal>
	hide_cursor();
     fe4:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <hide_cursor>
	set_display_attribute(FG_WHITE);
     fe8:	85 e2       	ldi	r24, 0x25	; 37
     fea:	0e 94 4f 11 	call	0x229e	; 0x229e <set_display_attribute>
	move_terminal_cursor(10,4);
     fee:	64 e0       	ldi	r22, 0x04	; 4
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	8a e0       	ldi	r24, 0x0A	; 10
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	printf_P(PSTR("  ______   __     __  _______         __    __"));
     ffa:	81 e3       	ldi	r24, 0x31	; 49
     ffc:	93 e0       	ldi	r25, 0x03	; 3
     ffe:	9f 93       	push	r25
    1000:	8f 93       	push	r24
    1002:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
	move_terminal_cursor(10,5);
    1006:	65 e0       	ldi	r22, 0x05	; 5
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	8a e0       	ldi	r24, 0x0A	; 10
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	printf_P(PSTR(" /      \\ |  \\   |  \\|       \\       |  \\  |  \\"));
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	93 e0       	ldi	r25, 0x03	; 3
    1016:	9f 93       	push	r25
    1018:	8f 93       	push	r24
    101a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
	move_terminal_cursor(10,6);
    101e:	66 e0       	ldi	r22, 0x06	; 6
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	8a e0       	ldi	r24, 0x0A	; 10
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	printf_P(PSTR("|  $$$$$$\\| $$   | $$| $$$$$$$\\      | $$  | $$  ______    ______    ______"));
    102a:	85 eb       	ldi	r24, 0xB5	; 181
    102c:	92 e0       	ldi	r25, 0x02	; 2
    102e:	9f 93       	push	r25
    1030:	8f 93       	push	r24
    1032:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
	move_terminal_cursor(10,7);
    1036:	67 e0       	ldi	r22, 0x07	; 7
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	8a e0       	ldi	r24, 0x0A	; 10
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	printf_P(PSTR("| $$__| $$| $$   | $$| $$__| $$      | $$__| $$ /      \\  /      \\  /      \\"));
    1042:	88 e6       	ldi	r24, 0x68	; 104
    1044:	92 e0       	ldi	r25, 0x02	; 2
    1046:	9f 93       	push	r25
    1048:	8f 93       	push	r24
    104a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
	move_terminal_cursor(10,8);
    104e:	68 e0       	ldi	r22, 0x08	; 8
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	8a e0       	ldi	r24, 0x0A	; 10
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	printf_P(PSTR("| $$    $$ \\$$\\ /  $$| $$    $$      | $$    $$|  $$$$$$\\|  $$$$$$\\|  $$$$$$\\"));
    105a:	8a e1       	ldi	r24, 0x1A	; 26
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	9f 93       	push	r25
    1060:	8f 93       	push	r24
    1062:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
	move_terminal_cursor(10,9);
    1066:	69 e0       	ldi	r22, 0x09	; 9
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	8a e0       	ldi	r24, 0x0A	; 10
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	printf_P(PSTR("| $$$$$$$$  \\$$\\  $$ | $$$$$$$\\      | $$$$$$$$| $$    $$| $$   \\$$| $$  | $$"));
    1072:	8c ec       	ldi	r24, 0xCC	; 204
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	9f 93       	push	r25
    1078:	8f 93       	push	r24
    107a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
	move_terminal_cursor(10,10);
    107e:	6a e0       	ldi	r22, 0x0A	; 10
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	8a e0       	ldi	r24, 0x0A	; 10
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$   \\$$ $$  | $$  | $$      | $$  | $$| $$$$$$$$| $$      | $$__/ $$"));
    108a:	8e e7       	ldi	r24, 0x7E	; 126
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	9f 93       	push	r25
    1090:	8f 93       	push	r24
    1092:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
	move_terminal_cursor(10,11);
    1096:	6b e0       	ldi	r22, 0x0B	; 11
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	8a e0       	ldi	r24, 0x0A	; 10
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$    \\$$$   | $$  | $$      | $$  | $$ \\$$     \\| $$       \\$$    $$"));
    10a2:	80 e3       	ldi	r24, 0x30	; 48
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	9f 93       	push	r25
    10a8:	8f 93       	push	r24
    10aa:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
	move_terminal_cursor(10,12);
    10ae:	6c e0       	ldi	r22, 0x0C	; 12
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	8a e0       	ldi	r24, 0x0A	; 10
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	printf_P(PSTR(" \\$$   \\$$     \\$     \\$$   \\$$       \\$$   \\$$  \\$$$$$$$ \\$$        \\$$$$$$"));
    10ba:	83 ee       	ldi	r24, 0xE3	; 227
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	9f 93       	push	r25
    10c0:	8f 93       	push	r24
    10c2:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
	move_terminal_cursor(10,14);
    10c6:	6e e0       	ldi	r22, 0x0E	; 14
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	8a e0       	ldi	r24, 0x0A	; 10
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	// change this to your name and student number; remove the chevrons <>
	printf_P(PSTR("CSSE2010/7201 A2 by  Cailin Delgado - 48027942"));
    10d2:	84 eb       	ldi	r24, 0xB4	; 180
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9f 93       	push	r25
    10d8:	8f 93       	push	r24
    10da:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
    10de:	0e 94 a2 02 	call	0x544	; 0x544 <show_start_screen>
	
	set_track(0);
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <set_track>
	
	//Display current track
	move_terminal_cursor(10, 15);
    10ea:	6f e0       	ldi	r22, 0x0F	; 15
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	8a e0       	ldi	r24, 0x0A	; 10
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	printf("Track: %s", track_name);															//do %s and add a new track title at the end.
    10f6:	88 e2       	ldi	r24, 0x28	; 40
    10f8:	95 e0       	ldi	r25, 0x05	; 5
    10fa:	9f 93       	push	r25
    10fc:	8f 93       	push	r24
    10fe:	86 e5       	ldi	r24, 0x56	; 86
    1100:	92 e0       	ldi	r25, 0x02	; 2
    1102:	9f 93       	push	r25
    1104:	8f 93       	push	r24
    1106:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
    110a:	0e 94 84 11 	call	0x2308	; 0x2308 <get_current_time>
    110e:	6b 01       	movw	r12, r22
    1110:	7c 01       	movw	r14, r24
	
	uint8_t frame_number = 0;
	game_speed = 1000;
    1112:	88 ee       	ldi	r24, 0xE8	; 232
    1114:	93 e0       	ldi	r25, 0x03	; 3
    1116:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <game_speed+0x1>
    111a:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <game_speed>
	
	move_terminal_cursor(10, 17);
    111e:	61 e1       	ldi	r22, 0x11	; 17
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	8a e0       	ldi	r24, 0x0A	; 10
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	clear_to_end_of_line();
    112a:	0e 94 46 11 	call	0x228c	; 0x228c <clear_to_end_of_line>
	//update game speed in terminal appropriately
	if (game_speed == 1000) {
    112e:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <game_speed>
    1132:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <game_speed+0x1>
    1136:	2d b7       	in	r18, 0x3d	; 61
    1138:	3e b7       	in	r19, 0x3e	; 62
    113a:	28 5e       	subi	r18, 0xE8	; 232
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	3e bf       	out	0x3e, r19	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	2d bf       	out	0x3d, r18	; 61
    1148:	88 3e       	cpi	r24, 0xE8	; 232
    114a:	33 e0       	ldi	r19, 0x03	; 3
    114c:	93 07       	cpc	r25, r19
    114e:	69 f4       	brne	.+26     	; 0x116a <start_screen+0x1ae>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    1150:	9f 93       	push	r25
    1152:	8f 93       	push	r24
    1154:	80 e6       	ldi	r24, 0x60	; 96
    1156:	92 e0       	ldi	r25, 0x02	; 2
    1158:	9f 93       	push	r25
    115a:	8f 93       	push	r24
    115c:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	20 c0       	rjmp	.+64     	; 0x11aa <start_screen+0x1ee>
		
	} else if (game_speed == 500) {
    116a:	84 3f       	cpi	r24, 0xF4	; 244
    116c:	21 e0       	ldi	r18, 0x01	; 1
    116e:	92 07       	cpc	r25, r18
    1170:	69 f4       	brne	.+26     	; 0x118c <start_screen+0x1d0>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1172:	9f 93       	push	r25
    1174:	8f 93       	push	r24
    1176:	86 e8       	ldi	r24, 0x86	; 134
    1178:	92 e0       	ldi	r25, 0x02	; 2
    117a:	9f 93       	push	r25
    117c:	8f 93       	push	r24
    117e:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f c0       	rjmp	.+30     	; 0x11aa <start_screen+0x1ee>
		
	} else if (game_speed == 250) {
    118c:	8a 3f       	cpi	r24, 0xFA	; 250
    118e:	91 05       	cpc	r25, r1
    1190:	61 f4       	brne	.+24     	; 0x11aa <start_screen+0x1ee>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1192:	9f 93       	push	r25
    1194:	8f 93       	push	r24
    1196:	8a ea       	ldi	r24, 0xAA	; 170
    1198:	92 e0       	ldi	r25, 0x02	; 2
    119a:	9f 93       	push	r25
    119c:	8f 93       	push	r24
    119e:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
	// Turn on global interrupts
	sei();
}

void start_screen(void)
{
    11aa:	d0 e0       	ldi	r29, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available())
    11ac:	0e 94 59 10 	call	0x20b2	; 0x20b2 <serial_input_available>
    11b0:	88 23       	and	r24, r24
    11b2:	41 f0       	breq	.+16     	; 0x11c4 <start_screen+0x208>
		{
			serial_input = fgetc(stdin);
    11b4:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <__iob>
    11b8:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <__iob+0x1>
    11bc:	0e 94 88 14 	call	0x2910	; 0x2910 <fgetc>
    11c0:	c8 2f       	mov	r28, r24
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <start_screen+0x20a>
	{
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
    11c4:	cf ef       	ldi	r28, 0xFF	; 255
		if (serial_input_available())
		{
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S')
    11c6:	c3 37       	cpi	r28, 0x73	; 115
    11c8:	09 f4       	brne	.+2      	; 0x11cc <start_screen+0x210>
    11ca:	f6 c0       	rjmp	.+492    	; 0x13b8 <start_screen+0x3fc>
    11cc:	c3 35       	cpi	r28, 0x53	; 83
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <start_screen+0x216>
    11d0:	f3 c0       	rjmp	.+486    	; 0x13b8 <start_screen+0x3fc>
			break;
		} 
		
		
		//display the game speed to the terminal
		if (serial_input == '1') {
    11d2:	c1 33       	cpi	r28, 0x31	; 49
    11d4:	f9 f4       	brne	.+62     	; 0x1214 <start_screen+0x258>
			game_speed = 1000; //set game speed to 1000ms
    11d6:	88 ee       	ldi	r24, 0xE8	; 232
    11d8:	93 e0       	ldi	r25, 0x03	; 3
    11da:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <game_speed+0x1>
    11de:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <game_speed>
			
			move_terminal_cursor(10, 17);
    11e2:	61 e1       	ldi	r22, 0x11	; 17
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	8a e0       	ldi	r24, 0x0A	; 10
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
			clear_to_end_of_line();
    11ee:	0e 94 46 11 	call	0x228c	; 0x228c <clear_to_end_of_line>
			printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    11f2:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <game_speed+0x1>
    11f6:	8f 93       	push	r24
    11f8:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <game_speed>
    11fc:	8f 93       	push	r24
    11fe:	80 e6       	ldi	r24, 0x60	; 96
    1200:	92 e0       	ldi	r25, 0x02	; 2
    1202:	9f 93       	push	r25
    1204:	8f 93       	push	r24
    1206:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	41 c0       	rjmp	.+130    	; 0x1296 <start_screen+0x2da>
			
		} else if (serial_input == '2') {
    1214:	c2 33       	cpi	r28, 0x32	; 50
    1216:	f9 f4       	brne	.+62     	; 0x1256 <start_screen+0x29a>
			game_speed = 500; //set game speed to 500ms
    1218:	84 ef       	ldi	r24, 0xF4	; 244
    121a:	91 e0       	ldi	r25, 0x01	; 1
    121c:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <game_speed+0x1>
    1220:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <game_speed>
			
			move_terminal_cursor(10, 17);
    1224:	61 e1       	ldi	r22, 0x11	; 17
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	8a e0       	ldi	r24, 0x0A	; 10
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
			clear_to_end_of_line();
    1230:	0e 94 46 11 	call	0x228c	; 0x228c <clear_to_end_of_line>
			printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1234:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <game_speed+0x1>
    1238:	8f 93       	push	r24
    123a:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <game_speed>
    123e:	8f 93       	push	r24
    1240:	86 e8       	ldi	r24, 0x86	; 134
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	9f 93       	push	r25
    1246:	8f 93       	push	r24
    1248:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	20 c0       	rjmp	.+64     	; 0x1296 <start_screen+0x2da>
			
		} else if (serial_input == '3') {
    1256:	c3 33       	cpi	r28, 0x33	; 51
    1258:	f1 f4       	brne	.+60     	; 0x1296 <start_screen+0x2da>
			game_speed = 250; //set game speed to 250ms
    125a:	8a ef       	ldi	r24, 0xFA	; 250
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <game_speed+0x1>
    1262:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <game_speed>
			
			move_terminal_cursor(10, 17);
    1266:	61 e1       	ldi	r22, 0x11	; 17
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	8a e0       	ldi	r24, 0x0A	; 10
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
			clear_to_end_of_line();
    1272:	0e 94 46 11 	call	0x228c	; 0x228c <clear_to_end_of_line>
			printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1276:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <game_speed+0x1>
    127a:	8f 93       	push	r24
    127c:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <game_speed>
    1280:	8f 93       	push	r24
    1282:	8a ea       	ldi	r24, 0xAA	; 170
    1284:	92 e0       	ldi	r25, 0x02	; 2
    1286:	9f 93       	push	r25
    1288:	8f 93       	push	r24
    128a:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
		}
		
		
		// Next check for any button presses
		int8_t btn = button_pushed();
    1296:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
		if (btn != NO_BUTTON_PUSHED)
    129a:	8f 3f       	cpi	r24, 0xFF	; 255
    129c:	09 f0       	breq	.+2      	; 0x12a0 <start_screen+0x2e4>
    129e:	8c c0       	rjmp	.+280    	; 0x13b8 <start_screen+0x3fc>
		{
			break;
			
		} else if (serial_input == 'm' || serial_input == 'M') {
    12a0:	cd 36       	cpi	r28, 0x6D	; 109
    12a2:	11 f0       	breq	.+4      	; 0x12a8 <start_screen+0x2ec>
    12a4:	cd 34       	cpi	r28, 0x4D	; 77
    12a6:	11 f5       	brne	.+68     	; 0x12ec <start_screen+0x330>
			//clear manual mode alert
			move_terminal_cursor(10, 16);
    12a8:	60 e1       	ldi	r22, 0x10	; 16
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	8a e0       	ldi	r24, 0x0A	; 10
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
			clear_to_end_of_line();
    12b4:	0e 94 46 11 	call	0x228c	; 0x228c <clear_to_end_of_line>
			
			if (man_mode) {
    12b8:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <man_mode>
    12bc:	90 91 1c 05 	lds	r25, 0x051C	; 0x80051c <man_mode+0x1>
    12c0:	89 2b       	or	r24, r25
    12c2:	29 f0       	breq	.+10     	; 0x12ce <start_screen+0x312>
				man_mode = 0;  // toggle manual mode checker
    12c4:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <man_mode+0x1>
    12c8:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <man_mode>
    12cc:	3e c0       	rjmp	.+124    	; 0x134a <start_screen+0x38e>
				
			} else {
				man_mode = 1; //toggle manual mode checker				
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <man_mode+0x1>
    12d6:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <man_mode>
				//print to terminal that manual mode is on
				printf("Manual Mode: ON");
    12da:	81 ed       	ldi	r24, 0xD1	; 209
    12dc:	92 e0       	ldi	r25, 0x02	; 2
    12de:	9f 93       	push	r25
    12e0:	8f 93       	push	r24
    12e2:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	2f c0       	rjmp	.+94     	; 0x134a <start_screen+0x38e>
			}
		} else if (serial_input == 't' || serial_input == 'T') { //select track
    12ec:	c4 37       	cpi	r28, 0x74	; 116
    12ee:	11 f0       	breq	.+4      	; 0x12f4 <start_screen+0x338>
    12f0:	c4 35       	cpi	r28, 0x54	; 84
    12f2:	59 f5       	brne	.+86     	; 0x134a <start_screen+0x38e>
			track_no++;
    12f4:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <track_no>
    12f8:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <track_no+0x1>
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	90 93 44 05 	sts	0x0544, r25	; 0x800544 <track_no+0x1>
    1302:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <track_no>
			
			if (track_no > 2) {
    1306:	03 97       	sbiw	r24, 0x03	; 3
    1308:	24 f0       	brlt	.+8      	; 0x1312 <start_screen+0x356>
				track_no = 0;
    130a:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <track_no+0x1>
    130e:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <track_no>
			}
			
			
			//sets the track and renames track_name
			set_track(track_no);
    1312:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <track_no>
    1316:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <track_no+0x1>
    131a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <set_track>

			//Display current track
			move_terminal_cursor(10, 15);
    131e:	6f e0       	ldi	r22, 0x0F	; 15
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	8a e0       	ldi	r24, 0x0A	; 10
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
			clear_to_end_of_line();
    132a:	0e 94 46 11 	call	0x228c	; 0x228c <clear_to_end_of_line>
			printf("Track: %s", track_name);																//do %s and add a new track title at the end.
    132e:	88 e2       	ldi	r24, 0x28	; 40
    1330:	95 e0       	ldi	r25, 0x05	; 5
    1332:	9f 93       	push	r25
    1334:	8f 93       	push	r24
    1336:	86 e5       	ldi	r24, 0x56	; 86
    1338:	92 e0       	ldi	r25, 0x02	; 2
    133a:	9f 93       	push	r25
    133c:	8f 93       	push	r24
    133e:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
		}	

		if (!man_mode) {
    134a:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <man_mode>
    134e:	90 91 1c 05 	lds	r25, 0x051C	; 0x80051c <man_mode+0x1>
    1352:	89 2b       	or	r24, r25
    1354:	09 f0       	breq	.+2      	; 0x1358 <start_screen+0x39c>
    1356:	2a cf       	rjmp	.-428    	; 0x11ac <start_screen+0x1f0>
			// every 200 ms, update the animation
			current_time = get_current_time();
    1358:	0e 94 84 11 	call	0x2308	; 0x2308 <get_current_time>
    135c:	4b 01       	movw	r8, r22
    135e:	5c 01       	movw	r10, r24
			if (current_time - last_screen_update > game_speed/5)
    1360:	2b 01       	movw	r4, r22
    1362:	3c 01       	movw	r6, r24
    1364:	4c 18       	sub	r4, r12
    1366:	5d 08       	sbc	r5, r13
    1368:	6e 08       	sbc	r6, r14
    136a:	7f 08       	sbc	r7, r15
    136c:	20 91 4f 05 	lds	r18, 0x054F	; 0x80054f <game_speed>
    1370:	30 91 50 05 	lds	r19, 0x0550	; 0x800550 <game_speed+0x1>
    1374:	ad ec       	ldi	r26, 0xCD	; 205
    1376:	bc ec       	ldi	r27, 0xCC	; 204
    1378:	0e 94 65 14 	call	0x28ca	; 0x28ca <__umulhisi3>
    137c:	96 95       	lsr	r25
    137e:	87 95       	ror	r24
    1380:	96 95       	lsr	r25
    1382:	87 95       	ror	r24
    1384:	a0 e0       	ldi	r26, 0x00	; 0
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	84 15       	cp	r24, r4
    138a:	95 05       	cpc	r25, r5
    138c:	a6 05       	cpc	r26, r6
    138e:	b7 05       	cpc	r27, r7
    1390:	08 f0       	brcs	.+2      	; 0x1394 <start_screen+0x3d8>
    1392:	0c cf       	rjmp	.-488    	; 0x11ac <start_screen+0x1f0>
			{
				update_start_screen(frame_number);
    1394:	8d 2f       	mov	r24, r29
    1396:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
				frame_number = (frame_number + 1) % 32;
    139a:	8d 2f       	mov	r24, r29
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	8f 71       	andi	r24, 0x1F	; 31
    13a2:	90 78       	andi	r25, 0x80	; 128
    13a4:	99 23       	and	r25, r25
    13a6:	24 f4       	brge	.+8      	; 0x13b0 <start_screen+0x3f4>
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	80 6e       	ori	r24, 0xE0	; 224
    13ac:	9f 6f       	ori	r25, 0xFF	; 255
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	d8 2f       	mov	r29, r24
				last_screen_update = current_time;
    13b2:	75 01       	movw	r14, r10
    13b4:	64 01       	movw	r12, r8
    13b6:	fa ce       	rjmp	.-524    	; 0x11ac <start_screen+0x1f0>
			} 
		}
	}
}
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	ff 90       	pop	r15
    13be:	ef 90       	pop	r14
    13c0:	df 90       	pop	r13
    13c2:	cf 90       	pop	r12
    13c4:	bf 90       	pop	r11
    13c6:	af 90       	pop	r10
    13c8:	9f 90       	pop	r9
    13ca:	8f 90       	pop	r8
    13cc:	7f 90       	pop	r7
    13ce:	6f 90       	pop	r6
    13d0:	5f 90       	pop	r5
    13d2:	4f 90       	pop	r4
    13d4:	08 95       	ret

000013d6 <display_countdown>:

void display_countdown(int countdown) {
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	ec 01       	movw	r28, r24
	//clear display
	ledmatrix_clear();
    13dc:	0e 94 c3 07 	call	0xf86	; 0xf86 <ledmatrix_clear>
	
	switch (countdown) {
    13e0:	c2 30       	cpi	r28, 0x02	; 2
    13e2:	d1 05       	cpc	r29, r1
    13e4:	a9 f1       	breq	.+106    	; 0x1450 <display_countdown+0x7a>
    13e6:	1c f4       	brge	.+6      	; 0x13ee <display_countdown+0x18>
    13e8:	21 97       	sbiw	r28, 0x01	; 1
    13ea:	71 f1       	breq	.+92     	; 0x1448 <display_countdown+0x72>
    13ec:	74 c1       	rjmp	.+744    	; 0x16d6 <display_countdown+0x300>
    13ee:	c3 30       	cpi	r28, 0x03	; 3
    13f0:	d1 05       	cpc	r29, r1
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <display_countdown+0x20>
    13f4:	f3 c0       	rjmp	.+486    	; 0x15dc <display_countdown+0x206>
    13f6:	24 97       	sbiw	r28, 0x04	; 4
    13f8:	09 f4       	brne	.+2      	; 0x13fc <display_countdown+0x26>
    13fa:	f5 c0       	rjmp	.+490    	; 0x15e6 <display_countdown+0x210>
    13fc:	6c c1       	rjmp	.+728    	; 0x16d6 <display_countdown+0x300>
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
				ledmatrix_update_pixel(col, 3, COLOUR_YELLOW);
    13fe:	4f ef       	ldi	r20, 0xFF	; 255
    1400:	63 e0       	ldi	r22, 0x03	; 3
    1402:	8c 2f       	mov	r24, r28
    1404:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 4, COLOUR_YELLOW);
    1408:	4f ef       	ldi	r20, 0xFF	; 255
    140a:	64 e0       	ldi	r22, 0x04	; 4
    140c:	8c 2f       	mov	r24, r28
    140e:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
				
				if (col == 5) {
    1412:	c5 30       	cpi	r28, 0x05	; 5
    1414:	59 f4       	brne	.+22     	; 0x142c <display_countdown+0x56>
					ledmatrix_update_pixel(col, 2, COLOUR_YELLOW);
    1416:	4f ef       	ldi	r20, 0xFF	; 255
    1418:	62 e0       	ldi	r22, 0x02	; 2
    141a:	8c 2f       	mov	r24, r28
    141c:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_YELLOW);
    1420:	4f ef       	ldi	r20, 0xFF	; 255
    1422:	64 e0       	ldi	r22, 0x04	; 4
    1424:	8c 2f       	mov	r24, r28
    1426:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
    142a:	0c c0       	rjmp	.+24     	; 0x1444 <display_countdown+0x6e>
					
					} else if (col == 10) {
    142c:	ca 30       	cpi	r28, 0x0A	; 10
    142e:	51 f4       	brne	.+20     	; 0x1444 <display_countdown+0x6e>
					ledmatrix_update_pixel(col, 2, COLOUR_YELLOW);
    1430:	4f ef       	ldi	r20, 0xFF	; 255
    1432:	62 e0       	ldi	r22, 0x02	; 2
    1434:	8c 2f       	mov	r24, r28
    1436:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_YELLOW);
    143a:	4f ef       	ldi	r20, 0xFF	; 255
    143c:	65 e0       	ldi	r22, 0x05	; 5
    143e:	8c 2f       	mov	r24, r28
    1440:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
    1444:	cf 5f       	subi	r28, 0xFF	; 255
    1446:	01 c0       	rjmp	.+2      	; 0x144a <display_countdown+0x74>

void display_countdown(int countdown) {
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
    1448:	c4 e0       	ldi	r28, 0x04	; 4
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
    144a:	cb 30       	cpi	r28, 0x0B	; 11
    144c:	c0 f2       	brcs	.-80     	; 0x13fe <display_countdown+0x28>
    144e:	43 c1       	rjmp	.+646    	; 0x16d6 <display_countdown+0x300>
				}
			}
			break;
			
		case 2:  //Then draw the 2
			ledmatrix_update_pixel(4, 2, COLOUR_RED);
    1450:	4f e0       	ldi	r20, 0x0F	; 15
    1452:	62 e0       	ldi	r22, 0x02	; 2
    1454:	84 e0       	ldi	r24, 0x04	; 4
    1456:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 3, COLOUR_RED);
    145a:	4f e0       	ldi	r20, 0x0F	; 15
    145c:	63 e0       	ldi	r22, 0x03	; 3
    145e:	84 e0       	ldi	r24, 0x04	; 4
    1460:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 4, COLOUR_RED);
    1464:	4f e0       	ldi	r20, 0x0F	; 15
    1466:	64 e0       	ldi	r22, 0x04	; 4
    1468:	84 e0       	ldi	r24, 0x04	; 4
    146a:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 5, COLOUR_RED);
    146e:	4f e0       	ldi	r20, 0x0F	; 15
    1470:	65 e0       	ldi	r22, 0x05	; 5
    1472:	84 e0       	ldi	r24, 0x04	; 4
    1474:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(5, 1, COLOUR_RED);
    1478:	4f e0       	ldi	r20, 0x0F	; 15
    147a:	61 e0       	ldi	r22, 0x01	; 1
    147c:	85 e0       	ldi	r24, 0x05	; 5
    147e:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 2, COLOUR_RED);
    1482:	4f e0       	ldi	r20, 0x0F	; 15
    1484:	62 e0       	ldi	r22, 0x02	; 2
    1486:	85 e0       	ldi	r24, 0x05	; 5
    1488:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 5, COLOUR_RED);
    148c:	4f e0       	ldi	r20, 0x0F	; 15
    148e:	65 e0       	ldi	r22, 0x05	; 5
    1490:	85 e0       	ldi	r24, 0x05	; 5
    1492:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 6, COLOUR_RED);
    1496:	4f e0       	ldi	r20, 0x0F	; 15
    1498:	66 e0       	ldi	r22, 0x06	; 6
    149a:	85 e0       	ldi	r24, 0x05	; 5
    149c:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(6, 5, COLOUR_RED);
    14a0:	4f e0       	ldi	r20, 0x0F	; 15
    14a2:	65 e0       	ldi	r22, 0x05	; 5
    14a4:	86 e0       	ldi	r24, 0x06	; 6
    14a6:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 6, COLOUR_RED);
    14aa:	4f e0       	ldi	r20, 0x0F	; 15
    14ac:	66 e0       	ldi	r22, 0x06	; 6
    14ae:	86 e0       	ldi	r24, 0x06	; 6
    14b0:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(7, 5, COLOUR_RED);
    14b4:	4f e0       	ldi	r20, 0x0F	; 15
    14b6:	65 e0       	ldi	r22, 0x05	; 5
    14b8:	87 e0       	ldi	r24, 0x07	; 7
    14ba:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 6, COLOUR_RED);
    14be:	4f e0       	ldi	r20, 0x0F	; 15
    14c0:	66 e0       	ldi	r22, 0x06	; 6
    14c2:	87 e0       	ldi	r24, 0x07	; 7
    14c4:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(8, 2, COLOUR_RED);
    14c8:	4f e0       	ldi	r20, 0x0F	; 15
    14ca:	62 e0       	ldi	r22, 0x02	; 2
    14cc:	88 e0       	ldi	r24, 0x08	; 8
    14ce:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 3, COLOUR_RED);
    14d2:	4f e0       	ldi	r20, 0x0F	; 15
    14d4:	63 e0       	ldi	r22, 0x03	; 3
    14d6:	88 e0       	ldi	r24, 0x08	; 8
    14d8:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 4, COLOUR_RED);
    14dc:	4f e0       	ldi	r20, 0x0F	; 15
    14de:	64 e0       	ldi	r22, 0x04	; 4
    14e0:	88 e0       	ldi	r24, 0x08	; 8
    14e2:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(9, 1, COLOUR_RED);
    14e6:	4f e0       	ldi	r20, 0x0F	; 15
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	89 e0       	ldi	r24, 0x09	; 9
    14ec:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 2, COLOUR_RED);
    14f0:	4f e0       	ldi	r20, 0x0F	; 15
    14f2:	62 e0       	ldi	r22, 0x02	; 2
    14f4:	89 e0       	ldi	r24, 0x09	; 9
    14f6:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(10, 1, COLOUR_RED);
    14fa:	4f e0       	ldi	r20, 0x0F	; 15
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	8a e0       	ldi	r24, 0x0A	; 10
    1500:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 2, COLOUR_RED);
    1504:	4f e0       	ldi	r20, 0x0F	; 15
    1506:	62 e0       	ldi	r22, 0x02	; 2
    1508:	8a e0       	ldi	r24, 0x0A	; 10
    150a:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 3, COLOUR_RED);
    150e:	4f e0       	ldi	r20, 0x0F	; 15
    1510:	63 e0       	ldi	r22, 0x03	; 3
    1512:	8a e0       	ldi	r24, 0x0A	; 10
    1514:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 4, COLOUR_RED);
    1518:	4f e0       	ldi	r20, 0x0F	; 15
    151a:	64 e0       	ldi	r22, 0x04	; 4
    151c:	8a e0       	ldi	r24, 0x0A	; 10
    151e:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
    1522:	4f e0       	ldi	r20, 0x0F	; 15
    1524:	65 e0       	ldi	r22, 0x05	; 5
    1526:	8a e0       	ldi	r24, 0x0A	; 10
    1528:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
    152c:	4f e0       	ldi	r20, 0x0F	; 15
    152e:	66 e0       	ldi	r22, 0x06	; 6
    1530:	8a e0       	ldi	r24, 0x0A	; 10
    1532:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			break;
    1536:	cf c0       	rjmp	.+414    	; 0x16d6 <display_countdown+0x300>
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
				if (col == 4 || col == 10) {
    1538:	c4 30       	cpi	r28, 0x04	; 4
    153a:	11 f0       	breq	.+4      	; 0x1540 <display_countdown+0x16a>
    153c:	ca 30       	cpi	r28, 0x0A	; 10
    153e:	a9 f4       	brne	.+42     	; 0x156a <display_countdown+0x194>
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    1540:	4f e0       	ldi	r20, 0x0F	; 15
    1542:	62 e0       	ldi	r22, 0x02	; 2
    1544:	8c 2f       	mov	r24, r28
    1546:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 3, COLOUR_RED);
    154a:	4f e0       	ldi	r20, 0x0F	; 15
    154c:	63 e0       	ldi	r22, 0x03	; 3
    154e:	8c 2f       	mov	r24, r28
    1550:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_RED);
    1554:	4f e0       	ldi	r20, 0x0F	; 15
    1556:	64 e0       	ldi	r22, 0x04	; 4
    1558:	8c 2f       	mov	r24, r28
    155a:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_RED);
    155e:	4f e0       	ldi	r20, 0x0F	; 15
    1560:	65 e0       	ldi	r22, 0x05	; 5
    1562:	8c 2f       	mov	r24, r28
    1564:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
    1568:	37 c0       	rjmp	.+110    	; 0x15d8 <display_countdown+0x202>
					
					} else if (col == 5 || col == 9) {
    156a:	c5 30       	cpi	r28, 0x05	; 5
    156c:	11 f0       	breq	.+4      	; 0x1572 <display_countdown+0x19c>
    156e:	c9 30       	cpi	r28, 0x09	; 9
    1570:	a9 f4       	brne	.+42     	; 0x159c <display_countdown+0x1c6>
					ledmatrix_update_pixel(col, 1, COLOUR_RED);
    1572:	4f e0       	ldi	r20, 0x0F	; 15
    1574:	61 e0       	ldi	r22, 0x01	; 1
    1576:	8c 2f       	mov	r24, r28
    1578:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    157c:	4f e0       	ldi	r20, 0x0F	; 15
    157e:	62 e0       	ldi	r22, 0x02	; 2
    1580:	8c 2f       	mov	r24, r28
    1582:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_RED);
    1586:	4f e0       	ldi	r20, 0x0F	; 15
    1588:	65 e0       	ldi	r22, 0x05	; 5
    158a:	8c 2f       	mov	r24, r28
    158c:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 6, COLOUR_RED);
    1590:	4f e0       	ldi	r20, 0x0F	; 15
    1592:	66 e0       	ldi	r22, 0x06	; 6
    1594:	8c 2f       	mov	r24, r28
    1596:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
    159a:	1e c0       	rjmp	.+60     	; 0x15d8 <display_countdown+0x202>
					
					} else if (col == 6 || col == 8) {
    159c:	c6 30       	cpi	r28, 0x06	; 6
    159e:	11 f0       	breq	.+4      	; 0x15a4 <display_countdown+0x1ce>
    15a0:	c8 30       	cpi	r28, 0x08	; 8
    15a2:	59 f4       	brne	.+22     	; 0x15ba <display_countdown+0x1e4>
					ledmatrix_update_pixel(col, 5, COLOUR_RED);
    15a4:	4f e0       	ldi	r20, 0x0F	; 15
    15a6:	65 e0       	ldi	r22, 0x05	; 5
    15a8:	8c 2f       	mov	r24, r28
    15aa:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 6, COLOUR_RED);
    15ae:	4f e0       	ldi	r20, 0x0F	; 15
    15b0:	66 e0       	ldi	r22, 0x06	; 6
    15b2:	8c 2f       	mov	r24, r28
    15b4:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
    15b8:	0f c0       	rjmp	.+30     	; 0x15d8 <display_countdown+0x202>
					
					} else {
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    15ba:	4f e0       	ldi	r20, 0x0F	; 15
    15bc:	62 e0       	ldi	r22, 0x02	; 2
    15be:	8c 2f       	mov	r24, r28
    15c0:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 3, COLOUR_RED);
    15c4:	4f e0       	ldi	r20, 0x0F	; 15
    15c6:	63 e0       	ldi	r22, 0x03	; 3
    15c8:	8c 2f       	mov	r24, r28
    15ca:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_RED);
    15ce:	4f e0       	ldi	r20, 0x0F	; 15
    15d0:	64 e0       	ldi	r22, 0x04	; 4
    15d2:	8c 2f       	mov	r24, r28
    15d4:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
			break;
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
    15d8:	cf 5f       	subi	r28, 0xFF	; 255
    15da:	01 c0       	rjmp	.+2      	; 0x15de <display_countdown+0x208>

void display_countdown(int countdown) {
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
    15dc:	c4 e0       	ldi	r28, 0x04	; 4
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
			break;
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
    15de:	cb 30       	cpi	r28, 0x0B	; 11
    15e0:	08 f4       	brcc	.+2      	; 0x15e4 <display_countdown+0x20e>
    15e2:	aa cf       	rjmp	.-172    	; 0x1538 <display_countdown+0x162>
    15e4:	78 c0       	rjmp	.+240    	; 0x16d6 <display_countdown+0x300>
				}
			}
			break;
		
		case 4: //Then draw the Go
			ledmatrix_update_pixel(5, 1, COLOUR_GREEN);
    15e6:	40 ef       	ldi	r20, 0xF0	; 240
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	85 e0       	ldi	r24, 0x05	; 5
    15ec:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 2, COLOUR_GREEN);
    15f0:	40 ef       	ldi	r20, 0xF0	; 240
    15f2:	62 e0       	ldi	r22, 0x02	; 2
    15f4:	85 e0       	ldi	r24, 0x05	; 5
    15f6:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 3, COLOUR_GREEN);
    15fa:	40 ef       	ldi	r20, 0xF0	; 240
    15fc:	63 e0       	ldi	r22, 0x03	; 3
    15fe:	85 e0       	ldi	r24, 0x05	; 5
    1600:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 5, COLOUR_GREEN);
    1604:	40 ef       	ldi	r20, 0xF0	; 240
    1606:	65 e0       	ldi	r22, 0x05	; 5
    1608:	85 e0       	ldi	r24, 0x05	; 5
    160a:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 6, COLOUR_GREEN);
    160e:	40 ef       	ldi	r20, 0xF0	; 240
    1610:	66 e0       	ldi	r22, 0x06	; 6
    1612:	85 e0       	ldi	r24, 0x05	; 5
    1614:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 7, COLOUR_GREEN);
    1618:	40 ef       	ldi	r20, 0xF0	; 240
    161a:	67 e0       	ldi	r22, 0x07	; 7
    161c:	85 e0       	ldi	r24, 0x05	; 5
    161e:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(6, 0, COLOUR_GREEN);
    1622:	40 ef       	ldi	r20, 0xF0	; 240
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	86 e0       	ldi	r24, 0x06	; 6
    1628:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 5, COLOUR_GREEN);
    162c:	40 ef       	ldi	r20, 0xF0	; 240
    162e:	65 e0       	ldi	r22, 0x05	; 5
    1630:	86 e0       	ldi	r24, 0x06	; 6
    1632:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 7, COLOUR_GREEN);
    1636:	40 ef       	ldi	r20, 0xF0	; 240
    1638:	67 e0       	ldi	r22, 0x07	; 7
    163a:	86 e0       	ldi	r24, 0x06	; 6
    163c:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(7, 0, COLOUR_GREEN);
    1640:	40 ef       	ldi	r20, 0xF0	; 240
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	87 e0       	ldi	r24, 0x07	; 7
    1646:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 2, COLOUR_GREEN);
    164a:	40 ef       	ldi	r20, 0xF0	; 240
    164c:	62 e0       	ldi	r22, 0x02	; 2
    164e:	87 e0       	ldi	r24, 0x07	; 7
    1650:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 3, COLOUR_GREEN);
    1654:	40 ef       	ldi	r20, 0xF0	; 240
    1656:	63 e0       	ldi	r22, 0x03	; 3
    1658:	87 e0       	ldi	r24, 0x07	; 7
    165a:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 5, COLOUR_GREEN);
    165e:	40 ef       	ldi	r20, 0xF0	; 240
    1660:	65 e0       	ldi	r22, 0x05	; 5
    1662:	87 e0       	ldi	r24, 0x07	; 7
    1664:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 7, COLOUR_GREEN);
    1668:	40 ef       	ldi	r20, 0xF0	; 240
    166a:	67 e0       	ldi	r22, 0x07	; 7
    166c:	87 e0       	ldi	r24, 0x07	; 7
    166e:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(8, 0, COLOUR_GREEN);
    1672:	40 ef       	ldi	r20, 0xF0	; 240
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	88 e0       	ldi	r24, 0x08	; 8
    1678:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 3, COLOUR_GREEN);
    167c:	40 ef       	ldi	r20, 0xF0	; 240
    167e:	63 e0       	ldi	r22, 0x03	; 3
    1680:	88 e0       	ldi	r24, 0x08	; 8
    1682:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 5, COLOUR_GREEN);
    1686:	40 ef       	ldi	r20, 0xF0	; 240
    1688:	65 e0       	ldi	r22, 0x05	; 5
    168a:	88 e0       	ldi	r24, 0x08	; 8
    168c:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 7, COLOUR_GREEN);
    1690:	40 ef       	ldi	r20, 0xF0	; 240
    1692:	67 e0       	ldi	r22, 0x07	; 7
    1694:	88 e0       	ldi	r24, 0x08	; 8
    1696:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(9, 1, COLOUR_GREEN);
    169a:	40 ef       	ldi	r20, 0xF0	; 240
    169c:	61 e0       	ldi	r22, 0x01	; 1
    169e:	89 e0       	ldi	r24, 0x09	; 9
    16a0:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 2, COLOUR_GREEN);
    16a4:	40 ef       	ldi	r20, 0xF0	; 240
    16a6:	62 e0       	ldi	r22, 0x02	; 2
    16a8:	89 e0       	ldi	r24, 0x09	; 9
    16aa:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 3, COLOUR_GREEN);
    16ae:	40 ef       	ldi	r20, 0xF0	; 240
    16b0:	63 e0       	ldi	r22, 0x03	; 3
    16b2:	85 e0       	ldi	r24, 0x05	; 5
    16b4:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 5, COLOUR_GREEN);
    16b8:	40 ef       	ldi	r20, 0xF0	; 240
    16ba:	65 e0       	ldi	r22, 0x05	; 5
    16bc:	89 e0       	ldi	r24, 0x09	; 9
    16be:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 6, COLOUR_GREEN);
    16c2:	40 ef       	ldi	r20, 0xF0	; 240
    16c4:	66 e0       	ldi	r22, 0x06	; 6
    16c6:	89 e0       	ldi	r24, 0x09	; 9
    16c8:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 7, COLOUR_GREEN);
    16cc:	40 ef       	ldi	r20, 0xF0	; 240
    16ce:	67 e0       	ldi	r22, 0x07	; 7
    16d0:	89 e0       	ldi	r24, 0x09	; 9
    16d2:	0e 94 87 07 	call	0xf0e	; 0xf0e <ledmatrix_update_pixel>
		
		default:
			break;
	}
	
}
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	08 95       	ret

000016dc <game_countdown>:

void game_countdown() {
    16dc:	8f 92       	push	r8
    16de:	9f 92       	push	r9
    16e0:	af 92       	push	r10
    16e2:	bf 92       	push	r11
    16e4:	cf 92       	push	r12
    16e6:	df 92       	push	r13
    16e8:	ef 92       	push	r14
    16ea:	ff 92       	push	r15
	
	uint32_t current_time = get_current_time();
    16ec:	0e 94 84 11 	call	0x2308	; 0x2308 <get_current_time>
    16f0:	4b 01       	movw	r8, r22
    16f2:	5c 01       	movw	r10, r24
	uint32_t last_recorded_time = current_time;

	display_countdown(3); // display 1
    16f4:	83 e0       	ldi	r24, 0x03	; 3
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <display_countdown>
	
	while (1) {
		//update current time
		current_time = get_current_time();
    16fc:	0e 94 84 11 	call	0x2308	; 0x2308 <get_current_time>
    1700:	6b 01       	movw	r12, r22
    1702:	7c 01       	movw	r14, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    1704:	ab 01       	movw	r20, r22
    1706:	bc 01       	movw	r22, r24
    1708:	48 19       	sub	r20, r8
    170a:	59 09       	sbc	r21, r9
    170c:	6a 09       	sbc	r22, r10
    170e:	7b 09       	sbc	r23, r11
    1710:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <game_speed>
    1714:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <game_speed+0x1>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	a0 e0       	ldi	r26, 0x00	; 0
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	48 17       	cp	r20, r24
    1722:	59 07       	cpc	r21, r25
    1724:	6a 07       	cpc	r22, r26
    1726:	7b 07       	cpc	r23, r27
    1728:	48 f3       	brcs	.-46     	; 0x16fc <game_countdown+0x20>
			display_countdown(2); //display 2
    172a:	82 e0       	ldi	r24, 0x02	; 2
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <display_countdown>
		}
	}
	
	while (1) {
		//update current time
		current_time = get_current_time();
    1732:	0e 94 84 11 	call	0x2308	; 0x2308 <get_current_time>
    1736:	4b 01       	movw	r8, r22
    1738:	5c 01       	movw	r10, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    173a:	ab 01       	movw	r20, r22
    173c:	bc 01       	movw	r22, r24
    173e:	4c 19       	sub	r20, r12
    1740:	5d 09       	sbc	r21, r13
    1742:	6e 09       	sbc	r22, r14
    1744:	7f 09       	sbc	r23, r15
    1746:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <game_speed>
    174a:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <game_speed+0x1>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	a0 e0       	ldi	r26, 0x00	; 0
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	48 17       	cp	r20, r24
    1758:	59 07       	cpc	r21, r25
    175a:	6a 07       	cpc	r22, r26
    175c:	7b 07       	cpc	r23, r27
    175e:	48 f3       	brcs	.-46     	; 0x1732 <game_countdown+0x56>
			display_countdown(1); //display 3
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <display_countdown>
		}
	}
	
	while (1) {
		//update current time
		current_time = get_current_time();
    1768:	0e 94 84 11 	call	0x2308	; 0x2308 <get_current_time>
    176c:	6b 01       	movw	r12, r22
    176e:	7c 01       	movw	r14, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    1770:	ab 01       	movw	r20, r22
    1772:	bc 01       	movw	r22, r24
    1774:	48 19       	sub	r20, r8
    1776:	59 09       	sbc	r21, r9
    1778:	6a 09       	sbc	r22, r10
    177a:	7b 09       	sbc	r23, r11
    177c:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <game_speed>
    1780:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <game_speed+0x1>
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	a0 e0       	ldi	r26, 0x00	; 0
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	48 17       	cp	r20, r24
    178e:	59 07       	cpc	r21, r25
    1790:	6a 07       	cpc	r22, r26
    1792:	7b 07       	cpc	r23, r27
    1794:	48 f3       	brcs	.-46     	; 0x1768 <game_countdown+0x8c>
			display_countdown(4); //display go
    1796:	84 e0       	ldi	r24, 0x04	; 4
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <display_countdown>
		}
	}
																														//turn into a loop
	while (1) {
		//update current time
		current_time = get_current_time();
    179e:	0e 94 84 11 	call	0x2308	; 0x2308 <get_current_time>
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    17a2:	ab 01       	movw	r20, r22
    17a4:	bc 01       	movw	r22, r24
    17a6:	4c 19       	sub	r20, r12
    17a8:	5d 09       	sbc	r21, r13
    17aa:	6e 09       	sbc	r22, r14
    17ac:	7f 09       	sbc	r23, r15
    17ae:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <game_speed>
    17b2:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <game_speed+0x1>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	a0 e0       	ldi	r26, 0x00	; 0
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	48 17       	cp	r20, r24
    17c0:	59 07       	cpc	r21, r25
    17c2:	6a 07       	cpc	r22, r26
    17c4:	7b 07       	cpc	r23, r27
    17c6:	58 f3       	brcs	.-42     	; 0x179e <game_countdown+0xc2>
			break;
		}
	}
}
    17c8:	ff 90       	pop	r15
    17ca:	ef 90       	pop	r14
    17cc:	df 90       	pop	r13
    17ce:	cf 90       	pop	r12
    17d0:	bf 90       	pop	r11
    17d2:	af 90       	pop	r10
    17d4:	9f 90       	pop	r9
    17d6:	8f 90       	pop	r8
    17d8:	08 95       	ret

000017da <ssd_display>:

void ssd_display() {
	//SSD section  //maybe put into the interrupt section
	//change displayed digit,
	int left_digit = points;
    17da:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <points>
    17de:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <points+0x1>
	int right_digit = 0;
	
	if (!((points < 10) && (points >= 0))) {
    17e2:	8a 30       	cpi	r24, 0x0A	; 10
    17e4:	91 05       	cpc	r25, r1
    17e6:	08 f4       	brcc	.+2      	; 0x17ea <ssd_display+0x10>
    17e8:	61 c0       	rjmp	.+194    	; 0x18ac <ssd_display+0xd2>
		if ((points > 9) && (points < 100)) {
    17ea:	9c 01       	movw	r18, r24
    17ec:	2a 50       	subi	r18, 0x0A	; 10
    17ee:	31 09       	sbc	r19, r1
    17f0:	2a 35       	cpi	r18, 0x5A	; 90
    17f2:	31 05       	cpc	r19, r1
    17f4:	28 f4       	brcc	.+10     	; 0x1800 <ssd_display+0x26>
			left_digit = points	/ 10; // tens column
			right_digit = points % 10; //ones column
    17f6:	6a e0       	ldi	r22, 0x0A	; 10
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	0e 94 10 14 	call	0x2820	; 0x2820 <__divmodhi4>
    17fe:	2a c0       	rjmp	.+84     	; 0x1854 <ssd_display+0x7a>
		
		} else if ((points >= 100)) {
    1800:	84 36       	cpi	r24, 0x64	; 100
    1802:	91 05       	cpc	r25, r1
    1804:	7c f0       	brlt	.+30     	; 0x1824 <ssd_display+0x4a>
			left_digit = points /10 % 10; //tens column
    1806:	2a e0       	ldi	r18, 0x0A	; 10
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	b9 01       	movw	r22, r18
    180c:	0e 94 10 14 	call	0x2820	; 0x2820 <__divmodhi4>
    1810:	e8 2f       	mov	r30, r24
    1812:	49 2f       	mov	r20, r25
    1814:	cb 01       	movw	r24, r22
    1816:	b9 01       	movw	r22, r18
    1818:	0e 94 10 14 	call	0x2820	; 0x2820 <__divmodhi4>
    181c:	bc 01       	movw	r22, r24
			right_digit = points % 10;
    181e:	8e 2f       	mov	r24, r30
    1820:	94 2f       	mov	r25, r20
    1822:	18 c0       	rjmp	.+48     	; 0x1854 <ssd_display+0x7a>
			
		} else if ((points < 0) && (points > -10)) {
    1824:	9c 01       	movw	r18, r24
    1826:	27 5f       	subi	r18, 0xF7	; 247
    1828:	3f 4f       	sbci	r19, 0xFF	; 255
    182a:	29 30       	cpi	r18, 0x09	; 9
    182c:	31 05       	cpc	r19, r1
    182e:	30 f4       	brcc	.+12     	; 0x183c <ssd_display+0x62>
			right_digit = -1 * points;
    1830:	91 95       	neg	r25
    1832:	81 95       	neg	r24
    1834:	91 09       	sbc	r25, r1
			left_digit = 10;
    1836:	6a e0       	ldi	r22, 0x0A	; 10
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	0c c0       	rjmp	.+24     	; 0x1854 <ssd_display+0x7a>
	
		} else if (points <= -10) {
    183c:	87 3f       	cpi	r24, 0xF7	; 247
    183e:	2f ef       	ldi	r18, 0xFF	; 255
    1840:	92 07       	cpc	r25, r18
    1842:	24 f0       	brlt	.+8      	; 0x184c <ssd_display+0x72>
}

void ssd_display() {
	//SSD section  //maybe put into the interrupt section
	//change displayed digit,
	int left_digit = points;
    1844:	bc 01       	movw	r22, r24
	int right_digit = 0;
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	04 c0       	rjmp	.+8      	; 0x1854 <ssd_display+0x7a>
			right_digit = -1 * points;
			left_digit = 10;
	
		} else if (points <= -10) {
			//SSD displays "--"
			right_digit = 10;
    184c:	8a e0       	ldi	r24, 0x0A	; 10
    184e:	90 e0       	ldi	r25, 0x00	; 0
			left_digit = 10;
    1850:	6a e0       	ldi	r22, 0x0A	; 10
    1852:	70 e0       	ldi	r23, 0x00	; 0
		}
	
		if (seven_seg_cc) { //is seven_seg_cc, then ssd displays to the left
    1854:	20 91 17 05 	lds	r18, 0x0517	; 0x800517 <seven_seg_cc>
    1858:	30 91 18 05 	lds	r19, 0x0518	; 0x800518 <seven_seg_cc+0x1>
    185c:	23 2b       	or	r18, r19
    185e:	99 f0       	breq	.+38     	; 0x1886 <ssd_display+0xac>
			PORTD = PORTD | (1<<2);	
    1860:	8b b1       	in	r24, 0x0b	; 11
    1862:	84 60       	ori	r24, 0x04	; 4
    1864:	8b b9       	out	0x0b, r24	; 11
			PORTC = seven_seg_data[left_digit];
    1866:	fb 01       	movw	r30, r22
    1868:	ef 5f       	subi	r30, 0xFF	; 255
    186a:	fe 4f       	sbci	r31, 0xFE	; 254
    186c:	80 81       	ld	r24, Z
    186e:	88 b9       	out	0x08, r24	; 8
		
			seven_seg_cc ^= 1;
    1870:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <seven_seg_cc>
    1874:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <seven_seg_cc+0x1>
    1878:	21 e0       	ldi	r18, 0x01	; 1
    187a:	82 27       	eor	r24, r18
    187c:	90 93 18 05 	sts	0x0518, r25	; 0x800518 <seven_seg_cc+0x1>
    1880:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <seven_seg_cc>
    1884:	08 95       	ret
		
		} else {
			PORTD = PORTD & 0b11111011;				//Display Right digit
    1886:	2b b1       	in	r18, 0x0b	; 11
    1888:	2b 7f       	andi	r18, 0xFB	; 251
    188a:	2b b9       	out	0x0b, r18	; 11
			PORTC = seven_seg_data[right_digit];
    188c:	fc 01       	movw	r30, r24
    188e:	ef 5f       	subi	r30, 0xFF	; 255
    1890:	fe 4f       	sbci	r31, 0xFE	; 254
    1892:	80 81       	ld	r24, Z
    1894:	88 b9       	out	0x08, r24	; 8
			
			seven_seg_cc ^= 1;
    1896:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <seven_seg_cc>
    189a:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <seven_seg_cc+0x1>
    189e:	21 e0       	ldi	r18, 0x01	; 1
    18a0:	82 27       	eor	r24, r18
    18a2:	90 93 18 05 	sts	0x0518, r25	; 0x800518 <seven_seg_cc+0x1>
    18a6:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <seven_seg_cc>
    18aa:	08 95       	ret
		}
		
	} else {
		if (seven_seg_cc) {
    18ac:	20 91 17 05 	lds	r18, 0x0517	; 0x800517 <seven_seg_cc>
    18b0:	30 91 18 05 	lds	r19, 0x0518	; 0x800518 <seven_seg_cc+0x1>
    18b4:	23 2b       	or	r18, r19
    18b6:	31 f0       	breq	.+12     	; 0x18c4 <ssd_display+0xea>
			PORTC = seven_seg_data[left_digit];
    18b8:	fc 01       	movw	r30, r24
    18ba:	ef 5f       	subi	r30, 0xFF	; 255
    18bc:	fe 4f       	sbci	r31, 0xFE	; 254
    18be:	80 81       	ld	r24, Z
    18c0:	88 b9       	out	0x08, r24	; 8
    18c2:	08 95       	ret
		} else {
			seven_seg_cc ^= 1;
    18c4:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <seven_seg_cc>
    18c8:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <seven_seg_cc+0x1>
    18cc:	21 e0       	ldi	r18, 0x01	; 1
    18ce:	82 27       	eor	r24, r18
    18d0:	90 93 18 05 	sts	0x0518, r25	; 0x800518 <seven_seg_cc+0x1>
    18d4:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <seven_seg_cc>
    18d8:	08 95       	ret

000018da <new_game>:
}

void new_game(void)
{
	// Clear the serial terminal
	clear_terminal();
    18da:	0e 94 3d 11 	call	0x227a	; 0x227a <clear_terminal>
	
	//reset number of points player has
	points = 0;
    18de:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <points+0x1>
    18e2:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <points>
	combo_count = 0;
    18e6:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <combo_count+0x1>
    18ea:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <combo_count>
	
	//Start Game Countdown
	game_countdown();								
    18ee:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <game_countdown>
		
	// Initialize the game and display
	initialise_game();
    18f2:	0e 94 90 04 	call	0x920	; 0x920 <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    18f6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
	clear_serial_input_buffer();
    18fa:	0e 94 60 10 	call	0x20c0	; 0x20c0 <clear_serial_input_buffer>
    18fe:	08 95       	ret

00001900 <play_game>:
}

void play_game(void)
{
    1900:	4f 92       	push	r4
    1902:	5f 92       	push	r5
    1904:	6f 92       	push	r6
    1906:	7f 92       	push	r7
    1908:	8f 92       	push	r8
    190a:	9f 92       	push	r9
    190c:	af 92       	push	r10
    190e:	bf 92       	push	r11
    1910:	cf 92       	push	r12
    1912:	df 92       	push	r13
    1914:	ef 92       	push	r14
    1916:	ff 92       	push	r15
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	00 d0       	rcall	.+0      	; 0x1922 <play_game+0x22>
    1922:	00 d0       	rcall	.+0      	; 0x1924 <play_game+0x24>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
	
	int8_t btn; // The button pushed
	
	int combo_line = 0;
	
	last_advance_time = get_current_time();
    1928:	0e 94 84 11 	call	0x2308	; 0x2308 <get_current_time>
    192c:	2b 01       	movw	r4, r22
    192e:	3c 01       	movw	r6, r24
	
	//Display current track
	move_terminal_cursor(10, 15);
    1930:	6f e0       	ldi	r22, 0x0F	; 15
    1932:	70 e0       	ldi	r23, 0x00	; 0
    1934:	8a e0       	ldi	r24, 0x0A	; 10
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	printf("Track: %s", track_name);													//do %s and add a new track title at the end.
    193c:	88 e2       	ldi	r24, 0x28	; 40
    193e:	95 e0       	ldi	r25, 0x05	; 5
    1940:	9f 93       	push	r25
    1942:	8f 93       	push	r24
    1944:	86 e5       	ldi	r24, 0x56	; 86
    1946:	92 e0       	ldi	r25, 0x02	; 2
    1948:	9f 93       	push	r25
    194a:	8f 93       	push	r24
    194c:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
	
	move_terminal_cursor(10, 18);
    1950:	62 e1       	ldi	r22, 0x12	; 18
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	8a e0       	ldi	r24, 0x0A	; 10
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	clear_to_end_of_line();
    195c:	0e 94 46 11 	call	0x228c	; 0x228c <clear_to_end_of_line>
	//update terminal line appropriately
	if (game_speed == 1000) {
    1960:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <game_speed>
    1964:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <game_speed+0x1>
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	88 3e       	cpi	r24, 0xE8	; 232
    1972:	23 e0       	ldi	r18, 0x03	; 3
    1974:	92 07       	cpc	r25, r18
    1976:	69 f4       	brne	.+26     	; 0x1992 <play_game+0x92>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    1978:	9f 93       	push	r25
    197a:	8f 93       	push	r24
    197c:	80 e6       	ldi	r24, 0x60	; 96
    197e:	92 e0       	ldi	r25, 0x02	; 2
    1980:	9f 93       	push	r25
    1982:	8f 93       	push	r24
    1984:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	20 c0       	rjmp	.+64     	; 0x19d2 <play_game+0xd2>
		
	} else if (game_speed == 500) {
    1992:	84 3f       	cpi	r24, 0xF4	; 244
    1994:	31 e0       	ldi	r19, 0x01	; 1
    1996:	93 07       	cpc	r25, r19
    1998:	69 f4       	brne	.+26     	; 0x19b4 <play_game+0xb4>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    199a:	9f 93       	push	r25
    199c:	8f 93       	push	r24
    199e:	86 e8       	ldi	r24, 0x86	; 134
    19a0:	92 e0       	ldi	r25, 0x02	; 2
    19a2:	9f 93       	push	r25
    19a4:	8f 93       	push	r24
    19a6:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f c0       	rjmp	.+30     	; 0x19d2 <play_game+0xd2>
		
	} else if (game_speed == 250) {
    19b4:	8a 3f       	cpi	r24, 0xFA	; 250
    19b6:	91 05       	cpc	r25, r1
    19b8:	61 f4       	brne	.+24     	; 0x19d2 <play_game+0xd2>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    19ba:	9f 93       	push	r25
    19bc:	8f 93       	push	r24
    19be:	8a ea       	ldi	r24, 0xAA	; 170
    19c0:	92 e0       	ldi	r25, 0x02	; 2
    19c2:	9f 93       	push	r25
    19c4:	8f 93       	push	r24
    19c6:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
		if (!man_mode & !paused) {
			current_time = get_current_time();
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
			{
				pause_time = 0;
    19d2:	00 e0       	ldi	r16, 0x00	; 0
    19d4:	10 e0       	ldi	r17, 0x00	; 0
    19d6:	81 2c       	mov	r8, r1
    19d8:	91 2c       	mov	r9, r1
    19da:	54 01       	movw	r10, r8
    19dc:	f8 c1       	rjmp	.+1008   	; 0x1dce <play_game+0x4ce>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
    19de:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    19e2:	89 83       	std	Y+1, r24	; 0x01
		
		char keyboard_input = -1;
		
		if (serial_input_available()) {
    19e4:	0e 94 59 10 	call	0x20b2	; 0x20b2 <serial_input_available>
    19e8:	88 23       	and	r24, r24
    19ea:	41 f0       	breq	.+16     	; 0x19fc <play_game+0xfc>
			keyboard_input = fgetc(stdin);
    19ec:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <__iob>
    19f0:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <__iob+0x1>
    19f4:	0e 94 88 14 	call	0x2910	; 0x2910 <fgetc>
    19f8:	f8 2e       	mov	r15, r24
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <play_game+0x100>
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
		
		char keyboard_input = -1;
    19fc:	ff 24       	eor	r15, r15
    19fe:	fa 94       	dec	r15
		
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		if (!paused) {
    1a00:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <paused>
    1a04:	90 91 1a 05 	lds	r25, 0x051A	; 0x80051a <paused+0x1>
    1a08:	89 2b       	or	r24, r25
    1a0a:	99 f5       	brne	.+102    	; 0x1a72 <play_game+0x172>
			if ((btn == BUTTON0_PUSHED) || (keyboard_input == 'f' || keyboard_input == 'F')) {
    1a0c:	49 81       	ldd	r20, Y+1	; 0x01
    1a0e:	44 23       	and	r20, r20
    1a10:	31 f0       	breq	.+12     	; 0x1a1e <play_game+0x11e>
    1a12:	56 e6       	ldi	r21, 0x66	; 102
    1a14:	f5 16       	cp	r15, r21
    1a16:	19 f0       	breq	.+6      	; 0x1a1e <play_game+0x11e>
    1a18:	86 e4       	ldi	r24, 0x46	; 70
    1a1a:	f8 12       	cpse	r15, r24
    1a1c:	04 c0       	rjmp	.+8      	; 0x1a26 <play_game+0x126>
				// If button 0 play the lowest note (right lane)
				play_note(3);
    1a1e:	83 e0       	ldi	r24, 0x03	; 3
    1a20:	0e 94 a1 04 	call	0x942	; 0x942 <play_note>
    1a24:	26 c0       	rjmp	.+76     	; 0x1a72 <play_game+0x172>
		
			} else if ((btn == BUTTON1_PUSHED) || (keyboard_input == 'd' || keyboard_input == 'D')) {
    1a26:	99 81       	ldd	r25, Y+1	; 0x01
    1a28:	91 30       	cpi	r25, 0x01	; 1
    1a2a:	31 f0       	breq	.+12     	; 0x1a38 <play_game+0x138>
    1a2c:	24 e6       	ldi	r18, 0x64	; 100
    1a2e:	f2 16       	cp	r15, r18
    1a30:	19 f0       	breq	.+6      	; 0x1a38 <play_game+0x138>
    1a32:	34 e4       	ldi	r19, 0x44	; 68
    1a34:	f3 12       	cpse	r15, r19
    1a36:	04 c0       	rjmp	.+8      	; 0x1a40 <play_game+0x140>
				//If button 1 is pushed play the second lowest note
				play_note(2);		
    1a38:	82 e0       	ldi	r24, 0x02	; 2
    1a3a:	0e 94 a1 04 	call	0x942	; 0x942 <play_note>
    1a3e:	19 c0       	rjmp	.+50     	; 0x1a72 <play_game+0x172>
		
			} else if ((btn == BUTTON2_PUSHED) || (keyboard_input == 's' || keyboard_input == 'S')) {
    1a40:	49 81       	ldd	r20, Y+1	; 0x01
    1a42:	42 30       	cpi	r20, 0x02	; 2
    1a44:	31 f0       	breq	.+12     	; 0x1a52 <play_game+0x152>
    1a46:	53 e7       	ldi	r21, 0x73	; 115
    1a48:	f5 16       	cp	r15, r21
    1a4a:	19 f0       	breq	.+6      	; 0x1a52 <play_game+0x152>
    1a4c:	83 e5       	ldi	r24, 0x53	; 83
    1a4e:	f8 12       	cpse	r15, r24
    1a50:	04 c0       	rjmp	.+8      	; 0x1a5a <play_game+0x15a>
				//If button 2 is pushed play the second highest note
				play_note(1); 
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	0e 94 a1 04 	call	0x942	; 0x942 <play_note>
    1a58:	0c c0       	rjmp	.+24     	; 0x1a72 <play_game+0x172>
				
			} else if ((btn == BUTTON3_PUSHED) || (keyboard_input == 'a' || keyboard_input == 'A')) {
    1a5a:	99 81       	ldd	r25, Y+1	; 0x01
    1a5c:	93 30       	cpi	r25, 0x03	; 3
    1a5e:	31 f0       	breq	.+12     	; 0x1a6c <play_game+0x16c>
    1a60:	21 e6       	ldi	r18, 0x61	; 97
    1a62:	f2 16       	cp	r15, r18
    1a64:	19 f0       	breq	.+6      	; 0x1a6c <play_game+0x16c>
    1a66:	31 e4       	ldi	r19, 0x41	; 65
    1a68:	f3 12       	cpse	r15, r19
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72 <play_game+0x172>
				//If button 3 is pushed play the highest note
				play_note(0);
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	0e 94 a1 04 	call	0x942	; 0x942 <play_note>
			
			} 
		}
		
		if (keyboard_input == 'm' || keyboard_input == 'M') {
    1a72:	4d e6       	ldi	r20, 0x6D	; 109
    1a74:	f4 16       	cp	r15, r20
    1a76:	19 f0       	breq	.+6      	; 0x1a7e <play_game+0x17e>
    1a78:	5d e4       	ldi	r21, 0x4D	; 77
    1a7a:	f5 12       	cpse	r15, r21
    1a7c:	27 c0       	rjmp	.+78     	; 0x1acc <play_game+0x1cc>
			//check to see if the game is currently paused
			if (!paused) {
    1a7e:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <paused>
    1a82:	90 91 1a 05 	lds	r25, 0x051A	; 0x80051a <paused+0x1>
    1a86:	89 2b       	or	r24, r25
    1a88:	09 f5       	brne	.+66     	; 0x1acc <play_game+0x1cc>
				//clear manual mode alert
				move_terminal_cursor(10, 16);
    1a8a:	60 e1       	ldi	r22, 0x10	; 16
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	8a e0       	ldi	r24, 0x0A	; 10
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
				clear_to_end_of_line();
    1a96:	0e 94 46 11 	call	0x228c	; 0x228c <clear_to_end_of_line>
				if (man_mode) {
    1a9a:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <man_mode>
    1a9e:	90 91 1c 05 	lds	r25, 0x051C	; 0x80051c <man_mode+0x1>
    1aa2:	89 2b       	or	r24, r25
    1aa4:	29 f0       	breq	.+10     	; 0x1ab0 <play_game+0x1b0>
					man_mode = 0;
    1aa6:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <man_mode+0x1>
    1aaa:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <man_mode>
    1aae:	0e c0       	rjmp	.+28     	; 0x1acc <play_game+0x1cc>
		
				} else {
					man_mode = 1;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <man_mode+0x1>
    1ab8:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <man_mode>
					
					//print to terminal that manual mode is on
					printf("Manual Mode: ON");
    1abc:	81 ed       	ldi	r24, 0xD1	; 209
    1abe:	92 e0       	ldi	r25, 0x02	; 2
    1ac0:	9f 93       	push	r25
    1ac2:	8f 93       	push	r24
    1ac4:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
				}
			}	
		}
		
		if (keyboard_input == 'p' || keyboard_input == 'P') {
    1acc:	80 e7       	ldi	r24, 0x70	; 112
    1ace:	f8 16       	cp	r15, r24
    1ad0:	19 f0       	breq	.+6      	; 0x1ad8 <play_game+0x1d8>
    1ad2:	90 e5       	ldi	r25, 0x50	; 80
    1ad4:	f9 12       	cpse	r15, r25
    1ad6:	3b c0       	rjmp	.+118    	; 0x1b4e <play_game+0x24e>
			//clear pause line in terminal
			move_terminal_cursor(10, 17);
    1ad8:	61 e1       	ldi	r22, 0x11	; 17
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	8a e0       	ldi	r24, 0x0A	; 10
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
			clear_to_end_of_line();
    1ae4:	0e 94 46 11 	call	0x228c	; 0x228c <clear_to_end_of_line>
			if (paused) {
    1ae8:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <paused>
    1aec:	90 91 1a 05 	lds	r25, 0x051A	; 0x80051a <paused+0x1>
    1af0:	89 2b       	or	r24, r25
    1af2:	71 f0       	breq	.+28     	; 0x1b10 <play_game+0x210>
				paused = 0;
    1af4:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <paused+0x1>
    1af8:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <paused>
				PORTD = PORTD & 0b11110111;
    1afc:	8b b1       	in	r24, 0x0b	; 11
    1afe:	87 7f       	andi	r24, 0xF7	; 247
    1b00:	8b b9       	out	0x0b, r24	; 11
				
				//un-pause sound
				pause_control(paused);
    1b02:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <paused>
    1b06:	90 91 1a 05 	lds	r25, 0x051A	; 0x80051a <paused+0x1>
    1b0a:	0e 94 2e 12 	call	0x245c	; 0x245c <pause_control>
    1b0e:	1f c0       	rjmp	.+62     	; 0x1b4e <play_game+0x24e>
			
			} else {
				paused = 1;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	90 93 1a 05 	sts	0x051A, r25	; 0x80051a <paused+0x1>
    1b18:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <paused>
				pause_time = get_current_time() - last_advance_time; 
    1b1c:	0e 94 84 11 	call	0x2308	; 0x2308 <get_current_time>
    1b20:	4b 01       	movw	r8, r22
    1b22:	5c 01       	movw	r10, r24
    1b24:	84 18       	sub	r8, r4
    1b26:	95 08       	sbc	r9, r5
    1b28:	a6 08       	sbc	r10, r6
    1b2a:	b7 08       	sbc	r11, r7
					
				PORTD = PORTD | (1<<3); //essentially just PORTD | 0b00001000
    1b2c:	8b b1       	in	r24, 0x0b	; 11
    1b2e:	88 60       	ori	r24, 0x08	; 8
    1b30:	8b b9       	out	0x0b, r24	; 11
									
				//pause the sound
				pause_control(paused);
    1b32:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <paused>
    1b36:	90 91 1a 05 	lds	r25, 0x051A	; 0x80051a <paused+0x1>
    1b3a:	0e 94 2e 12 	call	0x245c	; 0x245c <pause_control>
					
				//tell user that game is currently paused
				printf("Game Paused");
    1b3e:	81 ee       	ldi	r24, 0xE1	; 225
    1b40:	92 e0       	ldi	r25, 0x02	; 2
    1b42:	9f 93       	push	r25
    1b44:	8f 93       	push	r24
    1b46:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
			}
				
		}
		
		//Combo IO board LED's
		if (combo_count == 0) {
    1b4e:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <combo_count>
    1b52:	90 91 46 05 	lds	r25, 0x0546	; 0x800546 <combo_count+0x1>
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	21 f4       	brne	.+8      	; 0x1b62 <play_game+0x262>
			//set portD outputs to the I/O boards LED matrix to be 0
			PORTD = PORTD & 0b00011111;
    1b5a:	8b b1       	in	r24, 0x0b	; 11
    1b5c:	8f 71       	andi	r24, 0x1F	; 31
    1b5e:	8b b9       	out	0x0b, r24	; 11
    1b60:	13 c0       	rjmp	.+38     	; 0x1b88 <play_game+0x288>

		} else if (combo_count == 1) {
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	91 05       	cpc	r25, r1
    1b66:	21 f4       	brne	.+8      	; 0x1b70 <play_game+0x270>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<5); 
    1b68:	8b b1       	in	r24, 0x0b	; 11
    1b6a:	80 62       	ori	r24, 0x20	; 32
    1b6c:	8b b9       	out	0x0b, r24	; 11
    1b6e:	0c c0       	rjmp	.+24     	; 0x1b88 <play_game+0x288>
			
		} else if (combo_count == 2) {
    1b70:	82 30       	cpi	r24, 0x02	; 2
    1b72:	91 05       	cpc	r25, r1
    1b74:	21 f4       	brne	.+8      	; 0x1b7e <play_game+0x27e>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<6);
    1b76:	8b b1       	in	r24, 0x0b	; 11
    1b78:	80 64       	ori	r24, 0x40	; 64
    1b7a:	8b b9       	out	0x0b, r24	; 11
    1b7c:	05 c0       	rjmp	.+10     	; 0x1b88 <play_game+0x288>
			
		} else if (combo_count >= 3) {
    1b7e:	03 97       	sbiw	r24, 0x03	; 3
    1b80:	1c f0       	brlt	.+6      	; 0x1b88 <play_game+0x288>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<7);
    1b82:	8b b1       	in	r24, 0x0b	; 11
    1b84:	80 68       	ori	r24, 0x80	; 128
    1b86:	8b b9       	out	0x0b, r24	; 11
		}
		
		//Combo display
		if ((combo_check) && (combo_line == 0)) {
    1b88:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <combo_check>
    1b8c:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <combo_check+0x1>
    1b90:	89 2b       	or	r24, r25
    1b92:	a1 f0       	breq	.+40     	; 0x1bbc <play_game+0x2bc>
    1b94:	01 15       	cp	r16, r1
    1b96:	11 05       	cpc	r17, r1
    1b98:	89 f4       	brne	.+34     	; 0x1bbc <play_game+0x2bc>
			move_terminal_cursor(10, 3);
    1b9a:	63 e0       	ldi	r22, 0x03	; 3
    1b9c:	70 e0       	ldi	r23, 0x00	; 0
    1b9e:	8a e0       	ldi	r24, 0x0A	; 10
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
			printf("  ______                           __                  __");
    1ba6:	8d ee       	ldi	r24, 0xED	; 237
    1ba8:	92 e0       	ldi	r25, 0x02	; 2
    1baa:	9f 93       	push	r25
    1bac:	8f 93       	push	r24
    1bae:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
			
			combo_line++; //increment combo line so in next loop the next line is printed of ascii art
    1bb2:	0f 5f       	subi	r16, 0xFF	; 255
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	9f c0       	rjmp	.+318    	; 0x1cfa <play_game+0x3fa>
		} else if (combo_line == 1) {
    1bbc:	01 30       	cpi	r16, 0x01	; 1
    1bbe:	11 05       	cpc	r17, r1
    1bc0:	89 f4       	brne	.+34     	; 0x1be4 <play_game+0x2e4>
			move_terminal_cursor(10,4);
    1bc2:	64 e0       	ldi	r22, 0x04	; 4
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	8a e0       	ldi	r24, 0x0A	; 10
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
			printf(" /      \\                         |  \\                |  \\");
    1bce:	87 e2       	ldi	r24, 0x27	; 39
    1bd0:	93 e0       	ldi	r25, 0x03	; 3
    1bd2:	9f 93       	push	r25
    1bd4:	8f 93       	push	r24
    1bd6:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
			
			combo_line++;
    1bda:	0f 5f       	subi	r16, 0xFF	; 255
    1bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	8b c0       	rjmp	.+278    	; 0x1cfa <play_game+0x3fa>
		} else if (combo_line == 2) {
    1be4:	02 30       	cpi	r16, 0x02	; 2
    1be6:	11 05       	cpc	r17, r1
    1be8:	89 f4       	brne	.+34     	; 0x1c0c <play_game+0x30c>
			move_terminal_cursor(10,5);
    1bea:	65 e0       	ldi	r22, 0x05	; 5
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	8a e0       	ldi	r24, 0x0A	; 10
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
			printf("|  $$$$$$\\  ______   ______ ____  | $$____    ______  | $$");
    1bf6:	82 e6       	ldi	r24, 0x62	; 98
    1bf8:	93 e0       	ldi	r25, 0x03	; 3
    1bfa:	9f 93       	push	r25
    1bfc:	8f 93       	push	r24
    1bfe:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
			
			combo_line++;
    1c02:	0f 5f       	subi	r16, 0xFF	; 255
    1c04:	1f 4f       	sbci	r17, 0xFF	; 255
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	77 c0       	rjmp	.+238    	; 0x1cfa <play_game+0x3fa>
		} else if (combo_line == 3) {
    1c0c:	03 30       	cpi	r16, 0x03	; 3
    1c0e:	11 05       	cpc	r17, r1
    1c10:	89 f4       	brne	.+34     	; 0x1c34 <play_game+0x334>
			move_terminal_cursor(10,6);
    1c12:	66 e0       	ldi	r22, 0x06	; 6
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	8a e0       	ldi	r24, 0x0A	; 10
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
			printf("| $$   \\$$ /      \\ |      \\    \\ | $$    \\  /      \\ | $$");
    1c1e:	8d e9       	ldi	r24, 0x9D	; 157
    1c20:	93 e0       	ldi	r25, 0x03	; 3
    1c22:	9f 93       	push	r25
    1c24:	8f 93       	push	r24
    1c26:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
			
			combo_line++;
    1c2a:	0f 5f       	subi	r16, 0xFF	; 255
    1c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	63 c0       	rjmp	.+198    	; 0x1cfa <play_game+0x3fa>
		} else if (combo_line == 4) {
    1c34:	04 30       	cpi	r16, 0x04	; 4
    1c36:	11 05       	cpc	r17, r1
    1c38:	89 f4       	brne	.+34     	; 0x1c5c <play_game+0x35c>
			move_terminal_cursor(10,7);
    1c3a:	67 e0       	ldi	r22, 0x07	; 7
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	8a e0       	ldi	r24, 0x0A	; 10
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
			printf("| $$      |  $$$$$$\\| $$$$$$\\$$$$\\| $$$$$$$\\|  $$$$$$\\| $$");
    1c46:	88 ed       	ldi	r24, 0xD8	; 216
    1c48:	93 e0       	ldi	r25, 0x03	; 3
    1c4a:	9f 93       	push	r25
    1c4c:	8f 93       	push	r24
    1c4e:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
			
			combo_line++;
    1c52:	0f 5f       	subi	r16, 0xFF	; 255
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	4f c0       	rjmp	.+158    	; 0x1cfa <play_game+0x3fa>
		}  else if (combo_line == 5) {
    1c5c:	05 30       	cpi	r16, 0x05	; 5
    1c5e:	11 05       	cpc	r17, r1
    1c60:	89 f4       	brne	.+34     	; 0x1c84 <play_game+0x384>
			move_terminal_cursor(10,8);
    1c62:	68 e0       	ldi	r22, 0x08	; 8
    1c64:	70 e0       	ldi	r23, 0x00	; 0
    1c66:	8a e0       	ldi	r24, 0x0A	; 10
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
			printf("| $$   __ | $$  | $$| $$ | $$ | $$| $$  | $$| $$  | $$ \\$$");
    1c6e:	83 e1       	ldi	r24, 0x13	; 19
    1c70:	94 e0       	ldi	r25, 0x04	; 4
    1c72:	9f 93       	push	r25
    1c74:	8f 93       	push	r24
    1c76:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
			
			combo_line++;
    1c7a:	0f 5f       	subi	r16, 0xFF	; 255
    1c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	3b c0       	rjmp	.+118    	; 0x1cfa <play_game+0x3fa>
		} else if (combo_line == 6) {
    1c84:	06 30       	cpi	r16, 0x06	; 6
    1c86:	11 05       	cpc	r17, r1
    1c88:	89 f4       	brne	.+34     	; 0x1cac <play_game+0x3ac>
			move_terminal_cursor(10,9);
    1c8a:	69 e0       	ldi	r22, 0x09	; 9
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	8a e0       	ldi	r24, 0x0A	; 10
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
			printf("| $$__/  \\| $$__/ $$| $$ | $$ | $$| $$__/ $$| $$__/ $$ __");
    1c96:	8e e4       	ldi	r24, 0x4E	; 78
    1c98:	94 e0       	ldi	r25, 0x04	; 4
    1c9a:	9f 93       	push	r25
    1c9c:	8f 93       	push	r24
    1c9e:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
			
			combo_line++;
    1ca2:	0f 5f       	subi	r16, 0xFF	; 255
    1ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	27 c0       	rjmp	.+78     	; 0x1cfa <play_game+0x3fa>
		} else if (combo_line == 7) {
    1cac:	07 30       	cpi	r16, 0x07	; 7
    1cae:	11 05       	cpc	r17, r1
    1cb0:	89 f4       	brne	.+34     	; 0x1cd4 <play_game+0x3d4>
			move_terminal_cursor(10,10);
    1cb2:	6a e0       	ldi	r22, 0x0A	; 10
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	8a e0       	ldi	r24, 0x0A	; 10
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
			printf(" \\$$    $$ \\$$    $$| $$ | $$ | $$| $$    $$ \\$$    $$|  \\");
    1cbe:	88 e8       	ldi	r24, 0x88	; 136
    1cc0:	94 e0       	ldi	r25, 0x04	; 4
    1cc2:	9f 93       	push	r25
    1cc4:	8f 93       	push	r24
    1cc6:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
			
			combo_line++;
    1cca:	0f 5f       	subi	r16, 0xFF	; 255
    1ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	13 c0       	rjmp	.+38     	; 0x1cfa <play_game+0x3fa>
		} else if (combo_line == 8) {
    1cd4:	08 30       	cpi	r16, 0x08	; 8
    1cd6:	11 05       	cpc	r17, r1
    1cd8:	81 f4       	brne	.+32     	; 0x1cfa <play_game+0x3fa>
			move_terminal_cursor(10,11);
    1cda:	6b e0       	ldi	r22, 0x0B	; 11
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	8a e0       	ldi	r24, 0x0A	; 10
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
			printf("  \\$$$$$$   \\$$$$$$  \\$$  \\$$  \\$$ \\$$$$$$$   \\$$$$$$  \\$$");
    1ce6:	83 ec       	ldi	r24, 0xC3	; 195
    1ce8:	94 e0       	ldi	r25, 0x04	; 4
    1cea:	9f 93       	push	r25
    1cec:	8f 93       	push	r24
    1cee:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
			
			combo_line = 0;
    1cf6:	00 e0       	ldi	r16, 0x00	; 0
    1cf8:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		if (!combo_check) {
    1cfa:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <combo_check>
    1cfe:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <combo_check+0x1>
    1d02:	89 2b       	or	r24, r25
    1d04:	81 f0       	breq	.+32     	; 0x1d26 <play_game+0x426>
    1d06:	17 c0       	rjmp	.+46     	; 0x1d36 <play_game+0x436>
			for (int term_line = 3; term_line < 12; term_line++) {
				move_terminal_cursor(10, term_line);
    1d08:	69 81       	ldd	r22, Y+1	; 0x01
    1d0a:	7a 81       	ldd	r23, Y+2	; 0x02
    1d0c:	8a e0       	ldi	r24, 0x0A	; 10
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
				clear_to_end_of_line();
    1d14:	0e 94 46 11 	call	0x228c	; 0x228c <clear_to_end_of_line>
			
			combo_line = 0;
		}
		
		if (!combo_check) {
			for (int term_line = 3; term_line < 12; term_line++) {
    1d18:	29 81       	ldd	r18, Y+1	; 0x01
    1d1a:	3a 81       	ldd	r19, Y+2	; 0x02
    1d1c:	2f 5f       	subi	r18, 0xFF	; 255
    1d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d20:	3a 83       	std	Y+2, r19	; 0x02
    1d22:	29 83       	std	Y+1, r18	; 0x01
    1d24:	04 c0       	rjmp	.+8      	; 0x1d2e <play_game+0x42e>
    1d26:	43 e0       	ldi	r20, 0x03	; 3
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	5a 83       	std	Y+2, r21	; 0x02
    1d2c:	49 83       	std	Y+1, r20	; 0x01
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	0c 97       	sbiw	r24, 0x0c	; 12
    1d34:	4c f3       	brlt	.-46     	; 0x1d08 <play_game+0x408>
				
			}	
		}
		

		if (!man_mode & !paused) {
    1d36:	20 91 1b 05 	lds	r18, 0x051B	; 0x80051b <man_mode>
    1d3a:	30 91 1c 05 	lds	r19, 0x051C	; 0x80051c <man_mode+0x1>
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	40 91 19 05 	lds	r20, 0x0519	; 0x800519 <paused>
    1d44:	50 91 1a 05 	lds	r21, 0x051A	; 0x80051a <paused+0x1>
    1d48:	45 2b       	or	r20, r21
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <play_game+0x44e>
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	21 15       	cp	r18, r1
    1d52:	31 05       	cpc	r19, r1
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <play_game+0x458>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	89 23       	and	r24, r25
    1d5a:	69 f1       	breq	.+90     	; 0x1db6 <play_game+0x4b6>
			current_time = get_current_time();
    1d5c:	0e 94 84 11 	call	0x2308	; 0x2308 <get_current_time>
    1d60:	69 83       	std	Y+1, r22	; 0x01
    1d62:	7a 83       	std	Y+2, r23	; 0x02
    1d64:	8b 83       	std	Y+3, r24	; 0x03
    1d66:	9c 83       	std	Y+4, r25	; 0x04
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
    1d68:	6b 01       	movw	r12, r22
    1d6a:	7c 01       	movw	r14, r24
    1d6c:	c8 18       	sub	r12, r8
    1d6e:	d9 08       	sbc	r13, r9
    1d70:	ea 08       	sbc	r14, r10
    1d72:	fb 08       	sbc	r15, r11
    1d74:	20 91 4f 05 	lds	r18, 0x054F	; 0x80054f <game_speed>
    1d78:	30 91 50 05 	lds	r19, 0x0550	; 0x800550 <game_speed+0x1>
    1d7c:	ad ec       	ldi	r26, 0xCD	; 205
    1d7e:	bc ec       	ldi	r27, 0xCC	; 204
    1d80:	0e 94 65 14 	call	0x28ca	; 0x28ca <__umulhisi3>
    1d84:	96 95       	lsr	r25
    1d86:	87 95       	ror	r24
    1d88:	96 95       	lsr	r25
    1d8a:	87 95       	ror	r24
    1d8c:	a3 01       	movw	r20, r6
    1d8e:	92 01       	movw	r18, r4
    1d90:	28 0f       	add	r18, r24
    1d92:	39 1f       	adc	r19, r25
    1d94:	41 1d       	adc	r20, r1
    1d96:	51 1d       	adc	r21, r1
    1d98:	c2 16       	cp	r12, r18
    1d9a:	d3 06       	cpc	r13, r19
    1d9c:	e4 06       	cpc	r14, r20
    1d9e:	f5 06       	cpc	r15, r21
    1da0:	b0 f0       	brcs	.+44     	; 0x1dce <play_game+0x4ce>
			{
				pause_time = 0;
				// 200ms (0.2 second) has passed since the last time we advance the
				// notes here, so update the advance the notes
				advance_note();
    1da2:	0e 94 71 05 	call	0xae2	; 0xae2 <advance_note>
				
				// Update the most recent time the notes were advanced
				last_advance_time = current_time;
    1da6:	49 80       	ldd	r4, Y+1	; 0x01
    1da8:	5a 80       	ldd	r5, Y+2	; 0x02
    1daa:	6b 80       	ldd	r6, Y+3	; 0x03
    1dac:	7c 80       	ldd	r7, Y+4	; 0x04
		if (!man_mode & !paused) {
			current_time = get_current_time();
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
			{
				pause_time = 0;
    1dae:	81 2c       	mov	r8, r1
    1db0:	91 2c       	mov	r9, r1
    1db2:	54 01       	movw	r10, r8
    1db4:	0c c0       	rjmp	.+24     	; 0x1dce <play_game+0x4ce>
				
				// Update the most recent time the notes were advanced
				last_advance_time = current_time;
			}
			
		} else if (man_mode) {
    1db6:	23 2b       	or	r18, r19
    1db8:	51 f0       	breq	.+20     	; 0x1dce <play_game+0x4ce>
			if (keyboard_input == 'n' || keyboard_input == 'N') {
    1dba:	3e e6       	ldi	r19, 0x6E	; 110
    1dbc:	f3 16       	cp	r15, r19
    1dbe:	19 f0       	breq	.+6      	; 0x1dc6 <play_game+0x4c6>
    1dc0:	4e e4       	ldi	r20, 0x4E	; 78
    1dc2:	f4 12       	cpse	r15, r20
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <play_game+0x4ca>
				advance_note();
    1dc6:	0e 94 71 05 	call	0xae2	; 0xae2 <advance_note>
			}
			draw_notes();
    1dca:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <draw_notes>
	} else if (game_speed == 250) {
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
	}
	
	// We play the game until it's over
	while (!is_game_over())
    1dce:	0e 94 7b 07 	call	0xef6	; 0xef6 <is_game_over>
    1dd2:	88 23       	and	r24, r24
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <play_game+0x4d8>
    1dd6:	03 ce       	rjmp	.-1018   	; 0x19de <play_game+0xde>
				advance_note();
			}
			draw_notes();
		}
	}
}
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	ff 90       	pop	r15
    1dea:	ef 90       	pop	r14
    1dec:	df 90       	pop	r13
    1dee:	cf 90       	pop	r12
    1df0:	bf 90       	pop	r11
    1df2:	af 90       	pop	r10
    1df4:	9f 90       	pop	r9
    1df6:	8f 90       	pop	r8
    1df8:	7f 90       	pop	r7
    1dfa:	6f 90       	pop	r6
    1dfc:	5f 90       	pop	r5
    1dfe:	4f 90       	pop	r4
    1e00:	08 95       	ret

00001e02 <handle_game_over>:

void handle_game_over()
{
	clear_terminal();
    1e02:	0e 94 3d 11 	call	0x227a	; 0x227a <clear_terminal>
	move_terminal_cursor(10,13);
    1e06:	6d e0       	ldi	r22, 0x0D	; 13
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	8a e0       	ldi	r24, 0x0A	; 10
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    1e12:	8a ea       	ldi	r24, 0xAA	; 170
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	9f 93       	push	r25
    1e18:	8f 93       	push	r24
    1e1a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
	move_terminal_cursor(10,14);
    1e1e:	6e e0       	ldi	r22, 0x0E	; 14
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	8a e0       	ldi	r24, 0x0A	; 10
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	printf("Final Score: %d\n", points);
    1e2a:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <points+0x1>
    1e2e:	8f 93       	push	r24
    1e30:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <points>
    1e34:	8f 93       	push	r24
    1e36:	8e ef       	ldi	r24, 0xFE	; 254
    1e38:	94 e0       	ldi	r25, 0x04	; 4
    1e3a:	9f 93       	push	r25
    1e3c:	8f 93       	push	r24
    1e3e:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
	//Display current track
	move_terminal_cursor(10, 15);
    1e42:	6f e0       	ldi	r22, 0x0F	; 15
    1e44:	70 e0       	ldi	r23, 0x00	; 0
    1e46:	8a e0       	ldi	r24, 0x0A	; 10
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	printf("Track: %s", track_name);														//do %s and add a new track title at the end.
    1e4e:	88 e2       	ldi	r24, 0x28	; 40
    1e50:	95 e0       	ldi	r25, 0x05	; 5
    1e52:	9f 93       	push	r25
    1e54:	8f 93       	push	r24
    1e56:	86 e5       	ldi	r24, 0x56	; 86
    1e58:	92 e0       	ldi	r25, 0x02	; 2
    1e5a:	9f 93       	push	r25
    1e5c:	8f 93       	push	r24
    1e5e:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
	move_terminal_cursor(10, 16);
    1e62:	60 e1       	ldi	r22, 0x10	; 16
    1e64:	70 e0       	ldi	r23, 0x00	; 0
    1e66:	8a e0       	ldi	r24, 0x0A	; 10
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	clear_to_end_of_line();
    1e6e:	0e 94 46 11 	call	0x228c	; 0x228c <clear_to_end_of_line>
	//display game sped
	if (game_speed == 1000) {
    1e72:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <game_speed>
    1e76:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <game_speed+0x1>
    1e7a:	2d b7       	in	r18, 0x3d	; 61
    1e7c:	3e b7       	in	r19, 0x3e	; 62
    1e7e:	26 5f       	subi	r18, 0xF6	; 246
    1e80:	3f 4f       	sbci	r19, 0xFF	; 255
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	3e bf       	out	0x3e, r19	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	2d bf       	out	0x3d, r18	; 61
    1e8c:	88 3e       	cpi	r24, 0xE8	; 232
    1e8e:	33 e0       	ldi	r19, 0x03	; 3
    1e90:	93 07       	cpc	r25, r19
    1e92:	69 f4       	brne	.+26     	; 0x1eae <handle_game_over+0xac>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    1e94:	9f 93       	push	r25
    1e96:	8f 93       	push	r24
    1e98:	80 e6       	ldi	r24, 0x60	; 96
    1e9a:	92 e0       	ldi	r25, 0x02	; 2
    1e9c:	9f 93       	push	r25
    1e9e:	8f 93       	push	r24
    1ea0:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	20 c0       	rjmp	.+64     	; 0x1eee <handle_game_over+0xec>
		
		} else if (game_speed == 500) {
    1eae:	84 3f       	cpi	r24, 0xF4	; 244
    1eb0:	21 e0       	ldi	r18, 0x01	; 1
    1eb2:	92 07       	cpc	r25, r18
    1eb4:	69 f4       	brne	.+26     	; 0x1ed0 <handle_game_over+0xce>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1eb6:	9f 93       	push	r25
    1eb8:	8f 93       	push	r24
    1eba:	86 e8       	ldi	r24, 0x86	; 134
    1ebc:	92 e0       	ldi	r25, 0x02	; 2
    1ebe:	9f 93       	push	r25
    1ec0:	8f 93       	push	r24
    1ec2:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <handle_game_over+0xec>
		
		} else if (game_speed == 250) {
    1ed0:	8a 3f       	cpi	r24, 0xFA	; 250
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	61 f4       	brne	.+24     	; 0x1eee <handle_game_over+0xec>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1ed6:	9f 93       	push	r25
    1ed8:	8f 93       	push	r24
    1eda:	8a ea       	ldi	r24, 0xAA	; 170
    1edc:	92 e0       	ldi	r25, 0x02	; 2
    1ede:	9f 93       	push	r25
    1ee0:	8f 93       	push	r24
    1ee2:	0e 94 c6 14 	call	0x298c	; 0x298c <printf>
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
	}
	
	move_terminal_cursor(10, 17);
    1eee:	61 e1       	ldi	r22, 0x11	; 17
    1ef0:	70 e0       	ldi	r23, 0x00	; 0
    1ef2:	8a e0       	ldi	r24, 0x0A	; 10
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	0e 94 2c 11 	call	0x2258	; 0x2258 <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
    1efa:	8c e7       	ldi	r24, 0x7C	; 124
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	9f 93       	push	r25
    1f00:	8f 93       	push	r24
    1f02:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	10 c0       	rjmp	.+32     	; 0x1f2c <handle_game_over+0x12a>
	{
		char keyboard_input = -1;
				
		if (serial_input_available()) {
    1f0c:	0e 94 59 10 	call	0x20b2	; 0x20b2 <serial_input_available>
    1f10:	88 23       	and	r24, r24
    1f12:	39 f0       	breq	.+14     	; 0x1f22 <handle_game_over+0x120>
			keyboard_input = fgetc(stdin);
    1f14:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <__iob>
    1f18:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <__iob+0x1>
    1f1c:	0e 94 88 14 	call	0x2910	; 0x2910 <fgetc>
    1f20:	01 c0       	rjmp	.+2      	; 0x1f24 <handle_game_over+0x122>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
	{
		char keyboard_input = -1;
    1f22:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		//check if the user presses s
		if (keyboard_input == 's' || keyboard_input == 'S') {
    1f24:	83 37       	cpi	r24, 0x73	; 115
    1f26:	31 f0       	breq	.+12     	; 0x1f34 <handle_game_over+0x132>
    1f28:	83 35       	cpi	r24, 0x53	; 83
    1f2a:	21 f0       	breq	.+8      	; 0x1f34 <handle_game_over+0x132>
	move_terminal_cursor(10, 17);
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    1f2c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    1f30:	8f 3f       	cpi	r24, 0xFF	; 255
    1f32:	61 f3       	breq	.-40     	; 0x1f0c <handle_game_over+0x10a>
		if (keyboard_input == 's' || keyboard_input == 'S') {
			break;
		}
	}	
	
	start_screen();
    1f34:	0e 94 de 07 	call	0xfbc	; 0xfbc <start_screen>
    1f38:	08 95       	ret

00001f3a <main>:
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1f3a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <initialise_hardware>
	
	points = 0;
    1f3e:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <points+0x1>
    1f42:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <points>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
    1f46:	0e 94 de 07 	call	0xfbc	; 0xfbc <start_screen>
	
	// Loop forever and continuously play the game.
	while(1)
	{
		new_game();
    1f4a:	0e 94 6d 0c 	call	0x18da	; 0x18da <new_game>
		play_game();
    1f4e:	0e 94 80 0c 	call	0x1900	; 0x1900 <play_game>
		handle_game_over();
    1f52:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <handle_game_over>
    1f56:	f9 cf       	rjmp	.-14     	; 0x1f4a <main+0x10>

00001f58 <uart_put_char>:
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream)
{
    1f58:	cf 93       	push	r28
    1f5a:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n')
    1f5c:	8a 30       	cpi	r24, 0x0A	; 10
    1f5e:	19 f4       	brne	.+6      	; 0x1f66 <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
    1f60:	8d e0       	ldi	r24, 0x0D	; 13
    1f62:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1f66:	9f b7       	in	r25, 0x3f	; 63
    1f68:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
    1f6c:	99 23       	and	r25, r25
    1f6e:	29 f1       	breq	.+74     	; 0x1fba <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1f70:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <bytes_in_out_buffer>
    1f74:	8f 3f       	cpi	r24, 0xFF	; 255
    1f76:	d1 f3       	breq	.-12     	; 0x1f6c <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1f78:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1f7a:	e0 91 51 05 	lds	r30, 0x0551	; 0x800551 <out_insert_pos>
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	8e 0f       	add	r24, r30
    1f82:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <out_insert_pos>
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	ed 5a       	subi	r30, 0xAD	; 173
    1f8a:	fa 4f       	sbci	r31, 0xFA	; 250
    1f8c:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1f8e:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <bytes_in_out_buffer>
    1f92:	8f 5f       	subi	r24, 0xFF	; 255
    1f94:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
    1f98:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <out_insert_pos>
    1f9c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f9e:	11 f4       	brne	.+4      	; 0x1fa4 <uart_put_char+0x4c>
	{
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1fa0:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1fa4:	e1 ec       	ldi	r30, 0xC1	; 193
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	80 62       	ori	r24, 0x20	; 32
    1fac:	80 83       	st	Z, r24
	if (interrupts_enabled)
    1fae:	99 23       	and	r25, r25
    1fb0:	39 f0       	breq	.+14     	; 0x1fc0 <uart_put_char+0x68>
	{
		sei();
    1fb2:	78 94       	sei
	}
	return 0;
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	05 c0       	rjmp	.+10     	; 0x1fc4 <uart_put_char+0x6c>
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
}
    1fc4:	cf 91       	pop	r28
    1fc6:	08 95       	ret

00001fc8 <uart_get_char>:

int uart_get_char(FILE* stream)
{
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0)
    1fc8:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <bytes_in_input_buffer>
    1fcc:	88 23       	and	r24, r24
    1fce:	e1 f3       	breq	.-8      	; 0x1fc8 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1fd0:	2f b7       	in	r18, 0x3f	; 63
    1fd2:	20 78       	andi	r18, 0x80	; 128
	cli();
    1fd4:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
    1fd6:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <input_insert_pos>
    1fda:	30 91 64 06 	lds	r19, 0x0664	; 0x800664 <bytes_in_input_buffer>
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	83 1b       	sub	r24, r19
    1fe2:	91 09       	sbc	r25, r1
    1fe4:	5a f4       	brpl	.+22     	; 0x1ffc <uart_get_char+0x34>
	{
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1fe6:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <input_insert_pos>
    1fea:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <bytes_in_input_buffer>
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	e8 1b       	sub	r30, r24
    1ff2:	f1 09       	sbc	r31, r1
    1ff4:	ed 59       	subi	r30, 0x9D	; 157
    1ff6:	f9 4f       	sbci	r31, 0xF9	; 249
    1ff8:	80 81       	ld	r24, Z
    1ffa:	0a c0       	rjmp	.+20     	; 0x2010 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1ffc:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <input_insert_pos>
    2000:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <bytes_in_input_buffer>
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	e8 1b       	sub	r30, r24
    2008:	f1 09       	sbc	r31, r1
    200a:	ed 5a       	subi	r30, 0xAD	; 173
    200c:	f9 4f       	sbci	r31, 0xF9	; 249
    200e:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    2010:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <bytes_in_input_buffer>
    2014:	91 50       	subi	r25, 0x01	; 1
    2016:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <bytes_in_input_buffer>
	if (interrupts_enabled)
    201a:	22 23       	and	r18, r18
    201c:	09 f0       	breq	.+2      	; 0x2020 <uart_get_char+0x58>
	{
		sei();
    201e:	78 94       	sei
	}	
	return c;
}
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	08 95       	ret

00002024 <init_serial_stdio>:
{
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    2024:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <out_insert_pos>
	bytes_in_out_buffer = 0;
    2028:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <bytes_in_out_buffer>
	input_insert_pos = 0;
    202c:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <input_insert_pos>
	bytes_in_input_buffer = 0;
    2030:	10 92 64 06 	sts	0x0664, r1	; 0x800664 <bytes_in_input_buffer>
	input_overrun = 0;
    2034:	10 92 63 06 	sts	0x0663, r1	; 0x800663 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    2038:	40 93 1d 05 	sts	0x051D, r20	; 0x80051d <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	aa 1f       	adc	r26, r26
    2046:	bb 1f       	adc	r27, r27
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	aa 1f       	adc	r26, r26
    204e:	bb 1f       	adc	r27, r27
    2050:	9c 01       	movw	r18, r24
    2052:	ad 01       	movw	r20, r26
    2054:	22 0f       	add	r18, r18
    2056:	33 1f       	adc	r19, r19
    2058:	44 1f       	adc	r20, r20
    205a:	55 1f       	adc	r21, r21
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	72 e1       	ldi	r23, 0x12	; 18
    2060:	8a e7       	ldi	r24, 0x7A	; 122
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 94 46 14 	call	0x288c	; 0x288c <__divmodsi4>
    2068:	ba 01       	movw	r22, r20
    206a:	a9 01       	movw	r20, r18
    206c:	4f 5f       	subi	r20, 0xFF	; 255
    206e:	5f 4f       	sbci	r21, 0xFF	; 255
    2070:	6f 4f       	sbci	r22, 0xFF	; 255
    2072:	7f 4f       	sbci	r23, 0xFF	; 255
    2074:	db 01       	movw	r26, r22
    2076:	ca 01       	movw	r24, r20
    2078:	1a f4       	brpl	.+6      	; 0x2080 <init_serial_stdio+0x5c>
    207a:	01 96       	adiw	r24, 0x01	; 1
    207c:	a1 1d       	adc	r26, r1
    207e:	b1 1d       	adc	r27, r1
    2080:	b5 95       	asr	r27
    2082:	a7 95       	ror	r26
    2084:	97 95       	ror	r25
    2086:	87 95       	ror	r24
    2088:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    208a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    208e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    2092:	e1 ec       	ldi	r30, 0xC1	; 193
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	88 e1       	ldi	r24, 0x18	; 24
    2098:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
    209a:	80 81       	ld	r24, Z
    209c:	80 68       	ori	r24, 0x80	; 128
    209e:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    20a0:	e5 e6       	ldi	r30, 0x65	; 101
    20a2:	f6 e0       	ldi	r31, 0x06	; 6
    20a4:	8c e0       	ldi	r24, 0x0C	; 12
    20a6:	91 e0       	ldi	r25, 0x01	; 1
    20a8:	93 83       	std	Z+3, r25	; 0x03
    20aa:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    20ac:	91 83       	std	Z+1, r25	; 0x01
    20ae:	80 83       	st	Z, r24
    20b0:	08 95       	ret

000020b2 <serial_input_available>:
}

int8_t serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
    20b2:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <bytes_in_input_buffer>
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	91 11       	cpse	r25, r1
    20ba:	01 c0       	rjmp	.+2      	; 0x20be <serial_input_available+0xc>
    20bc:	80 e0       	ldi	r24, 0x00	; 0
}
    20be:	08 95       	ret

000020c0 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    20c0:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <input_insert_pos>
	bytes_in_input_buffer = 0;
    20c4:	10 92 64 06 	sts	0x0664, r1	; 0x800664 <bytes_in_input_buffer>
    20c8:	08 95       	ret

000020ca <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    20ca:	1f 92       	push	r1
    20cc:	0f 92       	push	r0
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	0f 92       	push	r0
    20d2:	11 24       	eor	r1, r1
    20d4:	2f 93       	push	r18
    20d6:	8f 93       	push	r24
    20d8:	9f 93       	push	r25
    20da:	ef 93       	push	r30
    20dc:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0)
    20de:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <bytes_in_out_buffer>
    20e2:	88 23       	and	r24, r24
    20e4:	29 f1       	breq	.+74     	; 0x2130 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
    20e6:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <out_insert_pos>
    20ea:	20 91 52 05 	lds	r18, 0x0552	; 0x800552 <bytes_in_out_buffer>
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	82 1b       	sub	r24, r18
    20f2:	91 09       	sbc	r25, r1
    20f4:	5a f4       	brpl	.+22     	; 0x210c <__vector_21+0x42>
		{
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    20f6:	e0 91 51 05 	lds	r30, 0x0551	; 0x800551 <out_insert_pos>
    20fa:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <bytes_in_out_buffer>
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	e8 1b       	sub	r30, r24
    2102:	f1 09       	sbc	r31, r1
    2104:	ee 5a       	subi	r30, 0xAE	; 174
    2106:	f9 4f       	sbci	r31, 0xF9	; 249
    2108:	90 81       	ld	r25, Z
    210a:	0a c0       	rjmp	.+20     	; 0x2120 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    210c:	e0 91 51 05 	lds	r30, 0x0551	; 0x800551 <out_insert_pos>
    2110:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <bytes_in_out_buffer>
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	e8 1b       	sub	r30, r24
    2118:	f1 09       	sbc	r31, r1
    211a:	ed 5a       	subi	r30, 0xAD	; 173
    211c:	fa 4f       	sbci	r31, 0xFA	; 250
    211e:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    2120:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <bytes_in_out_buffer>
    2124:	81 50       	subi	r24, 0x01	; 1
    2126:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    212a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    212e:	05 c0       	rjmp	.+10     	; 0x213a <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
    2130:	e1 ec       	ldi	r30, 0xC1	; 193
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	8f 7d       	andi	r24, 0xDF	; 223
    2138:	80 83       	st	Z, r24
	}
}
    213a:	ff 91       	pop	r31
    213c:	ef 91       	pop	r30
    213e:	9f 91       	pop	r25
    2140:	8f 91       	pop	r24
    2142:	2f 91       	pop	r18
    2144:	0f 90       	pop	r0
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	0f 90       	pop	r0
    214a:	1f 90       	pop	r1
    214c:	18 95       	reti

0000214e <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    214e:	1f 92       	push	r1
    2150:	0f 92       	push	r0
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	0f 92       	push	r0
    2156:	11 24       	eor	r1, r1
    2158:	2f 93       	push	r18
    215a:	3f 93       	push	r19
    215c:	4f 93       	push	r20
    215e:	5f 93       	push	r21
    2160:	6f 93       	push	r22
    2162:	7f 93       	push	r23
    2164:	8f 93       	push	r24
    2166:	9f 93       	push	r25
    2168:	af 93       	push	r26
    216a:	bf 93       	push	r27
    216c:	cf 93       	push	r28
    216e:	ef 93       	push	r30
    2170:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    2172:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
    2176:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <do_echo>
    217a:	88 23       	and	r24, r24
    217c:	49 f0       	breq	.+18     	; 0x2190 <__vector_20+0x42>
    217e:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <bytes_in_out_buffer>
    2182:	8f 3f       	cpi	r24, 0xFF	; 255
    2184:	29 f0       	breq	.+10     	; 0x2190 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    2186:	60 e0       	ldi	r22, 0x00	; 0
    2188:	70 e0       	ldi	r23, 0x00	; 0
    218a:	8c 2f       	mov	r24, r28
    218c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
    2190:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <bytes_in_input_buffer>
    2194:	80 31       	cpi	r24, 0x10	; 16
    2196:	20 f0       	brcs	.+8      	; 0x21a0 <__vector_20+0x52>
	{
		input_overrun = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <input_overrun>
    219e:	18 c0       	rjmp	.+48     	; 0x21d0 <__vector_20+0x82>
	} else
	{
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r')
    21a0:	cd 30       	cpi	r28, 0x0D	; 13
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <__vector_20+0x58>
		{
			c = '\n';
    21a4:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    21a6:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <input_insert_pos>
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	8e 0f       	add	r24, r30
    21ae:	80 93 52 06 	sts	0x0652, r24	; 0x800652 <input_insert_pos>
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	ed 5a       	subi	r30, 0xAD	; 173
    21b6:	f9 4f       	sbci	r31, 0xF9	; 249
    21b8:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    21ba:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <bytes_in_input_buffer>
    21be:	8f 5f       	subi	r24, 0xFF	; 255
    21c0:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
    21c4:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <input_insert_pos>
    21c8:	80 31       	cpi	r24, 0x10	; 16
    21ca:	11 f4       	brne	.+4      	; 0x21d0 <__vector_20+0x82>
		{
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    21cc:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <input_insert_pos>
		}
	}
}
    21d0:	ff 91       	pop	r31
    21d2:	ef 91       	pop	r30
    21d4:	cf 91       	pop	r28
    21d6:	bf 91       	pop	r27
    21d8:	af 91       	pop	r26
    21da:	9f 91       	pop	r25
    21dc:	8f 91       	pop	r24
    21de:	7f 91       	pop	r23
    21e0:	6f 91       	pop	r22
    21e2:	5f 91       	pop	r21
    21e4:	4f 91       	pop	r20
    21e6:	3f 91       	pop	r19
    21e8:	2f 91       	pop	r18
    21ea:	0f 90       	pop	r0
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	0f 90       	pop	r0
    21f0:	1f 90       	pop	r1
    21f2:	18 95       	reti

000021f4 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider)
{
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    21f4:	94 b1       	in	r25, 0x04	; 4
    21f6:	90 6b       	ori	r25, 0xB0	; 176
    21f8:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
    21fa:	95 b1       	in	r25, 0x05	; 5
    21fc:	90 61       	ori	r25, 0x10	; 16
    21fe:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    2200:	90 e5       	ldi	r25, 0x50	; 80
    2202:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider)
    2204:	88 30       	cpi	r24, 0x08	; 8
    2206:	21 f0       	breq	.+8      	; 0x2210 <spi_setup_master+0x1c>
    2208:	80 32       	cpi	r24, 0x20	; 32
    220a:	11 f0       	breq	.+4      	; 0x2210 <spi_setup_master+0x1c>
    220c:	82 30       	cpi	r24, 0x02	; 2
    220e:	19 f4       	brne	.+6      	; 0x2216 <spi_setup_master+0x22>
	{
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	9d bd       	out	0x2d, r25	; 45
			break;
    2214:	01 c0       	rjmp	.+2      	; 0x2218 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    2216:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
    2218:	80 32       	cpi	r24, 0x20	; 32
    221a:	69 f0       	breq	.+26     	; 0x2236 <spi_setup_master+0x42>
    221c:	28 f4       	brcc	.+10     	; 0x2228 <spi_setup_master+0x34>
    221e:	88 30       	cpi	r24, 0x08	; 8
    2220:	71 f0       	breq	.+28     	; 0x223e <spi_setup_master+0x4a>
    2222:	80 31       	cpi	r24, 0x10	; 16
    2224:	61 f0       	breq	.+24     	; 0x223e <spi_setup_master+0x4a>
    2226:	0e c0       	rjmp	.+28     	; 0x2244 <spi_setup_master+0x50>
    2228:	80 34       	cpi	r24, 0x40	; 64
    222a:	29 f0       	breq	.+10     	; 0x2236 <spi_setup_master+0x42>
    222c:	80 38       	cpi	r24, 0x80	; 128
    222e:	51 f4       	brne	.+20     	; 0x2244 <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
    2230:	8c b5       	in	r24, 0x2c	; 44
    2232:	81 60       	ori	r24, 0x01	; 1
    2234:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
    2236:	8c b5       	in	r24, 0x2c	; 44
    2238:	82 60       	ori	r24, 0x02	; 2
    223a:	8c bd       	out	0x2c, r24	; 44
			break;
    223c:	03 c0       	rjmp	.+6      	; 0x2244 <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
    223e:	8c b5       	in	r24, 0x2c	; 44
    2240:	81 60       	ori	r24, 0x01	; 1
    2242:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
    2244:	85 b1       	in	r24, 0x05	; 5
    2246:	8f 7e       	andi	r24, 0xEF	; 239
    2248:	85 b9       	out	0x05, r24	; 5
    224a:	08 95       	ret

0000224c <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    224c:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    224e:	0d b4       	in	r0, 0x2d	; 45
    2250:	07 fe       	sbrs	r0, 7
    2252:	fd cf       	rjmp	.-6      	; 0x224e <spi_send_byte+0x2>
	{
		; // wait
	}
	return SPDR0;
    2254:	8e b5       	in	r24, 0x2e	; 46
}
    2256:	08 95       	ret

00002258 <move_terminal_cursor>:
}

void reverse_video(void)
{
	printf_P(PSTR("\x1b[7m"));
}
    2258:	9f 93       	push	r25
    225a:	8f 93       	push	r24
    225c:	7f 93       	push	r23
    225e:	6f 93       	push	r22
    2260:	8d e7       	ldi	r24, 0x7D	; 125
    2262:	93 e0       	ldi	r25, 0x03	; 3
    2264:	9f 93       	push	r25
    2266:	8f 93       	push	r24
    2268:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	08 95       	ret

0000227a <clear_terminal>:

void clear_terminal(void)
{
	printf_P(PSTR("\x1b[2J"));
    227a:	88 e7       	ldi	r24, 0x78	; 120
    227c:	93 e0       	ldi	r25, 0x03	; 3
    227e:	9f 93       	push	r25
    2280:	8f 93       	push	r24
    2282:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
}
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	08 95       	ret

0000228c <clear_to_end_of_line>:

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
    228c:	84 e7       	ldi	r24, 0x74	; 116
    228e:	93 e0       	ldi	r25, 0x03	; 3
    2290:	9f 93       	push	r25
    2292:	8f 93       	push	r24
    2294:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
}
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	08 95       	ret

0000229e <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    229e:	1f 92       	push	r1
    22a0:	8f 93       	push	r24
    22a2:	8e e6       	ldi	r24, 0x6E	; 110
    22a4:	93 e0       	ldi	r25, 0x03	; 3
    22a6:	9f 93       	push	r25
    22a8:	8f 93       	push	r24
    22aa:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
}
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	08 95       	ret

000022b8 <hide_cursor>:

void hide_cursor()
{
	printf_P(PSTR("\x1b[?25l"));
    22b8:	87 e6       	ldi	r24, 0x67	; 103
    22ba:	93 e0       	ldi	r25, 0x03	; 3
    22bc:	9f 93       	push	r25
    22be:	8f 93       	push	r24
    22c0:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
}
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	08 95       	ret

000022ca <show_cursor>:

void show_cursor()
{
	printf_P(PSTR("\x1b[?25h"));
    22ca:	80 e6       	ldi	r24, 0x60	; 96
    22cc:	93 e0       	ldi	r25, 0x03	; 3
    22ce:	9f 93       	push	r25
    22d0:	8f 93       	push	r24
    22d2:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <printf_P>
}
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	08 95       	ret

000022dc <init_timer0>:
void init_timer0(void)
{
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
    22dc:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <clock_ticks_ms>
    22e0:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <clock_ticks_ms+0x1>
    22e4:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <clock_ticks_ms+0x2>
    22e8:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    22ec:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    22ee:	8c e7       	ldi	r24, 0x7C	; 124
    22f0:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
    22f2:	92 e0       	ldi	r25, 0x02	; 2
    22f4:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    22f6:	83 e0       	ldi	r24, 0x03	; 3
    22f8:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
    22fa:	ee e6       	ldi	r30, 0x6E	; 110
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	82 60       	ori	r24, 0x02	; 2
    2302:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
    2304:	95 bb       	out	0x15, r25	; 21
    2306:	08 95       	ret

00002308 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    2308:	8f b7       	in	r24, 0x3f	; 63
    230a:	28 2f       	mov	r18, r24
    230c:	20 78       	andi	r18, 0x80	; 128
	cli();
    230e:	f8 94       	cli
	return_value = clock_ticks_ms;
    2310:	60 91 1e 05 	lds	r22, 0x051E	; 0x80051e <clock_ticks_ms>
    2314:	70 91 1f 05 	lds	r23, 0x051F	; 0x80051f <clock_ticks_ms+0x1>
    2318:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <clock_ticks_ms+0x2>
    231c:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    2320:	22 23       	and	r18, r18
    2322:	09 f0       	breq	.+2      	; 0x2326 <get_current_time+0x1e>
	{
		sei();
    2324:	78 94       	sei
	}
	return return_value;
}
    2326:	08 95       	ret

00002328 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
    2328:	1f 92       	push	r1
    232a:	0f 92       	push	r0
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	0f 92       	push	r0
    2330:	11 24       	eor	r1, r1
    2332:	8f 93       	push	r24
    2334:	9f 93       	push	r25
    2336:	af 93       	push	r26
    2338:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
    233a:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <clock_ticks_ms>
    233e:	90 91 1f 05 	lds	r25, 0x051F	; 0x80051f <clock_ticks_ms+0x1>
    2342:	a0 91 20 05 	lds	r26, 0x0520	; 0x800520 <clock_ticks_ms+0x2>
    2346:	b0 91 21 05 	lds	r27, 0x0521	; 0x800521 <clock_ticks_ms+0x3>
    234a:	01 96       	adiw	r24, 0x01	; 1
    234c:	a1 1d       	adc	r26, r1
    234e:	b1 1d       	adc	r27, r1
    2350:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <clock_ticks_ms>
    2354:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <clock_ticks_ms+0x1>
    2358:	a0 93 20 05 	sts	0x0520, r26	; 0x800520 <clock_ticks_ms+0x2>
    235c:	b0 93 21 05 	sts	0x0521, r27	; 0x800521 <clock_ticks_ms+0x3>
}
    2360:	bf 91       	pop	r27
    2362:	af 91       	pop	r26
    2364:	9f 91       	pop	r25
    2366:	8f 91       	pop	r24
    2368:	0f 90       	pop	r0
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	0f 90       	pop	r0
    236e:	1f 90       	pop	r1
    2370:	18 95       	reti

00002372 <init_timer1>:
 */


void init_timer1(void)
{
	freq = 1;
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <freq+0x1>
    237a:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <freq>
	duty_cycle = 0;
    237e:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <duty_cycle>
    2382:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <duty_cycle+0x1>
    2386:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <duty_cycle+0x2>
    238a:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <duty_cycle+0x3>
	
	uint16_t clockperiod = (1000000UL / freq);
	uint16_t pulsewidth = (duty_cycle * clockperiod)/100;
	
	// Set the maximum count value for timer/counter 1 to be one less than the clockperiod
	OCR1A = clockperiod - 1;
    238e:	8f e3       	ldi	r24, 0x3F	; 63
    2390:	92 e4       	ldi	r25, 0x42	; 66
    2392:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2396:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// Set the count compare value based on the pulse width. The value will be 1 less
	// than the pulse width - unless the pulse width is 0.
	if(pulsewidth == 0) {
		OCR1B = 0;
    239a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    239e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	//set up timer 1 for;
	//Fast PWM, counting from 0 to the value in OCR1A
	//before reseting to 0. Count at 1MHz (CLK/8).
	//Configure output OC1B to be CTC non-inverting mode.
	TCCR1A = (1 << COM1B1) | (1 << WGM10) | (1 <<WGM11);
    23a2:	83 e2       	ldi	r24, 0x23	; 35
    23a4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << CS11) | (1 << WGM12) |(1 << WGM13);
    23a8:	8a e1       	ldi	r24, 0x1A	; 26
    23aa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    23ae:	08 95       	ret

000023b0 <note_sound>:
	
}

void note_sound() {
    23b0:	cf 92       	push	r12
    23b2:	df 92       	push	r13
    23b4:	ef 92       	push	r14
    23b6:	ff 92       	push	r15
	
	if (!disable_piezzo) { //if you dont want to turn off the piezzo do the following
    23b8:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <disable_piezzo>
    23bc:	90 91 25 05 	lds	r25, 0x0525	; 0x800525 <disable_piezzo+0x1>
    23c0:	89 2b       	or	r24, r25
    23c2:	c9 f5       	brne	.+114    	; 0x2436 <note_sound+0x86>
		//turn on PORTd4 and set DDRD4 to be output
		DDRD |= 0b00010000;
    23c4:	8a b1       	in	r24, 0x0a	; 10
    23c6:	80 61       	ori	r24, 0x10	; 16
    23c8:	8a b9       	out	0x0a, r24	; 10
		PORTD |= 0b00010000;
    23ca:	8b b1       	in	r24, 0x0b	; 11
    23cc:	80 61       	ori	r24, 0x10	; 16
    23ce:	8b b9       	out	0x0b, r24	; 11
		
		uint16_t clockperiod = (1000000UL / freq);
    23d0:	20 91 26 05 	lds	r18, 0x0526	; 0x800526 <freq>
    23d4:	30 91 27 05 	lds	r19, 0x0527	; 0x800527 <freq+0x1>
    23d8:	40 e0       	ldi	r20, 0x00	; 0
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	60 e4       	ldi	r22, 0x40	; 64
    23de:	72 e4       	ldi	r23, 0x42	; 66
    23e0:	8f e0       	ldi	r24, 0x0F	; 15
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	0e 94 24 14 	call	0x2848	; 0x2848 <__udivmodsi4>
    23e8:	69 01       	movw	r12, r18
    23ea:	7a 01       	movw	r14, r20
		uint16_t pulsewidth = (duty_cycle * clockperiod)/100;
    23ec:	b9 01       	movw	r22, r18
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	0e 94 15 13 	call	0x262a	; 0x262a <__floatunsisf>
    23f6:	20 91 49 05 	lds	r18, 0x0549	; 0x800549 <duty_cycle>
    23fa:	30 91 4a 05 	lds	r19, 0x054A	; 0x80054a <duty_cycle+0x1>
    23fe:	40 91 4b 05 	lds	r20, 0x054B	; 0x80054b <duty_cycle+0x2>
    2402:	50 91 4c 05 	lds	r21, 0x054C	; 0x80054c <duty_cycle+0x3>
    2406:	0e 94 a3 13 	call	0x2746	; 0x2746 <__mulsf3>
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	48 ec       	ldi	r20, 0xC8	; 200
    2410:	52 e4       	ldi	r21, 0x42	; 66
    2412:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__divsf3>
    2416:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__fixunssfsi>
	
		OCR1A = clockperiod - 1;
    241a:	21 e0       	ldi	r18, 0x01	; 1
    241c:	c2 1a       	sub	r12, r18
    241e:	d1 08       	sbc	r13, r1
    2420:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2424:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = pulsewidth - 1;
    2428:	61 50       	subi	r22, 0x01	; 1
    242a:	71 09       	sbc	r23, r1
    242c:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2430:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    2434:	0e c0       	rjmp	.+28     	; 0x2452 <note_sound+0xa2>
		
	} else { //if you want to turn off the piezzo do the following
		//set bot checks to be 0
		OCR1A = 0;
    2436:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    243a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = 0;
    243e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2442:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		
		//make DDRD4 to be input and PORTD4 to be off
		DDRD &= ~(1<<4);	//inverse of 1<<4
    2446:	8a b1       	in	r24, 0x0a	; 10
    2448:	8f 7e       	andi	r24, 0xEF	; 239
    244a:	8a b9       	out	0x0a, r24	; 10
		PORTD &= 0b11101111;
    244c:	8b b1       	in	r24, 0x0b	; 11
    244e:	8f 7e       	andi	r24, 0xEF	; 239
    2450:	8b b9       	out	0x0b, r24	; 11
			
	}
}
    2452:	ff 90       	pop	r15
    2454:	ef 90       	pop	r14
    2456:	df 90       	pop	r13
    2458:	cf 90       	pop	r12
    245a:	08 95       	ret

0000245c <pause_control>:

void pause_control(int is_paused) {
	if (is_paused) {
    245c:	89 2b       	or	r24, r25
    245e:	79 f0       	breq	.+30     	; 0x247e <pause_control+0x22>
		OCR1A = 0;
    2460:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2464:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = 0;
    2468:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    246c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		
		DDRD &= ~(1<<4);	//inverse of 1<<4
    2470:	8a b1       	in	r24, 0x0a	; 10
    2472:	8f 7e       	andi	r24, 0xEF	; 239
    2474:	8a b9       	out	0x0a, r24	; 10
		PORTD &= 0b11101111;
    2476:	8b b1       	in	r24, 0x0b	; 11
    2478:	8f 7e       	andi	r24, 0xEF	; 239
    247a:	8b b9       	out	0x0b, r24	; 11
    247c:	08 95       	ret
		
	} else {
		note_sound();
    247e:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <note_sound>
    2482:	08 95       	ret

00002484 <init_timer2>:
void init_timer2(void)
{
	
	//TCNT2 = 0;
	//set up so that there is an interrupt every 10ms (100 times per second)
	OCR2A = 77; //clock divided by 1024 - count for 10000 cycles
    2484:	8d e4       	ldi	r24, 0x4D	; 77
    2486:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = 0; //CTC mode
    248a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1<<WGM22) | (1<<CS22) | (1<<CS20); // Divide clock by 1024(PRE) 
    248e:	8d e0       	ldi	r24, 0x0D	; 13
    2490:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	//enable interrupt on timer on output compare match
	TIMSK2 = (1<<OCIE2A);
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	
	//Ensure interrupt flag is cleared
	TIFR2 = (1<<OCF2A);
    249a:	87 bb       	out	0x17, r24	; 23
	
	// Turn on global interrupts
	sei();
    249c:	78 94       	sei
    249e:	08 95       	ret

000024a0 <__vector_9>:
}

ISR(TIMER2_COMPA_vect) {
    24a0:	1f 92       	push	r1
    24a2:	0f 92       	push	r0
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	0f 92       	push	r0
    24a8:	11 24       	eor	r1, r1
    24aa:	2f 93       	push	r18
    24ac:	3f 93       	push	r19
    24ae:	4f 93       	push	r20
    24b0:	5f 93       	push	r21
    24b2:	6f 93       	push	r22
    24b4:	7f 93       	push	r23
    24b6:	8f 93       	push	r24
    24b8:	9f 93       	push	r25
    24ba:	af 93       	push	r26
    24bc:	bf 93       	push	r27
    24be:	ef 93       	push	r30
    24c0:	ff 93       	push	r31
	ssd_display();
    24c2:	0e 94 ed 0b 	call	0x17da	; 0x17da <ssd_display>
}
    24c6:	ff 91       	pop	r31
    24c8:	ef 91       	pop	r30
    24ca:	bf 91       	pop	r27
    24cc:	af 91       	pop	r26
    24ce:	9f 91       	pop	r25
    24d0:	8f 91       	pop	r24
    24d2:	7f 91       	pop	r23
    24d4:	6f 91       	pop	r22
    24d6:	5f 91       	pop	r21
    24d8:	4f 91       	pop	r20
    24da:	3f 91       	pop	r19
    24dc:	2f 91       	pop	r18
    24de:	0f 90       	pop	r0
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	0f 90       	pop	r0
    24e4:	1f 90       	pop	r1
    24e6:	18 95       	reti

000024e8 <__divsf3>:
    24e8:	0e 94 88 12 	call	0x2510	; 0x2510 <__divsf3x>
    24ec:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <__fp_round>
    24f0:	0e 94 62 13 	call	0x26c4	; 0x26c4 <__fp_pscB>
    24f4:	58 f0       	brcs	.+22     	; 0x250c <__divsf3+0x24>
    24f6:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__fp_pscA>
    24fa:	40 f0       	brcs	.+16     	; 0x250c <__divsf3+0x24>
    24fc:	29 f4       	brne	.+10     	; 0x2508 <__divsf3+0x20>
    24fe:	5f 3f       	cpi	r21, 0xFF	; 255
    2500:	29 f0       	breq	.+10     	; 0x250c <__divsf3+0x24>
    2502:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__fp_inf>
    2506:	51 11       	cpse	r21, r1
    2508:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__fp_szero>
    250c:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__fp_nan>

00002510 <__divsf3x>:
    2510:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__fp_split3>
    2514:	68 f3       	brcs	.-38     	; 0x24f0 <__divsf3+0x8>

00002516 <__divsf3_pse>:
    2516:	99 23       	and	r25, r25
    2518:	b1 f3       	breq	.-20     	; 0x2506 <__divsf3+0x1e>
    251a:	55 23       	and	r21, r21
    251c:	91 f3       	breq	.-28     	; 0x2502 <__divsf3+0x1a>
    251e:	95 1b       	sub	r25, r21
    2520:	55 0b       	sbc	r21, r21
    2522:	bb 27       	eor	r27, r27
    2524:	aa 27       	eor	r26, r26
    2526:	62 17       	cp	r22, r18
    2528:	73 07       	cpc	r23, r19
    252a:	84 07       	cpc	r24, r20
    252c:	38 f0       	brcs	.+14     	; 0x253c <__divsf3_pse+0x26>
    252e:	9f 5f       	subi	r25, 0xFF	; 255
    2530:	5f 4f       	sbci	r21, 0xFF	; 255
    2532:	22 0f       	add	r18, r18
    2534:	33 1f       	adc	r19, r19
    2536:	44 1f       	adc	r20, r20
    2538:	aa 1f       	adc	r26, r26
    253a:	a9 f3       	breq	.-22     	; 0x2526 <__divsf3_pse+0x10>
    253c:	35 d0       	rcall	.+106    	; 0x25a8 <__divsf3_pse+0x92>
    253e:	0e 2e       	mov	r0, r30
    2540:	3a f0       	brmi	.+14     	; 0x2550 <__divsf3_pse+0x3a>
    2542:	e0 e8       	ldi	r30, 0x80	; 128
    2544:	32 d0       	rcall	.+100    	; 0x25aa <__divsf3_pse+0x94>
    2546:	91 50       	subi	r25, 0x01	; 1
    2548:	50 40       	sbci	r21, 0x00	; 0
    254a:	e6 95       	lsr	r30
    254c:	00 1c       	adc	r0, r0
    254e:	ca f7       	brpl	.-14     	; 0x2542 <__divsf3_pse+0x2c>
    2550:	2b d0       	rcall	.+86     	; 0x25a8 <__divsf3_pse+0x92>
    2552:	fe 2f       	mov	r31, r30
    2554:	29 d0       	rcall	.+82     	; 0x25a8 <__divsf3_pse+0x92>
    2556:	66 0f       	add	r22, r22
    2558:	77 1f       	adc	r23, r23
    255a:	88 1f       	adc	r24, r24
    255c:	bb 1f       	adc	r27, r27
    255e:	26 17       	cp	r18, r22
    2560:	37 07       	cpc	r19, r23
    2562:	48 07       	cpc	r20, r24
    2564:	ab 07       	cpc	r26, r27
    2566:	b0 e8       	ldi	r27, 0x80	; 128
    2568:	09 f0       	breq	.+2      	; 0x256c <__divsf3_pse+0x56>
    256a:	bb 0b       	sbc	r27, r27
    256c:	80 2d       	mov	r24, r0
    256e:	bf 01       	movw	r22, r30
    2570:	ff 27       	eor	r31, r31
    2572:	93 58       	subi	r25, 0x83	; 131
    2574:	5f 4f       	sbci	r21, 0xFF	; 255
    2576:	3a f0       	brmi	.+14     	; 0x2586 <__divsf3_pse+0x70>
    2578:	9e 3f       	cpi	r25, 0xFE	; 254
    257a:	51 05       	cpc	r21, r1
    257c:	78 f0       	brcs	.+30     	; 0x259c <__divsf3_pse+0x86>
    257e:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__fp_inf>
    2582:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__fp_szero>
    2586:	5f 3f       	cpi	r21, 0xFF	; 255
    2588:	e4 f3       	brlt	.-8      	; 0x2582 <__divsf3_pse+0x6c>
    258a:	98 3e       	cpi	r25, 0xE8	; 232
    258c:	d4 f3       	brlt	.-12     	; 0x2582 <__divsf3_pse+0x6c>
    258e:	86 95       	lsr	r24
    2590:	77 95       	ror	r23
    2592:	67 95       	ror	r22
    2594:	b7 95       	ror	r27
    2596:	f7 95       	ror	r31
    2598:	9f 5f       	subi	r25, 0xFF	; 255
    259a:	c9 f7       	brne	.-14     	; 0x258e <__divsf3_pse+0x78>
    259c:	88 0f       	add	r24, r24
    259e:	91 1d       	adc	r25, r1
    25a0:	96 95       	lsr	r25
    25a2:	87 95       	ror	r24
    25a4:	97 f9       	bld	r25, 7
    25a6:	08 95       	ret
    25a8:	e1 e0       	ldi	r30, 0x01	; 1
    25aa:	66 0f       	add	r22, r22
    25ac:	77 1f       	adc	r23, r23
    25ae:	88 1f       	adc	r24, r24
    25b0:	bb 1f       	adc	r27, r27
    25b2:	62 17       	cp	r22, r18
    25b4:	73 07       	cpc	r23, r19
    25b6:	84 07       	cpc	r24, r20
    25b8:	ba 07       	cpc	r27, r26
    25ba:	20 f0       	brcs	.+8      	; 0x25c4 <__divsf3_pse+0xae>
    25bc:	62 1b       	sub	r22, r18
    25be:	73 0b       	sbc	r23, r19
    25c0:	84 0b       	sbc	r24, r20
    25c2:	ba 0b       	sbc	r27, r26
    25c4:	ee 1f       	adc	r30, r30
    25c6:	88 f7       	brcc	.-30     	; 0x25aa <__divsf3_pse+0x94>
    25c8:	e0 95       	com	r30
    25ca:	08 95       	ret

000025cc <__fixunssfsi>:
    25cc:	0e 94 82 13 	call	0x2704	; 0x2704 <__fp_splitA>
    25d0:	88 f0       	brcs	.+34     	; 0x25f4 <__fixunssfsi+0x28>
    25d2:	9f 57       	subi	r25, 0x7F	; 127
    25d4:	98 f0       	brcs	.+38     	; 0x25fc <__fixunssfsi+0x30>
    25d6:	b9 2f       	mov	r27, r25
    25d8:	99 27       	eor	r25, r25
    25da:	b7 51       	subi	r27, 0x17	; 23
    25dc:	b0 f0       	brcs	.+44     	; 0x260a <__fixunssfsi+0x3e>
    25de:	e1 f0       	breq	.+56     	; 0x2618 <__fixunssfsi+0x4c>
    25e0:	66 0f       	add	r22, r22
    25e2:	77 1f       	adc	r23, r23
    25e4:	88 1f       	adc	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	1a f0       	brmi	.+6      	; 0x25f0 <__fixunssfsi+0x24>
    25ea:	ba 95       	dec	r27
    25ec:	c9 f7       	brne	.-14     	; 0x25e0 <__fixunssfsi+0x14>
    25ee:	14 c0       	rjmp	.+40     	; 0x2618 <__fixunssfsi+0x4c>
    25f0:	b1 30       	cpi	r27, 0x01	; 1
    25f2:	91 f0       	breq	.+36     	; 0x2618 <__fixunssfsi+0x4c>
    25f4:	0e 94 9c 13 	call	0x2738	; 0x2738 <__fp_zero>
    25f8:	b1 e0       	ldi	r27, 0x01	; 1
    25fa:	08 95       	ret
    25fc:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__fp_zero>
    2600:	67 2f       	mov	r22, r23
    2602:	78 2f       	mov	r23, r24
    2604:	88 27       	eor	r24, r24
    2606:	b8 5f       	subi	r27, 0xF8	; 248
    2608:	39 f0       	breq	.+14     	; 0x2618 <__fixunssfsi+0x4c>
    260a:	b9 3f       	cpi	r27, 0xF9	; 249
    260c:	cc f3       	brlt	.-14     	; 0x2600 <__fixunssfsi+0x34>
    260e:	86 95       	lsr	r24
    2610:	77 95       	ror	r23
    2612:	67 95       	ror	r22
    2614:	b3 95       	inc	r27
    2616:	d9 f7       	brne	.-10     	; 0x260e <__fixunssfsi+0x42>
    2618:	3e f4       	brtc	.+14     	; 0x2628 <__fixunssfsi+0x5c>
    261a:	90 95       	com	r25
    261c:	80 95       	com	r24
    261e:	70 95       	com	r23
    2620:	61 95       	neg	r22
    2622:	7f 4f       	sbci	r23, 0xFF	; 255
    2624:	8f 4f       	sbci	r24, 0xFF	; 255
    2626:	9f 4f       	sbci	r25, 0xFF	; 255
    2628:	08 95       	ret

0000262a <__floatunsisf>:
    262a:	e8 94       	clt
    262c:	09 c0       	rjmp	.+18     	; 0x2640 <__floatsisf+0x12>

0000262e <__floatsisf>:
    262e:	97 fb       	bst	r25, 7
    2630:	3e f4       	brtc	.+14     	; 0x2640 <__floatsisf+0x12>
    2632:	90 95       	com	r25
    2634:	80 95       	com	r24
    2636:	70 95       	com	r23
    2638:	61 95       	neg	r22
    263a:	7f 4f       	sbci	r23, 0xFF	; 255
    263c:	8f 4f       	sbci	r24, 0xFF	; 255
    263e:	9f 4f       	sbci	r25, 0xFF	; 255
    2640:	99 23       	and	r25, r25
    2642:	a9 f0       	breq	.+42     	; 0x266e <__floatsisf+0x40>
    2644:	f9 2f       	mov	r31, r25
    2646:	96 e9       	ldi	r25, 0x96	; 150
    2648:	bb 27       	eor	r27, r27
    264a:	93 95       	inc	r25
    264c:	f6 95       	lsr	r31
    264e:	87 95       	ror	r24
    2650:	77 95       	ror	r23
    2652:	67 95       	ror	r22
    2654:	b7 95       	ror	r27
    2656:	f1 11       	cpse	r31, r1
    2658:	f8 cf       	rjmp	.-16     	; 0x264a <__floatsisf+0x1c>
    265a:	fa f4       	brpl	.+62     	; 0x269a <__floatsisf+0x6c>
    265c:	bb 0f       	add	r27, r27
    265e:	11 f4       	brne	.+4      	; 0x2664 <__floatsisf+0x36>
    2660:	60 ff       	sbrs	r22, 0
    2662:	1b c0       	rjmp	.+54     	; 0x269a <__floatsisf+0x6c>
    2664:	6f 5f       	subi	r22, 0xFF	; 255
    2666:	7f 4f       	sbci	r23, 0xFF	; 255
    2668:	8f 4f       	sbci	r24, 0xFF	; 255
    266a:	9f 4f       	sbci	r25, 0xFF	; 255
    266c:	16 c0       	rjmp	.+44     	; 0x269a <__floatsisf+0x6c>
    266e:	88 23       	and	r24, r24
    2670:	11 f0       	breq	.+4      	; 0x2676 <__floatsisf+0x48>
    2672:	96 e9       	ldi	r25, 0x96	; 150
    2674:	11 c0       	rjmp	.+34     	; 0x2698 <__floatsisf+0x6a>
    2676:	77 23       	and	r23, r23
    2678:	21 f0       	breq	.+8      	; 0x2682 <__floatsisf+0x54>
    267a:	9e e8       	ldi	r25, 0x8E	; 142
    267c:	87 2f       	mov	r24, r23
    267e:	76 2f       	mov	r23, r22
    2680:	05 c0       	rjmp	.+10     	; 0x268c <__floatsisf+0x5e>
    2682:	66 23       	and	r22, r22
    2684:	71 f0       	breq	.+28     	; 0x26a2 <__floatsisf+0x74>
    2686:	96 e8       	ldi	r25, 0x86	; 134
    2688:	86 2f       	mov	r24, r22
    268a:	70 e0       	ldi	r23, 0x00	; 0
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	2a f0       	brmi	.+10     	; 0x269a <__floatsisf+0x6c>
    2690:	9a 95       	dec	r25
    2692:	66 0f       	add	r22, r22
    2694:	77 1f       	adc	r23, r23
    2696:	88 1f       	adc	r24, r24
    2698:	da f7       	brpl	.-10     	; 0x2690 <__floatsisf+0x62>
    269a:	88 0f       	add	r24, r24
    269c:	96 95       	lsr	r25
    269e:	87 95       	ror	r24
    26a0:	97 f9       	bld	r25, 7
    26a2:	08 95       	ret

000026a4 <__fp_inf>:
    26a4:	97 f9       	bld	r25, 7
    26a6:	9f 67       	ori	r25, 0x7F	; 127
    26a8:	80 e8       	ldi	r24, 0x80	; 128
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	08 95       	ret

000026b0 <__fp_nan>:
    26b0:	9f ef       	ldi	r25, 0xFF	; 255
    26b2:	80 ec       	ldi	r24, 0xC0	; 192
    26b4:	08 95       	ret

000026b6 <__fp_pscA>:
    26b6:	00 24       	eor	r0, r0
    26b8:	0a 94       	dec	r0
    26ba:	16 16       	cp	r1, r22
    26bc:	17 06       	cpc	r1, r23
    26be:	18 06       	cpc	r1, r24
    26c0:	09 06       	cpc	r0, r25
    26c2:	08 95       	ret

000026c4 <__fp_pscB>:
    26c4:	00 24       	eor	r0, r0
    26c6:	0a 94       	dec	r0
    26c8:	12 16       	cp	r1, r18
    26ca:	13 06       	cpc	r1, r19
    26cc:	14 06       	cpc	r1, r20
    26ce:	05 06       	cpc	r0, r21
    26d0:	08 95       	ret

000026d2 <__fp_round>:
    26d2:	09 2e       	mov	r0, r25
    26d4:	03 94       	inc	r0
    26d6:	00 0c       	add	r0, r0
    26d8:	11 f4       	brne	.+4      	; 0x26de <__fp_round+0xc>
    26da:	88 23       	and	r24, r24
    26dc:	52 f0       	brmi	.+20     	; 0x26f2 <__fp_round+0x20>
    26de:	bb 0f       	add	r27, r27
    26e0:	40 f4       	brcc	.+16     	; 0x26f2 <__fp_round+0x20>
    26e2:	bf 2b       	or	r27, r31
    26e4:	11 f4       	brne	.+4      	; 0x26ea <__fp_round+0x18>
    26e6:	60 ff       	sbrs	r22, 0
    26e8:	04 c0       	rjmp	.+8      	; 0x26f2 <__fp_round+0x20>
    26ea:	6f 5f       	subi	r22, 0xFF	; 255
    26ec:	7f 4f       	sbci	r23, 0xFF	; 255
    26ee:	8f 4f       	sbci	r24, 0xFF	; 255
    26f0:	9f 4f       	sbci	r25, 0xFF	; 255
    26f2:	08 95       	ret

000026f4 <__fp_split3>:
    26f4:	57 fd       	sbrc	r21, 7
    26f6:	90 58       	subi	r25, 0x80	; 128
    26f8:	44 0f       	add	r20, r20
    26fa:	55 1f       	adc	r21, r21
    26fc:	59 f0       	breq	.+22     	; 0x2714 <__fp_splitA+0x10>
    26fe:	5f 3f       	cpi	r21, 0xFF	; 255
    2700:	71 f0       	breq	.+28     	; 0x271e <__fp_splitA+0x1a>
    2702:	47 95       	ror	r20

00002704 <__fp_splitA>:
    2704:	88 0f       	add	r24, r24
    2706:	97 fb       	bst	r25, 7
    2708:	99 1f       	adc	r25, r25
    270a:	61 f0       	breq	.+24     	; 0x2724 <__fp_splitA+0x20>
    270c:	9f 3f       	cpi	r25, 0xFF	; 255
    270e:	79 f0       	breq	.+30     	; 0x272e <__fp_splitA+0x2a>
    2710:	87 95       	ror	r24
    2712:	08 95       	ret
    2714:	12 16       	cp	r1, r18
    2716:	13 06       	cpc	r1, r19
    2718:	14 06       	cpc	r1, r20
    271a:	55 1f       	adc	r21, r21
    271c:	f2 cf       	rjmp	.-28     	; 0x2702 <__fp_split3+0xe>
    271e:	46 95       	lsr	r20
    2720:	f1 df       	rcall	.-30     	; 0x2704 <__fp_splitA>
    2722:	08 c0       	rjmp	.+16     	; 0x2734 <__fp_splitA+0x30>
    2724:	16 16       	cp	r1, r22
    2726:	17 06       	cpc	r1, r23
    2728:	18 06       	cpc	r1, r24
    272a:	99 1f       	adc	r25, r25
    272c:	f1 cf       	rjmp	.-30     	; 0x2710 <__fp_splitA+0xc>
    272e:	86 95       	lsr	r24
    2730:	71 05       	cpc	r23, r1
    2732:	61 05       	cpc	r22, r1
    2734:	08 94       	sec
    2736:	08 95       	ret

00002738 <__fp_zero>:
    2738:	e8 94       	clt

0000273a <__fp_szero>:
    273a:	bb 27       	eor	r27, r27
    273c:	66 27       	eor	r22, r22
    273e:	77 27       	eor	r23, r23
    2740:	cb 01       	movw	r24, r22
    2742:	97 f9       	bld	r25, 7
    2744:	08 95       	ret

00002746 <__mulsf3>:
    2746:	0e 94 b6 13 	call	0x276c	; 0x276c <__mulsf3x>
    274a:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <__fp_round>
    274e:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__fp_pscA>
    2752:	38 f0       	brcs	.+14     	; 0x2762 <__mulsf3+0x1c>
    2754:	0e 94 62 13 	call	0x26c4	; 0x26c4 <__fp_pscB>
    2758:	20 f0       	brcs	.+8      	; 0x2762 <__mulsf3+0x1c>
    275a:	95 23       	and	r25, r21
    275c:	11 f0       	breq	.+4      	; 0x2762 <__mulsf3+0x1c>
    275e:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__fp_inf>
    2762:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__fp_nan>
    2766:	11 24       	eor	r1, r1
    2768:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__fp_szero>

0000276c <__mulsf3x>:
    276c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__fp_split3>
    2770:	70 f3       	brcs	.-36     	; 0x274e <__mulsf3+0x8>

00002772 <__mulsf3_pse>:
    2772:	95 9f       	mul	r25, r21
    2774:	c1 f3       	breq	.-16     	; 0x2766 <__mulsf3+0x20>
    2776:	95 0f       	add	r25, r21
    2778:	50 e0       	ldi	r21, 0x00	; 0
    277a:	55 1f       	adc	r21, r21
    277c:	62 9f       	mul	r22, r18
    277e:	f0 01       	movw	r30, r0
    2780:	72 9f       	mul	r23, r18
    2782:	bb 27       	eor	r27, r27
    2784:	f0 0d       	add	r31, r0
    2786:	b1 1d       	adc	r27, r1
    2788:	63 9f       	mul	r22, r19
    278a:	aa 27       	eor	r26, r26
    278c:	f0 0d       	add	r31, r0
    278e:	b1 1d       	adc	r27, r1
    2790:	aa 1f       	adc	r26, r26
    2792:	64 9f       	mul	r22, r20
    2794:	66 27       	eor	r22, r22
    2796:	b0 0d       	add	r27, r0
    2798:	a1 1d       	adc	r26, r1
    279a:	66 1f       	adc	r22, r22
    279c:	82 9f       	mul	r24, r18
    279e:	22 27       	eor	r18, r18
    27a0:	b0 0d       	add	r27, r0
    27a2:	a1 1d       	adc	r26, r1
    27a4:	62 1f       	adc	r22, r18
    27a6:	73 9f       	mul	r23, r19
    27a8:	b0 0d       	add	r27, r0
    27aa:	a1 1d       	adc	r26, r1
    27ac:	62 1f       	adc	r22, r18
    27ae:	83 9f       	mul	r24, r19
    27b0:	a0 0d       	add	r26, r0
    27b2:	61 1d       	adc	r22, r1
    27b4:	22 1f       	adc	r18, r18
    27b6:	74 9f       	mul	r23, r20
    27b8:	33 27       	eor	r19, r19
    27ba:	a0 0d       	add	r26, r0
    27bc:	61 1d       	adc	r22, r1
    27be:	23 1f       	adc	r18, r19
    27c0:	84 9f       	mul	r24, r20
    27c2:	60 0d       	add	r22, r0
    27c4:	21 1d       	adc	r18, r1
    27c6:	82 2f       	mov	r24, r18
    27c8:	76 2f       	mov	r23, r22
    27ca:	6a 2f       	mov	r22, r26
    27cc:	11 24       	eor	r1, r1
    27ce:	9f 57       	subi	r25, 0x7F	; 127
    27d0:	50 40       	sbci	r21, 0x00	; 0
    27d2:	9a f0       	brmi	.+38     	; 0x27fa <__mulsf3_pse+0x88>
    27d4:	f1 f0       	breq	.+60     	; 0x2812 <__mulsf3_pse+0xa0>
    27d6:	88 23       	and	r24, r24
    27d8:	4a f0       	brmi	.+18     	; 0x27ec <__mulsf3_pse+0x7a>
    27da:	ee 0f       	add	r30, r30
    27dc:	ff 1f       	adc	r31, r31
    27de:	bb 1f       	adc	r27, r27
    27e0:	66 1f       	adc	r22, r22
    27e2:	77 1f       	adc	r23, r23
    27e4:	88 1f       	adc	r24, r24
    27e6:	91 50       	subi	r25, 0x01	; 1
    27e8:	50 40       	sbci	r21, 0x00	; 0
    27ea:	a9 f7       	brne	.-22     	; 0x27d6 <__mulsf3_pse+0x64>
    27ec:	9e 3f       	cpi	r25, 0xFE	; 254
    27ee:	51 05       	cpc	r21, r1
    27f0:	80 f0       	brcs	.+32     	; 0x2812 <__mulsf3_pse+0xa0>
    27f2:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__fp_inf>
    27f6:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__fp_szero>
    27fa:	5f 3f       	cpi	r21, 0xFF	; 255
    27fc:	e4 f3       	brlt	.-8      	; 0x27f6 <__mulsf3_pse+0x84>
    27fe:	98 3e       	cpi	r25, 0xE8	; 232
    2800:	d4 f3       	brlt	.-12     	; 0x27f6 <__mulsf3_pse+0x84>
    2802:	86 95       	lsr	r24
    2804:	77 95       	ror	r23
    2806:	67 95       	ror	r22
    2808:	b7 95       	ror	r27
    280a:	f7 95       	ror	r31
    280c:	e7 95       	ror	r30
    280e:	9f 5f       	subi	r25, 0xFF	; 255
    2810:	c1 f7       	brne	.-16     	; 0x2802 <__mulsf3_pse+0x90>
    2812:	fe 2b       	or	r31, r30
    2814:	88 0f       	add	r24, r24
    2816:	91 1d       	adc	r25, r1
    2818:	96 95       	lsr	r25
    281a:	87 95       	ror	r24
    281c:	97 f9       	bld	r25, 7
    281e:	08 95       	ret

00002820 <__divmodhi4>:
    2820:	97 fb       	bst	r25, 7
    2822:	07 2e       	mov	r0, r23
    2824:	16 f4       	brtc	.+4      	; 0x282a <__divmodhi4+0xa>
    2826:	00 94       	com	r0
    2828:	07 d0       	rcall	.+14     	; 0x2838 <__divmodhi4_neg1>
    282a:	77 fd       	sbrc	r23, 7
    282c:	09 d0       	rcall	.+18     	; 0x2840 <__divmodhi4_neg2>
    282e:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__udivmodhi4>
    2832:	07 fc       	sbrc	r0, 7
    2834:	05 d0       	rcall	.+10     	; 0x2840 <__divmodhi4_neg2>
    2836:	3e f4       	brtc	.+14     	; 0x2846 <__divmodhi4_exit>

00002838 <__divmodhi4_neg1>:
    2838:	90 95       	com	r25
    283a:	81 95       	neg	r24
    283c:	9f 4f       	sbci	r25, 0xFF	; 255
    283e:	08 95       	ret

00002840 <__divmodhi4_neg2>:
    2840:	70 95       	com	r23
    2842:	61 95       	neg	r22
    2844:	7f 4f       	sbci	r23, 0xFF	; 255

00002846 <__divmodhi4_exit>:
    2846:	08 95       	ret

00002848 <__udivmodsi4>:
    2848:	a1 e2       	ldi	r26, 0x21	; 33
    284a:	1a 2e       	mov	r1, r26
    284c:	aa 1b       	sub	r26, r26
    284e:	bb 1b       	sub	r27, r27
    2850:	fd 01       	movw	r30, r26
    2852:	0d c0       	rjmp	.+26     	; 0x286e <__udivmodsi4_ep>

00002854 <__udivmodsi4_loop>:
    2854:	aa 1f       	adc	r26, r26
    2856:	bb 1f       	adc	r27, r27
    2858:	ee 1f       	adc	r30, r30
    285a:	ff 1f       	adc	r31, r31
    285c:	a2 17       	cp	r26, r18
    285e:	b3 07       	cpc	r27, r19
    2860:	e4 07       	cpc	r30, r20
    2862:	f5 07       	cpc	r31, r21
    2864:	20 f0       	brcs	.+8      	; 0x286e <__udivmodsi4_ep>
    2866:	a2 1b       	sub	r26, r18
    2868:	b3 0b       	sbc	r27, r19
    286a:	e4 0b       	sbc	r30, r20
    286c:	f5 0b       	sbc	r31, r21

0000286e <__udivmodsi4_ep>:
    286e:	66 1f       	adc	r22, r22
    2870:	77 1f       	adc	r23, r23
    2872:	88 1f       	adc	r24, r24
    2874:	99 1f       	adc	r25, r25
    2876:	1a 94       	dec	r1
    2878:	69 f7       	brne	.-38     	; 0x2854 <__udivmodsi4_loop>
    287a:	60 95       	com	r22
    287c:	70 95       	com	r23
    287e:	80 95       	com	r24
    2880:	90 95       	com	r25
    2882:	9b 01       	movw	r18, r22
    2884:	ac 01       	movw	r20, r24
    2886:	bd 01       	movw	r22, r26
    2888:	cf 01       	movw	r24, r30
    288a:	08 95       	ret

0000288c <__divmodsi4>:
    288c:	05 2e       	mov	r0, r21
    288e:	97 fb       	bst	r25, 7
    2890:	1e f4       	brtc	.+6      	; 0x2898 <__divmodsi4+0xc>
    2892:	00 94       	com	r0
    2894:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__negsi2>
    2898:	57 fd       	sbrc	r21, 7
    289a:	07 d0       	rcall	.+14     	; 0x28aa <__divmodsi4_neg2>
    289c:	0e 94 24 14 	call	0x2848	; 0x2848 <__udivmodsi4>
    28a0:	07 fc       	sbrc	r0, 7
    28a2:	03 d0       	rcall	.+6      	; 0x28aa <__divmodsi4_neg2>
    28a4:	4e f4       	brtc	.+18     	; 0x28b8 <__divmodsi4_exit>
    28a6:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <__negsi2>

000028aa <__divmodsi4_neg2>:
    28aa:	50 95       	com	r21
    28ac:	40 95       	com	r20
    28ae:	30 95       	com	r19
    28b0:	21 95       	neg	r18
    28b2:	3f 4f       	sbci	r19, 0xFF	; 255
    28b4:	4f 4f       	sbci	r20, 0xFF	; 255
    28b6:	5f 4f       	sbci	r21, 0xFF	; 255

000028b8 <__divmodsi4_exit>:
    28b8:	08 95       	ret

000028ba <__negsi2>:
    28ba:	90 95       	com	r25
    28bc:	80 95       	com	r24
    28be:	70 95       	com	r23
    28c0:	61 95       	neg	r22
    28c2:	7f 4f       	sbci	r23, 0xFF	; 255
    28c4:	8f 4f       	sbci	r24, 0xFF	; 255
    28c6:	9f 4f       	sbci	r25, 0xFF	; 255
    28c8:	08 95       	ret

000028ca <__umulhisi3>:
    28ca:	a2 9f       	mul	r26, r18
    28cc:	b0 01       	movw	r22, r0
    28ce:	b3 9f       	mul	r27, r19
    28d0:	c0 01       	movw	r24, r0
    28d2:	a3 9f       	mul	r26, r19
    28d4:	70 0d       	add	r23, r0
    28d6:	81 1d       	adc	r24, r1
    28d8:	11 24       	eor	r1, r1
    28da:	91 1d       	adc	r25, r1
    28dc:	b2 9f       	mul	r27, r18
    28de:	70 0d       	add	r23, r0
    28e0:	81 1d       	adc	r24, r1
    28e2:	11 24       	eor	r1, r1
    28e4:	91 1d       	adc	r25, r1
    28e6:	08 95       	ret

000028e8 <__udivmodhi4>:
    28e8:	aa 1b       	sub	r26, r26
    28ea:	bb 1b       	sub	r27, r27
    28ec:	51 e1       	ldi	r21, 0x11	; 17
    28ee:	07 c0       	rjmp	.+14     	; 0x28fe <__udivmodhi4_ep>

000028f0 <__udivmodhi4_loop>:
    28f0:	aa 1f       	adc	r26, r26
    28f2:	bb 1f       	adc	r27, r27
    28f4:	a6 17       	cp	r26, r22
    28f6:	b7 07       	cpc	r27, r23
    28f8:	10 f0       	brcs	.+4      	; 0x28fe <__udivmodhi4_ep>
    28fa:	a6 1b       	sub	r26, r22
    28fc:	b7 0b       	sbc	r27, r23

000028fe <__udivmodhi4_ep>:
    28fe:	88 1f       	adc	r24, r24
    2900:	99 1f       	adc	r25, r25
    2902:	5a 95       	dec	r21
    2904:	a9 f7       	brne	.-22     	; 0x28f0 <__udivmodhi4_loop>
    2906:	80 95       	com	r24
    2908:	90 95       	com	r25
    290a:	bc 01       	movw	r22, r24
    290c:	cd 01       	movw	r24, r26
    290e:	08 95       	ret

00002910 <fgetc>:
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	ec 01       	movw	r28, r24
    2916:	2b 81       	ldd	r18, Y+3	; 0x03
    2918:	20 ff       	sbrs	r18, 0
    291a:	33 c0       	rjmp	.+102    	; 0x2982 <fgetc+0x72>
    291c:	26 ff       	sbrs	r18, 6
    291e:	0a c0       	rjmp	.+20     	; 0x2934 <fgetc+0x24>
    2920:	2f 7b       	andi	r18, 0xBF	; 191
    2922:	2b 83       	std	Y+3, r18	; 0x03
    2924:	8e 81       	ldd	r24, Y+6	; 0x06
    2926:	9f 81       	ldd	r25, Y+7	; 0x07
    2928:	01 96       	adiw	r24, 0x01	; 1
    292a:	9f 83       	std	Y+7, r25	; 0x07
    292c:	8e 83       	std	Y+6, r24	; 0x06
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	29 c0       	rjmp	.+82     	; 0x2986 <fgetc+0x76>
    2934:	22 ff       	sbrs	r18, 2
    2936:	0f c0       	rjmp	.+30     	; 0x2956 <fgetc+0x46>
    2938:	e8 81       	ld	r30, Y
    293a:	f9 81       	ldd	r31, Y+1	; 0x01
    293c:	80 81       	ld	r24, Z
    293e:	08 2e       	mov	r0, r24
    2940:	00 0c       	add	r0, r0
    2942:	99 0b       	sbc	r25, r25
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	19 f4       	brne	.+6      	; 0x294e <fgetc+0x3e>
    2948:	20 62       	ori	r18, 0x20	; 32
    294a:	2b 83       	std	Y+3, r18	; 0x03
    294c:	1a c0       	rjmp	.+52     	; 0x2982 <fgetc+0x72>
    294e:	31 96       	adiw	r30, 0x01	; 1
    2950:	f9 83       	std	Y+1, r31	; 0x01
    2952:	e8 83       	st	Y, r30
    2954:	0e c0       	rjmp	.+28     	; 0x2972 <fgetc+0x62>
    2956:	ea 85       	ldd	r30, Y+10	; 0x0a
    2958:	fb 85       	ldd	r31, Y+11	; 0x0b
    295a:	09 95       	icall
    295c:	97 ff       	sbrs	r25, 7
    295e:	09 c0       	rjmp	.+18     	; 0x2972 <fgetc+0x62>
    2960:	2b 81       	ldd	r18, Y+3	; 0x03
    2962:	01 96       	adiw	r24, 0x01	; 1
    2964:	11 f0       	breq	.+4      	; 0x296a <fgetc+0x5a>
    2966:	80 e2       	ldi	r24, 0x20	; 32
    2968:	01 c0       	rjmp	.+2      	; 0x296c <fgetc+0x5c>
    296a:	80 e1       	ldi	r24, 0x10	; 16
    296c:	82 2b       	or	r24, r18
    296e:	8b 83       	std	Y+3, r24	; 0x03
    2970:	08 c0       	rjmp	.+16     	; 0x2982 <fgetc+0x72>
    2972:	2e 81       	ldd	r18, Y+6	; 0x06
    2974:	3f 81       	ldd	r19, Y+7	; 0x07
    2976:	2f 5f       	subi	r18, 0xFF	; 255
    2978:	3f 4f       	sbci	r19, 0xFF	; 255
    297a:	3f 83       	std	Y+7, r19	; 0x07
    297c:	2e 83       	std	Y+6, r18	; 0x06
    297e:	99 27       	eor	r25, r25
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <fgetc+0x76>
    2982:	8f ef       	ldi	r24, 0xFF	; 255
    2984:	9f ef       	ldi	r25, 0xFF	; 255
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	08 95       	ret

0000298c <printf>:
    298c:	a0 e0       	ldi	r26, 0x00	; 0
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	ec ec       	ldi	r30, 0xCC	; 204
    2992:	f4 e1       	ldi	r31, 0x14	; 20
    2994:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__prologue_saves__+0x20>
    2998:	ae 01       	movw	r20, r28
    299a:	4b 5f       	subi	r20, 0xFB	; 251
    299c:	5f 4f       	sbci	r21, 0xFF	; 255
    299e:	fa 01       	movw	r30, r20
    29a0:	61 91       	ld	r22, Z+
    29a2:	71 91       	ld	r23, Z+
    29a4:	af 01       	movw	r20, r30
    29a6:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <__iob+0x2>
    29aa:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__iob+0x3>
    29ae:	0e 94 02 15 	call	0x2a04	; 0x2a04 <vfprintf>
    29b2:	e2 e0       	ldi	r30, 0x02	; 2
    29b4:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__epilogue_restores__+0x20>

000029b8 <printf_P>:
    29b8:	a0 e0       	ldi	r26, 0x00	; 0
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	e2 ee       	ldi	r30, 0xE2	; 226
    29be:	f4 e1       	ldi	r31, 0x14	; 20
    29c0:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__prologue_saves__+0x1c>
    29c4:	ae 01       	movw	r20, r28
    29c6:	49 5f       	subi	r20, 0xF9	; 249
    29c8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ca:	da 01       	movw	r26, r20
    29cc:	6d 91       	ld	r22, X+
    29ce:	7d 91       	ld	r23, X+
    29d0:	ad 01       	movw	r20, r26
    29d2:	05 e6       	ldi	r16, 0x65	; 101
    29d4:	16 e0       	ldi	r17, 0x06	; 6
    29d6:	f8 01       	movw	r30, r16
    29d8:	82 81       	ldd	r24, Z+2	; 0x02
    29da:	93 81       	ldd	r25, Z+3	; 0x03
    29dc:	dc 01       	movw	r26, r24
    29de:	13 96       	adiw	r26, 0x03	; 3
    29e0:	2c 91       	ld	r18, X
    29e2:	13 97       	sbiw	r26, 0x03	; 3
    29e4:	28 60       	ori	r18, 0x08	; 8
    29e6:	13 96       	adiw	r26, 0x03	; 3
    29e8:	2c 93       	st	X, r18
    29ea:	0e 94 02 15 	call	0x2a04	; 0x2a04 <vfprintf>
    29ee:	d8 01       	movw	r26, r16
    29f0:	12 96       	adiw	r26, 0x02	; 2
    29f2:	ed 91       	ld	r30, X+
    29f4:	fc 91       	ld	r31, X
    29f6:	13 97       	sbiw	r26, 0x03	; 3
    29f8:	23 81       	ldd	r18, Z+3	; 0x03
    29fa:	27 7f       	andi	r18, 0xF7	; 247
    29fc:	23 83       	std	Z+3, r18	; 0x03
    29fe:	e4 e0       	ldi	r30, 0x04	; 4
    2a00:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__epilogue_restores__+0x1c>

00002a04 <vfprintf>:
    2a04:	ab e0       	ldi	r26, 0x0B	; 11
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	e8 e0       	ldi	r30, 0x08	; 8
    2a0a:	f5 e1       	ldi	r31, 0x15	; 21
    2a0c:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__prologue_saves__>
    2a10:	6c 01       	movw	r12, r24
    2a12:	7b 01       	movw	r14, r22
    2a14:	8a 01       	movw	r16, r20
    2a16:	fc 01       	movw	r30, r24
    2a18:	17 82       	std	Z+7, r1	; 0x07
    2a1a:	16 82       	std	Z+6, r1	; 0x06
    2a1c:	83 81       	ldd	r24, Z+3	; 0x03
    2a1e:	81 ff       	sbrs	r24, 1
    2a20:	cc c1       	rjmp	.+920    	; 0x2dba <vfprintf+0x3b6>
    2a22:	ce 01       	movw	r24, r28
    2a24:	01 96       	adiw	r24, 0x01	; 1
    2a26:	3c 01       	movw	r6, r24
    2a28:	f6 01       	movw	r30, r12
    2a2a:	93 81       	ldd	r25, Z+3	; 0x03
    2a2c:	f7 01       	movw	r30, r14
    2a2e:	93 fd       	sbrc	r25, 3
    2a30:	85 91       	lpm	r24, Z+
    2a32:	93 ff       	sbrs	r25, 3
    2a34:	81 91       	ld	r24, Z+
    2a36:	7f 01       	movw	r14, r30
    2a38:	88 23       	and	r24, r24
    2a3a:	09 f4       	brne	.+2      	; 0x2a3e <vfprintf+0x3a>
    2a3c:	ba c1       	rjmp	.+884    	; 0x2db2 <vfprintf+0x3ae>
    2a3e:	85 32       	cpi	r24, 0x25	; 37
    2a40:	39 f4       	brne	.+14     	; 0x2a50 <vfprintf+0x4c>
    2a42:	93 fd       	sbrc	r25, 3
    2a44:	85 91       	lpm	r24, Z+
    2a46:	93 ff       	sbrs	r25, 3
    2a48:	81 91       	ld	r24, Z+
    2a4a:	7f 01       	movw	r14, r30
    2a4c:	85 32       	cpi	r24, 0x25	; 37
    2a4e:	29 f4       	brne	.+10     	; 0x2a5a <vfprintf+0x56>
    2a50:	b6 01       	movw	r22, r12
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
    2a58:	e7 cf       	rjmp	.-50     	; 0x2a28 <vfprintf+0x24>
    2a5a:	91 2c       	mov	r9, r1
    2a5c:	21 2c       	mov	r2, r1
    2a5e:	31 2c       	mov	r3, r1
    2a60:	ff e1       	ldi	r31, 0x1F	; 31
    2a62:	f3 15       	cp	r31, r3
    2a64:	d8 f0       	brcs	.+54     	; 0x2a9c <vfprintf+0x98>
    2a66:	8b 32       	cpi	r24, 0x2B	; 43
    2a68:	79 f0       	breq	.+30     	; 0x2a88 <vfprintf+0x84>
    2a6a:	38 f4       	brcc	.+14     	; 0x2a7a <vfprintf+0x76>
    2a6c:	80 32       	cpi	r24, 0x20	; 32
    2a6e:	79 f0       	breq	.+30     	; 0x2a8e <vfprintf+0x8a>
    2a70:	83 32       	cpi	r24, 0x23	; 35
    2a72:	a1 f4       	brne	.+40     	; 0x2a9c <vfprintf+0x98>
    2a74:	23 2d       	mov	r18, r3
    2a76:	20 61       	ori	r18, 0x10	; 16
    2a78:	1d c0       	rjmp	.+58     	; 0x2ab4 <vfprintf+0xb0>
    2a7a:	8d 32       	cpi	r24, 0x2D	; 45
    2a7c:	61 f0       	breq	.+24     	; 0x2a96 <vfprintf+0x92>
    2a7e:	80 33       	cpi	r24, 0x30	; 48
    2a80:	69 f4       	brne	.+26     	; 0x2a9c <vfprintf+0x98>
    2a82:	23 2d       	mov	r18, r3
    2a84:	21 60       	ori	r18, 0x01	; 1
    2a86:	16 c0       	rjmp	.+44     	; 0x2ab4 <vfprintf+0xb0>
    2a88:	83 2d       	mov	r24, r3
    2a8a:	82 60       	ori	r24, 0x02	; 2
    2a8c:	38 2e       	mov	r3, r24
    2a8e:	e3 2d       	mov	r30, r3
    2a90:	e4 60       	ori	r30, 0x04	; 4
    2a92:	3e 2e       	mov	r3, r30
    2a94:	2a c0       	rjmp	.+84     	; 0x2aea <vfprintf+0xe6>
    2a96:	f3 2d       	mov	r31, r3
    2a98:	f8 60       	ori	r31, 0x08	; 8
    2a9a:	1d c0       	rjmp	.+58     	; 0x2ad6 <vfprintf+0xd2>
    2a9c:	37 fc       	sbrc	r3, 7
    2a9e:	2d c0       	rjmp	.+90     	; 0x2afa <vfprintf+0xf6>
    2aa0:	20 ed       	ldi	r18, 0xD0	; 208
    2aa2:	28 0f       	add	r18, r24
    2aa4:	2a 30       	cpi	r18, 0x0A	; 10
    2aa6:	40 f0       	brcs	.+16     	; 0x2ab8 <vfprintf+0xb4>
    2aa8:	8e 32       	cpi	r24, 0x2E	; 46
    2aaa:	b9 f4       	brne	.+46     	; 0x2ada <vfprintf+0xd6>
    2aac:	36 fc       	sbrc	r3, 6
    2aae:	81 c1       	rjmp	.+770    	; 0x2db2 <vfprintf+0x3ae>
    2ab0:	23 2d       	mov	r18, r3
    2ab2:	20 64       	ori	r18, 0x40	; 64
    2ab4:	32 2e       	mov	r3, r18
    2ab6:	19 c0       	rjmp	.+50     	; 0x2aea <vfprintf+0xe6>
    2ab8:	36 fe       	sbrs	r3, 6
    2aba:	06 c0       	rjmp	.+12     	; 0x2ac8 <vfprintf+0xc4>
    2abc:	8a e0       	ldi	r24, 0x0A	; 10
    2abe:	98 9e       	mul	r9, r24
    2ac0:	20 0d       	add	r18, r0
    2ac2:	11 24       	eor	r1, r1
    2ac4:	92 2e       	mov	r9, r18
    2ac6:	11 c0       	rjmp	.+34     	; 0x2aea <vfprintf+0xe6>
    2ac8:	ea e0       	ldi	r30, 0x0A	; 10
    2aca:	2e 9e       	mul	r2, r30
    2acc:	20 0d       	add	r18, r0
    2ace:	11 24       	eor	r1, r1
    2ad0:	22 2e       	mov	r2, r18
    2ad2:	f3 2d       	mov	r31, r3
    2ad4:	f0 62       	ori	r31, 0x20	; 32
    2ad6:	3f 2e       	mov	r3, r31
    2ad8:	08 c0       	rjmp	.+16     	; 0x2aea <vfprintf+0xe6>
    2ada:	8c 36       	cpi	r24, 0x6C	; 108
    2adc:	21 f4       	brne	.+8      	; 0x2ae6 <vfprintf+0xe2>
    2ade:	83 2d       	mov	r24, r3
    2ae0:	80 68       	ori	r24, 0x80	; 128
    2ae2:	38 2e       	mov	r3, r24
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <vfprintf+0xe6>
    2ae6:	88 36       	cpi	r24, 0x68	; 104
    2ae8:	41 f4       	brne	.+16     	; 0x2afa <vfprintf+0xf6>
    2aea:	f7 01       	movw	r30, r14
    2aec:	93 fd       	sbrc	r25, 3
    2aee:	85 91       	lpm	r24, Z+
    2af0:	93 ff       	sbrs	r25, 3
    2af2:	81 91       	ld	r24, Z+
    2af4:	7f 01       	movw	r14, r30
    2af6:	81 11       	cpse	r24, r1
    2af8:	b3 cf       	rjmp	.-154    	; 0x2a60 <vfprintf+0x5c>
    2afa:	98 2f       	mov	r25, r24
    2afc:	9f 7d       	andi	r25, 0xDF	; 223
    2afe:	95 54       	subi	r25, 0x45	; 69
    2b00:	93 30       	cpi	r25, 0x03	; 3
    2b02:	28 f4       	brcc	.+10     	; 0x2b0e <vfprintf+0x10a>
    2b04:	0c 5f       	subi	r16, 0xFC	; 252
    2b06:	1f 4f       	sbci	r17, 0xFF	; 255
    2b08:	9f e3       	ldi	r25, 0x3F	; 63
    2b0a:	99 83       	std	Y+1, r25	; 0x01
    2b0c:	0d c0       	rjmp	.+26     	; 0x2b28 <vfprintf+0x124>
    2b0e:	83 36       	cpi	r24, 0x63	; 99
    2b10:	31 f0       	breq	.+12     	; 0x2b1e <vfprintf+0x11a>
    2b12:	83 37       	cpi	r24, 0x73	; 115
    2b14:	71 f0       	breq	.+28     	; 0x2b32 <vfprintf+0x12e>
    2b16:	83 35       	cpi	r24, 0x53	; 83
    2b18:	09 f0       	breq	.+2      	; 0x2b1c <vfprintf+0x118>
    2b1a:	59 c0       	rjmp	.+178    	; 0x2bce <vfprintf+0x1ca>
    2b1c:	21 c0       	rjmp	.+66     	; 0x2b60 <vfprintf+0x15c>
    2b1e:	f8 01       	movw	r30, r16
    2b20:	80 81       	ld	r24, Z
    2b22:	89 83       	std	Y+1, r24	; 0x01
    2b24:	0e 5f       	subi	r16, 0xFE	; 254
    2b26:	1f 4f       	sbci	r17, 0xFF	; 255
    2b28:	88 24       	eor	r8, r8
    2b2a:	83 94       	inc	r8
    2b2c:	91 2c       	mov	r9, r1
    2b2e:	53 01       	movw	r10, r6
    2b30:	13 c0       	rjmp	.+38     	; 0x2b58 <vfprintf+0x154>
    2b32:	28 01       	movw	r4, r16
    2b34:	f2 e0       	ldi	r31, 0x02	; 2
    2b36:	4f 0e       	add	r4, r31
    2b38:	51 1c       	adc	r5, r1
    2b3a:	f8 01       	movw	r30, r16
    2b3c:	a0 80       	ld	r10, Z
    2b3e:	b1 80       	ldd	r11, Z+1	; 0x01
    2b40:	36 fe       	sbrs	r3, 6
    2b42:	03 c0       	rjmp	.+6      	; 0x2b4a <vfprintf+0x146>
    2b44:	69 2d       	mov	r22, r9
    2b46:	70 e0       	ldi	r23, 0x00	; 0
    2b48:	02 c0       	rjmp	.+4      	; 0x2b4e <vfprintf+0x14a>
    2b4a:	6f ef       	ldi	r22, 0xFF	; 255
    2b4c:	7f ef       	ldi	r23, 0xFF	; 255
    2b4e:	c5 01       	movw	r24, r10
    2b50:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <strnlen>
    2b54:	4c 01       	movw	r8, r24
    2b56:	82 01       	movw	r16, r4
    2b58:	f3 2d       	mov	r31, r3
    2b5a:	ff 77       	andi	r31, 0x7F	; 127
    2b5c:	3f 2e       	mov	r3, r31
    2b5e:	16 c0       	rjmp	.+44     	; 0x2b8c <vfprintf+0x188>
    2b60:	28 01       	movw	r4, r16
    2b62:	22 e0       	ldi	r18, 0x02	; 2
    2b64:	42 0e       	add	r4, r18
    2b66:	51 1c       	adc	r5, r1
    2b68:	f8 01       	movw	r30, r16
    2b6a:	a0 80       	ld	r10, Z
    2b6c:	b1 80       	ldd	r11, Z+1	; 0x01
    2b6e:	36 fe       	sbrs	r3, 6
    2b70:	03 c0       	rjmp	.+6      	; 0x2b78 <vfprintf+0x174>
    2b72:	69 2d       	mov	r22, r9
    2b74:	70 e0       	ldi	r23, 0x00	; 0
    2b76:	02 c0       	rjmp	.+4      	; 0x2b7c <vfprintf+0x178>
    2b78:	6f ef       	ldi	r22, 0xFF	; 255
    2b7a:	7f ef       	ldi	r23, 0xFF	; 255
    2b7c:	c5 01       	movw	r24, r10
    2b7e:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <strnlen_P>
    2b82:	4c 01       	movw	r8, r24
    2b84:	f3 2d       	mov	r31, r3
    2b86:	f0 68       	ori	r31, 0x80	; 128
    2b88:	3f 2e       	mov	r3, r31
    2b8a:	82 01       	movw	r16, r4
    2b8c:	33 fc       	sbrc	r3, 3
    2b8e:	1b c0       	rjmp	.+54     	; 0x2bc6 <vfprintf+0x1c2>
    2b90:	82 2d       	mov	r24, r2
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	88 16       	cp	r8, r24
    2b96:	99 06       	cpc	r9, r25
    2b98:	b0 f4       	brcc	.+44     	; 0x2bc6 <vfprintf+0x1c2>
    2b9a:	b6 01       	movw	r22, r12
    2b9c:	80 e2       	ldi	r24, 0x20	; 32
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
    2ba4:	2a 94       	dec	r2
    2ba6:	f4 cf       	rjmp	.-24     	; 0x2b90 <vfprintf+0x18c>
    2ba8:	f5 01       	movw	r30, r10
    2baa:	37 fc       	sbrc	r3, 7
    2bac:	85 91       	lpm	r24, Z+
    2bae:	37 fe       	sbrs	r3, 7
    2bb0:	81 91       	ld	r24, Z+
    2bb2:	5f 01       	movw	r10, r30
    2bb4:	b6 01       	movw	r22, r12
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
    2bbc:	21 10       	cpse	r2, r1
    2bbe:	2a 94       	dec	r2
    2bc0:	21 e0       	ldi	r18, 0x01	; 1
    2bc2:	82 1a       	sub	r8, r18
    2bc4:	91 08       	sbc	r9, r1
    2bc6:	81 14       	cp	r8, r1
    2bc8:	91 04       	cpc	r9, r1
    2bca:	71 f7       	brne	.-36     	; 0x2ba8 <vfprintf+0x1a4>
    2bcc:	e8 c0       	rjmp	.+464    	; 0x2d9e <vfprintf+0x39a>
    2bce:	84 36       	cpi	r24, 0x64	; 100
    2bd0:	11 f0       	breq	.+4      	; 0x2bd6 <vfprintf+0x1d2>
    2bd2:	89 36       	cpi	r24, 0x69	; 105
    2bd4:	41 f5       	brne	.+80     	; 0x2c26 <vfprintf+0x222>
    2bd6:	f8 01       	movw	r30, r16
    2bd8:	37 fe       	sbrs	r3, 7
    2bda:	07 c0       	rjmp	.+14     	; 0x2bea <vfprintf+0x1e6>
    2bdc:	60 81       	ld	r22, Z
    2bde:	71 81       	ldd	r23, Z+1	; 0x01
    2be0:	82 81       	ldd	r24, Z+2	; 0x02
    2be2:	93 81       	ldd	r25, Z+3	; 0x03
    2be4:	0c 5f       	subi	r16, 0xFC	; 252
    2be6:	1f 4f       	sbci	r17, 0xFF	; 255
    2be8:	08 c0       	rjmp	.+16     	; 0x2bfa <vfprintf+0x1f6>
    2bea:	60 81       	ld	r22, Z
    2bec:	71 81       	ldd	r23, Z+1	; 0x01
    2bee:	07 2e       	mov	r0, r23
    2bf0:	00 0c       	add	r0, r0
    2bf2:	88 0b       	sbc	r24, r24
    2bf4:	99 0b       	sbc	r25, r25
    2bf6:	0e 5f       	subi	r16, 0xFE	; 254
    2bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bfa:	f3 2d       	mov	r31, r3
    2bfc:	ff 76       	andi	r31, 0x6F	; 111
    2bfe:	3f 2e       	mov	r3, r31
    2c00:	97 ff       	sbrs	r25, 7
    2c02:	09 c0       	rjmp	.+18     	; 0x2c16 <vfprintf+0x212>
    2c04:	90 95       	com	r25
    2c06:	80 95       	com	r24
    2c08:	70 95       	com	r23
    2c0a:	61 95       	neg	r22
    2c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c10:	9f 4f       	sbci	r25, 0xFF	; 255
    2c12:	f0 68       	ori	r31, 0x80	; 128
    2c14:	3f 2e       	mov	r3, r31
    2c16:	2a e0       	ldi	r18, 0x0A	; 10
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	a3 01       	movw	r20, r6
    2c1c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__ultoa_invert>
    2c20:	88 2e       	mov	r8, r24
    2c22:	86 18       	sub	r8, r6
    2c24:	45 c0       	rjmp	.+138    	; 0x2cb0 <vfprintf+0x2ac>
    2c26:	85 37       	cpi	r24, 0x75	; 117
    2c28:	31 f4       	brne	.+12     	; 0x2c36 <vfprintf+0x232>
    2c2a:	23 2d       	mov	r18, r3
    2c2c:	2f 7e       	andi	r18, 0xEF	; 239
    2c2e:	b2 2e       	mov	r11, r18
    2c30:	2a e0       	ldi	r18, 0x0A	; 10
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	25 c0       	rjmp	.+74     	; 0x2c80 <vfprintf+0x27c>
    2c36:	93 2d       	mov	r25, r3
    2c38:	99 7f       	andi	r25, 0xF9	; 249
    2c3a:	b9 2e       	mov	r11, r25
    2c3c:	8f 36       	cpi	r24, 0x6F	; 111
    2c3e:	c1 f0       	breq	.+48     	; 0x2c70 <vfprintf+0x26c>
    2c40:	18 f4       	brcc	.+6      	; 0x2c48 <vfprintf+0x244>
    2c42:	88 35       	cpi	r24, 0x58	; 88
    2c44:	79 f0       	breq	.+30     	; 0x2c64 <vfprintf+0x260>
    2c46:	b5 c0       	rjmp	.+362    	; 0x2db2 <vfprintf+0x3ae>
    2c48:	80 37       	cpi	r24, 0x70	; 112
    2c4a:	19 f0       	breq	.+6      	; 0x2c52 <vfprintf+0x24e>
    2c4c:	88 37       	cpi	r24, 0x78	; 120
    2c4e:	21 f0       	breq	.+8      	; 0x2c58 <vfprintf+0x254>
    2c50:	b0 c0       	rjmp	.+352    	; 0x2db2 <vfprintf+0x3ae>
    2c52:	e9 2f       	mov	r30, r25
    2c54:	e0 61       	ori	r30, 0x10	; 16
    2c56:	be 2e       	mov	r11, r30
    2c58:	b4 fe       	sbrs	r11, 4
    2c5a:	0d c0       	rjmp	.+26     	; 0x2c76 <vfprintf+0x272>
    2c5c:	fb 2d       	mov	r31, r11
    2c5e:	f4 60       	ori	r31, 0x04	; 4
    2c60:	bf 2e       	mov	r11, r31
    2c62:	09 c0       	rjmp	.+18     	; 0x2c76 <vfprintf+0x272>
    2c64:	34 fe       	sbrs	r3, 4
    2c66:	0a c0       	rjmp	.+20     	; 0x2c7c <vfprintf+0x278>
    2c68:	29 2f       	mov	r18, r25
    2c6a:	26 60       	ori	r18, 0x06	; 6
    2c6c:	b2 2e       	mov	r11, r18
    2c6e:	06 c0       	rjmp	.+12     	; 0x2c7c <vfprintf+0x278>
    2c70:	28 e0       	ldi	r18, 0x08	; 8
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	05 c0       	rjmp	.+10     	; 0x2c80 <vfprintf+0x27c>
    2c76:	20 e1       	ldi	r18, 0x10	; 16
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <vfprintf+0x27c>
    2c7c:	20 e1       	ldi	r18, 0x10	; 16
    2c7e:	32 e0       	ldi	r19, 0x02	; 2
    2c80:	f8 01       	movw	r30, r16
    2c82:	b7 fe       	sbrs	r11, 7
    2c84:	07 c0       	rjmp	.+14     	; 0x2c94 <vfprintf+0x290>
    2c86:	60 81       	ld	r22, Z
    2c88:	71 81       	ldd	r23, Z+1	; 0x01
    2c8a:	82 81       	ldd	r24, Z+2	; 0x02
    2c8c:	93 81       	ldd	r25, Z+3	; 0x03
    2c8e:	0c 5f       	subi	r16, 0xFC	; 252
    2c90:	1f 4f       	sbci	r17, 0xFF	; 255
    2c92:	06 c0       	rjmp	.+12     	; 0x2ca0 <vfprintf+0x29c>
    2c94:	60 81       	ld	r22, Z
    2c96:	71 81       	ldd	r23, Z+1	; 0x01
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	0e 5f       	subi	r16, 0xFE	; 254
    2c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca0:	a3 01       	movw	r20, r6
    2ca2:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__ultoa_invert>
    2ca6:	88 2e       	mov	r8, r24
    2ca8:	86 18       	sub	r8, r6
    2caa:	fb 2d       	mov	r31, r11
    2cac:	ff 77       	andi	r31, 0x7F	; 127
    2cae:	3f 2e       	mov	r3, r31
    2cb0:	36 fe       	sbrs	r3, 6
    2cb2:	0d c0       	rjmp	.+26     	; 0x2cce <vfprintf+0x2ca>
    2cb4:	23 2d       	mov	r18, r3
    2cb6:	2e 7f       	andi	r18, 0xFE	; 254
    2cb8:	a2 2e       	mov	r10, r18
    2cba:	89 14       	cp	r8, r9
    2cbc:	58 f4       	brcc	.+22     	; 0x2cd4 <vfprintf+0x2d0>
    2cbe:	34 fe       	sbrs	r3, 4
    2cc0:	0b c0       	rjmp	.+22     	; 0x2cd8 <vfprintf+0x2d4>
    2cc2:	32 fc       	sbrc	r3, 2
    2cc4:	09 c0       	rjmp	.+18     	; 0x2cd8 <vfprintf+0x2d4>
    2cc6:	83 2d       	mov	r24, r3
    2cc8:	8e 7e       	andi	r24, 0xEE	; 238
    2cca:	a8 2e       	mov	r10, r24
    2ccc:	05 c0       	rjmp	.+10     	; 0x2cd8 <vfprintf+0x2d4>
    2cce:	b8 2c       	mov	r11, r8
    2cd0:	a3 2c       	mov	r10, r3
    2cd2:	03 c0       	rjmp	.+6      	; 0x2cda <vfprintf+0x2d6>
    2cd4:	b8 2c       	mov	r11, r8
    2cd6:	01 c0       	rjmp	.+2      	; 0x2cda <vfprintf+0x2d6>
    2cd8:	b9 2c       	mov	r11, r9
    2cda:	a4 fe       	sbrs	r10, 4
    2cdc:	0f c0       	rjmp	.+30     	; 0x2cfc <vfprintf+0x2f8>
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e8 0d       	add	r30, r8
    2ce2:	f1 1d       	adc	r31, r1
    2ce4:	80 81       	ld	r24, Z
    2ce6:	80 33       	cpi	r24, 0x30	; 48
    2ce8:	21 f4       	brne	.+8      	; 0x2cf2 <vfprintf+0x2ee>
    2cea:	9a 2d       	mov	r25, r10
    2cec:	99 7e       	andi	r25, 0xE9	; 233
    2cee:	a9 2e       	mov	r10, r25
    2cf0:	09 c0       	rjmp	.+18     	; 0x2d04 <vfprintf+0x300>
    2cf2:	a2 fe       	sbrs	r10, 2
    2cf4:	06 c0       	rjmp	.+12     	; 0x2d02 <vfprintf+0x2fe>
    2cf6:	b3 94       	inc	r11
    2cf8:	b3 94       	inc	r11
    2cfa:	04 c0       	rjmp	.+8      	; 0x2d04 <vfprintf+0x300>
    2cfc:	8a 2d       	mov	r24, r10
    2cfe:	86 78       	andi	r24, 0x86	; 134
    2d00:	09 f0       	breq	.+2      	; 0x2d04 <vfprintf+0x300>
    2d02:	b3 94       	inc	r11
    2d04:	a3 fc       	sbrc	r10, 3
    2d06:	11 c0       	rjmp	.+34     	; 0x2d2a <vfprintf+0x326>
    2d08:	a0 fe       	sbrs	r10, 0
    2d0a:	06 c0       	rjmp	.+12     	; 0x2d18 <vfprintf+0x314>
    2d0c:	b2 14       	cp	r11, r2
    2d0e:	88 f4       	brcc	.+34     	; 0x2d32 <vfprintf+0x32e>
    2d10:	28 0c       	add	r2, r8
    2d12:	92 2c       	mov	r9, r2
    2d14:	9b 18       	sub	r9, r11
    2d16:	0e c0       	rjmp	.+28     	; 0x2d34 <vfprintf+0x330>
    2d18:	b2 14       	cp	r11, r2
    2d1a:	60 f4       	brcc	.+24     	; 0x2d34 <vfprintf+0x330>
    2d1c:	b6 01       	movw	r22, r12
    2d1e:	80 e2       	ldi	r24, 0x20	; 32
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
    2d26:	b3 94       	inc	r11
    2d28:	f7 cf       	rjmp	.-18     	; 0x2d18 <vfprintf+0x314>
    2d2a:	b2 14       	cp	r11, r2
    2d2c:	18 f4       	brcc	.+6      	; 0x2d34 <vfprintf+0x330>
    2d2e:	2b 18       	sub	r2, r11
    2d30:	02 c0       	rjmp	.+4      	; 0x2d36 <vfprintf+0x332>
    2d32:	98 2c       	mov	r9, r8
    2d34:	21 2c       	mov	r2, r1
    2d36:	a4 fe       	sbrs	r10, 4
    2d38:	10 c0       	rjmp	.+32     	; 0x2d5a <vfprintf+0x356>
    2d3a:	b6 01       	movw	r22, r12
    2d3c:	80 e3       	ldi	r24, 0x30	; 48
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
    2d44:	a2 fe       	sbrs	r10, 2
    2d46:	17 c0       	rjmp	.+46     	; 0x2d76 <vfprintf+0x372>
    2d48:	a1 fc       	sbrc	r10, 1
    2d4a:	03 c0       	rjmp	.+6      	; 0x2d52 <vfprintf+0x34e>
    2d4c:	88 e7       	ldi	r24, 0x78	; 120
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	02 c0       	rjmp	.+4      	; 0x2d56 <vfprintf+0x352>
    2d52:	88 e5       	ldi	r24, 0x58	; 88
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	b6 01       	movw	r22, r12
    2d58:	0c c0       	rjmp	.+24     	; 0x2d72 <vfprintf+0x36e>
    2d5a:	8a 2d       	mov	r24, r10
    2d5c:	86 78       	andi	r24, 0x86	; 134
    2d5e:	59 f0       	breq	.+22     	; 0x2d76 <vfprintf+0x372>
    2d60:	a1 fe       	sbrs	r10, 1
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <vfprintf+0x364>
    2d64:	8b e2       	ldi	r24, 0x2B	; 43
    2d66:	01 c0       	rjmp	.+2      	; 0x2d6a <vfprintf+0x366>
    2d68:	80 e2       	ldi	r24, 0x20	; 32
    2d6a:	a7 fc       	sbrc	r10, 7
    2d6c:	8d e2       	ldi	r24, 0x2D	; 45
    2d6e:	b6 01       	movw	r22, r12
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
    2d76:	89 14       	cp	r8, r9
    2d78:	38 f4       	brcc	.+14     	; 0x2d88 <vfprintf+0x384>
    2d7a:	b6 01       	movw	r22, r12
    2d7c:	80 e3       	ldi	r24, 0x30	; 48
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
    2d84:	9a 94       	dec	r9
    2d86:	f7 cf       	rjmp	.-18     	; 0x2d76 <vfprintf+0x372>
    2d88:	8a 94       	dec	r8
    2d8a:	f3 01       	movw	r30, r6
    2d8c:	e8 0d       	add	r30, r8
    2d8e:	f1 1d       	adc	r31, r1
    2d90:	80 81       	ld	r24, Z
    2d92:	b6 01       	movw	r22, r12
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
    2d9a:	81 10       	cpse	r8, r1
    2d9c:	f5 cf       	rjmp	.-22     	; 0x2d88 <vfprintf+0x384>
    2d9e:	22 20       	and	r2, r2
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <vfprintf+0x3a0>
    2da2:	42 ce       	rjmp	.-892    	; 0x2a28 <vfprintf+0x24>
    2da4:	b6 01       	movw	r22, r12
    2da6:	80 e2       	ldi	r24, 0x20	; 32
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
    2dae:	2a 94       	dec	r2
    2db0:	f6 cf       	rjmp	.-20     	; 0x2d9e <vfprintf+0x39a>
    2db2:	f6 01       	movw	r30, r12
    2db4:	86 81       	ldd	r24, Z+6	; 0x06
    2db6:	97 81       	ldd	r25, Z+7	; 0x07
    2db8:	02 c0       	rjmp	.+4      	; 0x2dbe <vfprintf+0x3ba>
    2dba:	8f ef       	ldi	r24, 0xFF	; 255
    2dbc:	9f ef       	ldi	r25, 0xFF	; 255
    2dbe:	2b 96       	adiw	r28, 0x0b	; 11
    2dc0:	e2 e1       	ldi	r30, 0x12	; 18
    2dc2:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__epilogue_restores__>

00002dc6 <strnlen_P>:
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	05 90       	lpm	r0, Z+
    2dca:	61 50       	subi	r22, 0x01	; 1
    2dcc:	70 40       	sbci	r23, 0x00	; 0
    2dce:	01 10       	cpse	r0, r1
    2dd0:	d8 f7       	brcc	.-10     	; 0x2dc8 <strnlen_P+0x2>
    2dd2:	80 95       	com	r24
    2dd4:	90 95       	com	r25
    2dd6:	8e 0f       	add	r24, r30
    2dd8:	9f 1f       	adc	r25, r31
    2dda:	08 95       	ret

00002ddc <strnlen>:
    2ddc:	fc 01       	movw	r30, r24
    2dde:	61 50       	subi	r22, 0x01	; 1
    2de0:	70 40       	sbci	r23, 0x00	; 0
    2de2:	01 90       	ld	r0, Z+
    2de4:	01 10       	cpse	r0, r1
    2de6:	d8 f7       	brcc	.-10     	; 0x2dde <strnlen+0x2>
    2de8:	80 95       	com	r24
    2dea:	90 95       	com	r25
    2dec:	8e 0f       	add	r24, r30
    2dee:	9f 1f       	adc	r25, r31
    2df0:	08 95       	ret

00002df2 <fputc>:
    2df2:	0f 93       	push	r16
    2df4:	1f 93       	push	r17
    2df6:	cf 93       	push	r28
    2df8:	df 93       	push	r29
    2dfa:	fb 01       	movw	r30, r22
    2dfc:	23 81       	ldd	r18, Z+3	; 0x03
    2dfe:	21 fd       	sbrc	r18, 1
    2e00:	03 c0       	rjmp	.+6      	; 0x2e08 <fputc+0x16>
    2e02:	8f ef       	ldi	r24, 0xFF	; 255
    2e04:	9f ef       	ldi	r25, 0xFF	; 255
    2e06:	2c c0       	rjmp	.+88     	; 0x2e60 <fputc+0x6e>
    2e08:	22 ff       	sbrs	r18, 2
    2e0a:	16 c0       	rjmp	.+44     	; 0x2e38 <fputc+0x46>
    2e0c:	46 81       	ldd	r20, Z+6	; 0x06
    2e0e:	57 81       	ldd	r21, Z+7	; 0x07
    2e10:	24 81       	ldd	r18, Z+4	; 0x04
    2e12:	35 81       	ldd	r19, Z+5	; 0x05
    2e14:	42 17       	cp	r20, r18
    2e16:	53 07       	cpc	r21, r19
    2e18:	44 f4       	brge	.+16     	; 0x2e2a <fputc+0x38>
    2e1a:	a0 81       	ld	r26, Z
    2e1c:	b1 81       	ldd	r27, Z+1	; 0x01
    2e1e:	9d 01       	movw	r18, r26
    2e20:	2f 5f       	subi	r18, 0xFF	; 255
    2e22:	3f 4f       	sbci	r19, 0xFF	; 255
    2e24:	31 83       	std	Z+1, r19	; 0x01
    2e26:	20 83       	st	Z, r18
    2e28:	8c 93       	st	X, r24
    2e2a:	26 81       	ldd	r18, Z+6	; 0x06
    2e2c:	37 81       	ldd	r19, Z+7	; 0x07
    2e2e:	2f 5f       	subi	r18, 0xFF	; 255
    2e30:	3f 4f       	sbci	r19, 0xFF	; 255
    2e32:	37 83       	std	Z+7, r19	; 0x07
    2e34:	26 83       	std	Z+6, r18	; 0x06
    2e36:	14 c0       	rjmp	.+40     	; 0x2e60 <fputc+0x6e>
    2e38:	8b 01       	movw	r16, r22
    2e3a:	ec 01       	movw	r28, r24
    2e3c:	fb 01       	movw	r30, r22
    2e3e:	00 84       	ldd	r0, Z+8	; 0x08
    2e40:	f1 85       	ldd	r31, Z+9	; 0x09
    2e42:	e0 2d       	mov	r30, r0
    2e44:	09 95       	icall
    2e46:	89 2b       	or	r24, r25
    2e48:	e1 f6       	brne	.-72     	; 0x2e02 <fputc+0x10>
    2e4a:	d8 01       	movw	r26, r16
    2e4c:	16 96       	adiw	r26, 0x06	; 6
    2e4e:	8d 91       	ld	r24, X+
    2e50:	9c 91       	ld	r25, X
    2e52:	17 97       	sbiw	r26, 0x07	; 7
    2e54:	01 96       	adiw	r24, 0x01	; 1
    2e56:	17 96       	adiw	r26, 0x07	; 7
    2e58:	9c 93       	st	X, r25
    2e5a:	8e 93       	st	-X, r24
    2e5c:	16 97       	sbiw	r26, 0x06	; 6
    2e5e:	ce 01       	movw	r24, r28
    2e60:	df 91       	pop	r29
    2e62:	cf 91       	pop	r28
    2e64:	1f 91       	pop	r17
    2e66:	0f 91       	pop	r16
    2e68:	08 95       	ret

00002e6a <__ultoa_invert>:
    2e6a:	fa 01       	movw	r30, r20
    2e6c:	aa 27       	eor	r26, r26
    2e6e:	28 30       	cpi	r18, 0x08	; 8
    2e70:	51 f1       	breq	.+84     	; 0x2ec6 <__ultoa_invert+0x5c>
    2e72:	20 31       	cpi	r18, 0x10	; 16
    2e74:	81 f1       	breq	.+96     	; 0x2ed6 <__ultoa_invert+0x6c>
    2e76:	e8 94       	clt
    2e78:	6f 93       	push	r22
    2e7a:	6e 7f       	andi	r22, 0xFE	; 254
    2e7c:	6e 5f       	subi	r22, 0xFE	; 254
    2e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e80:	8f 4f       	sbci	r24, 0xFF	; 255
    2e82:	9f 4f       	sbci	r25, 0xFF	; 255
    2e84:	af 4f       	sbci	r26, 0xFF	; 255
    2e86:	b1 e0       	ldi	r27, 0x01	; 1
    2e88:	3e d0       	rcall	.+124    	; 0x2f06 <__ultoa_invert+0x9c>
    2e8a:	b4 e0       	ldi	r27, 0x04	; 4
    2e8c:	3c d0       	rcall	.+120    	; 0x2f06 <__ultoa_invert+0x9c>
    2e8e:	67 0f       	add	r22, r23
    2e90:	78 1f       	adc	r23, r24
    2e92:	89 1f       	adc	r24, r25
    2e94:	9a 1f       	adc	r25, r26
    2e96:	a1 1d       	adc	r26, r1
    2e98:	68 0f       	add	r22, r24
    2e9a:	79 1f       	adc	r23, r25
    2e9c:	8a 1f       	adc	r24, r26
    2e9e:	91 1d       	adc	r25, r1
    2ea0:	a1 1d       	adc	r26, r1
    2ea2:	6a 0f       	add	r22, r26
    2ea4:	71 1d       	adc	r23, r1
    2ea6:	81 1d       	adc	r24, r1
    2ea8:	91 1d       	adc	r25, r1
    2eaa:	a1 1d       	adc	r26, r1
    2eac:	20 d0       	rcall	.+64     	; 0x2eee <__ultoa_invert+0x84>
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <__ultoa_invert+0x48>
    2eb0:	68 94       	set
    2eb2:	3f 91       	pop	r19
    2eb4:	2a e0       	ldi	r18, 0x0A	; 10
    2eb6:	26 9f       	mul	r18, r22
    2eb8:	11 24       	eor	r1, r1
    2eba:	30 19       	sub	r19, r0
    2ebc:	30 5d       	subi	r19, 0xD0	; 208
    2ebe:	31 93       	st	Z+, r19
    2ec0:	de f6       	brtc	.-74     	; 0x2e78 <__ultoa_invert+0xe>
    2ec2:	cf 01       	movw	r24, r30
    2ec4:	08 95       	ret
    2ec6:	46 2f       	mov	r20, r22
    2ec8:	47 70       	andi	r20, 0x07	; 7
    2eca:	40 5d       	subi	r20, 0xD0	; 208
    2ecc:	41 93       	st	Z+, r20
    2ece:	b3 e0       	ldi	r27, 0x03	; 3
    2ed0:	0f d0       	rcall	.+30     	; 0x2ef0 <__ultoa_invert+0x86>
    2ed2:	c9 f7       	brne	.-14     	; 0x2ec6 <__ultoa_invert+0x5c>
    2ed4:	f6 cf       	rjmp	.-20     	; 0x2ec2 <__ultoa_invert+0x58>
    2ed6:	46 2f       	mov	r20, r22
    2ed8:	4f 70       	andi	r20, 0x0F	; 15
    2eda:	40 5d       	subi	r20, 0xD0	; 208
    2edc:	4a 33       	cpi	r20, 0x3A	; 58
    2ede:	18 f0       	brcs	.+6      	; 0x2ee6 <__ultoa_invert+0x7c>
    2ee0:	49 5d       	subi	r20, 0xD9	; 217
    2ee2:	31 fd       	sbrc	r19, 1
    2ee4:	40 52       	subi	r20, 0x20	; 32
    2ee6:	41 93       	st	Z+, r20
    2ee8:	02 d0       	rcall	.+4      	; 0x2eee <__ultoa_invert+0x84>
    2eea:	a9 f7       	brne	.-22     	; 0x2ed6 <__ultoa_invert+0x6c>
    2eec:	ea cf       	rjmp	.-44     	; 0x2ec2 <__ultoa_invert+0x58>
    2eee:	b4 e0       	ldi	r27, 0x04	; 4
    2ef0:	a6 95       	lsr	r26
    2ef2:	97 95       	ror	r25
    2ef4:	87 95       	ror	r24
    2ef6:	77 95       	ror	r23
    2ef8:	67 95       	ror	r22
    2efa:	ba 95       	dec	r27
    2efc:	c9 f7       	brne	.-14     	; 0x2ef0 <__ultoa_invert+0x86>
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	61 05       	cpc	r22, r1
    2f02:	71 05       	cpc	r23, r1
    2f04:	08 95       	ret
    2f06:	9b 01       	movw	r18, r22
    2f08:	ac 01       	movw	r20, r24
    2f0a:	0a 2e       	mov	r0, r26
    2f0c:	06 94       	lsr	r0
    2f0e:	57 95       	ror	r21
    2f10:	47 95       	ror	r20
    2f12:	37 95       	ror	r19
    2f14:	27 95       	ror	r18
    2f16:	ba 95       	dec	r27
    2f18:	c9 f7       	brne	.-14     	; 0x2f0c <__ultoa_invert+0xa2>
    2f1a:	62 0f       	add	r22, r18
    2f1c:	73 1f       	adc	r23, r19
    2f1e:	84 1f       	adc	r24, r20
    2f20:	95 1f       	adc	r25, r21
    2f22:	a0 1d       	adc	r26, r0
    2f24:	08 95       	ret

00002f26 <__prologue_saves__>:
    2f26:	2f 92       	push	r2
    2f28:	3f 92       	push	r3
    2f2a:	4f 92       	push	r4
    2f2c:	5f 92       	push	r5
    2f2e:	6f 92       	push	r6
    2f30:	7f 92       	push	r7
    2f32:	8f 92       	push	r8
    2f34:	9f 92       	push	r9
    2f36:	af 92       	push	r10
    2f38:	bf 92       	push	r11
    2f3a:	cf 92       	push	r12
    2f3c:	df 92       	push	r13
    2f3e:	ef 92       	push	r14
    2f40:	ff 92       	push	r15
    2f42:	0f 93       	push	r16
    2f44:	1f 93       	push	r17
    2f46:	cf 93       	push	r28
    2f48:	df 93       	push	r29
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	ca 1b       	sub	r28, r26
    2f50:	db 0b       	sbc	r29, r27
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	f8 94       	cli
    2f56:	de bf       	out	0x3e, r29	; 62
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	cd bf       	out	0x3d, r28	; 61
    2f5c:	09 94       	ijmp

00002f5e <__epilogue_restores__>:
    2f5e:	2a 88       	ldd	r2, Y+18	; 0x12
    2f60:	39 88       	ldd	r3, Y+17	; 0x11
    2f62:	48 88       	ldd	r4, Y+16	; 0x10
    2f64:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f66:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f68:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f70:	b9 84       	ldd	r11, Y+9	; 0x09
    2f72:	c8 84       	ldd	r12, Y+8	; 0x08
    2f74:	df 80       	ldd	r13, Y+7	; 0x07
    2f76:	ee 80       	ldd	r14, Y+6	; 0x06
    2f78:	fd 80       	ldd	r15, Y+5	; 0x05
    2f7a:	0c 81       	ldd	r16, Y+4	; 0x04
    2f7c:	1b 81       	ldd	r17, Y+3	; 0x03
    2f7e:	aa 81       	ldd	r26, Y+2	; 0x02
    2f80:	b9 81       	ldd	r27, Y+1	; 0x01
    2f82:	ce 0f       	add	r28, r30
    2f84:	d1 1d       	adc	r29, r1
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	f8 94       	cli
    2f8a:	de bf       	out	0x3e, r29	; 62
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	cd bf       	out	0x3d, r28	; 61
    2f90:	ed 01       	movw	r28, r26
    2f92:	08 95       	ret

00002f94 <_exit>:
    2f94:	f8 94       	cli

00002f96 <__stop_program>:
    2f96:	ff cf       	rjmp	.-2      	; 0x2f96 <__stop_program>
