
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003dc  00800100  00002946  000029da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002946  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013c  008004dc  008004dc  00002db6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002db6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00002e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003bbc  00000000  00000000  0000315c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ab  00000000  00000000  00006d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021d4  00000000  00000000  00007fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000998  00000000  00000000  0000a198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cca  00000000  00000000  0000ab30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002393  00000000  00000000  0000b7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000db8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__ctors_end>
       4:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       8:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      10:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      14:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_5>
      18:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      1c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      20:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      24:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__vector_9>
      28:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      2c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      30:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      34:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      38:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      3c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      40:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__vector_16>
      44:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      48:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      4c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      50:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__vector_20>
      54:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__vector_21>
      58:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      5c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      60:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      64:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      68:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      6c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      70:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      74:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      78:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2336>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2273>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 20 43 61 69 6c 69 6e 20 44 65 6c 67      by  Cailin Delg
      d4:	61 64 6f 20 2d 20 34 38 30 32 37 39 34 32 00        ado - 48027942.

000000e3 <__c.2271>:
      e3:	20 5c 24 24 20 20 20 5c 24 24 20 20 20 20 20 5c      \$$   \$$     \
      f3:	24 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20     $     \$$   \$$ 
     103:	20 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20           \$$   \$$ 
     113:	20 5c 24 24 24 24 24 24 24 20 5c 24 24 20 20 20      \$$$$$$$ \$$   
     123:	20 20 20 20 20 5c 24 24 24 24 24 24 00                   \$$$$$$.

00000130 <__c.2269>:
     130:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 5c 24     | $$  | $$    \$
     140:	24 24 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20     $$   | $$  | $$ 
     150:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     160:	5c 24 24 20 20 20 20 20 5c 7c 20 24 24 20 20 20     \$$     \| $$   
     170:	20 20 20 20 5c 24 24 20 20 20 20 24 24 00               \$$    $$.

0000017e <__c.2267>:
     17e:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 5c 24 24     | $$  | $$   \$$
     18e:	20 24 24 20 20 7c 20 24 24 20 20 7c 20 24 24 20      $$  | $$  | $$ 
     19e:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 7c          | $$  | $$|
     1ae:	20 24 24 24 24 24 24 24 24 7c 20 24 24 20 20 20      $$$$$$$$| $$   
     1be:	20 20 20 7c 20 24 24 5f 5f 2f 20 24 24 00              | $$__/ $$.

000001cc <__c.2265>:
     1cc:	7c 20 24 24 24 24 24 24 24 24 20 20 5c 24 24 5c     | $$$$$$$$  \$$\
     1dc:	20 20 24 24 20 7c 20 24 24 24 24 24 24 24 5c 20       $$ | $$$$$$$\ 
     1ec:	20 20 20 20 20 7c 20 24 24 24 24 24 24 24 24 7c          | $$$$$$$$|
     1fc:	20 24 24 20 20 20 20 24 24 7c 20 24 24 20 20 20      $$    $$| $$   
     20c:	5c 24 24 7c 20 24 24 20 20 7c 20 24 24 00           \$$| $$  | $$.

0000021a <__c.2263>:
     21a:	7c 20 24 24 20 20 20 20 24 24 20 5c 24 24 5c 20     | $$    $$ \$$\ 
     22a:	2f 20 20 24 24 7c 20 24 24 20 20 20 20 24 24 20     /  $$| $$    $$ 
     23a:	20 20 20 20 20 7c 20 24 24 20 20 20 20 24 24 7c          | $$    $$|
     24a:	20 20 24 24 24 24 24 24 5c 7c 20 20 24 24 24 24       $$$$$$\|  $$$$
     25a:	24 24 5c 7c 20 20 24 24 24 24 24 24 5c 00           $$\|  $$$$$$\.

00000268 <__c.2261>:
     268:	7c 20 24 24 5f 5f 7c 20 24 24 7c 20 24 24 20 20     | $$__| $$| $$  
     278:	20 7c 20 24 24 7c 20 24 24 5f 5f 7c 20 24 24 20      | $$| $$__| $$ 
     288:	20 20 20 20 20 7c 20 24 24 5f 5f 7c 20 24 24 20          | $$__| $$ 
     298:	2f 20 20 20 20 20 20 5c 20 20 2f 20 20 20 20 20     /      \  /     
     2a8:	20 5c 20 20 2f 20 20 20 20 20 20 5c 00               \  /      \.

000002b5 <__c.2259>:
     2b5:	7c 20 20 24 24 24 24 24 24 5c 7c 20 24 24 20 20     |  $$$$$$\| $$  
     2c5:	20 7c 20 24 24 7c 20 24 24 24 24 24 24 24 5c 20      | $$| $$$$$$$\ 
     2d5:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     2e5:	20 5f 5f 5f 5f 5f 5f 20 20 20 20 5f 5f 5f 5f 5f      ______    _____
     2f5:	5f 20 20 20 20 5f 5f 5f 5f 5f 5f 00                 _    ______.

00000301 <__c.2257>:
     301:	20 2f 20 20 20 20 20 20 5c 20 7c 20 20 5c 20 20      /      \ |  \  
     311:	20 7c 20 20 5c 7c 20 20 20 20 20 20 20 5c 20 20      |  \|       \  
     321:	20 20 20 20 20 7c 20 20 5c 20 20 7c 20 20 5c 00          |  \  |  \.

00000331 <__c.2255>:
     331:	20 20 5f 5f 5f 5f 5f 5f 20 20 20 5f 5f 20 20 20       ______   __   
     341:	20 20 5f 5f 20 20 5f 5f 5f 5f 5f 5f 5f 20 20 20       __  _______   
     351:	20 20 20 20 20 20 5f 5f 20 20 20 20 5f 5f 00              __    __.

00000360 <__c.2058>:
     360:	1b 5b 3f 32 35 68 00                                .[?25h.

00000367 <__c.2054>:
     367:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000036e <__c.2050>:
     36e:	1b 5b 25 64 6d 00                                   .[%dm.

00000374 <__c.2045>:
     374:	1b 5b 4b 00                                         .[K.

00000378 <__c.2040>:
     378:	1b 5b 32 4a 00                                      .[2J.

0000037d <__c.2025>:
     37d:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000386 <__ctors_end>:
     386:	11 24       	eor	r1, r1
     388:	1f be       	out	0x3f, r1	; 63
     38a:	cf ef       	ldi	r28, 0xFF	; 255
     38c:	d8 e0       	ldi	r29, 0x08	; 8
     38e:	de bf       	out	0x3e, r29	; 62
     390:	cd bf       	out	0x3d, r28	; 61

00000392 <__do_copy_data>:
     392:	14 e0       	ldi	r17, 0x04	; 4
     394:	a0 e0       	ldi	r26, 0x00	; 0
     396:	b1 e0       	ldi	r27, 0x01	; 1
     398:	e6 e4       	ldi	r30, 0x46	; 70
     39a:	f9 e2       	ldi	r31, 0x29	; 41
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__do_copy_data+0x10>
     39e:	05 90       	lpm	r0, Z+
     3a0:	0d 92       	st	X+, r0
     3a2:	ac 3d       	cpi	r26, 0xDC	; 220
     3a4:	b1 07       	cpc	r27, r17
     3a6:	d9 f7       	brne	.-10     	; 0x39e <__do_copy_data+0xc>

000003a8 <__do_clear_bss>:
     3a8:	26 e0       	ldi	r18, 0x06	; 6
     3aa:	ac ed       	ldi	r26, 0xDC	; 220
     3ac:	b4 e0       	ldi	r27, 0x04	; 4
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
     3b2:	a8 31       	cpi	r26, 0x18	; 24
     3b4:	b2 07       	cpc	r27, r18
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>
     3b8:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <main>
     3bc:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <_exit>

000003c0 <__bad_interrupt>:
     3c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c4 <init_button_interrupts>:
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void)
{
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     3c4:	e8 e6       	ldi	r30, 0x68	; 104
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	82 60       	ori	r24, 0x02	; 2
     3cc:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     3ce:	8b b3       	in	r24, 0x1b	; 27
     3d0:	82 60       	ori	r24, 0x02	; 2
     3d2:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     3d4:	ec e6       	ldi	r30, 0x6C	; 108
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	8f 60       	ori	r24, 0x0F	; 15
     3dc:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     3de:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <__data_end>
     3e2:	08 95       	ret

000003e4 <button_pushed>:

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0)
     3e4:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <__data_end>
     3e8:	18 16       	cp	r1, r24
     3ea:	14 f5       	brge	.+68     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     3ec:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3f0:	6f b7       	in	r22, 0x3f	; 63
		cli();
     3f2:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	09 c0       	rjmp	.+18     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		{
			button_queue[i - 1] = button_queue[i];
     3f8:	f9 01       	movw	r30, r18
     3fa:	e3 52       	subi	r30, 0x23	; 35
     3fc:	fb 4f       	sbci	r31, 0xFB	; 251
     3fe:	40 81       	ld	r20, Z
     400:	f9 01       	movw	r30, r18
     402:	e4 52       	subi	r30, 0x24	; 36
     404:	fb 4f       	sbci	r31, 0xFB	; 251
     406:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     408:	9f 5f       	subi	r25, 0xFF	; 255
     40a:	29 2f       	mov	r18, r25
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 91 dc 04 	lds	r20, 0x04DC	; 0x8004dc <__data_end>
     412:	04 2e       	mov	r0, r20
     414:	00 0c       	add	r0, r0
     416:	55 0b       	sbc	r21, r21
     418:	24 17       	cp	r18, r20
     41a:	35 07       	cpc	r19, r21
     41c:	6c f3       	brlt	.-38     	; 0x3f8 <button_pushed+0x14>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     41e:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <__data_end>
     422:	91 50       	subi	r25, 0x01	; 1
     424:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <__data_end>
		
		if (interrupts_were_enabled)
     428:	66 23       	and	r22, r22
     42a:	1c f4       	brge	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		{
			// Turn them back on again
			sei();
     42c:	78 94       	sei
     42e:	08 95       	ret
	queue_length = 0;
}

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     430:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     432:	08 95       	ret

00000434 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect)
{
     434:	1f 92       	push	r1
     436:	0f 92       	push	r0
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     44c:	43 b1       	in	r20, 0x03	; 3
     44e:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	26 c0       	rjmp	.+76     	; 0x4a0 <__vector_5+0x6c>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     454:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <__data_end>
     458:	94 30       	cpi	r25, 0x04	; 4
     45a:	0c f5       	brge	.+66     	; 0x49e <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     45c:	24 2f       	mov	r18, r20
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	08 2e       	mov	r0, r24
     462:	02 c0       	rjmp	.+4      	; 0x468 <__vector_5+0x34>
     464:	35 95       	asr	r19
     466:	27 95       	ror	r18
     468:	0a 94       	dec	r0
     46a:	e2 f7       	brpl	.-8      	; 0x464 <__vector_5+0x30>
     46c:	20 ff       	sbrs	r18, 0
     46e:	17 c0       	rjmp	.+46     	; 0x49e <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin)))
     470:	20 91 e1 04 	lds	r18, 0x04E1	; 0x8004e1 <last_button_state>
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	08 2e       	mov	r0, r24
     478:	02 c0       	rjmp	.+4      	; 0x47e <__vector_5+0x4a>
     47a:	35 95       	asr	r19
     47c:	27 95       	ror	r18
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <__vector_5+0x46>
     482:	20 fd       	sbrc	r18, 0
     484:	0c c0       	rjmp	.+24     	; 0x49e <__vector_5+0x6a>
				{
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     486:	e0 91 dc 04 	lds	r30, 0x04DC	; 0x8004dc <__data_end>
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	9e 0f       	add	r25, r30
     48e:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <__data_end>
     492:	0e 2e       	mov	r0, r30
     494:	00 0c       	add	r0, r0
     496:	ff 0b       	sbc	r31, r31
     498:	e3 52       	subi	r30, 0x23	; 35
     49a:	fb 4f       	sbci	r31, 0xFB	; 251
     49c:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	c0 f2       	brcs	.-80     	; 0x454 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     4a4:	40 93 e1 04 	sts	0x04E1, r20	; 0x8004e1 <last_button_state>
}
     4a8:	ff 91       	pop	r31
     4aa:	ef 91       	pop	r30
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <update_start_screen>:

// Update dynamic start screen based on the frame number (0-31)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	18 2f       	mov	r17, r24
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     4c8:	d4 e0       	ldi	r29, 0x04	; 4
     4ca:	36 c0       	rjmp	.+108    	; 0x538 <update_start_screen+0x78>
	{
		for (uint8_t col = 11; col < 16; col++)
		{
			colour = col == 14 ? COLOUR_YELLOW : COLOUR_BLACK;
     4cc:	ce 30       	cpi	r28, 0x0E	; 14
     4ce:	11 f4       	brne	.+4      	; 0x4d4 <update_start_screen+0x14>
     4d0:	4f ef       	ldi	r20, 0xFF	; 255
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <update_start_screen+0x16>
     4d4:	40 e0       	ldi	r20, 0x00	; 0
			if (((32+col-frame_number) & ((1<<(row-2))-1)) == (1<<(row-3))-1)
     4d6:	2c 2f       	mov	r18, r28
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	20 5e       	subi	r18, 0xE0	; 224
     4dc:	3f 4f       	sbci	r19, 0xFF	; 255
     4de:	21 1b       	sub	r18, r17
     4e0:	31 09       	sbc	r19, r1
     4e2:	ed 2f       	mov	r30, r29
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	bf 01       	movw	r22, r30
     4e8:	62 50       	subi	r22, 0x02	; 2
     4ea:	71 09       	sbc	r23, r1
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	dc 01       	movw	r26, r24
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <update_start_screen+0x38>
     4f4:	aa 0f       	add	r26, r26
     4f6:	bb 1f       	adc	r27, r27
     4f8:	6a 95       	dec	r22
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <update_start_screen+0x34>
     4fc:	bd 01       	movw	r22, r26
     4fe:	61 50       	subi	r22, 0x01	; 1
     500:	71 09       	sbc	r23, r1
     502:	26 23       	and	r18, r22
     504:	37 23       	and	r19, r23
     506:	33 97       	sbiw	r30, 0x03	; 3
     508:	02 c0       	rjmp	.+4      	; 0x50e <update_start_screen+0x4e>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	ea 95       	dec	r30
     510:	e2 f7       	brpl	.-8      	; 0x50a <update_start_screen+0x4a>
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	28 17       	cp	r18, r24
     516:	39 07       	cpc	r19, r25
     518:	29 f4       	brne	.+10     	; 0x524 <update_start_screen+0x64>
			{
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
     51a:	ce 30       	cpi	r28, 0x0E	; 14
     51c:	10 f4       	brcc	.+4      	; 0x522 <update_start_screen+0x62>
     51e:	4f e0       	ldi	r20, 0x0F	; 15
     520:	01 c0       	rjmp	.+2      	; 0x524 <update_start_screen+0x64>
     522:	40 ef       	ldi	r20, 0xF0	; 240
			}
			ledmatrix_update_pixel(col, row, colour);
     524:	6d 2f       	mov	r22, r29
     526:	8c 2f       	mov	r24, r28
     528:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
	{
		for (uint8_t col = 11; col < 16; col++)
     52c:	cf 5f       	subi	r28, 0xFF	; 255
     52e:	01 c0       	rjmp	.+2      	; 0x532 <update_start_screen+0x72>
     530:	cb e0       	ldi	r28, 0x0B	; 11
     532:	c0 31       	cpi	r28, 0x10	; 16
     534:	58 f2       	brcs	.-106    	; 0x4cc <update_start_screen+0xc>
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     536:	df 5f       	subi	r29, 0xFF	; 255
     538:	d8 30       	cpi	r29, 0x08	; 8
     53a:	d0 f3       	brcs	.-12     	; 0x530 <update_start_screen+0x70>
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
			}
			ledmatrix_update_pixel(col, row, colour);
		}
	}
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	08 95       	ret

00000544 <show_start_screen>:
// Stored as a 5 x 3 grid pattern going from Left-to-Right, Top-to-Bottom
// Padded with a leading zero so that it fits into a 16-bit value


void show_start_screen(void)
{
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	28 97       	sbiw	r28, 0x08	; 8
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     55a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	31 c0       	rjmp	.+98     	; 0x5c4 <show_start_screen+0x80>
	{
		col_data = pong_display[col];
     562:	e1 2f       	mov	r30, r17
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	e6 5e       	subi	r30, 0xE6	; 230
     568:	fe 4f       	sbci	r31, 0xFE	; 254
     56a:	90 81       	ld	r25, Z
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	21 c0       	rjmp	.+66     	; 0x5b2 <show_start_screen+0x6e>
		{
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data>>row & 1)
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	49 2f       	mov	r20, r25
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	08 2e       	mov	r0, r24
     57a:	02 c0       	rjmp	.+4      	; 0x580 <show_start_screen+0x3c>
     57c:	55 95       	asr	r21
     57e:	47 95       	ror	r20
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <show_start_screen+0x38>
     584:	40 ff       	sbrs	r20, 0
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <show_start_screen+0x5e>
			{
				column_colour_data[row] = (row < 4 ? COLOUR_RED : COLOUR_GREEN);
     588:	84 30       	cpi	r24, 0x04	; 4
     58a:	10 f4       	brcc	.+4      	; 0x590 <show_start_screen+0x4c>
     58c:	4f e0       	ldi	r20, 0x0F	; 15
     58e:	01 c0       	rjmp	.+2      	; 0x592 <show_start_screen+0x4e>
     590:	40 ef       	ldi	r20, 0xF0	; 240
     592:	e1 e0       	ldi	r30, 0x01	; 1
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	ec 0f       	add	r30, r28
     598:	fd 1f       	adc	r31, r29
     59a:	e2 0f       	add	r30, r18
     59c:	f3 1f       	adc	r31, r19
     59e:	40 83       	st	Z, r20
     5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <show_start_screen+0x6c>
			}
			else
			{
				column_colour_data[row] = 0;
     5a2:	e1 e0       	ldi	r30, 0x01	; 1
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	ec 0f       	add	r30, r28
     5a8:	fd 1f       	adc	r31, r29
     5aa:	e2 0f       	add	r30, r18
     5ac:	f3 1f       	adc	r31, r19
     5ae:	10 82       	st	Z, r1
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
	{
		col_data = pong_display[col];
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	88 30       	cpi	r24, 0x08	; 8
     5b4:	e8 f2       	brcs	.-70     	; 0x570 <show_start_screen+0x2c>
			else
			{
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
     5b6:	be 01       	movw	r22, r28
     5b8:	6f 5f       	subi	r22, 0xFF	; 255
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	81 2f       	mov	r24, r17
     5be:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <ledmatrix_update_column>
{
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     5c2:	1f 5f       	subi	r17, 0xFF	; 255
     5c4:	10 31       	cpi	r17, 0x10	; 16
     5c6:	68 f2       	brcs	.-102    	; 0x562 <show_start_screen+0x1e>
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
	}
	update_start_screen(0);
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
}
     5ce:	28 96       	adiw	r28, 0x08	; 8
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	08 95       	ret

000005e2 <default_grid>:
}

// Initialize the display for the board, this creates the display
// for an empty board.
void default_grid(void)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	28 97       	sbiw	r28, 0x08	; 8
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_clear();
     5f6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <ledmatrix_clear>
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <default_grid+0x2e>
	{
		colours[row] = COLOUR_YELLOW;
     5fe:	e1 e0       	ldi	r30, 0x01	; 1
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	e8 0f       	add	r30, r24
     608:	f1 1d       	adc	r31, r1
     60a:	9f ef       	ldi	r25, 0xFF	; 255
     60c:	90 83       	st	Z, r25
void default_grid(void)
{
	ledmatrix_clear();
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     60e:	8f 5f       	subi	r24, 0xFF	; 255
     610:	88 30       	cpi	r24, 0x08	; 8
     612:	a8 f3       	brcs	.-22     	; 0x5fe <default_grid+0x1c>
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
     614:	be 01       	movw	r22, r28
     616:	6f 5f       	subi	r22, 0xFF	; 255
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	8d e0       	ldi	r24, 0x0D	; 13
     61c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	09 c0       	rjmp	.+18     	; 0x636 <default_grid+0x54>
	{
		colours[row] = COLOUR_HALF_YELLOW;
     624:	e1 e0       	ldi	r30, 0x01	; 1
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ec 0f       	add	r30, r28
     62a:	fd 1f       	adc	r31, r29
     62c:	e8 0f       	add	r30, r24
     62e:	f1 1d       	adc	r31, r1
     630:	95 e5       	ldi	r25, 0x55	; 85
     632:	90 83       	st	Z, r25
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	88 30       	cpi	r24, 0x08	; 8
     638:	a8 f3       	brcs	.-22     	; 0x624 <default_grid+0x42>
	{
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
     63a:	be 01       	movw	r22, r28
     63c:	6f 5f       	subi	r22, 0xFF	; 255
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	8c e0       	ldi	r24, 0x0C	; 12
     642:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <ledmatrix_update_column>
	ledmatrix_update_column(14, colours);
     646:	be 01       	movw	r22, r28
     648:	6f 5f       	subi	r22, 0xFF	; 255
     64a:	7f 4f       	sbci	r23, 0xFF	; 255
     64c:	8e e0       	ldi	r24, 0x0E	; 14
     64e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	09 c0       	rjmp	.+18     	; 0x668 <default_grid+0x86>
	{
		colours[row] = COLOUR_QUART_YELLOW;
     656:	e1 e0       	ldi	r30, 0x01	; 1
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	e8 0f       	add	r30, r24
     660:	f1 1d       	adc	r31, r1
     662:	91 e1       	ldi	r25, 0x11	; 17
     664:	90 83       	st	Z, r25
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
	ledmatrix_update_column(14, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	88 30       	cpi	r24, 0x08	; 8
     66a:	a8 f3       	brcs	.-22     	; 0x656 <default_grid+0x74>
	{
		colours[row] = COLOUR_QUART_YELLOW;
	}
	ledmatrix_update_column(11, colours);
     66c:	be 01       	movw	r22, r28
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	8b e0       	ldi	r24, 0x0B	; 11
     674:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <ledmatrix_update_column>
	ledmatrix_update_column(15, colours);
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	8f e0       	ldi	r24, 0x0F	; 15
     680:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <ledmatrix_update_column>
}
     684:	28 96       	adiw	r28, 0x08	; 8
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <update_points>:
uint8_t game_over = 0;

//updates the points in the terminal
void update_points() {
	//clear terminal line and reprint the game score with the points
	move_terminal_cursor(10, 13);
     696:	6d e0       	ldi	r22, 0x0D	; 13
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	8a e0       	ldi	r24, 0x0A	; 10
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	clear_to_end_of_line();
     6a2:	0e 94 23 10 	call	0x2046	; 0x2046 <clear_to_end_of_line>

	// if x >= 10 and [-9, 0)
	if ((points >= 10) || (points < 0 && points >= -9)) {
     6a6:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     6aa:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     6ae:	8a 30       	cpi	r24, 0x0A	; 10
     6b0:	91 05       	cpc	r25, r1
     6b2:	34 f4       	brge	.+12     	; 0x6c0 <update_points+0x2a>
     6b4:	9c 01       	movw	r18, r24
     6b6:	27 5f       	subi	r18, 0xF7	; 247
     6b8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ba:	29 30       	cpi	r18, 0x09	; 9
     6bc:	31 05       	cpc	r19, r1
     6be:	68 f4       	brcc	.+26     	; 0x6da <update_points+0x44>
		printf("Game Score:   %d", points);
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	8a e2       	ldi	r24, 0x2A	; 42
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	08 95       	ret
		
		//if x >= 100 and (-9, -99)
	} else if ((points >= 100) || (points < -9 && points > -99)) {
     6da:	84 36       	cpi	r24, 0x64	; 100
     6dc:	91 05       	cpc	r25, r1
     6de:	34 f4       	brge	.+12     	; 0x6ec <update_points+0x56>
     6e0:	9c 01       	movw	r18, r24
     6e2:	2e 59       	subi	r18, 0x9E	; 158
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255
     6e6:	29 35       	cpi	r18, 0x59	; 89
     6e8:	31 05       	cpc	r19, r1
     6ea:	68 f4       	brcc	.+26     	; 0x706 <update_points+0x70>
		printf("Game Score:  %d", points);
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	8b e3       	ldi	r24, 0x3B	; 59
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	08 95       	ret
		
		//if x < -99
	} else if (points < -99) {
     706:	8d 39       	cpi	r24, 0x9D	; 157
     708:	2f ef       	ldi	r18, 0xFF	; 255
     70a:	92 07       	cpc	r25, r18
     70c:	6c f4       	brge	.+26     	; 0x728 <update_points+0x92>
		printf("Game Score: %d", points);
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	8b e4       	ldi	r24, 0x4B	; 75
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	08 95       	ret
		
	} else {
		printf("Game Score:    %d", points);
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	8a e5       	ldi	r24, 0x5A	; 90
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	9f 93       	push	r25
     732:	8f 93       	push	r24
     734:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	08 95       	ret

00000742 <update_combo>:
}

//updates the combo points in the terminal
void update_combo() {
	//Clear terminal line and reprint the combo count
	move_terminal_cursor(10, 14);
     742:	6e e0       	ldi	r22, 0x0E	; 14
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	8a e0       	ldi	r24, 0x0A	; 10
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	clear_to_end_of_line();
     74e:	0e 94 23 10 	call	0x2046	; 0x2046 <clear_to_end_of_line>
	
	//adjusts the combo count padding so it matches points
	if (combo_count >= 10) {
     752:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <combo_count>
     756:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <combo_count+0x1>
     75a:	8a 30       	cpi	r24, 0x0A	; 10
     75c:	91 05       	cpc	r25, r1
     75e:	6c f0       	brlt	.+26     	; 0x77a <update_combo+0x38>
		printf("Combo Count:  %d", combo_count);
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	8c e6       	ldi	r24, 0x6C	; 108
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	9f 93       	push	r25
     76a:	8f 93       	push	r24
     76c:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0c c0       	rjmp	.+24     	; 0x792 <update_combo+0x50>
		
	} else {
		printf("Combo Count:   %d", combo_count);
     77a:	9f 93       	push	r25
     77c:	8f 93       	push	r24
     77e:	8d e7       	ldi	r24, 0x7D	; 125
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	9f 93       	push	r25
     784:	8f 93       	push	r24
     786:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
	}
	
	//update combo check accordingly
	if (combo_count >= 3) {
     792:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <combo_count>
     796:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <combo_count+0x1>
     79a:	03 97       	sbiw	r24, 0x03	; 3
     79c:	3c f0       	brlt	.+14     	; 0x7ac <update_combo+0x6a>
		combo_check = 1;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	90 93 f5 04 	sts	0x04F5, r25	; 0x8004f5 <combo_check+0x1>
     7a6:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <combo_check>
     7aa:	08 95       	ret
	} else {
		combo_check = 0;
     7ac:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <combo_check+0x1>
     7b0:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <combo_check>
     7b4:	08 95       	ret

000007b6 <initialise_game>:

// Initialize the game by resetting the grid and beat
void initialise_game(void)
{
	// initialize the display we are using.
	default_grid();
     7b6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <default_grid>
	
	beat = 0;
     7ba:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <beat+0x1>
     7be:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <beat>
	game_over = 0;
     7c2:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <game_over>
	update_points();
     7c6:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
	update_combo();
     7ca:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
     7ce:	08 95       	ret

000007d0 <play_note>:
}

// Play a note in the given lane
void play_note(uint8_t lane)
{	
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	d8 2f       	mov	r29, r24

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     7d8:	cb e0       	ldi	r28, 0x0B	; 11
     7da:	a6 c0       	rjmp	.+332    	; 0x928 <__stack+0x29>
	
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col; //this is the next position that the note will be in
     7dc:	8f e0       	ldi	r24, 0x0F	; 15
     7de:	8c 1b       	sub	r24, r28
		uint8_t index = (future + beat) / 5; 
     7e0:	40 91 fa 04 	lds	r20, 0x04FA	; 0x8004fa <beat>
     7e4:	50 91 fb 04 	lds	r21, 0x04FB	; 0x8004fb <beat+0x1>
     7e8:	48 0f       	add	r20, r24
     7ea:	51 1d       	adc	r21, r1
     7ec:	9a 01       	movw	r18, r20
     7ee:	ad ec       	ldi	r26, 0xCD	; 205
     7f0:	bc ec       	ldi	r27, 0xCC	; 204
     7f2:	0e 94 1a 11 	call	0x2234	; 0x2234 <__umulhisi3>
     7f6:	fc 01       	movw	r30, r24
     7f8:	f6 95       	lsr	r31
     7fa:	e7 95       	ror	r30
     7fc:	f6 95       	lsr	r31
     7fe:	e7 95       	ror	r30
		
		if ((future + beat) % 5) {
     800:	cf 01       	movw	r24, r30
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	8e 0f       	add	r24, r30
     80c:	9f 1f       	adc	r25, r31
     80e:	48 17       	cp	r20, r24
     810:	59 07       	cpc	r21, r25
     812:	09 f0       	breq	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     814:	88 c0       	rjmp	.+272    	; 0x926 <__stack+0x27>
			continue;
		}
		if (track[index] & (1<<lane))
     816:	ff 27       	eor	r31, r31
     818:	e1 57       	subi	r30, 0x71	; 113
     81a:	fe 4f       	sbci	r31, 0xFE	; 254
     81c:	80 81       	ld	r24, Z
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0d 2e       	mov	r0, r29
     822:	02 c0       	rjmp	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     824:	95 95       	asr	r25
     826:	87 95       	ror	r24
     828:	0a 94       	dec	r0
     82a:	e2 f7       	brpl	.-8      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     82c:	80 ff       	sbrs	r24, 0
     82e:	6a c0       	rjmp	.+212    	; 0x904 <__stack+0x5>
		{	
			if (green_check == lane) {
     830:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     834:	d8 13       	cpse	r29, r24
     836:	12 c0       	rjmp	.+36     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
				points--;
     838:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     83c:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     846:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
				update_points();
     84a:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
				
				combo_count = 0;
     84e:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <combo_count+0x1>
     852:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <combo_count>
				update_combo();
     856:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
				
				break;
     85a:	69 c0       	rjmp	.+210    	; 0x92e <__stack+0x2f>
			}
			
			green_check = lane;
     85c:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			// if so, colour the two pixels green
			ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     860:	40 ef       	ldi	r20, 0xF0	; 240
     862:	1d 2f       	mov	r17, r29
     864:	11 0f       	add	r17, r17
     866:	61 2f       	mov	r22, r17
     868:	8c 2f       	mov	r24, r28
     86a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	61 0f       	add	r22, r17
     872:	40 ef       	ldi	r20, 0xF0	; 240
     874:	8c 2f       	mov	r24, r28
     876:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			
			//if the note is in the two specified lanes then award the appropriate amount of points
			if (col == 11 || col == 15) {
     87a:	cb 30       	cpi	r28, 0x0B	; 11
     87c:	11 f0       	breq	.+4      	; 0x882 <__DATA_REGION_LENGTH__+0x82>
     87e:	cf 30       	cpi	r28, 0x0F	; 15
     880:	71 f4       	brne	.+28     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
				points++;
     882:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     886:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     88a:	01 96       	adiw	r24, 0x01	; 1
     88c:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     890:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
				combo_count = 0;
     894:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <combo_count+0x1>
     898:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <combo_count>
     89c:	40 c0       	rjmp	.+128    	; 0x91e <__stack+0x1f>
				
			} else if (col == 12 || col == 14) {
     89e:	cc 30       	cpi	r28, 0x0C	; 12
     8a0:	11 f0       	breq	.+4      	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
     8a2:	ce 30       	cpi	r28, 0x0E	; 14
     8a4:	71 f4       	brne	.+28     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
				points += 2;
     8a6:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     8aa:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     8ae:	02 96       	adiw	r24, 0x02	; 2
     8b0:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     8b4:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
				combo_count = 0;
     8b8:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <combo_count+0x1>
     8bc:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <combo_count>
     8c0:	2e c0       	rjmp	.+92     	; 0x91e <__stack+0x1f>
				
			} else if (col == 13) {
     8c2:	cd 30       	cpi	r28, 0x0D	; 13
     8c4:	61 f5       	brne	.+88     	; 0x91e <__stack+0x1f>
				combo_count++;
     8c6:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <combo_count>
     8ca:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <combo_count+0x1>
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <combo_count+0x1>
     8d4:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <combo_count>
				//sound_note(lane, col);
				
				if (combo_count > 3) {
     8d8:	04 97       	sbiw	r24, 0x04	; 4
     8da:	54 f0       	brlt	.+20     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
					points += 4;
     8dc:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     8e0:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     8e4:	04 96       	adiw	r24, 0x04	; 4
     8e6:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     8ea:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
     8ee:	17 c0       	rjmp	.+46     	; 0x91e <__stack+0x1f>
				} else {
					points += 3;
     8f0:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     8f4:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     8f8:	03 96       	adiw	r24, 0x03	; 3
     8fa:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     8fe:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
     902:	0d c0       	rjmp	.+26     	; 0x91e <__stack+0x1f>
					
				}
			}
			
		} else {
			points--;
     904:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     908:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     912:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
			combo_count = 0;
     916:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <combo_count+0x1>
     91a:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <combo_count>
		
		}
			
		update_points();
     91e:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
		update_combo();
     922:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>

// Play a note in the given lane
void play_note(uint8_t lane)
{	

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     926:	cf 5f       	subi	r28, 0xFF	; 255
     928:	c0 31       	cpi	r28, 0x10	; 16
     92a:	08 f4       	brcc	.+2      	; 0x92e <__stack+0x2f>
     92c:	57 cf       	rjmp	.-338    	; 0x7dc <play_note+0xc>
		}
			
		update_points();
		update_combo();
		}	
}
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	08 95       	ret

00000936 <advance_note>:
	

// Advance the notes one row down the display
void advance_note(void)
{
     936:	9f 92       	push	r9
     938:	af 92       	push	r10
     93a:	bf 92       	push	r11
     93c:	cf 92       	push	r12
     93e:	df 92       	push	r13
     940:	ef 92       	push	r14
     942:	ff 92       	push	r15
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	PixelColour color = COLOUR_RED;
	
	if (combo_check) {
     94c:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <combo_check>
     950:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <combo_check+0x1>
     954:	89 2b       	or	r24, r25
     956:	39 f4       	brne	.+14     	; 0x966 <advance_note+0x30>
// Advance the notes one row down the display
void advance_note(void)
{
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	PixelColour color = COLOUR_RED;
     958:	0f 2e       	mov	r0, r31
     95a:	ff e0       	ldi	r31, 0x0F	; 15
     95c:	ff 2e       	mov	r15, r31
     95e:	f0 2d       	mov	r31, r0

// Advance the notes one row down the display
void advance_note(void)
{
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
     960:	ee 24       	eor	r14, r14
     962:	e3 94       	inc	r14
     964:	08 c0       	rjmp	.+16     	; 0x976 <advance_note+0x40>
	PixelColour color = COLOUR_RED;
	
	if (combo_check) {
		dark_colour = COLOUR_DARK_ORANGE;
		color = COLOUR_ORANGE;
     966:	0f 2e       	mov	r0, r31
     968:	fc e3       	ldi	r31, 0x3C	; 60
     96a:	ff 2e       	mov	r15, r31
     96c:	f0 2d       	mov	r31, r0
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	PixelColour color = COLOUR_RED;
	
	if (combo_check) {
		dark_colour = COLOUR_DARK_ORANGE;
     96e:	0f 2e       	mov	r0, r31
     970:	f4 e3       	ldi	r31, 0x34	; 52
     972:	ef 2e       	mov	r14, r31
     974:	f0 2d       	mov	r31, r0
		color = COLOUR_ORANGE;
	}
	
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     976:	10 e0       	ldi	r17, 0x00	; 0
     978:	e9 c0       	rjmp	.+466    	; 0xb4c <advance_note+0x216>
	{
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col;
     97a:	8f e0       	ldi	r24, 0x0F	; 15
     97c:	81 1b       	sub	r24, r17
		uint8_t index = (future + beat) / 5;
     97e:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <beat>
     982:	f0 91 fb 04 	lds	r31, 0x04FB	; 0x8004fb <beat+0x1>
     986:	af 01       	movw	r20, r30
     988:	48 0f       	add	r20, r24
     98a:	51 1d       	adc	r21, r1
     98c:	9a 01       	movw	r18, r20
     98e:	ad ec       	ldi	r26, 0xCD	; 205
     990:	bc ec       	ldi	r27, 0xCC	; 204
     992:	0e 94 1a 11 	call	0x2234	; 0x2234 <__umulhisi3>
     996:	ec 01       	movw	r28, r24
     998:	d6 95       	lsr	r29
     99a:	c7 95       	ror	r28
     99c:	d6 95       	lsr	r29
     99e:	c7 95       	ror	r28
     9a0:	0c 2f       	mov	r16, r28
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     9a2:	9f 01       	movw	r18, r30
     9a4:	21 5f       	subi	r18, 0xF1	; 241
     9a6:	3f 4f       	sbci	r19, 0xFF	; 255
     9a8:	0e 94 1a 11 	call	0x2234	; 0x2234 <__umulhisi3>
     9ac:	96 95       	lsr	r25
     9ae:	87 95       	ror	r24
     9b0:	96 95       	lsr	r25
     9b2:	87 95       	ror	r24
		uint8_t ghost_index = ghost_start_index +1;
     9b4:	8f 5f       	subi	r24, 0xFF	; 255
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     9b6:	08 c0       	rjmp	.+16     	; 0x9c8 <advance_note+0x92>
			if (track[ghost_index] & 0x0F) {
     9b8:	e8 2f       	mov	r30, r24
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	e1 57       	subi	r30, 0x71	; 113
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	90 81       	ld	r25, Z
     9c2:	9f 70       	andi	r25, 0x0F	; 15
     9c4:	19 f4       	brne	.+6      	; 0x9cc <advance_note+0x96>
		uint8_t index = (future + beat) / 5;
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
		uint8_t ghost_index = ghost_start_index +1;
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     9c6:	8f 5f       	subi	r24, 0xFF	; 255
     9c8:	81 38       	cpi	r24, 0x81	; 129
     9ca:	b0 f3       	brcs	.-20     	; 0x9b8 <advance_note+0x82>
			if (track[ghost_index] & 0x0F) {
				break;
			}
		}
		uint8_t ghost_note = track[ghost_index];
     9cc:	e8 2f       	mov	r30, r24
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	e1 57       	subi	r30, 0x71	; 113
     9d2:	fe 4f       	sbci	r31, 0xFE	; 254
     9d4:	d0 80       	ld	r13, Z
		
		if (index >= TRACK_LENGTH)
     9d6:	01 38       	cpi	r16, 0x81	; 129
     9d8:	20 f0       	brcs	.+8      	; 0x9e2 <advance_note+0xac>
		{
			//Game Over
			game_over = 1;
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <game_over>
			break;
     9e0:	b8 c0       	rjmp	.+368    	; 0xb52 <advance_note+0x21c>
		}
		if ((future+beat) % 5)
     9e2:	9a 01       	movw	r18, r20
     9e4:	ad ec       	ldi	r26, 0xCD	; 205
     9e6:	bc ec       	ldi	r27, 0xCC	; 204
     9e8:	0e 94 1a 11 	call	0x2234	; 0x2234 <__umulhisi3>
     9ec:	96 95       	lsr	r25
     9ee:	87 95       	ror	r24
     9f0:	96 95       	lsr	r25
     9f2:	87 95       	ror	r24
     9f4:	9c 01       	movw	r18, r24
     9f6:	22 0f       	add	r18, r18
     9f8:	33 1f       	adc	r19, r19
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	82 0f       	add	r24, r18
     a00:	93 1f       	adc	r25, r19
     a02:	48 17       	cp	r20, r24
     a04:	59 07       	cpc	r21, r25
     a06:	09 f0       	breq	.+2      	; 0xa0a <advance_note+0xd4>
     a08:	a0 c0       	rjmp	.+320    	; 0xb4a <advance_note+0x214>
     a0a:	00 e0       	ldi	r16, 0x00	; 0
     a0c:	9b c0       	rjmp	.+310    	; 0xb44 <advance_note+0x20e>
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
		{
			//check if the next note is in the appropriate lane
			if ((ghost_note == 0x01) & (lane == 0)) {
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	d9 12       	cpse	r13, r25
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	01 11       	cpse	r16, r1
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	89 23       	and	r24, r25
     a1c:	71 f0       	breq	.+28     	; 0xa3a <advance_note+0x104>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     a1e:	4e 2d       	mov	r20, r14
     a20:	c0 2e       	mov	r12, r16
     a22:	cc 0c       	add	r12, r12
     a24:	6c 2d       	mov	r22, r12
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	6c 0d       	add	r22, r12
     a30:	4e 2d       	mov	r20, r14
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
     a38:	47 c0       	rjmp	.+142    	; 0xac8 <advance_note+0x192>
				
			} else if ((ghost_note == 0x02) & (lane == 1)) {
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	82 e0       	ldi	r24, 0x02	; 2
     a3e:	d8 12       	cpse	r13, r24
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	01 30       	cpi	r16, 0x01	; 1
     a46:	09 f0       	breq	.+2      	; 0xa4a <advance_note+0x114>
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	89 23       	and	r24, r25
     a4c:	71 f0       	breq	.+28     	; 0xa6a <advance_note+0x134>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     a4e:	4e 2d       	mov	r20, r14
     a50:	c0 2e       	mov	r12, r16
     a52:	cc 0c       	add	r12, r12
     a54:	6c 2d       	mov	r22, r12
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	6c 0d       	add	r22, r12
     a60:	4e 2d       	mov	r20, r14
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
     a68:	2f c0       	rjmp	.+94     	; 0xac8 <advance_note+0x192>
			
			} else if ((ghost_note == 0x04) & (lane == 2)) {
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	84 e0       	ldi	r24, 0x04	; 4
     a6e:	d8 12       	cpse	r13, r24
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	02 30       	cpi	r16, 0x02	; 2
     a76:	09 f0       	breq	.+2      	; 0xa7a <advance_note+0x144>
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	89 23       	and	r24, r25
     a7c:	71 f0       	breq	.+28     	; 0xa9a <advance_note+0x164>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     a7e:	4e 2d       	mov	r20, r14
     a80:	c0 2e       	mov	r12, r16
     a82:	cc 0c       	add	r12, r12
     a84:	6c 2d       	mov	r22, r12
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     a8c:	61 e0       	ldi	r22, 0x01	; 1
     a8e:	6c 0d       	add	r22, r12
     a90:	4e 2d       	mov	r20, r14
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
     a98:	17 c0       	rjmp	.+46     	; 0xac8 <advance_note+0x192>
			
			} else if ((ghost_note == 0x08) & (lane == 3)) {
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	88 e0       	ldi	r24, 0x08	; 8
     a9e:	d8 12       	cpse	r13, r24
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	03 30       	cpi	r16, 0x03	; 3
     aa6:	09 f0       	breq	.+2      	; 0xaaa <advance_note+0x174>
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	89 23       	and	r24, r25
     aac:	69 f0       	breq	.+26     	; 0xac8 <advance_note+0x192>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     aae:	4e 2d       	mov	r20, r14
     ab0:	c0 2e       	mov	r12, r16
     ab2:	cc 0c       	add	r12, r12
     ab4:	6c 2d       	mov	r22, r12
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	6c 0d       	add	r22, r12
     ac0:	4e 2d       	mov	r20, r14
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			
			}
				
			if (track[index] & (1<<lane))
     ac8:	fe 01       	movw	r30, r28
     aca:	ff 27       	eor	r31, r31
     acc:	e1 57       	subi	r30, 0x71	; 113
     ace:	fe 4f       	sbci	r31, 0xFE	; 254
     ad0:	80 81       	ld	r24, Z
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	00 2e       	mov	r0, r16
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <advance_note+0x1a6>
     ad8:	95 95       	asr	r25
     ada:	87 95       	ror	r24
     adc:	0a 94       	dec	r0
     ade:	e2 f7       	brpl	.-8      	; 0xad8 <advance_note+0x1a2>
     ae0:	80 ff       	sbrs	r24, 0
     ae2:	2f c0       	rjmp	.+94     	; 0xb42 <advance_note+0x20c>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
     ae4:	1b 30       	cpi	r17, 0x0B	; 11
     ae6:	59 f0       	breq	.+22     	; 0xafe <advance_note+0x1c8>
     ae8:	1f 30       	cpi	r17, 0x0F	; 15
     aea:	71 f0       	breq	.+28     	; 0xb08 <advance_note+0x1d2>
				{
					colour = COLOUR_QUART_YELLOW;
				}
				else if (col==12 || col == 14)
     aec:	1c 30       	cpi	r17, 0x0C	; 12
     aee:	89 f0       	breq	.+34     	; 0xb12 <advance_note+0x1dc>
     af0:	1e 30       	cpi	r17, 0x0E	; 14
     af2:	a1 f0       	breq	.+40     	; 0xb1c <advance_note+0x1e6>
				{
					colour = COLOUR_HALF_YELLOW;
				}
				else if (col==13)
     af4:	1d 30       	cpi	r17, 0x0D	; 13
     af6:	b9 f4       	brne	.+46     	; 0xb26 <advance_note+0x1f0>
				{
					colour = COLOUR_YELLOW;
     af8:	bb 24       	eor	r11, r11
     afa:	ba 94       	dec	r11
     afc:	15 c0       	rjmp	.+42     	; 0xb28 <advance_note+0x1f2>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
				{
					colour = COLOUR_QUART_YELLOW;
     afe:	0f 2e       	mov	r0, r31
     b00:	f1 e1       	ldi	r31, 0x11	; 17
     b02:	bf 2e       	mov	r11, r31
     b04:	f0 2d       	mov	r31, r0
     b06:	10 c0       	rjmp	.+32     	; 0xb28 <advance_note+0x1f2>
     b08:	0f 2e       	mov	r0, r31
     b0a:	f1 e1       	ldi	r31, 0x11	; 17
     b0c:	bf 2e       	mov	r11, r31
     b0e:	f0 2d       	mov	r31, r0
     b10:	0b c0       	rjmp	.+22     	; 0xb28 <advance_note+0x1f2>
				}
				else if (col==12 || col == 14)
				{
					colour = COLOUR_HALF_YELLOW;
     b12:	0f 2e       	mov	r0, r31
     b14:	f5 e5       	ldi	r31, 0x55	; 85
     b16:	bf 2e       	mov	r11, r31
     b18:	f0 2d       	mov	r31, r0
     b1a:	06 c0       	rjmp	.+12     	; 0xb28 <advance_note+0x1f2>
     b1c:	0f 2e       	mov	r0, r31
     b1e:	f5 e5       	ldi	r31, 0x55	; 85
     b20:	bf 2e       	mov	r11, r31
     b22:	f0 2d       	mov	r31, r0
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <advance_note+0x1f2>
				{
					colour = COLOUR_YELLOW;
				}
				else
				{
					colour = COLOUR_BLACK;
     b26:	b1 2c       	mov	r11, r1
				}
				ledmatrix_update_pixel(col, 2*lane, colour);
     b28:	4b 2d       	mov	r20, r11
     b2a:	c0 2e       	mov	r12, r16
     b2c:	cc 0c       	add	r12, r12
     b2e:	6c 2d       	mov	r22, r12
     b30:	81 2f       	mov	r24, r17
     b32:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 2*lane+1, colour);
     b36:	61 e0       	ldi	r22, 0x01	; 1
     b38:	6c 0d       	add	r22, r12
     b3a:	4b 2d       	mov	r20, r11
     b3c:	81 2f       	mov	r24, r17
     b3e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
		}
		if ((future+beat) % 5)
		{
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
     b42:	0f 5f       	subi	r16, 0xFF	; 255
     b44:	04 30       	cpi	r16, 0x04	; 4
     b46:	08 f4       	brcc	.+2      	; 0xb4a <advance_note+0x214>
     b48:	62 cf       	rjmp	.-316    	; 0xa0e <advance_note+0xd8>
		color = COLOUR_ORANGE;
	}
	
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     b4a:	1f 5f       	subi	r17, 0xFF	; 255
     b4c:	10 31       	cpi	r17, 0x10	; 16
     b4e:	08 f4       	brcc	.+2      	; 0xb52 <advance_note+0x21c>
     b50:	14 cf       	rjmp	.-472    	; 0x97a <advance_note+0x44>
			}
		}
	}
	
	// increment the beat
	beat++;
     b52:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <beat>
     b56:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <beat+0x1>
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <beat+0x1>
     b60:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <beat>
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     b64:	c0 e0       	ldi	r28, 0x00	; 0
     b66:	ee c0       	rjmp	.+476    	; 0xd44 <advance_note+0x40e>
	{
		// col counts from one end, future from the other
		uint8_t future = MATRIX_NUM_COLUMNS-1-col;
     b68:	8f e0       	ldi	r24, 0x0F	; 15
     b6a:	8c 1b       	sub	r24, r28
		// notes are only drawn every five columns
		if ((future+beat)%5)
     b6c:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <beat>
     b70:	f0 91 fb 04 	lds	r31, 0x04FB	; 0x8004fb <beat+0x1>
     b74:	af 01       	movw	r20, r30
     b76:	48 0f       	add	r20, r24
     b78:	51 1d       	adc	r21, r1
     b7a:	9a 01       	movw	r18, r20
     b7c:	ad ec       	ldi	r26, 0xCD	; 205
     b7e:	bc ec       	ldi	r27, 0xCC	; 204
     b80:	0e 94 1a 11 	call	0x2234	; 0x2234 <__umulhisi3>
     b84:	96 95       	lsr	r25
     b86:	87 95       	ror	r24
     b88:	96 95       	lsr	r25
     b8a:	87 95       	ror	r24
     b8c:	9c 01       	movw	r18, r24
     b8e:	22 0f       	add	r18, r18
     b90:	33 1f       	adc	r19, r19
     b92:	22 0f       	add	r18, r18
     b94:	33 1f       	adc	r19, r19
     b96:	82 0f       	add	r24, r18
     b98:	93 1f       	adc	r25, r19
     b9a:	48 17       	cp	r20, r24
     b9c:	59 07       	cpc	r21, r25
     b9e:	09 f0       	breq	.+2      	; 0xba2 <advance_note+0x26c>
     ba0:	d0 c0       	rjmp	.+416    	; 0xd42 <advance_note+0x40c>
		{
			continue;
		}
		
		// index of which note in the track to play
		uint8_t index = (future+beat)/5;
     ba2:	9a 01       	movw	r18, r20
     ba4:	0e 94 1a 11 	call	0x2234	; 0x2234 <__umulhisi3>
     ba8:	8c 01       	movw	r16, r24
     baa:	16 95       	lsr	r17
     bac:	07 95       	ror	r16
     bae:	16 95       	lsr	r17
     bb0:	07 95       	ror	r16
		
		uint8_t ghost_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     bb2:	9f 01       	movw	r18, r30
     bb4:	21 5f       	subi	r18, 0xF1	; 241
     bb6:	3f 4f       	sbci	r19, 0xFF	; 255
     bb8:	0e 94 1a 11 	call	0x2234	; 0x2234 <__umulhisi3>
     bbc:	96 95       	lsr	r25
     bbe:	87 95       	ror	r24
     bc0:	96 95       	lsr	r25
     bc2:	87 95       	ror	r24
		//next note in track that is coming
		uint8_t ghost_note = track[ghost_index];
     bc4:	fc 01       	movw	r30, r24
     bc6:	ff 27       	eor	r31, r31
     bc8:	e1 57       	subi	r30, 0x71	; 113
     bca:	fe 4f       	sbci	r31, 0xFE	; 254
     bcc:	e0 80       	ld	r14, Z
		
		int long_check = 0;
		
		// if the index is beyond the end of the track,
		// no note can be drawn
		if (index >= TRACK_LENGTH || (index + 1) >= TRACK_LENGTH)
     bce:	01 38       	cpi	r16, 0x81	; 129
     bd0:	08 f0       	brcs	.+2      	; 0xbd4 <advance_note+0x29e>
     bd2:	b7 c0       	rjmp	.+366    	; 0xd42 <advance_note+0x40c>
     bd4:	11 27       	eor	r17, r17
     bd6:	58 01       	movw	r10, r16
     bd8:	8f ef       	ldi	r24, 0xFF	; 255
     bda:	a8 1a       	sub	r10, r24
     bdc:	b8 0a       	sbc	r11, r24
     bde:	81 e8       	ldi	r24, 0x81	; 129
     be0:	a8 16       	cp	r10, r24
     be2:	b1 04       	cpc	r11, r1
     be4:	0c f0       	brlt	.+2      	; 0xbe8 <advance_note+0x2b2>
     be6:	ad c0       	rjmp	.+346    	; 0xd42 <advance_note+0x40c>
     be8:	d0 e0       	ldi	r29, 0x00	; 0
     bea:	c1 2c       	mov	r12, r1
     bec:	d1 2c       	mov	r13, r1
     bee:	a6 c0       	rjmp	.+332    	; 0xd3c <advance_note+0x406>
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{									
			
			uint8_t current_note = track[index];
     bf0:	f8 01       	movw	r30, r16
     bf2:	e1 57       	subi	r30, 0x71	; 113
     bf4:	fe 4f       	sbci	r31, 0xFE	; 254
     bf6:	80 81       	ld	r24, Z
			
			//check if at the start of a long note
			if (current_note == current_note>>4) {
     bf8:	98 2f       	mov	r25, r24
     bfa:	92 95       	swap	r25
     bfc:	9f 70       	andi	r25, 0x0F	; 15
     bfe:	89 17       	cp	r24, r25
     c00:	d1 f0       	breq	.+52     	; 0xc36 <advance_note+0x300>
				long_check = 1;
			
			//check if in the middle of long note
			} else if ((long_check) && (track[index + 1] == current_note)) {
     c02:	c1 14       	cp	r12, r1
     c04:	d1 04       	cpc	r13, r1
     c06:	39 f0       	breq	.+14     	; 0xc16 <advance_note+0x2e0>
     c08:	f5 01       	movw	r30, r10
     c0a:	e1 57       	subi	r30, 0x71	; 113
     c0c:	fe 4f       	sbci	r31, 0xFE	; 254
     c0e:	20 81       	ld	r18, Z
     c10:	82 17       	cp	r24, r18
     c12:	09 f4       	brne	.+2      	; 0xc16 <advance_note+0x2e0>
     c14:	92 c0       	rjmp	.+292    	; 0xd3a <advance_note+0x404>
				continue; 
			//check if at the end of long note
			} else if ((long_check) && (track[index + 1] != track[index - 1])) {
     c16:	c1 14       	cp	r12, r1
     c18:	d1 04       	cpc	r13, r1
     c1a:	81 f0       	breq	.+32     	; 0xc3c <advance_note+0x306>
     c1c:	f5 01       	movw	r30, r10
     c1e:	e1 57       	subi	r30, 0x71	; 113
     c20:	fe 4f       	sbci	r31, 0xFE	; 254
     c22:	30 81       	ld	r19, Z
     c24:	f8 01       	movw	r30, r16
     c26:	e2 57       	subi	r30, 0x72	; 114
     c28:	fe 4f       	sbci	r31, 0xFE	; 254
     c2a:	20 81       	ld	r18, Z
     c2c:	32 13       	cpse	r19, r18
     c2e:	85 c0       	rjmp	.+266    	; 0xd3a <advance_note+0x404>
				continue;
			
			//else outside long note.
			} else {
				long_check = 0;
     c30:	c1 2c       	mov	r12, r1
     c32:	d1 2c       	mov	r13, r1
     c34:	03 c0       	rjmp	.+6      	; 0xc3c <advance_note+0x306>
			
			uint8_t current_note = track[index];
			
			//check if at the start of a long note
			if (current_note == current_note>>4) {
				long_check = 1;
     c36:	cc 24       	eor	r12, r12
     c38:	c3 94       	inc	r12
     c3a:	d1 2c       	mov	r13, r1
			} else {
				long_check = 0;
				
			}
			
			if (long_check) {
     c3c:	c1 14       	cp	r12, r1
     c3e:	d1 04       	cpc	r13, r1
     c40:	09 f4       	brne	.+2      	; 0xc44 <advance_note+0x30e>
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{									
			
			uint8_t current_note = track[index];
     c42:	98 2f       	mov	r25, r24
			if (long_check) {
				current_note = current_note>>4;
			}
			
			//check if there's a note in the specific path
			if (current_note & (1<<lane)) {
     c44:	29 2f       	mov	r18, r25
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	0d 2e       	mov	r0, r29
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <advance_note+0x31a>
     c4c:	35 95       	asr	r19
     c4e:	27 95       	ror	r18
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <advance_note+0x316>
     c54:	20 ff       	sbrs	r18, 0
     c56:	71 c0       	rjmp	.+226    	; 0xd3a <advance_note+0x404>
				
				//check if theres a note in the led matrix section
				if ((green_check == lane) & ((col >= 11) & (col <= 15))) {
     c58:	21 e0       	ldi	r18, 0x01	; 1
     c5a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c5e:	8d 13       	cpse	r24, r29
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	31 e0       	ldi	r19, 0x01	; 1
     c64:	85 ef       	ldi	r24, 0xF5	; 245
     c66:	8c 0f       	add	r24, r28
     c68:	85 30       	cpi	r24, 0x05	; 5
     c6a:	08 f0       	brcs	.+2      	; 0xc6e <advance_note+0x338>
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	22 23       	and	r18, r18
     c70:	81 f0       	breq	.+32     	; 0xc92 <advance_note+0x35c>
     c72:	33 23       	and	r19, r19
     c74:	71 f0       	breq	.+28     	; 0xc92 <advance_note+0x35c>
					//if true set pixels to green
					ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     c76:	40 ef       	ldi	r20, 0xF0	; 240
     c78:	9d 2e       	mov	r9, r29
     c7a:	99 0c       	add	r9, r9
     c7c:	69 2d       	mov	r22, r9
     c7e:	8c 2f       	mov	r24, r28
     c80:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     c84:	61 e0       	ldi	r22, 0x01	; 1
     c86:	69 0d       	add	r22, r9
     c88:	40 ef       	ldi	r20, 0xF0	; 240
     c8a:	8c 2f       	mov	r24, r28
     c8c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
     c90:	4f c0       	rjmp	.+158    	; 0xd30 <advance_note+0x3fa>
				
				} else if (ghost_note != current_note) {					
     c92:	9e 15       	cp	r25, r14
     c94:	39 f1       	breq	.+78     	; 0xce4 <advance_note+0x3ae>
					ledmatrix_update_pixel(col, 2*lane, color);
     c96:	4f 2d       	mov	r20, r15
     c98:	9d 2e       	mov	r9, r29
     c9a:	99 0c       	add	r9, r9
     c9c:	69 2d       	mov	r22, r9
     c9e:	8c 2f       	mov	r24, r28
     ca0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, color);
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	69 0d       	add	r22, r9
     ca8:	4f 2d       	mov	r20, r15
     caa:	8c 2f       	mov	r24, r28
     cac:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
					
					//if note slides off screen and green_check isn't checked to a lane
					if (col == 15) {
     cb0:	cf 30       	cpi	r28, 0x0F	; 15
     cb2:	f1 f5       	brne	.+124    	; 0xd30 <advance_note+0x3fa>
						points--;
     cb4:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     cb8:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     cc2:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
						update_points();		
     cc6:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
						
						if (combo_count != 0) {
     cca:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <combo_count>
     cce:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <combo_count+0x1>
     cd2:	89 2b       	or	r24, r25
     cd4:	69 f1       	breq	.+90     	; 0xd30 <advance_note+0x3fa>
							combo_count = 0;
     cd6:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <combo_count+0x1>
     cda:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <combo_count>
							update_combo();				
     cde:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
     ce2:	26 c0       	rjmp	.+76     	; 0xd30 <advance_note+0x3fa>
						}
					}
					
				} else {
					ledmatrix_update_pixel(col, 2*lane, color);
     ce4:	4f 2d       	mov	r20, r15
     ce6:	9d 2e       	mov	r9, r29
     ce8:	99 0c       	add	r9, r9
     cea:	69 2d       	mov	r22, r9
     cec:	8c 2f       	mov	r24, r28
     cee:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, color);	
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	69 0d       	add	r22, r9
     cf6:	4f 2d       	mov	r20, r15
     cf8:	8c 2f       	mov	r24, r28
     cfa:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
					
					//if note slides off screen and green_check isn't checked to a lane
					if (col == 15) {
     cfe:	cf 30       	cpi	r28, 0x0F	; 15
     d00:	b9 f4       	brne	.+46     	; 0xd30 <advance_note+0x3fa>
						points--;
     d02:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     d06:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     d10:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
						update_points();		
     d14:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
						
						if (combo_count != 0) {
     d18:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <combo_count>
     d1c:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <combo_count+0x1>
     d20:	89 2b       	or	r24, r25
     d22:	31 f0       	breq	.+12     	; 0xd30 <advance_note+0x3fa>
							combo_count = 0;
     d24:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <combo_count+0x1>
     d28:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <combo_count>
							update_combo();
     d2c:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
						}			
					}
				} 
				
				//check if the current note goes off the screen
				if (col >= 15) {
     d30:	cf 30       	cpi	r28, 0x0F	; 15
     d32:	18 f0       	brcs	.+6      	; 0xd3a <advance_note+0x404>
					green_check = -1;
     d34:	8f ef       	ldi	r24, 0xFF	; 255
     d36:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		{
			continue;
		}
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
     d3a:	df 5f       	subi	r29, 0xFF	; 255
     d3c:	d4 30       	cpi	r29, 0x04	; 4
     d3e:	08 f4       	brcc	.+2      	; 0xd42 <advance_note+0x40c>
     d40:	57 cf       	rjmp	.-338    	; 0xbf0 <advance_note+0x2ba>
	
	// increment the beat
	beat++;
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     d42:	cf 5f       	subi	r28, 0xFF	; 255
     d44:	c0 31       	cpi	r28, 0x10	; 16
     d46:	08 f4       	brcc	.+2      	; 0xd4a <advance_note+0x414>
     d48:	0f cf       	rjmp	.-482    	; 0xb68 <advance_note+0x232>
				
								
			}
		}
	}
}
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	cf 90       	pop	r12
     d5a:	bf 90       	pop	r11
     d5c:	af 90       	pop	r10
     d5e:	9f 90       	pop	r9
     d60:	08 95       	ret

00000d62 <is_game_over>:

// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over(void)
{
	// Detect if the game is over i.e. if a player has won.
	if (game_over) {	
     d62:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <game_over>
     d66:	88 23       	and	r24, r24
     d68:	19 f0       	breq	.+6      	; 0xd70 <is_game_over+0xe>
		game_over = 0; //reset game over check
     d6a:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <game_over>
		return 1;	
     d6e:	81 e0       	ldi	r24, 0x01	; 1
	
	} else {
	return 0;
	
	}
     d70:	08 95       	ret

00000d72 <ledmatrix_setup>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     d72:	80 e8       	ldi	r24, 0x80	; 128
     d74:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <spi_setup_master>
     d78:	08 95       	ret

00000d7a <ledmatrix_update_pixel>:
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	80 31       	cpi	r24, 0x10	; 16
     d82:	b0 f4       	brcc	.+44     	; 0xdb0 <ledmatrix_update_pixel+0x36>
     d84:	68 30       	cpi	r22, 0x08	; 8
     d86:	a0 f4       	brcc	.+40     	; 0xdb0 <ledmatrix_update_pixel+0x36>
     d88:	14 2f       	mov	r17, r20
     d8a:	c6 2f       	mov	r28, r22
     d8c:	d8 2f       	mov	r29, r24
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	0e 94 03 10 	call	0x2006	; 0x2006 <spi_send_byte>
     d94:	6c 2f       	mov	r22, r28
     d96:	67 70       	andi	r22, 0x07	; 7
     d98:	80 e1       	ldi	r24, 0x10	; 16
     d9a:	68 9f       	mul	r22, r24
     d9c:	90 01       	movw	r18, r0
     d9e:	11 24       	eor	r1, r1
     da0:	8d 2f       	mov	r24, r29
     da2:	8f 70       	andi	r24, 0x0F	; 15
     da4:	82 2b       	or	r24, r18
     da6:	0e 94 03 10 	call	0x2006	; 0x2006 <spi_send_byte>
     daa:	81 2f       	mov	r24, r17
     dac:	0e 94 03 10 	call	0x2006	; 0x2006 <spi_send_byte>
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	08 95       	ret

00000db8 <ledmatrix_update_column>:
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	80 31       	cpi	r24, 0x10	; 16
     dc0:	a0 f4       	brcc	.+40     	; 0xdea <ledmatrix_update_column+0x32>
     dc2:	8b 01       	movw	r16, r22
     dc4:	c8 2f       	mov	r28, r24
     dc6:	83 e0       	ldi	r24, 0x03	; 3
     dc8:	0e 94 03 10 	call	0x2006	; 0x2006 <spi_send_byte>
     dcc:	8c 2f       	mov	r24, r28
     dce:	8f 70       	andi	r24, 0x0F	; 15
     dd0:	0e 94 03 10 	call	0x2006	; 0x2006 <spi_send_byte>
     dd4:	c0 e0       	ldi	r28, 0x00	; 0
     dd6:	07 c0       	rjmp	.+14     	; 0xde6 <ledmatrix_update_column+0x2e>
     dd8:	f8 01       	movw	r30, r16
     dda:	ec 0f       	add	r30, r28
     ddc:	f1 1d       	adc	r31, r1
     dde:	80 81       	ld	r24, Z
     de0:	0e 94 03 10 	call	0x2006	; 0x2006 <spi_send_byte>
     de4:	cf 5f       	subi	r28, 0xFF	; 255
     de6:	c8 30       	cpi	r28, 0x08	; 8
     de8:	b8 f3       	brcs	.-18     	; 0xdd8 <ledmatrix_update_column+0x20>
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     df2:	8f e0       	ldi	r24, 0x0F	; 15
     df4:	0e 94 03 10 	call	0x2006	; 0x2006 <spi_send_byte>
     df8:	08 95       	ret

00000dfa <initialise_hardware>:
	}
}

void initialise_hardware(void)
{
	ledmatrix_setup();
     dfa:	0e 94 b9 06 	call	0xd72	; 0xd72 <ledmatrix_setup>
	init_button_interrupts();
     dfe:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <init_button_interrupts>
	
	//Make all bits of port C and the upper 5 bits of port D to be output bits
	DDRC = 0xFF; //0xFF => 0b11111111
     e02:	8f ef       	ldi	r24, 0xFF	; 255
     e04:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFC; //0xFC => 0b11111100		
     e06:	8c ef       	ldi	r24, 0xFC	; 252
     e08:	8a b9       	out	0x0a, r24	; 10
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	7b e4       	ldi	r23, 0x4B	; 75
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <init_serial_stdio>
	
	init_timer0();
     e18:	0e 94 4b 10 	call	0x2096	; 0x2096 <init_timer0>
	init_timer1();
     e1c:	0e 94 96 10 	call	0x212c	; 0x212c <init_timer1>
	init_timer2();
     e20:	0e 94 b5 10 	call	0x216a	; 0x216a <init_timer2>
	
	// Turn on global interrupts
	sei();
     e24:	78 94       	sei
     e26:	08 95       	ret

00000e28 <start_screen>:
}

void start_screen(void)
{
     e28:	4f 92       	push	r4
     e2a:	5f 92       	push	r5
     e2c:	6f 92       	push	r6
     e2e:	7f 92       	push	r7
     e30:	8f 92       	push	r8
     e32:	9f 92       	push	r9
     e34:	af 92       	push	r10
     e36:	bf 92       	push	r11
     e38:	cf 92       	push	r12
     e3a:	df 92       	push	r13
     e3c:	ef 92       	push	r14
     e3e:	ff 92       	push	r15
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
	// Clear terminal screen and output a message
	clear_terminal();
     e44:	0e 94 1a 10 	call	0x2034	; 0x2034 <clear_terminal>
	show_cursor();
     e48:	0e 94 42 10 	call	0x2084	; 0x2084 <show_cursor>
	clear_terminal();
     e4c:	0e 94 1a 10 	call	0x2034	; 0x2034 <clear_terminal>
	hide_cursor();
     e50:	0e 94 39 10 	call	0x2072	; 0x2072 <hide_cursor>
	set_display_attribute(FG_WHITE);
     e54:	85 e2       	ldi	r24, 0x25	; 37
     e56:	0e 94 2c 10 	call	0x2058	; 0x2058 <set_display_attribute>
	move_terminal_cursor(10,4);
     e5a:	64 e0       	ldi	r22, 0x04	; 4
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	8a e0       	ldi	r24, 0x0A	; 10
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	printf_P(PSTR("  ______   __     __  _______         __    __"));
     e66:	81 e3       	ldi	r24, 0x31	; 49
     e68:	93 e0       	ldi	r25, 0x03	; 3
     e6a:	9f 93       	push	r25
     e6c:	8f 93       	push	r24
     e6e:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
	move_terminal_cursor(10,5);
     e72:	65 e0       	ldi	r22, 0x05	; 5
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	8a e0       	ldi	r24, 0x0A	; 10
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	printf_P(PSTR(" /      \\ |  \\   |  \\|       \\       |  \\  |  \\"));
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	93 e0       	ldi	r25, 0x03	; 3
     e82:	9f 93       	push	r25
     e84:	8f 93       	push	r24
     e86:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
	move_terminal_cursor(10,6);
     e8a:	66 e0       	ldi	r22, 0x06	; 6
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	8a e0       	ldi	r24, 0x0A	; 10
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	printf_P(PSTR("|  $$$$$$\\| $$   | $$| $$$$$$$\\      | $$  | $$  ______    ______    ______"));
     e96:	85 eb       	ldi	r24, 0xB5	; 181
     e98:	92 e0       	ldi	r25, 0x02	; 2
     e9a:	9f 93       	push	r25
     e9c:	8f 93       	push	r24
     e9e:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
	move_terminal_cursor(10,7);
     ea2:	67 e0       	ldi	r22, 0x07	; 7
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	8a e0       	ldi	r24, 0x0A	; 10
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	printf_P(PSTR("| $$__| $$| $$   | $$| $$__| $$      | $$__| $$ /      \\  /      \\  /      \\"));
     eae:	88 e6       	ldi	r24, 0x68	; 104
     eb0:	92 e0       	ldi	r25, 0x02	; 2
     eb2:	9f 93       	push	r25
     eb4:	8f 93       	push	r24
     eb6:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
	move_terminal_cursor(10,8);
     eba:	68 e0       	ldi	r22, 0x08	; 8
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	8a e0       	ldi	r24, 0x0A	; 10
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	printf_P(PSTR("| $$    $$ \\$$\\ /  $$| $$    $$      | $$    $$|  $$$$$$\\|  $$$$$$\\|  $$$$$$\\"));
     ec6:	8a e1       	ldi	r24, 0x1A	; 26
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	9f 93       	push	r25
     ecc:	8f 93       	push	r24
     ece:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
	move_terminal_cursor(10,9);
     ed2:	69 e0       	ldi	r22, 0x09	; 9
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	8a e0       	ldi	r24, 0x0A	; 10
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	printf_P(PSTR("| $$$$$$$$  \\$$\\  $$ | $$$$$$$\\      | $$$$$$$$| $$    $$| $$   \\$$| $$  | $$"));
     ede:	8c ec       	ldi	r24, 0xCC	; 204
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	9f 93       	push	r25
     ee4:	8f 93       	push	r24
     ee6:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
	move_terminal_cursor(10,10);
     eea:	6a e0       	ldi	r22, 0x0A	; 10
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	8a e0       	ldi	r24, 0x0A	; 10
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$   \\$$ $$  | $$  | $$      | $$  | $$| $$$$$$$$| $$      | $$__/ $$"));
     ef6:	8e e7       	ldi	r24, 0x7E	; 126
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	9f 93       	push	r25
     efc:	8f 93       	push	r24
     efe:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
	move_terminal_cursor(10,11);
     f02:	6b e0       	ldi	r22, 0x0B	; 11
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	8a e0       	ldi	r24, 0x0A	; 10
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$    \\$$$   | $$  | $$      | $$  | $$ \\$$     \\| $$       \\$$    $$"));
     f0e:	80 e3       	ldi	r24, 0x30	; 48
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	9f 93       	push	r25
     f14:	8f 93       	push	r24
     f16:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
	move_terminal_cursor(10,12);
     f1a:	6c e0       	ldi	r22, 0x0C	; 12
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	8a e0       	ldi	r24, 0x0A	; 10
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	printf_P(PSTR(" \\$$   \\$$     \\$     \\$$   \\$$       \\$$   \\$$  \\$$$$$$$ \\$$        \\$$$$$$"));
     f26:	83 ee       	ldi	r24, 0xE3	; 227
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	9f 93       	push	r25
     f2c:	8f 93       	push	r24
     f2e:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
	move_terminal_cursor(10,14);
     f32:	6e e0       	ldi	r22, 0x0E	; 14
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	8a e0       	ldi	r24, 0x0A	; 10
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	// change this to your name and student number; remove the chevrons <>
	printf_P(PSTR("CSSE2010/7201 A2 by  Cailin Delgado - 48027942"));
     f3e:	84 eb       	ldi	r24, 0xB4	; 180
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9f 93       	push	r25
     f44:	8f 93       	push	r24
     f46:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
     f4a:	0e 94 a2 02 	call	0x544	; 0x544 <show_start_screen>
	
	//Display current track
	move_terminal_cursor(10, 15);
     f4e:	6f e0       	ldi	r22, 0x0F	; 15
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	8a e0       	ldi	r24, 0x0A	; 10
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	printf("Track: Through Fire & Flames");															//do %s and add a new track title at the end.
     f5a:	80 e1       	ldi	r24, 0x10	; 16
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	9f 93       	push	r25
     f60:	8f 93       	push	r24
     f62:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
     f66:	0e 94 61 10 	call	0x20c2	; 0x20c2 <get_current_time>
     f6a:	6b 01       	movw	r12, r22
     f6c:	7c 01       	movw	r14, r24
	
	uint8_t frame_number = 0;
	game_speed = 1000;
     f6e:	88 ee       	ldi	r24, 0xE8	; 232
     f70:	93 e0       	ldi	r25, 0x03	; 3
     f72:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <game_speed+0x1>
     f76:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <game_speed>
	
	
	move_terminal_cursor(10, 17);
     f7a:	61 e1       	ldi	r22, 0x11	; 17
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	8a e0       	ldi	r24, 0x0A	; 10
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	clear_to_end_of_line();
     f86:	0e 94 23 10 	call	0x2046	; 0x2046 <clear_to_end_of_line>
	//update game speed in terminal appropriately
	if (game_speed == 1000) {
     f8a:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <game_speed>
     f8e:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <game_speed+0x1>
     f92:	2d b7       	in	r18, 0x3d	; 61
     f94:	3e b7       	in	r19, 0x3e	; 62
     f96:	2a 5e       	subi	r18, 0xEA	; 234
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	3e bf       	out	0x3e, r19	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	2d bf       	out	0x3d, r18	; 61
     fa4:	88 3e       	cpi	r24, 0xE8	; 232
     fa6:	33 e0       	ldi	r19, 0x03	; 3
     fa8:	93 07       	cpc	r25, r19
     faa:	69 f4       	brne	.+26     	; 0xfc6 <start_screen+0x19e>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
     fac:	9f 93       	push	r25
     fae:	8f 93       	push	r24
     fb0:	8d e2       	ldi	r24, 0x2D	; 45
     fb2:	92 e0       	ldi	r25, 0x02	; 2
     fb4:	9f 93       	push	r25
     fb6:	8f 93       	push	r24
     fb8:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	20 c0       	rjmp	.+64     	; 0x1006 <start_screen+0x1de>
		
	} else if (game_speed == 500) {
     fc6:	84 3f       	cpi	r24, 0xF4	; 244
     fc8:	21 e0       	ldi	r18, 0x01	; 1
     fca:	92 07       	cpc	r25, r18
     fcc:	69 f4       	brne	.+26     	; 0xfe8 <start_screen+0x1c0>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
     fce:	9f 93       	push	r25
     fd0:	8f 93       	push	r24
     fd2:	83 e5       	ldi	r24, 0x53	; 83
     fd4:	92 e0       	ldi	r25, 0x02	; 2
     fd6:	9f 93       	push	r25
     fd8:	8f 93       	push	r24
     fda:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f c0       	rjmp	.+30     	; 0x1006 <start_screen+0x1de>
		
	} else if (game_speed == 250) {
     fe8:	8a 3f       	cpi	r24, 0xFA	; 250
     fea:	91 05       	cpc	r25, r1
     fec:	61 f4       	brne	.+24     	; 0x1006 <start_screen+0x1de>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
     fee:	9f 93       	push	r25
     ff0:	8f 93       	push	r24
     ff2:	87 e7       	ldi	r24, 0x77	; 119
     ff4:	92 e0       	ldi	r25, 0x02	; 2
     ff6:	9f 93       	push	r25
     ff8:	8f 93       	push	r24
     ffa:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
			current_time = get_current_time();
			if (current_time - last_screen_update > game_speed/5)
			{
				update_start_screen(frame_number);
				frame_number = (frame_number + 1) % 32;
				last_screen_update = current_time;
    1006:	d0 e0       	ldi	r29, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available())
    1008:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <serial_input_available>
    100c:	88 23       	and	r24, r24
    100e:	41 f0       	breq	.+16     	; 0x1020 <start_screen+0x1f8>
		{
			serial_input = fgetc(stdin);
    1010:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <__iob>
    1014:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <__iob+0x1>
    1018:	0e 94 5f 11 	call	0x22be	; 0x22be <fgetc>
    101c:	c8 2f       	mov	r28, r24
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <start_screen+0x1fa>
	{
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
    1020:	cf ef       	ldi	r28, 0xFF	; 255
		if (serial_input_available())
		{
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S')
    1022:	c3 37       	cpi	r28, 0x73	; 115
    1024:	09 f4       	brne	.+2      	; 0x1028 <start_screen+0x200>
    1026:	cd c0       	rjmp	.+410    	; 0x11c2 <start_screen+0x39a>
    1028:	c3 35       	cpi	r28, 0x53	; 83
    102a:	09 f4       	brne	.+2      	; 0x102e <start_screen+0x206>
    102c:	ca c0       	rjmp	.+404    	; 0x11c2 <start_screen+0x39a>
			break;
		} 
		
		
		//display the game speed to the terminal
		if (serial_input == '1') {
    102e:	c1 33       	cpi	r28, 0x31	; 49
    1030:	f9 f4       	brne	.+62     	; 0x1070 <start_screen+0x248>
			game_speed = 1000; //set game speed to 1000ms
    1032:	88 ee       	ldi	r24, 0xE8	; 232
    1034:	93 e0       	ldi	r25, 0x03	; 3
    1036:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <game_speed+0x1>
    103a:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <game_speed>
			
			move_terminal_cursor(10, 17);
    103e:	61 e1       	ldi	r22, 0x11	; 17
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	8a e0       	ldi	r24, 0x0A	; 10
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
			clear_to_end_of_line();
    104a:	0e 94 23 10 	call	0x2046	; 0x2046 <clear_to_end_of_line>
			printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    104e:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <game_speed+0x1>
    1052:	8f 93       	push	r24
    1054:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <game_speed>
    1058:	8f 93       	push	r24
    105a:	8d e2       	ldi	r24, 0x2D	; 45
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	9f 93       	push	r25
    1060:	8f 93       	push	r24
    1062:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	41 c0       	rjmp	.+130    	; 0x10f2 <start_screen+0x2ca>
			
		} else if (serial_input == '2') {
    1070:	c2 33       	cpi	r28, 0x32	; 50
    1072:	f9 f4       	brne	.+62     	; 0x10b2 <start_screen+0x28a>
			game_speed = 500; //set game speed to 500ms
    1074:	84 ef       	ldi	r24, 0xF4	; 244
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <game_speed+0x1>
    107c:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <game_speed>
			
			move_terminal_cursor(10, 17);
    1080:	61 e1       	ldi	r22, 0x11	; 17
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	8a e0       	ldi	r24, 0x0A	; 10
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
			clear_to_end_of_line();
    108c:	0e 94 23 10 	call	0x2046	; 0x2046 <clear_to_end_of_line>
			printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1090:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <game_speed+0x1>
    1094:	8f 93       	push	r24
    1096:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <game_speed>
    109a:	8f 93       	push	r24
    109c:	83 e5       	ldi	r24, 0x53	; 83
    109e:	92 e0       	ldi	r25, 0x02	; 2
    10a0:	9f 93       	push	r25
    10a2:	8f 93       	push	r24
    10a4:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	20 c0       	rjmp	.+64     	; 0x10f2 <start_screen+0x2ca>
			
		} else if (serial_input == '3') {
    10b2:	c3 33       	cpi	r28, 0x33	; 51
    10b4:	f1 f4       	brne	.+60     	; 0x10f2 <start_screen+0x2ca>
			game_speed = 250; //set game speed to 250ms
    10b6:	8a ef       	ldi	r24, 0xFA	; 250
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <game_speed+0x1>
    10be:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <game_speed>
			
			move_terminal_cursor(10, 17);
    10c2:	61 e1       	ldi	r22, 0x11	; 17
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	8a e0       	ldi	r24, 0x0A	; 10
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
			clear_to_end_of_line();
    10ce:	0e 94 23 10 	call	0x2046	; 0x2046 <clear_to_end_of_line>
			printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    10d2:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <game_speed+0x1>
    10d6:	8f 93       	push	r24
    10d8:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <game_speed>
    10dc:	8f 93       	push	r24
    10de:	87 e7       	ldi	r24, 0x77	; 119
    10e0:	92 e0       	ldi	r25, 0x02	; 2
    10e2:	9f 93       	push	r25
    10e4:	8f 93       	push	r24
    10e6:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
		}
		
		
		// Next check for any button presses
		int8_t btn = button_pushed();
    10f2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
		if (btn != NO_BUTTON_PUSHED)
    10f6:	8f 3f       	cpi	r24, 0xFF	; 255
    10f8:	09 f0       	breq	.+2      	; 0x10fc <start_screen+0x2d4>
    10fa:	63 c0       	rjmp	.+198    	; 0x11c2 <start_screen+0x39a>
		{
			break;
			
		} else if (serial_input == 'm' || serial_input == 'M') {
    10fc:	cd 36       	cpi	r28, 0x6D	; 109
    10fe:	11 f0       	breq	.+4      	; 0x1104 <start_screen+0x2dc>
    1100:	cd 34       	cpi	r28, 0x4D	; 77
    1102:	09 f5       	brne	.+66     	; 0x1146 <start_screen+0x31e>
			//clear manual mode alert
			move_terminal_cursor(10, 16);
    1104:	60 e1       	ldi	r22, 0x10	; 16
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	8a e0       	ldi	r24, 0x0A	; 10
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
			clear_to_end_of_line();
    1110:	0e 94 23 10 	call	0x2046	; 0x2046 <clear_to_end_of_line>
			
			if (man_mode) {
    1114:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <man_mode>
    1118:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <man_mode+0x1>
    111c:	89 2b       	or	r24, r25
    111e:	29 f0       	breq	.+10     	; 0x112a <start_screen+0x302>
				man_mode = 0;  // toggle manual mode checker
    1120:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <man_mode+0x1>
    1124:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <man_mode>
    1128:	0e c0       	rjmp	.+28     	; 0x1146 <start_screen+0x31e>
				
			} else {
				man_mode = 1; //toggle manual mode checker				
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <man_mode+0x1>
    1132:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <man_mode>
				//print to terminal that manual mode is on
				printf("Manual Mode: ON");
    1136:	8e e9       	ldi	r24, 0x9E	; 158
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	9f 93       	push	r25
    113c:	8f 93       	push	r24
    113e:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
			}
		} 		

		if (!man_mode) {
    1146:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <man_mode>
    114a:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <man_mode+0x1>
    114e:	89 2b       	or	r24, r25
    1150:	09 f0       	breq	.+2      	; 0x1154 <start_screen+0x32c>
    1152:	5a cf       	rjmp	.-332    	; 0x1008 <start_screen+0x1e0>
			// every 200 ms, update the animation
			current_time = get_current_time();
    1154:	0e 94 61 10 	call	0x20c2	; 0x20c2 <get_current_time>
    1158:	4b 01       	movw	r8, r22
    115a:	5c 01       	movw	r10, r24
			if (current_time - last_screen_update > game_speed/5)
    115c:	2b 01       	movw	r4, r22
    115e:	3c 01       	movw	r6, r24
    1160:	4c 18       	sub	r4, r12
    1162:	5d 08       	sbc	r5, r13
    1164:	6e 08       	sbc	r6, r14
    1166:	7f 08       	sbc	r7, r15
    1168:	20 91 fc 04 	lds	r18, 0x04FC	; 0x8004fc <game_speed>
    116c:	30 91 fd 04 	lds	r19, 0x04FD	; 0x8004fd <game_speed+0x1>
    1170:	ad ec       	ldi	r26, 0xCD	; 205
    1172:	bc ec       	ldi	r27, 0xCC	; 204
    1174:	0e 94 1a 11 	call	0x2234	; 0x2234 <__umulhisi3>
    1178:	96 95       	lsr	r25
    117a:	87 95       	ror	r24
    117c:	96 95       	lsr	r25
    117e:	87 95       	ror	r24
    1180:	a0 e0       	ldi	r26, 0x00	; 0
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	84 15       	cp	r24, r4
    1186:	95 05       	cpc	r25, r5
    1188:	a6 05       	cpc	r26, r6
    118a:	b7 05       	cpc	r27, r7
    118c:	90 f4       	brcc	.+36     	; 0x11b2 <start_screen+0x38a>
			{
				update_start_screen(frame_number);
    118e:	8d 2f       	mov	r24, r29
    1190:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
				frame_number = (frame_number + 1) % 32;
    1194:	8d 2f       	mov	r24, r29
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	8f 71       	andi	r24, 0x1F	; 31
    119c:	90 78       	andi	r25, 0x80	; 128
    119e:	99 23       	and	r25, r25
    11a0:	24 f4       	brge	.+8      	; 0x11aa <start_screen+0x382>
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	80 6e       	ori	r24, 0xE0	; 224
    11a6:	9f 6f       	ori	r25, 0xFF	; 255
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	d8 2f       	mov	r29, r24
				last_screen_update = current_time;
    11ac:	75 01       	movw	r14, r10
    11ae:	64 01       	movw	r12, r8
    11b0:	2b cf       	rjmp	.-426    	; 0x1008 <start_screen+0x1e0>
			} else {
				if (serial_input == 'n' || serial_input == 'N') {
    11b2:	ce 36       	cpi	r28, 0x6E	; 110
    11b4:	19 f0       	breq	.+6      	; 0x11bc <start_screen+0x394>
    11b6:	ce 34       	cpi	r28, 0x4E	; 78
    11b8:	09 f0       	breq	.+2      	; 0x11bc <start_screen+0x394>
    11ba:	26 cf       	rjmp	.-436    	; 0x1008 <start_screen+0x1e0>
					advance_note();
    11bc:	0e 94 9b 04 	call	0x936	; 0x936 <advance_note>
    11c0:	23 cf       	rjmp	.-442    	; 0x1008 <start_screen+0x1e0>
				}
			}
		}
	}
}
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	df 90       	pop	r13
    11cc:	cf 90       	pop	r12
    11ce:	bf 90       	pop	r11
    11d0:	af 90       	pop	r10
    11d2:	9f 90       	pop	r9
    11d4:	8f 90       	pop	r8
    11d6:	7f 90       	pop	r7
    11d8:	6f 90       	pop	r6
    11da:	5f 90       	pop	r5
    11dc:	4f 90       	pop	r4
    11de:	08 95       	ret

000011e0 <display_countdown>:

void display_countdown(int countdown) {
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	ec 01       	movw	r28, r24
	
	//clear display
	ledmatrix_clear();
    11e6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <ledmatrix_clear>
	
	switch (countdown) {
    11ea:	c2 30       	cpi	r28, 0x02	; 2
    11ec:	d1 05       	cpc	r29, r1
    11ee:	a9 f1       	breq	.+106    	; 0x125a <display_countdown+0x7a>
    11f0:	1c f4       	brge	.+6      	; 0x11f8 <display_countdown+0x18>
    11f2:	21 97       	sbiw	r28, 0x01	; 1
    11f4:	71 f1       	breq	.+92     	; 0x1252 <display_countdown+0x72>
    11f6:	74 c1       	rjmp	.+744    	; 0x14e0 <display_countdown+0x300>
    11f8:	c3 30       	cpi	r28, 0x03	; 3
    11fa:	d1 05       	cpc	r29, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <display_countdown+0x20>
    11fe:	f3 c0       	rjmp	.+486    	; 0x13e6 <display_countdown+0x206>
    1200:	24 97       	sbiw	r28, 0x04	; 4
    1202:	09 f4       	brne	.+2      	; 0x1206 <display_countdown+0x26>
    1204:	f5 c0       	rjmp	.+490    	; 0x13f0 <display_countdown+0x210>
    1206:	6c c1       	rjmp	.+728    	; 0x14e0 <display_countdown+0x300>
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
				ledmatrix_update_pixel(col, 3, COLOUR_YELLOW);
    1208:	4f ef       	ldi	r20, 0xFF	; 255
    120a:	63 e0       	ldi	r22, 0x03	; 3
    120c:	8c 2f       	mov	r24, r28
    120e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 4, COLOUR_YELLOW);
    1212:	4f ef       	ldi	r20, 0xFF	; 255
    1214:	64 e0       	ldi	r22, 0x04	; 4
    1216:	8c 2f       	mov	r24, r28
    1218:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
				
				if (col == 5) {
    121c:	c5 30       	cpi	r28, 0x05	; 5
    121e:	59 f4       	brne	.+22     	; 0x1236 <display_countdown+0x56>
					ledmatrix_update_pixel(col, 2, COLOUR_YELLOW);
    1220:	4f ef       	ldi	r20, 0xFF	; 255
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	8c 2f       	mov	r24, r28
    1226:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_YELLOW);
    122a:	4f ef       	ldi	r20, 0xFF	; 255
    122c:	64 e0       	ldi	r22, 0x04	; 4
    122e:	8c 2f       	mov	r24, r28
    1230:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
    1234:	0c c0       	rjmp	.+24     	; 0x124e <display_countdown+0x6e>
					
					} else if (col == 10) {
    1236:	ca 30       	cpi	r28, 0x0A	; 10
    1238:	51 f4       	brne	.+20     	; 0x124e <display_countdown+0x6e>
					ledmatrix_update_pixel(col, 2, COLOUR_YELLOW);
    123a:	4f ef       	ldi	r20, 0xFF	; 255
    123c:	62 e0       	ldi	r22, 0x02	; 2
    123e:	8c 2f       	mov	r24, r28
    1240:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_YELLOW);
    1244:	4f ef       	ldi	r20, 0xFF	; 255
    1246:	65 e0       	ldi	r22, 0x05	; 5
    1248:	8c 2f       	mov	r24, r28
    124a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
    124e:	cf 5f       	subi	r28, 0xFF	; 255
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <display_countdown+0x74>
void display_countdown(int countdown) {
	
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
    1252:	c4 e0       	ldi	r28, 0x04	; 4
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
    1254:	cb 30       	cpi	r28, 0x0B	; 11
    1256:	c0 f2       	brcs	.-80     	; 0x1208 <display_countdown+0x28>
    1258:	43 c1       	rjmp	.+646    	; 0x14e0 <display_countdown+0x300>
				}
			}
			break;
			
		case 2:  //Then draw the 2
			ledmatrix_update_pixel(4, 2, COLOUR_RED);
    125a:	4f e0       	ldi	r20, 0x0F	; 15
    125c:	62 e0       	ldi	r22, 0x02	; 2
    125e:	84 e0       	ldi	r24, 0x04	; 4
    1260:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 3, COLOUR_RED);
    1264:	4f e0       	ldi	r20, 0x0F	; 15
    1266:	63 e0       	ldi	r22, 0x03	; 3
    1268:	84 e0       	ldi	r24, 0x04	; 4
    126a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 4, COLOUR_RED);
    126e:	4f e0       	ldi	r20, 0x0F	; 15
    1270:	64 e0       	ldi	r22, 0x04	; 4
    1272:	84 e0       	ldi	r24, 0x04	; 4
    1274:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 5, COLOUR_RED);
    1278:	4f e0       	ldi	r20, 0x0F	; 15
    127a:	65 e0       	ldi	r22, 0x05	; 5
    127c:	84 e0       	ldi	r24, 0x04	; 4
    127e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(5, 1, COLOUR_RED);
    1282:	4f e0       	ldi	r20, 0x0F	; 15
    1284:	61 e0       	ldi	r22, 0x01	; 1
    1286:	85 e0       	ldi	r24, 0x05	; 5
    1288:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 2, COLOUR_RED);
    128c:	4f e0       	ldi	r20, 0x0F	; 15
    128e:	62 e0       	ldi	r22, 0x02	; 2
    1290:	85 e0       	ldi	r24, 0x05	; 5
    1292:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 5, COLOUR_RED);
    1296:	4f e0       	ldi	r20, 0x0F	; 15
    1298:	65 e0       	ldi	r22, 0x05	; 5
    129a:	85 e0       	ldi	r24, 0x05	; 5
    129c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 6, COLOUR_RED);
    12a0:	4f e0       	ldi	r20, 0x0F	; 15
    12a2:	66 e0       	ldi	r22, 0x06	; 6
    12a4:	85 e0       	ldi	r24, 0x05	; 5
    12a6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(6, 5, COLOUR_RED);
    12aa:	4f e0       	ldi	r20, 0x0F	; 15
    12ac:	65 e0       	ldi	r22, 0x05	; 5
    12ae:	86 e0       	ldi	r24, 0x06	; 6
    12b0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 6, COLOUR_RED);
    12b4:	4f e0       	ldi	r20, 0x0F	; 15
    12b6:	66 e0       	ldi	r22, 0x06	; 6
    12b8:	86 e0       	ldi	r24, 0x06	; 6
    12ba:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(7, 5, COLOUR_RED);
    12be:	4f e0       	ldi	r20, 0x0F	; 15
    12c0:	65 e0       	ldi	r22, 0x05	; 5
    12c2:	87 e0       	ldi	r24, 0x07	; 7
    12c4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 6, COLOUR_RED);
    12c8:	4f e0       	ldi	r20, 0x0F	; 15
    12ca:	66 e0       	ldi	r22, 0x06	; 6
    12cc:	87 e0       	ldi	r24, 0x07	; 7
    12ce:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(8, 2, COLOUR_RED);
    12d2:	4f e0       	ldi	r20, 0x0F	; 15
    12d4:	62 e0       	ldi	r22, 0x02	; 2
    12d6:	88 e0       	ldi	r24, 0x08	; 8
    12d8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 3, COLOUR_RED);
    12dc:	4f e0       	ldi	r20, 0x0F	; 15
    12de:	63 e0       	ldi	r22, 0x03	; 3
    12e0:	88 e0       	ldi	r24, 0x08	; 8
    12e2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 4, COLOUR_RED);
    12e6:	4f e0       	ldi	r20, 0x0F	; 15
    12e8:	64 e0       	ldi	r22, 0x04	; 4
    12ea:	88 e0       	ldi	r24, 0x08	; 8
    12ec:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(9, 1, COLOUR_RED);
    12f0:	4f e0       	ldi	r20, 0x0F	; 15
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	89 e0       	ldi	r24, 0x09	; 9
    12f6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 2, COLOUR_RED);
    12fa:	4f e0       	ldi	r20, 0x0F	; 15
    12fc:	62 e0       	ldi	r22, 0x02	; 2
    12fe:	89 e0       	ldi	r24, 0x09	; 9
    1300:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(10, 1, COLOUR_RED);
    1304:	4f e0       	ldi	r20, 0x0F	; 15
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	8a e0       	ldi	r24, 0x0A	; 10
    130a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 2, COLOUR_RED);
    130e:	4f e0       	ldi	r20, 0x0F	; 15
    1310:	62 e0       	ldi	r22, 0x02	; 2
    1312:	8a e0       	ldi	r24, 0x0A	; 10
    1314:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 3, COLOUR_RED);
    1318:	4f e0       	ldi	r20, 0x0F	; 15
    131a:	63 e0       	ldi	r22, 0x03	; 3
    131c:	8a e0       	ldi	r24, 0x0A	; 10
    131e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 4, COLOUR_RED);
    1322:	4f e0       	ldi	r20, 0x0F	; 15
    1324:	64 e0       	ldi	r22, 0x04	; 4
    1326:	8a e0       	ldi	r24, 0x0A	; 10
    1328:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
    132c:	4f e0       	ldi	r20, 0x0F	; 15
    132e:	65 e0       	ldi	r22, 0x05	; 5
    1330:	8a e0       	ldi	r24, 0x0A	; 10
    1332:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
    1336:	4f e0       	ldi	r20, 0x0F	; 15
    1338:	66 e0       	ldi	r22, 0x06	; 6
    133a:	8a e0       	ldi	r24, 0x0A	; 10
    133c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			break;
    1340:	cf c0       	rjmp	.+414    	; 0x14e0 <display_countdown+0x300>
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
				if (col == 4 || col == 10) {
    1342:	c4 30       	cpi	r28, 0x04	; 4
    1344:	11 f0       	breq	.+4      	; 0x134a <display_countdown+0x16a>
    1346:	ca 30       	cpi	r28, 0x0A	; 10
    1348:	a9 f4       	brne	.+42     	; 0x1374 <display_countdown+0x194>
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    134a:	4f e0       	ldi	r20, 0x0F	; 15
    134c:	62 e0       	ldi	r22, 0x02	; 2
    134e:	8c 2f       	mov	r24, r28
    1350:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 3, COLOUR_RED);
    1354:	4f e0       	ldi	r20, 0x0F	; 15
    1356:	63 e0       	ldi	r22, 0x03	; 3
    1358:	8c 2f       	mov	r24, r28
    135a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_RED);
    135e:	4f e0       	ldi	r20, 0x0F	; 15
    1360:	64 e0       	ldi	r22, 0x04	; 4
    1362:	8c 2f       	mov	r24, r28
    1364:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_RED);
    1368:	4f e0       	ldi	r20, 0x0F	; 15
    136a:	65 e0       	ldi	r22, 0x05	; 5
    136c:	8c 2f       	mov	r24, r28
    136e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
    1372:	37 c0       	rjmp	.+110    	; 0x13e2 <display_countdown+0x202>
					
					} else if (col == 5 || col == 9) {
    1374:	c5 30       	cpi	r28, 0x05	; 5
    1376:	11 f0       	breq	.+4      	; 0x137c <display_countdown+0x19c>
    1378:	c9 30       	cpi	r28, 0x09	; 9
    137a:	a9 f4       	brne	.+42     	; 0x13a6 <display_countdown+0x1c6>
					ledmatrix_update_pixel(col, 1, COLOUR_RED);
    137c:	4f e0       	ldi	r20, 0x0F	; 15
    137e:	61 e0       	ldi	r22, 0x01	; 1
    1380:	8c 2f       	mov	r24, r28
    1382:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    1386:	4f e0       	ldi	r20, 0x0F	; 15
    1388:	62 e0       	ldi	r22, 0x02	; 2
    138a:	8c 2f       	mov	r24, r28
    138c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_RED);
    1390:	4f e0       	ldi	r20, 0x0F	; 15
    1392:	65 e0       	ldi	r22, 0x05	; 5
    1394:	8c 2f       	mov	r24, r28
    1396:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 6, COLOUR_RED);
    139a:	4f e0       	ldi	r20, 0x0F	; 15
    139c:	66 e0       	ldi	r22, 0x06	; 6
    139e:	8c 2f       	mov	r24, r28
    13a0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
    13a4:	1e c0       	rjmp	.+60     	; 0x13e2 <display_countdown+0x202>
					
					} else if (col == 6 || col == 8) {
    13a6:	c6 30       	cpi	r28, 0x06	; 6
    13a8:	11 f0       	breq	.+4      	; 0x13ae <display_countdown+0x1ce>
    13aa:	c8 30       	cpi	r28, 0x08	; 8
    13ac:	59 f4       	brne	.+22     	; 0x13c4 <display_countdown+0x1e4>
					ledmatrix_update_pixel(col, 5, COLOUR_RED);
    13ae:	4f e0       	ldi	r20, 0x0F	; 15
    13b0:	65 e0       	ldi	r22, 0x05	; 5
    13b2:	8c 2f       	mov	r24, r28
    13b4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 6, COLOUR_RED);
    13b8:	4f e0       	ldi	r20, 0x0F	; 15
    13ba:	66 e0       	ldi	r22, 0x06	; 6
    13bc:	8c 2f       	mov	r24, r28
    13be:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
    13c2:	0f c0       	rjmp	.+30     	; 0x13e2 <display_countdown+0x202>
					
					} else {
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    13c4:	4f e0       	ldi	r20, 0x0F	; 15
    13c6:	62 e0       	ldi	r22, 0x02	; 2
    13c8:	8c 2f       	mov	r24, r28
    13ca:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 3, COLOUR_RED);
    13ce:	4f e0       	ldi	r20, 0x0F	; 15
    13d0:	63 e0       	ldi	r22, 0x03	; 3
    13d2:	8c 2f       	mov	r24, r28
    13d4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_RED);
    13d8:	4f e0       	ldi	r20, 0x0F	; 15
    13da:	64 e0       	ldi	r22, 0x04	; 4
    13dc:	8c 2f       	mov	r24, r28
    13de:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
			break;
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
    13e2:	cf 5f       	subi	r28, 0xFF	; 255
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <display_countdown+0x208>
void display_countdown(int countdown) {
	
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
    13e6:	c4 e0       	ldi	r28, 0x04	; 4
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
			break;
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
    13e8:	cb 30       	cpi	r28, 0x0B	; 11
    13ea:	08 f4       	brcc	.+2      	; 0x13ee <display_countdown+0x20e>
    13ec:	aa cf       	rjmp	.-172    	; 0x1342 <display_countdown+0x162>
    13ee:	78 c0       	rjmp	.+240    	; 0x14e0 <display_countdown+0x300>
				}
			}
			break;
		
		case 4: //Then draw the Go
			ledmatrix_update_pixel(5, 1, COLOUR_GREEN);
    13f0:	40 ef       	ldi	r20, 0xF0	; 240
    13f2:	61 e0       	ldi	r22, 0x01	; 1
    13f4:	85 e0       	ldi	r24, 0x05	; 5
    13f6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 2, COLOUR_GREEN);
    13fa:	40 ef       	ldi	r20, 0xF0	; 240
    13fc:	62 e0       	ldi	r22, 0x02	; 2
    13fe:	85 e0       	ldi	r24, 0x05	; 5
    1400:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 3, COLOUR_GREEN);
    1404:	40 ef       	ldi	r20, 0xF0	; 240
    1406:	63 e0       	ldi	r22, 0x03	; 3
    1408:	85 e0       	ldi	r24, 0x05	; 5
    140a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 5, COLOUR_GREEN);
    140e:	40 ef       	ldi	r20, 0xF0	; 240
    1410:	65 e0       	ldi	r22, 0x05	; 5
    1412:	85 e0       	ldi	r24, 0x05	; 5
    1414:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 6, COLOUR_GREEN);
    1418:	40 ef       	ldi	r20, 0xF0	; 240
    141a:	66 e0       	ldi	r22, 0x06	; 6
    141c:	85 e0       	ldi	r24, 0x05	; 5
    141e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 7, COLOUR_GREEN);
    1422:	40 ef       	ldi	r20, 0xF0	; 240
    1424:	67 e0       	ldi	r22, 0x07	; 7
    1426:	85 e0       	ldi	r24, 0x05	; 5
    1428:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(6, 0, COLOUR_GREEN);
    142c:	40 ef       	ldi	r20, 0xF0	; 240
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	86 e0       	ldi	r24, 0x06	; 6
    1432:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 5, COLOUR_GREEN);
    1436:	40 ef       	ldi	r20, 0xF0	; 240
    1438:	65 e0       	ldi	r22, 0x05	; 5
    143a:	86 e0       	ldi	r24, 0x06	; 6
    143c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 7, COLOUR_GREEN);
    1440:	40 ef       	ldi	r20, 0xF0	; 240
    1442:	67 e0       	ldi	r22, 0x07	; 7
    1444:	86 e0       	ldi	r24, 0x06	; 6
    1446:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(7, 0, COLOUR_GREEN);
    144a:	40 ef       	ldi	r20, 0xF0	; 240
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	87 e0       	ldi	r24, 0x07	; 7
    1450:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 2, COLOUR_GREEN);
    1454:	40 ef       	ldi	r20, 0xF0	; 240
    1456:	62 e0       	ldi	r22, 0x02	; 2
    1458:	87 e0       	ldi	r24, 0x07	; 7
    145a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 3, COLOUR_GREEN);
    145e:	40 ef       	ldi	r20, 0xF0	; 240
    1460:	63 e0       	ldi	r22, 0x03	; 3
    1462:	87 e0       	ldi	r24, 0x07	; 7
    1464:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 5, COLOUR_GREEN);
    1468:	40 ef       	ldi	r20, 0xF0	; 240
    146a:	65 e0       	ldi	r22, 0x05	; 5
    146c:	87 e0       	ldi	r24, 0x07	; 7
    146e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 7, COLOUR_GREEN);
    1472:	40 ef       	ldi	r20, 0xF0	; 240
    1474:	67 e0       	ldi	r22, 0x07	; 7
    1476:	87 e0       	ldi	r24, 0x07	; 7
    1478:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(8, 0, COLOUR_GREEN);
    147c:	40 ef       	ldi	r20, 0xF0	; 240
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	88 e0       	ldi	r24, 0x08	; 8
    1482:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 3, COLOUR_GREEN);
    1486:	40 ef       	ldi	r20, 0xF0	; 240
    1488:	63 e0       	ldi	r22, 0x03	; 3
    148a:	88 e0       	ldi	r24, 0x08	; 8
    148c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 5, COLOUR_GREEN);
    1490:	40 ef       	ldi	r20, 0xF0	; 240
    1492:	65 e0       	ldi	r22, 0x05	; 5
    1494:	88 e0       	ldi	r24, 0x08	; 8
    1496:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 7, COLOUR_GREEN);
    149a:	40 ef       	ldi	r20, 0xF0	; 240
    149c:	67 e0       	ldi	r22, 0x07	; 7
    149e:	88 e0       	ldi	r24, 0x08	; 8
    14a0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(9, 1, COLOUR_GREEN);
    14a4:	40 ef       	ldi	r20, 0xF0	; 240
    14a6:	61 e0       	ldi	r22, 0x01	; 1
    14a8:	89 e0       	ldi	r24, 0x09	; 9
    14aa:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 2, COLOUR_GREEN);
    14ae:	40 ef       	ldi	r20, 0xF0	; 240
    14b0:	62 e0       	ldi	r22, 0x02	; 2
    14b2:	89 e0       	ldi	r24, 0x09	; 9
    14b4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 3, COLOUR_GREEN);
    14b8:	40 ef       	ldi	r20, 0xF0	; 240
    14ba:	63 e0       	ldi	r22, 0x03	; 3
    14bc:	85 e0       	ldi	r24, 0x05	; 5
    14be:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 5, COLOUR_GREEN);
    14c2:	40 ef       	ldi	r20, 0xF0	; 240
    14c4:	65 e0       	ldi	r22, 0x05	; 5
    14c6:	89 e0       	ldi	r24, 0x09	; 9
    14c8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 6, COLOUR_GREEN);
    14cc:	40 ef       	ldi	r20, 0xF0	; 240
    14ce:	66 e0       	ldi	r22, 0x06	; 6
    14d0:	89 e0       	ldi	r24, 0x09	; 9
    14d2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 7, COLOUR_GREEN);
    14d6:	40 ef       	ldi	r20, 0xF0	; 240
    14d8:	67 e0       	ldi	r22, 0x07	; 7
    14da:	89 e0       	ldi	r24, 0x09	; 9
    14dc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledmatrix_update_pixel>
		
		default:
			break;
	}
	
}
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	08 95       	ret

000014e6 <game_countdown>:

void game_countdown() {
    14e6:	8f 92       	push	r8
    14e8:	9f 92       	push	r9
    14ea:	af 92       	push	r10
    14ec:	bf 92       	push	r11
    14ee:	cf 92       	push	r12
    14f0:	df 92       	push	r13
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
	
	uint32_t current_time = get_current_time();
    14f6:	0e 94 61 10 	call	0x20c2	; 0x20c2 <get_current_time>
    14fa:	4b 01       	movw	r8, r22
    14fc:	5c 01       	movw	r10, r24
	uint32_t last_recorded_time = current_time;

	display_countdown(3); // display 1
    14fe:	83 e0       	ldi	r24, 0x03	; 3
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <display_countdown>
	
	while (1) {
		//update current time
		current_time = get_current_time();
    1506:	0e 94 61 10 	call	0x20c2	; 0x20c2 <get_current_time>
    150a:	6b 01       	movw	r12, r22
    150c:	7c 01       	movw	r14, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    150e:	ab 01       	movw	r20, r22
    1510:	bc 01       	movw	r22, r24
    1512:	48 19       	sub	r20, r8
    1514:	59 09       	sbc	r21, r9
    1516:	6a 09       	sbc	r22, r10
    1518:	7b 09       	sbc	r23, r11
    151a:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <game_speed>
    151e:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <game_speed+0x1>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	a0 e0       	ldi	r26, 0x00	; 0
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	48 17       	cp	r20, r24
    152c:	59 07       	cpc	r21, r25
    152e:	6a 07       	cpc	r22, r26
    1530:	7b 07       	cpc	r23, r27
    1532:	48 f3       	brcs	.-46     	; 0x1506 <game_countdown+0x20>
			display_countdown(2); //display 2
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <display_countdown>
		}
	}
	
	while (1) {
		//update current time
		current_time = get_current_time();
    153c:	0e 94 61 10 	call	0x20c2	; 0x20c2 <get_current_time>
    1540:	4b 01       	movw	r8, r22
    1542:	5c 01       	movw	r10, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    1544:	ab 01       	movw	r20, r22
    1546:	bc 01       	movw	r22, r24
    1548:	4c 19       	sub	r20, r12
    154a:	5d 09       	sbc	r21, r13
    154c:	6e 09       	sbc	r22, r14
    154e:	7f 09       	sbc	r23, r15
    1550:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <game_speed>
    1554:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <game_speed+0x1>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	a0 e0       	ldi	r26, 0x00	; 0
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	48 17       	cp	r20, r24
    1562:	59 07       	cpc	r21, r25
    1564:	6a 07       	cpc	r22, r26
    1566:	7b 07       	cpc	r23, r27
    1568:	48 f3       	brcs	.-46     	; 0x153c <game_countdown+0x56>
			display_countdown(1); //display 3
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <display_countdown>
		}
	}
	
	while (1) {
		//update current time
		current_time = get_current_time();
    1572:	0e 94 61 10 	call	0x20c2	; 0x20c2 <get_current_time>
    1576:	6b 01       	movw	r12, r22
    1578:	7c 01       	movw	r14, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    157a:	ab 01       	movw	r20, r22
    157c:	bc 01       	movw	r22, r24
    157e:	48 19       	sub	r20, r8
    1580:	59 09       	sbc	r21, r9
    1582:	6a 09       	sbc	r22, r10
    1584:	7b 09       	sbc	r23, r11
    1586:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <game_speed>
    158a:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <game_speed+0x1>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	a0 e0       	ldi	r26, 0x00	; 0
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	48 17       	cp	r20, r24
    1598:	59 07       	cpc	r21, r25
    159a:	6a 07       	cpc	r22, r26
    159c:	7b 07       	cpc	r23, r27
    159e:	48 f3       	brcs	.-46     	; 0x1572 <game_countdown+0x8c>
			display_countdown(4); //display go
    15a0:	84 e0       	ldi	r24, 0x04	; 4
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <display_countdown>
	}
	
																														//turn into a loop
	while (1) {
		//update current time
		current_time = get_current_time();
    15a8:	0e 94 61 10 	call	0x20c2	; 0x20c2 <get_current_time>
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    15ac:	ab 01       	movw	r20, r22
    15ae:	bc 01       	movw	r22, r24
    15b0:	4c 19       	sub	r20, r12
    15b2:	5d 09       	sbc	r21, r13
    15b4:	6e 09       	sbc	r22, r14
    15b6:	7f 09       	sbc	r23, r15
    15b8:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <game_speed>
    15bc:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <game_speed+0x1>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	a0 e0       	ldi	r26, 0x00	; 0
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	48 17       	cp	r20, r24
    15ca:	59 07       	cpc	r21, r25
    15cc:	6a 07       	cpc	r22, r26
    15ce:	7b 07       	cpc	r23, r27
    15d0:	58 f3       	brcs	.-42     	; 0x15a8 <game_countdown+0xc2>
			break;
		}
	}
}
    15d2:	ff 90       	pop	r15
    15d4:	ef 90       	pop	r14
    15d6:	df 90       	pop	r13
    15d8:	cf 90       	pop	r12
    15da:	bf 90       	pop	r11
    15dc:	af 90       	pop	r10
    15de:	9f 90       	pop	r9
    15e0:	8f 90       	pop	r8
    15e2:	08 95       	ret

000015e4 <ssd_display>:
	//SSD section  //maybe put into the interrupt section
	//change displayed digit,
	int left_digit = 0;
	int right_digit = 0;
	
	if ((points > 9) && (points < 100)) {
    15e4:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
    15e8:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
    15ec:	9c 01       	movw	r18, r24
    15ee:	2a 50       	subi	r18, 0x0A	; 10
    15f0:	31 09       	sbc	r19, r1
    15f2:	2a 35       	cpi	r18, 0x5A	; 90
    15f4:	31 05       	cpc	r19, r1
    15f6:	28 f4       	brcc	.+10     	; 0x1602 <ssd_display+0x1e>
		left_digit = points	/ 10; // tens column
		right_digit = points % 10; //ones column
    15f8:	6a e0       	ldi	r22, 0x0A	; 10
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__divmodhi4>
    1600:	2a c0       	rjmp	.+84     	; 0x1656 <ssd_display+0x72>
		
	} else if ((points >= 100)) {
    1602:	84 36       	cpi	r24, 0x64	; 100
    1604:	91 05       	cpc	r25, r1
    1606:	7c f0       	brlt	.+30     	; 0x1626 <ssd_display+0x42>
		left_digit = points /10 % 10; //tens column
    1608:	2a e0       	ldi	r18, 0x0A	; 10
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	b9 01       	movw	r22, r18
    160e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__divmodhi4>
    1612:	e8 2f       	mov	r30, r24
    1614:	49 2f       	mov	r20, r25
    1616:	cb 01       	movw	r24, r22
    1618:	b9 01       	movw	r22, r18
    161a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__divmodhi4>
    161e:	bc 01       	movw	r22, r24
		right_digit = points % 10;
    1620:	8e 2f       	mov	r24, r30
    1622:	94 2f       	mov	r25, r20
    1624:	18 c0       	rjmp	.+48     	; 0x1656 <ssd_display+0x72>
		
	} else if ((points < 0) && (points > -10)) {
    1626:	9c 01       	movw	r18, r24
    1628:	27 5f       	subi	r18, 0xF7	; 247
    162a:	3f 4f       	sbci	r19, 0xFF	; 255
    162c:	29 30       	cpi	r18, 0x09	; 9
    162e:	31 05       	cpc	r19, r1
    1630:	30 f4       	brcc	.+12     	; 0x163e <ssd_display+0x5a>
		right_digit = -1 * points;
    1632:	91 95       	neg	r25
    1634:	81 95       	neg	r24
    1636:	91 09       	sbc	r25, r1
		left_digit = 10;
    1638:	6a e0       	ldi	r22, 0x0A	; 10
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	0c c0       	rjmp	.+24     	; 0x1656 <ssd_display+0x72>
	
	} else if (points <= -10) {
    163e:	87 3f       	cpi	r24, 0xF7	; 247
    1640:	9f 4f       	sbci	r25, 0xFF	; 255
    1642:	2c f0       	brlt	.+10     	; 0x164e <ssd_display+0x6a>

void ssd_display() {
	//SSD section  //maybe put into the interrupt section
	//change displayed digit,
	int left_digit = 0;
	int right_digit = 0;
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
}

void ssd_display() {
	//SSD section  //maybe put into the interrupt section
	//change displayed digit,
	int left_digit = 0;
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	04 c0       	rjmp	.+8      	; 0x1656 <ssd_display+0x72>
		right_digit = -1 * points;
		left_digit = 10;
	
	} else if (points <= -10) {
		//SSD displays "--"
		right_digit = 10;
    164e:	8a e0       	ldi	r24, 0x0A	; 10
    1650:	90 e0       	ldi	r25, 0x00	; 0
		left_digit = 10;
    1652:	6a e0       	ldi	r22, 0x0A	; 10
    1654:	70 e0       	ldi	r23, 0x00	; 0
	}
	
	if (seven_seg_cc) { //is seven_seg_cc, then ssd displays to the left
    1656:	20 91 e3 04 	lds	r18, 0x04E3	; 0x8004e3 <seven_seg_cc>
    165a:	30 91 e4 04 	lds	r19, 0x04E4	; 0x8004e4 <seven_seg_cc+0x1>
    165e:	23 2b       	or	r18, r19
    1660:	99 f0       	breq	.+38     	; 0x1688 <ssd_display+0xa4>
		PORTD = PORTD | (1<<2);	
    1662:	8b b1       	in	r24, 0x0b	; 11
    1664:	84 60       	ori	r24, 0x04	; 4
    1666:	8b b9       	out	0x0b, r24	; 11
		PORTC = seven_seg_data[left_digit];
    1668:	fb 01       	movw	r30, r22
    166a:	ef 5f       	subi	r30, 0xFF	; 255
    166c:	fe 4f       	sbci	r31, 0xFE	; 254
    166e:	80 81       	ld	r24, Z
    1670:	88 b9       	out	0x08, r24	; 8
		
		seven_seg_cc ^= 1;
    1672:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <seven_seg_cc>
    1676:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <seven_seg_cc+0x1>
    167a:	21 e0       	ldi	r18, 0x01	; 1
    167c:	82 27       	eor	r24, r18
    167e:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <seven_seg_cc+0x1>
    1682:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <seven_seg_cc>
    1686:	08 95       	ret
		
	} else {
		PORTD = PORTD & 0b11111011;				//Display Right digit
    1688:	2b b1       	in	r18, 0x0b	; 11
    168a:	2b 7f       	andi	r18, 0xFB	; 251
    168c:	2b b9       	out	0x0b, r18	; 11
		PORTC = seven_seg_data[right_digit];
    168e:	fc 01       	movw	r30, r24
    1690:	ef 5f       	subi	r30, 0xFF	; 255
    1692:	fe 4f       	sbci	r31, 0xFE	; 254
    1694:	80 81       	ld	r24, Z
    1696:	88 b9       	out	0x08, r24	; 8
		
		seven_seg_cc ^= 1;
    1698:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <seven_seg_cc>
    169c:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <seven_seg_cc+0x1>
    16a0:	21 e0       	ldi	r18, 0x01	; 1
    16a2:	82 27       	eor	r24, r18
    16a4:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <seven_seg_cc+0x1>
    16a8:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <seven_seg_cc>
    16ac:	08 95       	ret

000016ae <new_game>:
}

void new_game(void)
{
	// Clear the serial terminal
	clear_terminal();
    16ae:	0e 94 1a 10 	call	0x2034	; 0x2034 <clear_terminal>
	
	//reset number of points player has
	points = 0;
    16b2:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <points+0x1>
    16b6:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <points>
	combo_count = 0;
    16ba:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <combo_count+0x1>
    16be:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <combo_count>
	
	//Start Game Countdown
	game_countdown();
    16c2:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <game_countdown>
		
	// Initialize the game and display
	initialise_game();
    16c6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    16ca:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
	clear_serial_input_buffer();
    16ce:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <clear_serial_input_buffer>
    16d2:	08 95       	ret

000016d4 <play_game>:
}

void play_game(void)
{
    16d4:	4f 92       	push	r4
    16d6:	5f 92       	push	r5
    16d8:	6f 92       	push	r6
    16da:	7f 92       	push	r7
    16dc:	8f 92       	push	r8
    16de:	9f 92       	push	r9
    16e0:	af 92       	push	r10
    16e2:	bf 92       	push	r11
    16e4:	ef 92       	push	r14
    16e6:	ff 92       	push	r15
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	28 97       	sbiw	r28, 0x08	; 8
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
	
	int8_t btn; // The button pushed
	
	int combo_line = 0;
	
	last_advance_time = get_current_time();
    16fe:	0e 94 61 10 	call	0x20c2	; 0x20c2 <get_current_time>
    1702:	2b 01       	movw	r4, r22
    1704:	3c 01       	movw	r6, r24
	
	//Display current track
	move_terminal_cursor(10, 15);
    1706:	6f e0       	ldi	r22, 0x0F	; 15
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	8a e0       	ldi	r24, 0x0A	; 10
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	printf("Track: Through Fire & Flames");													//do %s and add a new track title at the end.
    1712:	80 e1       	ldi	r24, 0x10	; 16
    1714:	92 e0       	ldi	r25, 0x02	; 2
    1716:	9f 93       	push	r25
    1718:	8f 93       	push	r24
    171a:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
	
	move_terminal_cursor(10, 18);
    171e:	62 e1       	ldi	r22, 0x12	; 18
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	8a e0       	ldi	r24, 0x0A	; 10
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	clear_to_end_of_line();
    172a:	0e 94 23 10 	call	0x2046	; 0x2046 <clear_to_end_of_line>
	//update terminal line appropriately
	if (game_speed == 1000) {
    172e:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <game_speed>
    1732:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <game_speed+0x1>
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	88 3e       	cpi	r24, 0xE8	; 232
    173c:	23 e0       	ldi	r18, 0x03	; 3
    173e:	92 07       	cpc	r25, r18
    1740:	69 f4       	brne	.+26     	; 0x175c <play_game+0x88>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    1742:	9f 93       	push	r25
    1744:	8f 93       	push	r24
    1746:	8d e2       	ldi	r24, 0x2D	; 45
    1748:	92 e0       	ldi	r25, 0x02	; 2
    174a:	9f 93       	push	r25
    174c:	8f 93       	push	r24
    174e:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	20 c0       	rjmp	.+64     	; 0x179c <play_game+0xc8>
		
	} else if (game_speed == 500) {
    175c:	84 3f       	cpi	r24, 0xF4	; 244
    175e:	31 e0       	ldi	r19, 0x01	; 1
    1760:	93 07       	cpc	r25, r19
    1762:	69 f4       	brne	.+26     	; 0x177e <play_game+0xaa>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1764:	9f 93       	push	r25
    1766:	8f 93       	push	r24
    1768:	83 e5       	ldi	r24, 0x53	; 83
    176a:	92 e0       	ldi	r25, 0x02	; 2
    176c:	9f 93       	push	r25
    176e:	8f 93       	push	r24
    1770:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f c0       	rjmp	.+30     	; 0x179c <play_game+0xc8>
		
	} else if (game_speed == 250) {
    177e:	8a 3f       	cpi	r24, 0xFA	; 250
    1780:	91 05       	cpc	r25, r1
    1782:	61 f4       	brne	.+24     	; 0x179c <play_game+0xc8>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1784:	9f 93       	push	r25
    1786:	8f 93       	push	r24
    1788:	87 e7       	ldi	r24, 0x77	; 119
    178a:	92 e0       	ldi	r25, 0x02	; 2
    178c:	9f 93       	push	r25
    178e:	8f 93       	push	r24
    1790:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
		if (!man_mode & !paused) {
			current_time = get_current_time();
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
			{
				pause_time = 0;
    179c:	e1 2c       	mov	r14, r1
    179e:	f1 2c       	mov	r15, r1
    17a0:	1d 82       	std	Y+5, r1	; 0x05
    17a2:	1e 82       	std	Y+6, r1	; 0x06
    17a4:	1f 82       	std	Y+7, r1	; 0x07
    17a6:	18 86       	std	Y+8, r1	; 0x08
    17a8:	f4 c1       	rjmp	.+1000   	; 0x1b92 <play_game+0x4be>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
    17aa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    17ae:	89 83       	std	Y+1, r24	; 0x01
		
		char keyboard_input = -1;
		
		if (serial_input_available()) {
    17b0:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <serial_input_available>
    17b4:	88 23       	and	r24, r24
    17b6:	41 f0       	breq	.+16     	; 0x17c8 <play_game+0xf4>
			keyboard_input = fgetc(stdin);
    17b8:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <__iob>
    17bc:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <__iob+0x1>
    17c0:	0e 94 5f 11 	call	0x22be	; 0x22be <fgetc>
    17c4:	18 2f       	mov	r17, r24
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <play_game+0xf6>
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
		
		char keyboard_input = -1;
    17c8:	1f ef       	ldi	r17, 0xFF	; 255
		
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		if ((btn == BUTTON0_PUSHED) || (keyboard_input == 'f' || keyboard_input == 'F')) {
    17ca:	49 81       	ldd	r20, Y+1	; 0x01
    17cc:	44 23       	and	r20, r20
    17ce:	21 f0       	breq	.+8      	; 0x17d8 <play_game+0x104>
    17d0:	16 36       	cpi	r17, 0x66	; 102
    17d2:	11 f0       	breq	.+4      	; 0x17d8 <play_game+0x104>
    17d4:	16 34       	cpi	r17, 0x46	; 70
    17d6:	21 f4       	brne	.+8      	; 0x17e0 <play_game+0x10c>
			// If button 0 play the lowest note (right lane)
			play_note(3);
    17d8:	83 e0       	ldi	r24, 0x03	; 3
    17da:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <play_note>
    17de:	20 c0       	rjmp	.+64     	; 0x1820 <play_game+0x14c>
		
		} else if ((btn == BUTTON1_PUSHED) || (keyboard_input == 'd' || keyboard_input == 'D')) {
    17e0:	59 81       	ldd	r21, Y+1	; 0x01
    17e2:	51 30       	cpi	r21, 0x01	; 1
    17e4:	21 f0       	breq	.+8      	; 0x17ee <play_game+0x11a>
    17e6:	14 36       	cpi	r17, 0x64	; 100
    17e8:	11 f0       	breq	.+4      	; 0x17ee <play_game+0x11a>
    17ea:	14 34       	cpi	r17, 0x44	; 68
    17ec:	21 f4       	brne	.+8      	; 0x17f6 <play_game+0x122>
			//If button 1 is pushed play the second lowest note
			play_note(2);		
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <play_note>
    17f4:	15 c0       	rjmp	.+42     	; 0x1820 <play_game+0x14c>
		
		} else if ((btn == BUTTON2_PUSHED) || (keyboard_input == 's' || keyboard_input == 'S')) {
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	82 30       	cpi	r24, 0x02	; 2
    17fa:	21 f0       	breq	.+8      	; 0x1804 <play_game+0x130>
    17fc:	13 37       	cpi	r17, 0x73	; 115
    17fe:	11 f0       	breq	.+4      	; 0x1804 <play_game+0x130>
    1800:	13 35       	cpi	r17, 0x53	; 83
    1802:	21 f4       	brne	.+8      	; 0x180c <play_game+0x138>
			//If button 2 is pushed play the second highest note
			play_note(1); 
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <play_note>
    180a:	0a c0       	rjmp	.+20     	; 0x1820 <play_game+0x14c>
			
		} else if ((btn == BUTTON3_PUSHED) || (keyboard_input == 'a' || keyboard_input == 'A')) {
    180c:	99 81       	ldd	r25, Y+1	; 0x01
    180e:	93 30       	cpi	r25, 0x03	; 3
    1810:	21 f0       	breq	.+8      	; 0x181a <play_game+0x146>
    1812:	11 36       	cpi	r17, 0x61	; 97
    1814:	11 f0       	breq	.+4      	; 0x181a <play_game+0x146>
    1816:	11 34       	cpi	r17, 0x41	; 65
    1818:	19 f4       	brne	.+6      	; 0x1820 <play_game+0x14c>
			//If button 3 is pushed play the highest note
			play_note(0);
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <play_note>
			
		} 
		
		if (keyboard_input == 'm' || keyboard_input == 'M') {
    1820:	1d 36       	cpi	r17, 0x6D	; 109
    1822:	11 f0       	breq	.+4      	; 0x1828 <play_game+0x154>
    1824:	1d 34       	cpi	r17, 0x4D	; 77
    1826:	39 f5       	brne	.+78     	; 0x1876 <play_game+0x1a2>
			//check to see if the game is currently paused
			if (!paused) {
    1828:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <paused>
    182c:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <paused+0x1>
    1830:	89 2b       	or	r24, r25
    1832:	09 f5       	brne	.+66     	; 0x1876 <play_game+0x1a2>
				//clear manual mode alert
				move_terminal_cursor(10, 16);
    1834:	60 e1       	ldi	r22, 0x10	; 16
    1836:	70 e0       	ldi	r23, 0x00	; 0
    1838:	8a e0       	ldi	r24, 0x0A	; 10
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
				clear_to_end_of_line();
    1840:	0e 94 23 10 	call	0x2046	; 0x2046 <clear_to_end_of_line>
				if (man_mode) {
    1844:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <man_mode>
    1848:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <man_mode+0x1>
    184c:	89 2b       	or	r24, r25
    184e:	29 f0       	breq	.+10     	; 0x185a <play_game+0x186>
					man_mode = 0;
    1850:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <man_mode+0x1>
    1854:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <man_mode>
    1858:	0e c0       	rjmp	.+28     	; 0x1876 <play_game+0x1a2>
		
				} else {
					man_mode = 1;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <man_mode+0x1>
    1862:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <man_mode>
					
					//print to terminal that manual mode is on
					printf("Manual Mode: ON");
    1866:	8e e9       	ldi	r24, 0x9E	; 158
    1868:	92 e0       	ldi	r25, 0x02	; 2
    186a:	9f 93       	push	r25
    186c:	8f 93       	push	r24
    186e:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
				}
			}	
		}
		
		if (keyboard_input == 'p' || keyboard_input == 'P') {
    1876:	10 37       	cpi	r17, 0x70	; 112
    1878:	11 f0       	breq	.+4      	; 0x187e <play_game+0x1aa>
    187a:	10 35       	cpi	r17, 0x50	; 80
    187c:	c9 f5       	brne	.+114    	; 0x18f0 <play_game+0x21c>
			//Check to see if the game is in manual mode
			if (!man_mode) {
    187e:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <man_mode>
    1882:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <man_mode+0x1>
    1886:	89 2b       	or	r24, r25
    1888:	99 f5       	brne	.+102    	; 0x18f0 <play_game+0x21c>
				//clear pause line in terminal
				move_terminal_cursor(10, 17);
    188a:	61 e1       	ldi	r22, 0x11	; 17
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	8a e0       	ldi	r24, 0x0A	; 10
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
				clear_to_end_of_line();
    1896:	0e 94 23 10 	call	0x2046	; 0x2046 <clear_to_end_of_line>
				if (paused) {
    189a:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <paused>
    189e:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <paused+0x1>
    18a2:	89 2b       	or	r24, r25
    18a4:	41 f0       	breq	.+16     	; 0x18b6 <play_game+0x1e2>
					paused = 0;
    18a6:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <paused+0x1>
    18aa:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <paused>
					PORTD = PORTD & 0b11110111;
    18ae:	8b b1       	in	r24, 0x0b	; 11
    18b0:	87 7f       	andi	r24, 0xF7	; 247
    18b2:	8b b9       	out	0x0b, r24	; 11
    18b4:	1d c0       	rjmp	.+58     	; 0x18f0 <play_game+0x21c>
			
				} else {
					paused = 1;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <paused+0x1>
    18be:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <paused>
					pause_time = get_current_time() - last_advance_time; 
    18c2:	0e 94 61 10 	call	0x20c2	; 0x20c2 <get_current_time>
    18c6:	9b 01       	movw	r18, r22
    18c8:	ac 01       	movw	r20, r24
    18ca:	24 19       	sub	r18, r4
    18cc:	35 09       	sbc	r19, r5
    18ce:	46 09       	sbc	r20, r6
    18d0:	57 09       	sbc	r21, r7
    18d2:	2d 83       	std	Y+5, r18	; 0x05
    18d4:	3e 83       	std	Y+6, r19	; 0x06
    18d6:	4f 83       	std	Y+7, r20	; 0x07
    18d8:	58 87       	std	Y+8, r21	; 0x08
					
					PORTD = PORTD | (1<<3); //essentially just PORTD | 0b00001000
    18da:	8b b1       	in	r24, 0x0b	; 11
    18dc:	88 60       	ori	r24, 0x08	; 8
    18de:	8b b9       	out	0x0b, r24	; 11
					
					//tell user that game is currently paused
					printf("Game Paused");
    18e0:	8e ea       	ldi	r24, 0xAE	; 174
    18e2:	92 e0       	ldi	r25, 0x02	; 2
    18e4:	9f 93       	push	r25
    18e6:	8f 93       	push	r24
    18e8:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
				
			}
		}
		
		//Combo IO board LED's
		if (combo_count == 0) {
    18f0:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <combo_count>
    18f4:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <combo_count+0x1>
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	21 f4       	brne	.+8      	; 0x1904 <play_game+0x230>
			//set portD outputs to the I/O boards LED matrix to be 0
			PORTD = PORTD & 0b00011111;
    18fc:	8b b1       	in	r24, 0x0b	; 11
    18fe:	8f 71       	andi	r24, 0x1F	; 31
    1900:	8b b9       	out	0x0b, r24	; 11
    1902:	13 c0       	rjmp	.+38     	; 0x192a <play_game+0x256>

		} else if (combo_count == 1) {
    1904:	81 30       	cpi	r24, 0x01	; 1
    1906:	91 05       	cpc	r25, r1
    1908:	21 f4       	brne	.+8      	; 0x1912 <play_game+0x23e>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<5); 
    190a:	8b b1       	in	r24, 0x0b	; 11
    190c:	80 62       	ori	r24, 0x20	; 32
    190e:	8b b9       	out	0x0b, r24	; 11
    1910:	0c c0       	rjmp	.+24     	; 0x192a <play_game+0x256>
			
		} else if (combo_count == 2) {
    1912:	82 30       	cpi	r24, 0x02	; 2
    1914:	91 05       	cpc	r25, r1
    1916:	21 f4       	brne	.+8      	; 0x1920 <play_game+0x24c>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<6);
    1918:	8b b1       	in	r24, 0x0b	; 11
    191a:	80 64       	ori	r24, 0x40	; 64
    191c:	8b b9       	out	0x0b, r24	; 11
    191e:	05 c0       	rjmp	.+10     	; 0x192a <play_game+0x256>
			
		} else if (combo_count >= 3) {
    1920:	03 97       	sbiw	r24, 0x03	; 3
    1922:	1c f0       	brlt	.+6      	; 0x192a <play_game+0x256>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<7);
    1924:	8b b1       	in	r24, 0x0b	; 11
    1926:	80 68       	ori	r24, 0x80	; 128
    1928:	8b b9       	out	0x0b, r24	; 11
		}
		
		//Combo display
		if ((combo_check) && (combo_line == 0)) {
    192a:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <combo_check>
    192e:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <combo_check+0x1>
    1932:	89 2b       	or	r24, r25
    1934:	a9 f0       	breq	.+42     	; 0x1960 <play_game+0x28c>
    1936:	e1 14       	cp	r14, r1
    1938:	f1 04       	cpc	r15, r1
    193a:	91 f4       	brne	.+36     	; 0x1960 <play_game+0x28c>
			move_terminal_cursor(10, 3);
    193c:	63 e0       	ldi	r22, 0x03	; 3
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	8a e0       	ldi	r24, 0x0A	; 10
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
			printf("  ______                           __                  __");
    1948:	8a eb       	ldi	r24, 0xBA	; 186
    194a:	92 e0       	ldi	r25, 0x02	; 2
    194c:	9f 93       	push	r25
    194e:	8f 93       	push	r24
    1950:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
			
			combo_line++; //increment combo line so in next loop the next line is printed of ascii art
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	e3 1a       	sub	r14, r19
    1958:	f3 0a       	sbc	r15, r19
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	ae c0       	rjmp	.+348    	; 0x1abc <play_game+0x3e8>
		} else if (combo_line == 1) {
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	e4 16       	cp	r14, r20
    1964:	f1 04       	cpc	r15, r1
    1966:	91 f4       	brne	.+36     	; 0x198c <play_game+0x2b8>
			move_terminal_cursor(10,4);
    1968:	64 e0       	ldi	r22, 0x04	; 4
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	8a e0       	ldi	r24, 0x0A	; 10
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
			printf(" /      \\                         |  \\                |  \\");
    1974:	84 ef       	ldi	r24, 0xF4	; 244
    1976:	92 e0       	ldi	r25, 0x02	; 2
    1978:	9f 93       	push	r25
    197a:	8f 93       	push	r24
    197c:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
			
			combo_line++;
    1980:	5f ef       	ldi	r21, 0xFF	; 255
    1982:	e5 1a       	sub	r14, r21
    1984:	f5 0a       	sbc	r15, r21
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	98 c0       	rjmp	.+304    	; 0x1abc <play_game+0x3e8>
		} else if (combo_line == 2) {
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	e8 16       	cp	r14, r24
    1990:	f1 04       	cpc	r15, r1
    1992:	91 f4       	brne	.+36     	; 0x19b8 <play_game+0x2e4>
			move_terminal_cursor(10,5);
    1994:	65 e0       	ldi	r22, 0x05	; 5
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	8a e0       	ldi	r24, 0x0A	; 10
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
			printf("|  $$$$$$\\  ______   ______ ____  | $$____    ______  | $$");
    19a0:	8f e2       	ldi	r24, 0x2F	; 47
    19a2:	93 e0       	ldi	r25, 0x03	; 3
    19a4:	9f 93       	push	r25
    19a6:	8f 93       	push	r24
    19a8:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
			
			combo_line++;
    19ac:	9f ef       	ldi	r25, 0xFF	; 255
    19ae:	e9 1a       	sub	r14, r25
    19b0:	f9 0a       	sbc	r15, r25
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	82 c0       	rjmp	.+260    	; 0x1abc <play_game+0x3e8>
		} else if (combo_line == 3) {
    19b8:	a3 e0       	ldi	r26, 0x03	; 3
    19ba:	ea 16       	cp	r14, r26
    19bc:	f1 04       	cpc	r15, r1
    19be:	91 f4       	brne	.+36     	; 0x19e4 <play_game+0x310>
			move_terminal_cursor(10,6);
    19c0:	66 e0       	ldi	r22, 0x06	; 6
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	8a e0       	ldi	r24, 0x0A	; 10
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
			printf("| $$   \\$$ /      \\ |      \\    \\ | $$    \\  /      \\ | $$");
    19cc:	8a e6       	ldi	r24, 0x6A	; 106
    19ce:	93 e0       	ldi	r25, 0x03	; 3
    19d0:	9f 93       	push	r25
    19d2:	8f 93       	push	r24
    19d4:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
			
			combo_line++;
    19d8:	bf ef       	ldi	r27, 0xFF	; 255
    19da:	eb 1a       	sub	r14, r27
    19dc:	fb 0a       	sbc	r15, r27
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	6c c0       	rjmp	.+216    	; 0x1abc <play_game+0x3e8>
		} else if (combo_line == 4) {
    19e4:	24 e0       	ldi	r18, 0x04	; 4
    19e6:	e2 16       	cp	r14, r18
    19e8:	f1 04       	cpc	r15, r1
    19ea:	91 f4       	brne	.+36     	; 0x1a10 <play_game+0x33c>
			move_terminal_cursor(10,7);
    19ec:	67 e0       	ldi	r22, 0x07	; 7
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	8a e0       	ldi	r24, 0x0A	; 10
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
			printf("| $$      |  $$$$$$\\| $$$$$$\\$$$$\\| $$$$$$$\\|  $$$$$$\\| $$");
    19f8:	85 ea       	ldi	r24, 0xA5	; 165
    19fa:	93 e0       	ldi	r25, 0x03	; 3
    19fc:	9f 93       	push	r25
    19fe:	8f 93       	push	r24
    1a00:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
			
			combo_line++;
    1a04:	3f ef       	ldi	r19, 0xFF	; 255
    1a06:	e3 1a       	sub	r14, r19
    1a08:	f3 0a       	sbc	r15, r19
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	56 c0       	rjmp	.+172    	; 0x1abc <play_game+0x3e8>
		}  else if (combo_line == 5) {
    1a10:	45 e0       	ldi	r20, 0x05	; 5
    1a12:	e4 16       	cp	r14, r20
    1a14:	f1 04       	cpc	r15, r1
    1a16:	91 f4       	brne	.+36     	; 0x1a3c <play_game+0x368>
			move_terminal_cursor(10,8);
    1a18:	68 e0       	ldi	r22, 0x08	; 8
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	8a e0       	ldi	r24, 0x0A	; 10
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
			printf("| $$   __ | $$  | $$| $$ | $$ | $$| $$  | $$| $$  | $$ \\$$");
    1a24:	80 ee       	ldi	r24, 0xE0	; 224
    1a26:	93 e0       	ldi	r25, 0x03	; 3
    1a28:	9f 93       	push	r25
    1a2a:	8f 93       	push	r24
    1a2c:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
			
			combo_line++;
    1a30:	5f ef       	ldi	r21, 0xFF	; 255
    1a32:	e5 1a       	sub	r14, r21
    1a34:	f5 0a       	sbc	r15, r21
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	40 c0       	rjmp	.+128    	; 0x1abc <play_game+0x3e8>
		} else if (combo_line == 6) {
    1a3c:	86 e0       	ldi	r24, 0x06	; 6
    1a3e:	e8 16       	cp	r14, r24
    1a40:	f1 04       	cpc	r15, r1
    1a42:	91 f4       	brne	.+36     	; 0x1a68 <play_game+0x394>
			move_terminal_cursor(10,9);
    1a44:	69 e0       	ldi	r22, 0x09	; 9
    1a46:	70 e0       	ldi	r23, 0x00	; 0
    1a48:	8a e0       	ldi	r24, 0x0A	; 10
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
			printf("| $$__/  \\| $$__/ $$| $$ | $$ | $$| $$__/ $$| $$__/ $$ __");
    1a50:	8b e1       	ldi	r24, 0x1B	; 27
    1a52:	94 e0       	ldi	r25, 0x04	; 4
    1a54:	9f 93       	push	r25
    1a56:	8f 93       	push	r24
    1a58:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
			
			combo_line++;
    1a5c:	9f ef       	ldi	r25, 0xFF	; 255
    1a5e:	e9 1a       	sub	r14, r25
    1a60:	f9 0a       	sbc	r15, r25
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	2a c0       	rjmp	.+84     	; 0x1abc <play_game+0x3e8>
		} else if (combo_line == 7) {
    1a68:	a7 e0       	ldi	r26, 0x07	; 7
    1a6a:	ea 16       	cp	r14, r26
    1a6c:	f1 04       	cpc	r15, r1
    1a6e:	91 f4       	brne	.+36     	; 0x1a94 <play_game+0x3c0>
			move_terminal_cursor(10,10);
    1a70:	6a e0       	ldi	r22, 0x0A	; 10
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	8a e0       	ldi	r24, 0x0A	; 10
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
			printf(" \\$$    $$ \\$$    $$| $$ | $$ | $$| $$    $$ \\$$    $$|  \\");
    1a7c:	85 e5       	ldi	r24, 0x55	; 85
    1a7e:	94 e0       	ldi	r25, 0x04	; 4
    1a80:	9f 93       	push	r25
    1a82:	8f 93       	push	r24
    1a84:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
			
			combo_line++;
    1a88:	bf ef       	ldi	r27, 0xFF	; 255
    1a8a:	eb 1a       	sub	r14, r27
    1a8c:	fb 0a       	sbc	r15, r27
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	14 c0       	rjmp	.+40     	; 0x1abc <play_game+0x3e8>
		} else if (combo_line == 8) {
    1a94:	28 e0       	ldi	r18, 0x08	; 8
    1a96:	e2 16       	cp	r14, r18
    1a98:	f1 04       	cpc	r15, r1
    1a9a:	81 f4       	brne	.+32     	; 0x1abc <play_game+0x3e8>
			move_terminal_cursor(10,11);
    1a9c:	6b e0       	ldi	r22, 0x0B	; 11
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	8a e0       	ldi	r24, 0x0A	; 10
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
			printf("  \\$$$$$$   \\$$$$$$  \\$$  \\$$  \\$$ \\$$$$$$$   \\$$$$$$  \\$$");
    1aa8:	80 e9       	ldi	r24, 0x90	; 144
    1aaa:	94 e0       	ldi	r25, 0x04	; 4
    1aac:	9f 93       	push	r25
    1aae:	8f 93       	push	r24
    1ab0:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
			
			combo_line = 0;
    1ab8:	e1 2c       	mov	r14, r1
    1aba:	f1 2c       	mov	r15, r1
		}
		
		if (!combo_check) {
    1abc:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <combo_check>
    1ac0:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <combo_check+0x1>
    1ac4:	89 2b       	or	r24, r25
    1ac6:	81 f0       	breq	.+32     	; 0x1ae8 <play_game+0x414>
    1ac8:	17 c0       	rjmp	.+46     	; 0x1af8 <play_game+0x424>
			for (int term_line = 3; term_line < 12; term_line++) {
				move_terminal_cursor(10, term_line);
    1aca:	69 81       	ldd	r22, Y+1	; 0x01
    1acc:	7a 81       	ldd	r23, Y+2	; 0x02
    1ace:	8a e0       	ldi	r24, 0x0A	; 10
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
				clear_to_end_of_line();
    1ad6:	0e 94 23 10 	call	0x2046	; 0x2046 <clear_to_end_of_line>
			
			combo_line = 0;
		}
		
		if (!combo_check) {
			for (int term_line = 3; term_line < 12; term_line++) {
    1ada:	49 81       	ldd	r20, Y+1	; 0x01
    1adc:	5a 81       	ldd	r21, Y+2	; 0x02
    1ade:	4f 5f       	subi	r20, 0xFF	; 255
    1ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae2:	5a 83       	std	Y+2, r21	; 0x02
    1ae4:	49 83       	std	Y+1, r20	; 0x01
    1ae6:	04 c0       	rjmp	.+8      	; 0x1af0 <play_game+0x41c>
    1ae8:	83 e0       	ldi	r24, 0x03	; 3
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	89 83       	std	Y+1, r24	; 0x01
    1af0:	a9 81       	ldd	r26, Y+1	; 0x01
    1af2:	ba 81       	ldd	r27, Y+2	; 0x02
    1af4:	1c 97       	sbiw	r26, 0x0c	; 12
    1af6:	4c f3       	brlt	.-46     	; 0x1aca <play_game+0x3f6>
				
			}
		}
		

		if (!man_mode & !paused) {
    1af8:	20 91 e7 04 	lds	r18, 0x04E7	; 0x8004e7 <man_mode>
    1afc:	30 91 e8 04 	lds	r19, 0x04E8	; 0x8004e8 <man_mode+0x1>
    1b00:	91 e0       	ldi	r25, 0x01	; 1
    1b02:	40 91 e5 04 	lds	r20, 0x04E5	; 0x8004e5 <paused>
    1b06:	50 91 e6 04 	lds	r21, 0x04E6	; 0x8004e6 <paused+0x1>
    1b0a:	45 2b       	or	r20, r21
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <play_game+0x43c>
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	21 15       	cp	r18, r1
    1b14:	31 05       	cpc	r19, r1
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <play_game+0x446>
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	89 23       	and	r24, r25
    1b1c:	91 f1       	breq	.+100    	; 0x1b82 <play_game+0x4ae>
			current_time = get_current_time();
    1b1e:	0e 94 61 10 	call	0x20c2	; 0x20c2 <get_current_time>
    1b22:	69 83       	std	Y+1, r22	; 0x01
    1b24:	7a 83       	std	Y+2, r23	; 0x02
    1b26:	8b 83       	std	Y+3, r24	; 0x03
    1b28:	9c 83       	std	Y+4, r25	; 0x04
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
    1b2a:	4b 01       	movw	r8, r22
    1b2c:	5c 01       	movw	r10, r24
    1b2e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b30:	3e 81       	ldd	r19, Y+6	; 0x06
    1b32:	4f 81       	ldd	r20, Y+7	; 0x07
    1b34:	58 85       	ldd	r21, Y+8	; 0x08
    1b36:	82 1a       	sub	r8, r18
    1b38:	93 0a       	sbc	r9, r19
    1b3a:	a4 0a       	sbc	r10, r20
    1b3c:	b5 0a       	sbc	r11, r21
    1b3e:	20 91 fc 04 	lds	r18, 0x04FC	; 0x8004fc <game_speed>
    1b42:	30 91 fd 04 	lds	r19, 0x04FD	; 0x8004fd <game_speed+0x1>
    1b46:	ad ec       	ldi	r26, 0xCD	; 205
    1b48:	bc ec       	ldi	r27, 0xCC	; 204
    1b4a:	0e 94 1a 11 	call	0x2234	; 0x2234 <__umulhisi3>
    1b4e:	96 95       	lsr	r25
    1b50:	87 95       	ror	r24
    1b52:	96 95       	lsr	r25
    1b54:	87 95       	ror	r24
    1b56:	a3 01       	movw	r20, r6
    1b58:	92 01       	movw	r18, r4
    1b5a:	28 0f       	add	r18, r24
    1b5c:	39 1f       	adc	r19, r25
    1b5e:	41 1d       	adc	r20, r1
    1b60:	51 1d       	adc	r21, r1
    1b62:	82 16       	cp	r8, r18
    1b64:	93 06       	cpc	r9, r19
    1b66:	a4 06       	cpc	r10, r20
    1b68:	b5 06       	cpc	r11, r21
    1b6a:	98 f0       	brcs	.+38     	; 0x1b92 <play_game+0x4be>
			{
				pause_time = 0;
				// 200ms (0.2 second) has passed since the last time we advance the
				// notes here, so update the advance the notes
				advance_note();
    1b6c:	0e 94 9b 04 	call	0x936	; 0x936 <advance_note>
				
				// Update the most recent time the notes were advanced
				last_advance_time = current_time;
    1b70:	49 80       	ldd	r4, Y+1	; 0x01
    1b72:	5a 80       	ldd	r5, Y+2	; 0x02
    1b74:	6b 80       	ldd	r6, Y+3	; 0x03
    1b76:	7c 80       	ldd	r7, Y+4	; 0x04
		if (!man_mode & !paused) {
			current_time = get_current_time();
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
			{
				pause_time = 0;
    1b78:	1d 82       	std	Y+5, r1	; 0x05
    1b7a:	1e 82       	std	Y+6, r1	; 0x06
    1b7c:	1f 82       	std	Y+7, r1	; 0x07
    1b7e:	18 86       	std	Y+8, r1	; 0x08
    1b80:	08 c0       	rjmp	.+16     	; 0x1b92 <play_game+0x4be>
				
				// Update the most recent time the notes were advanced
				last_advance_time = current_time;
			}
			
		} else if (man_mode) {
    1b82:	23 2b       	or	r18, r19
    1b84:	31 f0       	breq	.+12     	; 0x1b92 <play_game+0x4be>
			if (keyboard_input == 'n' || keyboard_input == 'N') {
    1b86:	1e 36       	cpi	r17, 0x6E	; 110
    1b88:	11 f0       	breq	.+4      	; 0x1b8e <play_game+0x4ba>
    1b8a:	1e 34       	cpi	r17, 0x4E	; 78
    1b8c:	11 f4       	brne	.+4      	; 0x1b92 <play_game+0x4be>
				advance_note();
    1b8e:	0e 94 9b 04 	call	0x936	; 0x936 <advance_note>
	} else if (game_speed == 250) {
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
	}
	
	// We play the game until it's over
	while (!is_game_over())
    1b92:	0e 94 b1 06 	call	0xd62	; 0xd62 <is_game_over>
    1b96:	88 23       	and	r24, r24
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <play_game+0x4c8>
    1b9a:	07 ce       	rjmp	.-1010   	; 0x17aa <play_game+0xd6>
			if (keyboard_input == 'n' || keyboard_input == 'N') {
				advance_note();
			}
		}
	}
}
    1b9c:	28 96       	adiw	r28, 0x08	; 8
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	ff 90       	pop	r15
    1bb0:	ef 90       	pop	r14
    1bb2:	bf 90       	pop	r11
    1bb4:	af 90       	pop	r10
    1bb6:	9f 90       	pop	r9
    1bb8:	8f 90       	pop	r8
    1bba:	7f 90       	pop	r7
    1bbc:	6f 90       	pop	r6
    1bbe:	5f 90       	pop	r5
    1bc0:	4f 90       	pop	r4
    1bc2:	08 95       	ret

00001bc4 <handle_game_over>:

void handle_game_over()
{
	clear_terminal();
    1bc4:	0e 94 1a 10 	call	0x2034	; 0x2034 <clear_terminal>
	move_terminal_cursor(10,13);
    1bc8:	6d e0       	ldi	r22, 0x0D	; 13
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	8a e0       	ldi	r24, 0x0A	; 10
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    1bd4:	8a ea       	ldi	r24, 0xAA	; 170
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	9f 93       	push	r25
    1bda:	8f 93       	push	r24
    1bdc:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
	move_terminal_cursor(10,14);
    1be0:	6e e0       	ldi	r22, 0x0E	; 14
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	8a e0       	ldi	r24, 0x0A	; 10
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	printf("Final Score: %d\n", points);
    1bec:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <points+0x1>
    1bf0:	8f 93       	push	r24
    1bf2:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
    1bf6:	8f 93       	push	r24
    1bf8:	8b ec       	ldi	r24, 0xCB	; 203
    1bfa:	94 e0       	ldi	r25, 0x04	; 4
    1bfc:	9f 93       	push	r25
    1bfe:	8f 93       	push	r24
    1c00:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
	//Display current track
	move_terminal_cursor(10, 15);
    1c04:	6f e0       	ldi	r22, 0x0F	; 15
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	8a e0       	ldi	r24, 0x0A	; 10
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	printf("Track: Through Fire & Flames");														//do %s and add a new track title at the end.
    1c10:	80 e1       	ldi	r24, 0x10	; 16
    1c12:	92 e0       	ldi	r25, 0x02	; 2
    1c14:	9f 93       	push	r25
    1c16:	8f 93       	push	r24
    1c18:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
	move_terminal_cursor(10, 16);
    1c1c:	60 e1       	ldi	r22, 0x10	; 16
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	8a e0       	ldi	r24, 0x0A	; 10
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	clear_to_end_of_line();
    1c28:	0e 94 23 10 	call	0x2046	; 0x2046 <clear_to_end_of_line>
	//display game sped
	if (game_speed == 1000) {
    1c2c:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <game_speed>
    1c30:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <game_speed+0x1>
    1c34:	2d b7       	in	r18, 0x3d	; 61
    1c36:	3e b7       	in	r19, 0x3e	; 62
    1c38:	28 5f       	subi	r18, 0xF8	; 248
    1c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	3e bf       	out	0x3e, r19	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	2d bf       	out	0x3d, r18	; 61
    1c46:	88 3e       	cpi	r24, 0xE8	; 232
    1c48:	33 e0       	ldi	r19, 0x03	; 3
    1c4a:	93 07       	cpc	r25, r19
    1c4c:	69 f4       	brne	.+26     	; 0x1c68 <handle_game_over+0xa4>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    1c4e:	9f 93       	push	r25
    1c50:	8f 93       	push	r24
    1c52:	8d e2       	ldi	r24, 0x2D	; 45
    1c54:	92 e0       	ldi	r25, 0x02	; 2
    1c56:	9f 93       	push	r25
    1c58:	8f 93       	push	r24
    1c5a:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	20 c0       	rjmp	.+64     	; 0x1ca8 <handle_game_over+0xe4>
		
		} else if (game_speed == 500) {
    1c68:	84 3f       	cpi	r24, 0xF4	; 244
    1c6a:	21 e0       	ldi	r18, 0x01	; 1
    1c6c:	92 07       	cpc	r25, r18
    1c6e:	69 f4       	brne	.+26     	; 0x1c8a <handle_game_over+0xc6>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1c70:	9f 93       	push	r25
    1c72:	8f 93       	push	r24
    1c74:	83 e5       	ldi	r24, 0x53	; 83
    1c76:	92 e0       	ldi	r25, 0x02	; 2
    1c78:	9f 93       	push	r25
    1c7a:	8f 93       	push	r24
    1c7c:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f c0       	rjmp	.+30     	; 0x1ca8 <handle_game_over+0xe4>
		
		} else if (game_speed == 250) {
    1c8a:	8a 3f       	cpi	r24, 0xFA	; 250
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	61 f4       	brne	.+24     	; 0x1ca8 <handle_game_over+0xe4>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1c90:	9f 93       	push	r25
    1c92:	8f 93       	push	r24
    1c94:	87 e7       	ldi	r24, 0x77	; 119
    1c96:	92 e0       	ldi	r25, 0x02	; 2
    1c98:	9f 93       	push	r25
    1c9a:	8f 93       	push	r24
    1c9c:	0e 94 9d 11 	call	0x233a	; 0x233a <printf>
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
	}
	
	move_terminal_cursor(10, 17);
    1ca8:	61 e1       	ldi	r22, 0x11	; 17
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	8a e0       	ldi	r24, 0x0A	; 10
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	0e 94 09 10 	call	0x2012	; 0x2012 <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
    1cb4:	8c e7       	ldi	r24, 0x7C	; 124
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	9f 93       	push	r25
    1cba:	8f 93       	push	r24
    1cbc:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	10 c0       	rjmp	.+32     	; 0x1ce6 <handle_game_over+0x122>
	{
		char keyboard_input = -1;
				
		if (serial_input_available()) {
    1cc6:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <serial_input_available>
    1cca:	88 23       	and	r24, r24
    1ccc:	39 f0       	breq	.+14     	; 0x1cdc <handle_game_over+0x118>
			keyboard_input = fgetc(stdin);
    1cce:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <__iob>
    1cd2:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <__iob+0x1>
    1cd6:	0e 94 5f 11 	call	0x22be	; 0x22be <fgetc>
    1cda:	01 c0       	rjmp	.+2      	; 0x1cde <handle_game_over+0x11a>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
	{
		char keyboard_input = -1;
    1cdc:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		//check if the user presses s
		if (keyboard_input == 's' || keyboard_input == 'S') {
    1cde:	83 37       	cpi	r24, 0x73	; 115
    1ce0:	31 f0       	breq	.+12     	; 0x1cee <handle_game_over+0x12a>
    1ce2:	83 35       	cpi	r24, 0x53	; 83
    1ce4:	21 f0       	breq	.+8      	; 0x1cee <handle_game_over+0x12a>
	move_terminal_cursor(10, 17);
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    1ce6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    1cea:	8f 3f       	cpi	r24, 0xFF	; 255
    1cec:	61 f3       	breq	.-40     	; 0x1cc6 <handle_game_over+0x102>
		if (keyboard_input == 's' || keyboard_input == 'S') {
			break;
		}
	}	
	
	start_screen();
    1cee:	0e 94 14 07 	call	0xe28	; 0xe28 <start_screen>
    1cf2:	08 95       	ret

00001cf4 <main>:
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1cf4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <initialise_hardware>
	
	points = 0;
    1cf8:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <points+0x1>
    1cfc:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <points>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
    1d00:	0e 94 14 07 	call	0xe28	; 0xe28 <start_screen>
	
	// Loop forever and continuously play the game.
	while(1)
	{
		new_game();
    1d04:	0e 94 57 0b 	call	0x16ae	; 0x16ae <new_game>
		play_game();
    1d08:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <play_game>
		handle_game_over();
    1d0c:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <handle_game_over>
    1d10:	f9 cf       	rjmp	.-14     	; 0x1d04 <main+0x10>

00001d12 <uart_put_char>:
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream)
{
    1d12:	cf 93       	push	r28
    1d14:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n')
    1d16:	8a 30       	cpi	r24, 0x0A	; 10
    1d18:	19 f4       	brne	.+6      	; 0x1d20 <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
    1d1a:	8d e0       	ldi	r24, 0x0D	; 13
    1d1c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1d20:	9f b7       	in	r25, 0x3f	; 63
    1d22:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
    1d26:	99 23       	and	r25, r25
    1d28:	29 f1       	breq	.+74     	; 0x1d74 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1d2a:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bytes_in_out_buffer>
    1d2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1d30:	d1 f3       	breq	.-12     	; 0x1d26 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1d32:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1d34:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <out_insert_pos>
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	8e 0f       	add	r24, r30
    1d3c:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <out_insert_pos>
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	e0 50       	subi	r30, 0x00	; 0
    1d44:	fb 4f       	sbci	r31, 0xFB	; 251
    1d46:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1d48:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bytes_in_out_buffer>
    1d4c:	8f 5f       	subi	r24, 0xFF	; 255
    1d4e:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
    1d52:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <out_insert_pos>
    1d56:	8f 3f       	cpi	r24, 0xFF	; 255
    1d58:	11 f4       	brne	.+4      	; 0x1d5e <uart_put_char+0x4c>
	{
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1d5a:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1d5e:	e1 ec       	ldi	r30, 0xC1	; 193
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	80 62       	ori	r24, 0x20	; 32
    1d66:	80 83       	st	Z, r24
	if (interrupts_enabled)
    1d68:	99 23       	and	r25, r25
    1d6a:	39 f0       	breq	.+14     	; 0x1d7a <uart_put_char+0x68>
	{
		sei();
    1d6c:	78 94       	sei
	}
	return 0;
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	05 c0       	rjmp	.+10     	; 0x1d7e <uart_put_char+0x6c>
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
}
    1d7e:	cf 91       	pop	r28
    1d80:	08 95       	ret

00001d82 <uart_get_char>:

int uart_get_char(FILE* stream)
{
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0)
    1d82:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bytes_in_input_buffer>
    1d86:	88 23       	and	r24, r24
    1d88:	e1 f3       	breq	.-8      	; 0x1d82 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1d8a:	2f b7       	in	r18, 0x3f	; 63
    1d8c:	20 78       	andi	r18, 0x80	; 128
	cli();
    1d8e:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
    1d90:	80 91 ff 05 	lds	r24, 0x05FF	; 0x8005ff <input_insert_pos>
    1d94:	30 91 11 06 	lds	r19, 0x0611	; 0x800611 <bytes_in_input_buffer>
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	83 1b       	sub	r24, r19
    1d9c:	91 09       	sbc	r25, r1
    1d9e:	5a f4       	brpl	.+22     	; 0x1db6 <uart_get_char+0x34>
	{
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1da0:	e0 91 ff 05 	lds	r30, 0x05FF	; 0x8005ff <input_insert_pos>
    1da4:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bytes_in_input_buffer>
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	e8 1b       	sub	r30, r24
    1dac:	f1 09       	sbc	r31, r1
    1dae:	e0 5f       	subi	r30, 0xF0	; 240
    1db0:	f9 4f       	sbci	r31, 0xF9	; 249
    1db2:	80 81       	ld	r24, Z
    1db4:	0a c0       	rjmp	.+20     	; 0x1dca <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1db6:	e0 91 ff 05 	lds	r30, 0x05FF	; 0x8005ff <input_insert_pos>
    1dba:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bytes_in_input_buffer>
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	e8 1b       	sub	r30, r24
    1dc2:	f1 09       	sbc	r31, r1
    1dc4:	e0 50       	subi	r30, 0x00	; 0
    1dc6:	fa 4f       	sbci	r31, 0xFA	; 250
    1dc8:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1dca:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <bytes_in_input_buffer>
    1dce:	91 50       	subi	r25, 0x01	; 1
    1dd0:	90 93 11 06 	sts	0x0611, r25	; 0x800611 <bytes_in_input_buffer>
	if (interrupts_enabled)
    1dd4:	22 23       	and	r18, r18
    1dd6:	09 f0       	breq	.+2      	; 0x1dda <uart_get_char+0x58>
	{
		sei();
    1dd8:	78 94       	sei
	}	
	return c;
}
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	08 95       	ret

00001dde <init_serial_stdio>:
{
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1dde:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <out_insert_pos>
	bytes_in_out_buffer = 0;
    1de2:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <bytes_in_out_buffer>
	input_insert_pos = 0;
    1de6:	10 92 ff 05 	sts	0x05FF, r1	; 0x8005ff <input_insert_pos>
	bytes_in_input_buffer = 0;
    1dea:	10 92 11 06 	sts	0x0611, r1	; 0x800611 <bytes_in_input_buffer>
	input_overrun = 0;
    1dee:	10 92 10 06 	sts	0x0610, r1	; 0x800610 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1df2:	40 93 e9 04 	sts	0x04E9, r20	; 0x8004e9 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	aa 1f       	adc	r26, r26
    1e00:	bb 1f       	adc	r27, r27
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	aa 1f       	adc	r26, r26
    1e08:	bb 1f       	adc	r27, r27
    1e0a:	9c 01       	movw	r18, r24
    1e0c:	ad 01       	movw	r20, r26
    1e0e:	22 0f       	add	r18, r18
    1e10:	33 1f       	adc	r19, r19
    1e12:	44 1f       	adc	r20, r20
    1e14:	55 1f       	adc	r21, r21
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	72 e1       	ldi	r23, 0x12	; 18
    1e1a:	8a e7       	ldi	r24, 0x7A	; 122
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__divmodsi4>
    1e22:	ba 01       	movw	r22, r20
    1e24:	a9 01       	movw	r20, r18
    1e26:	4f 5f       	subi	r20, 0xFF	; 255
    1e28:	5f 4f       	sbci	r21, 0xFF	; 255
    1e2a:	6f 4f       	sbci	r22, 0xFF	; 255
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2e:	db 01       	movw	r26, r22
    1e30:	ca 01       	movw	r24, r20
    1e32:	1a f4       	brpl	.+6      	; 0x1e3a <init_serial_stdio+0x5c>
    1e34:	01 96       	adiw	r24, 0x01	; 1
    1e36:	a1 1d       	adc	r26, r1
    1e38:	b1 1d       	adc	r27, r1
    1e3a:	b5 95       	asr	r27
    1e3c:	a7 95       	ror	r26
    1e3e:	97 95       	ror	r25
    1e40:	87 95       	ror	r24
    1e42:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1e44:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1e48:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    1e4c:	e1 ec       	ldi	r30, 0xC1	; 193
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	88 e1       	ldi	r24, 0x18	; 24
    1e52:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
    1e54:	80 81       	ld	r24, Z
    1e56:	80 68       	ori	r24, 0x80	; 128
    1e58:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1e5a:	e2 e1       	ldi	r30, 0x12	; 18
    1e5c:	f6 e0       	ldi	r31, 0x06	; 6
    1e5e:	8c e0       	ldi	r24, 0x0C	; 12
    1e60:	91 e0       	ldi	r25, 0x01	; 1
    1e62:	93 83       	std	Z+3, r25	; 0x03
    1e64:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1e66:	91 83       	std	Z+1, r25	; 0x01
    1e68:	80 83       	st	Z, r24
    1e6a:	08 95       	ret

00001e6c <serial_input_available>:
}

int8_t serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
    1e6c:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <bytes_in_input_buffer>
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	91 11       	cpse	r25, r1
    1e74:	01 c0       	rjmp	.+2      	; 0x1e78 <serial_input_available+0xc>
    1e76:	80 e0       	ldi	r24, 0x00	; 0
}
    1e78:	08 95       	ret

00001e7a <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1e7a:	10 92 ff 05 	sts	0x05FF, r1	; 0x8005ff <input_insert_pos>
	bytes_in_input_buffer = 0;
    1e7e:	10 92 11 06 	sts	0x0611, r1	; 0x800611 <bytes_in_input_buffer>
    1e82:	08 95       	ret

00001e84 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    1e84:	1f 92       	push	r1
    1e86:	0f 92       	push	r0
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	0f 92       	push	r0
    1e8c:	11 24       	eor	r1, r1
    1e8e:	2f 93       	push	r18
    1e90:	8f 93       	push	r24
    1e92:	9f 93       	push	r25
    1e94:	ef 93       	push	r30
    1e96:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0)
    1e98:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bytes_in_out_buffer>
    1e9c:	88 23       	and	r24, r24
    1e9e:	29 f1       	breq	.+74     	; 0x1eea <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
    1ea0:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <out_insert_pos>
    1ea4:	20 91 ff 04 	lds	r18, 0x04FF	; 0x8004ff <bytes_in_out_buffer>
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	82 1b       	sub	r24, r18
    1eac:	91 09       	sbc	r25, r1
    1eae:	5a f4       	brpl	.+22     	; 0x1ec6 <__vector_21+0x42>
		{
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1eb0:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <out_insert_pos>
    1eb4:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bytes_in_out_buffer>
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	e8 1b       	sub	r30, r24
    1ebc:	f1 09       	sbc	r31, r1
    1ebe:	e1 50       	subi	r30, 0x01	; 1
    1ec0:	fa 4f       	sbci	r31, 0xFA	; 250
    1ec2:	90 81       	ld	r25, Z
    1ec4:	0a c0       	rjmp	.+20     	; 0x1eda <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1ec6:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <out_insert_pos>
    1eca:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bytes_in_out_buffer>
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	e8 1b       	sub	r30, r24
    1ed2:	f1 09       	sbc	r31, r1
    1ed4:	e0 50       	subi	r30, 0x00	; 0
    1ed6:	fb 4f       	sbci	r31, 0xFB	; 251
    1ed8:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1eda:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bytes_in_out_buffer>
    1ede:	81 50       	subi	r24, 0x01	; 1
    1ee0:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1ee4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1ee8:	05 c0       	rjmp	.+10     	; 0x1ef4 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
    1eea:	e1 ec       	ldi	r30, 0xC1	; 193
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	8f 7d       	andi	r24, 0xDF	; 223
    1ef2:	80 83       	st	Z, r24
	}
}
    1ef4:	ff 91       	pop	r31
    1ef6:	ef 91       	pop	r30
    1ef8:	9f 91       	pop	r25
    1efa:	8f 91       	pop	r24
    1efc:	2f 91       	pop	r18
    1efe:	0f 90       	pop	r0
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	0f 90       	pop	r0
    1f04:	1f 90       	pop	r1
    1f06:	18 95       	reti

00001f08 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1f08:	1f 92       	push	r1
    1f0a:	0f 92       	push	r0
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	0f 92       	push	r0
    1f10:	11 24       	eor	r1, r1
    1f12:	2f 93       	push	r18
    1f14:	3f 93       	push	r19
    1f16:	4f 93       	push	r20
    1f18:	5f 93       	push	r21
    1f1a:	6f 93       	push	r22
    1f1c:	7f 93       	push	r23
    1f1e:	8f 93       	push	r24
    1f20:	9f 93       	push	r25
    1f22:	af 93       	push	r26
    1f24:	bf 93       	push	r27
    1f26:	cf 93       	push	r28
    1f28:	ef 93       	push	r30
    1f2a:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1f2c:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
    1f30:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <do_echo>
    1f34:	88 23       	and	r24, r24
    1f36:	49 f0       	breq	.+18     	; 0x1f4a <__vector_20+0x42>
    1f38:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bytes_in_out_buffer>
    1f3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f3e:	29 f0       	breq	.+10     	; 0x1f4a <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	70 e0       	ldi	r23, 0x00	; 0
    1f44:	8c 2f       	mov	r24, r28
    1f46:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
    1f4a:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bytes_in_input_buffer>
    1f4e:	80 31       	cpi	r24, 0x10	; 16
    1f50:	20 f0       	brcs	.+8      	; 0x1f5a <__vector_20+0x52>
	{
		input_overrun = 1;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	80 93 10 06 	sts	0x0610, r24	; 0x800610 <input_overrun>
    1f58:	18 c0       	rjmp	.+48     	; 0x1f8a <__vector_20+0x82>
	} else
	{
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r')
    1f5a:	cd 30       	cpi	r28, 0x0D	; 13
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <__vector_20+0x58>
		{
			c = '\n';
    1f5e:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1f60:	e0 91 ff 05 	lds	r30, 0x05FF	; 0x8005ff <input_insert_pos>
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	8e 0f       	add	r24, r30
    1f68:	80 93 ff 05 	sts	0x05FF, r24	; 0x8005ff <input_insert_pos>
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	e0 50       	subi	r30, 0x00	; 0
    1f70:	fa 4f       	sbci	r31, 0xFA	; 250
    1f72:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1f74:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bytes_in_input_buffer>
    1f78:	8f 5f       	subi	r24, 0xFF	; 255
    1f7a:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
    1f7e:	80 91 ff 05 	lds	r24, 0x05FF	; 0x8005ff <input_insert_pos>
    1f82:	80 31       	cpi	r24, 0x10	; 16
    1f84:	11 f4       	brne	.+4      	; 0x1f8a <__vector_20+0x82>
		{
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1f86:	10 92 ff 05 	sts	0x05FF, r1	; 0x8005ff <input_insert_pos>
		}
	}
}
    1f8a:	ff 91       	pop	r31
    1f8c:	ef 91       	pop	r30
    1f8e:	cf 91       	pop	r28
    1f90:	bf 91       	pop	r27
    1f92:	af 91       	pop	r26
    1f94:	9f 91       	pop	r25
    1f96:	8f 91       	pop	r24
    1f98:	7f 91       	pop	r23
    1f9a:	6f 91       	pop	r22
    1f9c:	5f 91       	pop	r21
    1f9e:	4f 91       	pop	r20
    1fa0:	3f 91       	pop	r19
    1fa2:	2f 91       	pop	r18
    1fa4:	0f 90       	pop	r0
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	0f 90       	pop	r0
    1faa:	1f 90       	pop	r1
    1fac:	18 95       	reti

00001fae <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider)
{
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    1fae:	94 b1       	in	r25, 0x04	; 4
    1fb0:	90 6b       	ori	r25, 0xB0	; 176
    1fb2:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
    1fb4:	95 b1       	in	r25, 0x05	; 5
    1fb6:	90 61       	ori	r25, 0x10	; 16
    1fb8:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    1fba:	90 e5       	ldi	r25, 0x50	; 80
    1fbc:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider)
    1fbe:	88 30       	cpi	r24, 0x08	; 8
    1fc0:	21 f0       	breq	.+8      	; 0x1fca <spi_setup_master+0x1c>
    1fc2:	80 32       	cpi	r24, 0x20	; 32
    1fc4:	11 f0       	breq	.+4      	; 0x1fca <spi_setup_master+0x1c>
    1fc6:	82 30       	cpi	r24, 0x02	; 2
    1fc8:	19 f4       	brne	.+6      	; 0x1fd0 <spi_setup_master+0x22>
	{
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
    1fca:	91 e0       	ldi	r25, 0x01	; 1
    1fcc:	9d bd       	out	0x2d, r25	; 45
			break;
    1fce:	01 c0       	rjmp	.+2      	; 0x1fd2 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    1fd0:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
    1fd2:	80 32       	cpi	r24, 0x20	; 32
    1fd4:	69 f0       	breq	.+26     	; 0x1ff0 <spi_setup_master+0x42>
    1fd6:	28 f4       	brcc	.+10     	; 0x1fe2 <spi_setup_master+0x34>
    1fd8:	88 30       	cpi	r24, 0x08	; 8
    1fda:	71 f0       	breq	.+28     	; 0x1ff8 <spi_setup_master+0x4a>
    1fdc:	80 31       	cpi	r24, 0x10	; 16
    1fde:	61 f0       	breq	.+24     	; 0x1ff8 <spi_setup_master+0x4a>
    1fe0:	0e c0       	rjmp	.+28     	; 0x1ffe <spi_setup_master+0x50>
    1fe2:	80 34       	cpi	r24, 0x40	; 64
    1fe4:	29 f0       	breq	.+10     	; 0x1ff0 <spi_setup_master+0x42>
    1fe6:	80 38       	cpi	r24, 0x80	; 128
    1fe8:	51 f4       	brne	.+20     	; 0x1ffe <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
    1fea:	8c b5       	in	r24, 0x2c	; 44
    1fec:	81 60       	ori	r24, 0x01	; 1
    1fee:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
    1ff0:	8c b5       	in	r24, 0x2c	; 44
    1ff2:	82 60       	ori	r24, 0x02	; 2
    1ff4:	8c bd       	out	0x2c, r24	; 44
			break;
    1ff6:	03 c0       	rjmp	.+6      	; 0x1ffe <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
    1ff8:	8c b5       	in	r24, 0x2c	; 44
    1ffa:	81 60       	ori	r24, 0x01	; 1
    1ffc:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
    1ffe:	85 b1       	in	r24, 0x05	; 5
    2000:	8f 7e       	andi	r24, 0xEF	; 239
    2002:	85 b9       	out	0x05, r24	; 5
    2004:	08 95       	ret

00002006 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    2006:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    2008:	0d b4       	in	r0, 0x2d	; 45
    200a:	07 fe       	sbrs	r0, 7
    200c:	fd cf       	rjmp	.-6      	; 0x2008 <spi_send_byte+0x2>
	{
		; // wait
	}
	return SPDR0;
    200e:	8e b5       	in	r24, 0x2e	; 46
}
    2010:	08 95       	ret

00002012 <move_terminal_cursor>:
}

void reverse_video(void)
{
	printf_P(PSTR("\x1b[7m"));
}
    2012:	9f 93       	push	r25
    2014:	8f 93       	push	r24
    2016:	7f 93       	push	r23
    2018:	6f 93       	push	r22
    201a:	8d e7       	ldi	r24, 0x7D	; 125
    201c:	93 e0       	ldi	r25, 0x03	; 3
    201e:	9f 93       	push	r25
    2020:	8f 93       	push	r24
    2022:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	08 95       	ret

00002034 <clear_terminal>:

void clear_terminal(void)
{
	printf_P(PSTR("\x1b[2J"));
    2034:	88 e7       	ldi	r24, 0x78	; 120
    2036:	93 e0       	ldi	r25, 0x03	; 3
    2038:	9f 93       	push	r25
    203a:	8f 93       	push	r24
    203c:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
}
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	08 95       	ret

00002046 <clear_to_end_of_line>:

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
    2046:	84 e7       	ldi	r24, 0x74	; 116
    2048:	93 e0       	ldi	r25, 0x03	; 3
    204a:	9f 93       	push	r25
    204c:	8f 93       	push	r24
    204e:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
}
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	08 95       	ret

00002058 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    2058:	1f 92       	push	r1
    205a:	8f 93       	push	r24
    205c:	8e e6       	ldi	r24, 0x6E	; 110
    205e:	93 e0       	ldi	r25, 0x03	; 3
    2060:	9f 93       	push	r25
    2062:	8f 93       	push	r24
    2064:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
}
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	08 95       	ret

00002072 <hide_cursor>:

void hide_cursor()
{
	printf_P(PSTR("\x1b[?25l"));
    2072:	87 e6       	ldi	r24, 0x67	; 103
    2074:	93 e0       	ldi	r25, 0x03	; 3
    2076:	9f 93       	push	r25
    2078:	8f 93       	push	r24
    207a:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	08 95       	ret

00002084 <show_cursor>:

void show_cursor()
{
	printf_P(PSTR("\x1b[?25h"));
    2084:	80 e6       	ldi	r24, 0x60	; 96
    2086:	93 e0       	ldi	r25, 0x03	; 3
    2088:	9f 93       	push	r25
    208a:	8f 93       	push	r24
    208c:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf_P>
}
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	08 95       	ret

00002096 <init_timer0>:
void init_timer0(void)
{
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
    2096:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <clock_ticks_ms>
    209a:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <clock_ticks_ms+0x1>
    209e:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <clock_ticks_ms+0x2>
    20a2:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    20a6:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    20a8:	8c e7       	ldi	r24, 0x7C	; 124
    20aa:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
    20ac:	92 e0       	ldi	r25, 0x02	; 2
    20ae:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    20b0:	83 e0       	ldi	r24, 0x03	; 3
    20b2:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
    20b4:	ee e6       	ldi	r30, 0x6E	; 110
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	82 60       	ori	r24, 0x02	; 2
    20bc:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
    20be:	95 bb       	out	0x15, r25	; 21
    20c0:	08 95       	ret

000020c2 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    20c2:	8f b7       	in	r24, 0x3f	; 63
    20c4:	28 2f       	mov	r18, r24
    20c6:	20 78       	andi	r18, 0x80	; 128
	cli();
    20c8:	f8 94       	cli
	return_value = clock_ticks_ms;
    20ca:	60 91 ea 04 	lds	r22, 0x04EA	; 0x8004ea <clock_ticks_ms>
    20ce:	70 91 eb 04 	lds	r23, 0x04EB	; 0x8004eb <clock_ticks_ms+0x1>
    20d2:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <clock_ticks_ms+0x2>
    20d6:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    20da:	22 23       	and	r18, r18
    20dc:	09 f0       	breq	.+2      	; 0x20e0 <get_current_time+0x1e>
	{
		sei();
    20de:	78 94       	sei
	}
	return return_value;
}
    20e0:	08 95       	ret

000020e2 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
    20e2:	1f 92       	push	r1
    20e4:	0f 92       	push	r0
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	0f 92       	push	r0
    20ea:	11 24       	eor	r1, r1
    20ec:	8f 93       	push	r24
    20ee:	9f 93       	push	r25
    20f0:	af 93       	push	r26
    20f2:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
    20f4:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <clock_ticks_ms>
    20f8:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <clock_ticks_ms+0x1>
    20fc:	a0 91 ec 04 	lds	r26, 0x04EC	; 0x8004ec <clock_ticks_ms+0x2>
    2100:	b0 91 ed 04 	lds	r27, 0x04ED	; 0x8004ed <clock_ticks_ms+0x3>
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	a1 1d       	adc	r26, r1
    2108:	b1 1d       	adc	r27, r1
    210a:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <clock_ticks_ms>
    210e:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <clock_ticks_ms+0x1>
    2112:	a0 93 ec 04 	sts	0x04EC, r26	; 0x8004ec <clock_ticks_ms+0x2>
    2116:	b0 93 ed 04 	sts	0x04ED, r27	; 0x8004ed <clock_ticks_ms+0x3>
}
    211a:	bf 91       	pop	r27
    211c:	af 91       	pop	r26
    211e:	9f 91       	pop	r25
    2120:	8f 91       	pop	r24
    2122:	0f 90       	pop	r0
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	0f 90       	pop	r0
    2128:	1f 90       	pop	r1
    212a:	18 95       	reti

0000212c <init_timer1>:
*/
/* Set up timer 1 For buzzer
 */
void init_timer1(void)
{
	freq = 200;		// Hz
    212c:	88 ec       	ldi	r24, 0xC8	; 200
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	90 93 f1 04 	sts	0x04F1, r25	; 0x8004f1 <freq+0x1>
    2134:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <freq>
	duty_cycle = 0;	// %
    2138:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <duty_cycle>
    213c:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <duty_cycle+0x1>
    2140:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <duty_cycle+0x2>
    2144:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <duty_cycle+0x3>
	uint16_t clockperiod = (1000000UL / freq);
	uint16_t pulsewidth = (duty_cycle * clockperiod)/100;
	
	// Set the maximum count value for timer/counter 1 to be one less than the clockperiod
	OCR1A = clockperiod - 1;
    2148:	87 e8       	ldi	r24, 0x87	; 135
    214a:	93 e1       	ldi	r25, 0x13	; 19
    214c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2150:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// Set the count compare value based on the pulse width. The value will be 1 less
	// than the pulse width - unless the pulse width is 0.
	if(pulsewidth == 0) {
		OCR1B = 0;
    2154:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2158:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	//set up timer 1 for;
	//Fast PWM, counting from 0 to the value in OCR1A
	//before reseting to 0. Count at 1MHz (CLK/8).
	//Configure output OC1B to be CTC non-inverting mode.
	TCCR1A = (1 << COM1B1) | (1 << WGM10) | (1 <<WGM11);
    215c:	83 e2       	ldi	r24, 0x23	; 35
    215e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << CS11) | (1 << WGM12) |(1 << WGM13);
    2162:	8a e1       	ldi	r24, 0x1A	; 26
    2164:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    2168:	08 95       	ret

0000216a <init_timer2>:
void init_timer2(void)
{
	
	//TCNT2 = 0;
	//set up so that there is an interrupt every 10ms (100 times per second)
	OCR2A = 77; //clock divided by 1024 - count for 10000 cycles
    216a:	8d e4       	ldi	r24, 0x4D	; 77
    216c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = 0; //CTC mode
    2170:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1<<WGM22) | (1<<CS22) | (1<<CS20); // Divide clock by 1024(PRE) 
    2174:	8d e0       	ldi	r24, 0x0D	; 13
    2176:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	//enable interrupt on timer on output compare match
	TIMSK2 = (1<<OCIE2A);
    217a:	82 e0       	ldi	r24, 0x02	; 2
    217c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	
	//Ensure interrupt flag is cleared
	TIFR2 = (1<<OCF2A);
    2180:	87 bb       	out	0x17, r24	; 23
	
	// Turn on global interrupts
	sei();
    2182:	78 94       	sei
    2184:	08 95       	ret

00002186 <__vector_9>:
}

ISR(TIMER2_COMPA_vect) {
    2186:	1f 92       	push	r1
    2188:	0f 92       	push	r0
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	0f 92       	push	r0
    218e:	11 24       	eor	r1, r1
    2190:	2f 93       	push	r18
    2192:	3f 93       	push	r19
    2194:	4f 93       	push	r20
    2196:	5f 93       	push	r21
    2198:	6f 93       	push	r22
    219a:	7f 93       	push	r23
    219c:	8f 93       	push	r24
    219e:	9f 93       	push	r25
    21a0:	af 93       	push	r26
    21a2:	bf 93       	push	r27
    21a4:	ef 93       	push	r30
    21a6:	ff 93       	push	r31
	ssd_display();
    21a8:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <ssd_display>
}
    21ac:	ff 91       	pop	r31
    21ae:	ef 91       	pop	r30
    21b0:	bf 91       	pop	r27
    21b2:	af 91       	pop	r26
    21b4:	9f 91       	pop	r25
    21b6:	8f 91       	pop	r24
    21b8:	7f 91       	pop	r23
    21ba:	6f 91       	pop	r22
    21bc:	5f 91       	pop	r21
    21be:	4f 91       	pop	r20
    21c0:	3f 91       	pop	r19
    21c2:	2f 91       	pop	r18
    21c4:	0f 90       	pop	r0
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	0f 90       	pop	r0
    21ca:	1f 90       	pop	r1
    21cc:	18 95       	reti

000021ce <__divmodhi4>:
    21ce:	97 fb       	bst	r25, 7
    21d0:	07 2e       	mov	r0, r23
    21d2:	16 f4       	brtc	.+4      	; 0x21d8 <__divmodhi4+0xa>
    21d4:	00 94       	com	r0
    21d6:	07 d0       	rcall	.+14     	; 0x21e6 <__divmodhi4_neg1>
    21d8:	77 fd       	sbrc	r23, 7
    21da:	09 d0       	rcall	.+18     	; 0x21ee <__divmodhi4_neg2>
    21dc:	0e 94 29 11 	call	0x2252	; 0x2252 <__udivmodhi4>
    21e0:	07 fc       	sbrc	r0, 7
    21e2:	05 d0       	rcall	.+10     	; 0x21ee <__divmodhi4_neg2>
    21e4:	3e f4       	brtc	.+14     	; 0x21f4 <__divmodhi4_exit>

000021e6 <__divmodhi4_neg1>:
    21e6:	90 95       	com	r25
    21e8:	81 95       	neg	r24
    21ea:	9f 4f       	sbci	r25, 0xFF	; 255
    21ec:	08 95       	ret

000021ee <__divmodhi4_neg2>:
    21ee:	70 95       	com	r23
    21f0:	61 95       	neg	r22
    21f2:	7f 4f       	sbci	r23, 0xFF	; 255

000021f4 <__divmodhi4_exit>:
    21f4:	08 95       	ret

000021f6 <__divmodsi4>:
    21f6:	05 2e       	mov	r0, r21
    21f8:	97 fb       	bst	r25, 7
    21fa:	1e f4       	brtc	.+6      	; 0x2202 <__divmodsi4+0xc>
    21fc:	00 94       	com	r0
    21fe:	0e 94 12 11 	call	0x2224	; 0x2224 <__negsi2>
    2202:	57 fd       	sbrc	r21, 7
    2204:	07 d0       	rcall	.+14     	; 0x2214 <__divmodsi4_neg2>
    2206:	0e 94 3d 11 	call	0x227a	; 0x227a <__udivmodsi4>
    220a:	07 fc       	sbrc	r0, 7
    220c:	03 d0       	rcall	.+6      	; 0x2214 <__divmodsi4_neg2>
    220e:	4e f4       	brtc	.+18     	; 0x2222 <__divmodsi4_exit>
    2210:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__negsi2>

00002214 <__divmodsi4_neg2>:
    2214:	50 95       	com	r21
    2216:	40 95       	com	r20
    2218:	30 95       	com	r19
    221a:	21 95       	neg	r18
    221c:	3f 4f       	sbci	r19, 0xFF	; 255
    221e:	4f 4f       	sbci	r20, 0xFF	; 255
    2220:	5f 4f       	sbci	r21, 0xFF	; 255

00002222 <__divmodsi4_exit>:
    2222:	08 95       	ret

00002224 <__negsi2>:
    2224:	90 95       	com	r25
    2226:	80 95       	com	r24
    2228:	70 95       	com	r23
    222a:	61 95       	neg	r22
    222c:	7f 4f       	sbci	r23, 0xFF	; 255
    222e:	8f 4f       	sbci	r24, 0xFF	; 255
    2230:	9f 4f       	sbci	r25, 0xFF	; 255
    2232:	08 95       	ret

00002234 <__umulhisi3>:
    2234:	a2 9f       	mul	r26, r18
    2236:	b0 01       	movw	r22, r0
    2238:	b3 9f       	mul	r27, r19
    223a:	c0 01       	movw	r24, r0
    223c:	a3 9f       	mul	r26, r19
    223e:	70 0d       	add	r23, r0
    2240:	81 1d       	adc	r24, r1
    2242:	11 24       	eor	r1, r1
    2244:	91 1d       	adc	r25, r1
    2246:	b2 9f       	mul	r27, r18
    2248:	70 0d       	add	r23, r0
    224a:	81 1d       	adc	r24, r1
    224c:	11 24       	eor	r1, r1
    224e:	91 1d       	adc	r25, r1
    2250:	08 95       	ret

00002252 <__udivmodhi4>:
    2252:	aa 1b       	sub	r26, r26
    2254:	bb 1b       	sub	r27, r27
    2256:	51 e1       	ldi	r21, 0x11	; 17
    2258:	07 c0       	rjmp	.+14     	; 0x2268 <__udivmodhi4_ep>

0000225a <__udivmodhi4_loop>:
    225a:	aa 1f       	adc	r26, r26
    225c:	bb 1f       	adc	r27, r27
    225e:	a6 17       	cp	r26, r22
    2260:	b7 07       	cpc	r27, r23
    2262:	10 f0       	brcs	.+4      	; 0x2268 <__udivmodhi4_ep>
    2264:	a6 1b       	sub	r26, r22
    2266:	b7 0b       	sbc	r27, r23

00002268 <__udivmodhi4_ep>:
    2268:	88 1f       	adc	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	5a 95       	dec	r21
    226e:	a9 f7       	brne	.-22     	; 0x225a <__udivmodhi4_loop>
    2270:	80 95       	com	r24
    2272:	90 95       	com	r25
    2274:	bc 01       	movw	r22, r24
    2276:	cd 01       	movw	r24, r26
    2278:	08 95       	ret

0000227a <__udivmodsi4>:
    227a:	a1 e2       	ldi	r26, 0x21	; 33
    227c:	1a 2e       	mov	r1, r26
    227e:	aa 1b       	sub	r26, r26
    2280:	bb 1b       	sub	r27, r27
    2282:	fd 01       	movw	r30, r26
    2284:	0d c0       	rjmp	.+26     	; 0x22a0 <__udivmodsi4_ep>

00002286 <__udivmodsi4_loop>:
    2286:	aa 1f       	adc	r26, r26
    2288:	bb 1f       	adc	r27, r27
    228a:	ee 1f       	adc	r30, r30
    228c:	ff 1f       	adc	r31, r31
    228e:	a2 17       	cp	r26, r18
    2290:	b3 07       	cpc	r27, r19
    2292:	e4 07       	cpc	r30, r20
    2294:	f5 07       	cpc	r31, r21
    2296:	20 f0       	brcs	.+8      	; 0x22a0 <__udivmodsi4_ep>
    2298:	a2 1b       	sub	r26, r18
    229a:	b3 0b       	sbc	r27, r19
    229c:	e4 0b       	sbc	r30, r20
    229e:	f5 0b       	sbc	r31, r21

000022a0 <__udivmodsi4_ep>:
    22a0:	66 1f       	adc	r22, r22
    22a2:	77 1f       	adc	r23, r23
    22a4:	88 1f       	adc	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	1a 94       	dec	r1
    22aa:	69 f7       	brne	.-38     	; 0x2286 <__udivmodsi4_loop>
    22ac:	60 95       	com	r22
    22ae:	70 95       	com	r23
    22b0:	80 95       	com	r24
    22b2:	90 95       	com	r25
    22b4:	9b 01       	movw	r18, r22
    22b6:	ac 01       	movw	r20, r24
    22b8:	bd 01       	movw	r22, r26
    22ba:	cf 01       	movw	r24, r30
    22bc:	08 95       	ret

000022be <fgetc>:
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	ec 01       	movw	r28, r24
    22c4:	2b 81       	ldd	r18, Y+3	; 0x03
    22c6:	20 ff       	sbrs	r18, 0
    22c8:	33 c0       	rjmp	.+102    	; 0x2330 <fgetc+0x72>
    22ca:	26 ff       	sbrs	r18, 6
    22cc:	0a c0       	rjmp	.+20     	; 0x22e2 <fgetc+0x24>
    22ce:	2f 7b       	andi	r18, 0xBF	; 191
    22d0:	2b 83       	std	Y+3, r18	; 0x03
    22d2:	8e 81       	ldd	r24, Y+6	; 0x06
    22d4:	9f 81       	ldd	r25, Y+7	; 0x07
    22d6:	01 96       	adiw	r24, 0x01	; 1
    22d8:	9f 83       	std	Y+7, r25	; 0x07
    22da:	8e 83       	std	Y+6, r24	; 0x06
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	29 c0       	rjmp	.+82     	; 0x2334 <fgetc+0x76>
    22e2:	22 ff       	sbrs	r18, 2
    22e4:	0f c0       	rjmp	.+30     	; 0x2304 <fgetc+0x46>
    22e6:	e8 81       	ld	r30, Y
    22e8:	f9 81       	ldd	r31, Y+1	; 0x01
    22ea:	80 81       	ld	r24, Z
    22ec:	08 2e       	mov	r0, r24
    22ee:	00 0c       	add	r0, r0
    22f0:	99 0b       	sbc	r25, r25
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	19 f4       	brne	.+6      	; 0x22fc <fgetc+0x3e>
    22f6:	20 62       	ori	r18, 0x20	; 32
    22f8:	2b 83       	std	Y+3, r18	; 0x03
    22fa:	1a c0       	rjmp	.+52     	; 0x2330 <fgetc+0x72>
    22fc:	31 96       	adiw	r30, 0x01	; 1
    22fe:	f9 83       	std	Y+1, r31	; 0x01
    2300:	e8 83       	st	Y, r30
    2302:	0e c0       	rjmp	.+28     	; 0x2320 <fgetc+0x62>
    2304:	ea 85       	ldd	r30, Y+10	; 0x0a
    2306:	fb 85       	ldd	r31, Y+11	; 0x0b
    2308:	09 95       	icall
    230a:	97 ff       	sbrs	r25, 7
    230c:	09 c0       	rjmp	.+18     	; 0x2320 <fgetc+0x62>
    230e:	2b 81       	ldd	r18, Y+3	; 0x03
    2310:	01 96       	adiw	r24, 0x01	; 1
    2312:	11 f0       	breq	.+4      	; 0x2318 <fgetc+0x5a>
    2314:	80 e2       	ldi	r24, 0x20	; 32
    2316:	01 c0       	rjmp	.+2      	; 0x231a <fgetc+0x5c>
    2318:	80 e1       	ldi	r24, 0x10	; 16
    231a:	82 2b       	or	r24, r18
    231c:	8b 83       	std	Y+3, r24	; 0x03
    231e:	08 c0       	rjmp	.+16     	; 0x2330 <fgetc+0x72>
    2320:	2e 81       	ldd	r18, Y+6	; 0x06
    2322:	3f 81       	ldd	r19, Y+7	; 0x07
    2324:	2f 5f       	subi	r18, 0xFF	; 255
    2326:	3f 4f       	sbci	r19, 0xFF	; 255
    2328:	3f 83       	std	Y+7, r19	; 0x07
    232a:	2e 83       	std	Y+6, r18	; 0x06
    232c:	99 27       	eor	r25, r25
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <fgetc+0x76>
    2330:	8f ef       	ldi	r24, 0xFF	; 255
    2332:	9f ef       	ldi	r25, 0xFF	; 255
    2334:	df 91       	pop	r29
    2336:	cf 91       	pop	r28
    2338:	08 95       	ret

0000233a <printf>:
    233a:	a0 e0       	ldi	r26, 0x00	; 0
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e3 ea       	ldi	r30, 0xA3	; 163
    2340:	f1 e1       	ldi	r31, 0x11	; 17
    2342:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__prologue_saves__+0x20>
    2346:	ae 01       	movw	r20, r28
    2348:	4b 5f       	subi	r20, 0xFB	; 251
    234a:	5f 4f       	sbci	r21, 0xFF	; 255
    234c:	fa 01       	movw	r30, r20
    234e:	61 91       	ld	r22, Z+
    2350:	71 91       	ld	r23, Z+
    2352:	af 01       	movw	r20, r30
    2354:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <__iob+0x2>
    2358:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <__iob+0x3>
    235c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <vfprintf>
    2360:	e2 e0       	ldi	r30, 0x02	; 2
    2362:	0c 94 96 14 	jmp	0x292c	; 0x292c <__epilogue_restores__+0x20>

00002366 <printf_P>:
    2366:	a0 e0       	ldi	r26, 0x00	; 0
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e9 eb       	ldi	r30, 0xB9	; 185
    236c:	f1 e1       	ldi	r31, 0x11	; 17
    236e:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__prologue_saves__+0x1c>
    2372:	ae 01       	movw	r20, r28
    2374:	49 5f       	subi	r20, 0xF9	; 249
    2376:	5f 4f       	sbci	r21, 0xFF	; 255
    2378:	da 01       	movw	r26, r20
    237a:	6d 91       	ld	r22, X+
    237c:	7d 91       	ld	r23, X+
    237e:	ad 01       	movw	r20, r26
    2380:	02 e1       	ldi	r16, 0x12	; 18
    2382:	16 e0       	ldi	r17, 0x06	; 6
    2384:	f8 01       	movw	r30, r16
    2386:	82 81       	ldd	r24, Z+2	; 0x02
    2388:	93 81       	ldd	r25, Z+3	; 0x03
    238a:	dc 01       	movw	r26, r24
    238c:	13 96       	adiw	r26, 0x03	; 3
    238e:	2c 91       	ld	r18, X
    2390:	13 97       	sbiw	r26, 0x03	; 3
    2392:	28 60       	ori	r18, 0x08	; 8
    2394:	13 96       	adiw	r26, 0x03	; 3
    2396:	2c 93       	st	X, r18
    2398:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <vfprintf>
    239c:	d8 01       	movw	r26, r16
    239e:	12 96       	adiw	r26, 0x02	; 2
    23a0:	ed 91       	ld	r30, X+
    23a2:	fc 91       	ld	r31, X
    23a4:	13 97       	sbiw	r26, 0x03	; 3
    23a6:	23 81       	ldd	r18, Z+3	; 0x03
    23a8:	27 7f       	andi	r18, 0xF7	; 247
    23aa:	23 83       	std	Z+3, r18	; 0x03
    23ac:	e4 e0       	ldi	r30, 0x04	; 4
    23ae:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__epilogue_restores__+0x1c>

000023b2 <vfprintf>:
    23b2:	ab e0       	ldi	r26, 0x0B	; 11
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	ef ed       	ldi	r30, 0xDF	; 223
    23b8:	f1 e1       	ldi	r31, 0x11	; 17
    23ba:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__>
    23be:	6c 01       	movw	r12, r24
    23c0:	7b 01       	movw	r14, r22
    23c2:	8a 01       	movw	r16, r20
    23c4:	fc 01       	movw	r30, r24
    23c6:	17 82       	std	Z+7, r1	; 0x07
    23c8:	16 82       	std	Z+6, r1	; 0x06
    23ca:	83 81       	ldd	r24, Z+3	; 0x03
    23cc:	81 ff       	sbrs	r24, 1
    23ce:	cc c1       	rjmp	.+920    	; 0x2768 <vfprintf+0x3b6>
    23d0:	ce 01       	movw	r24, r28
    23d2:	01 96       	adiw	r24, 0x01	; 1
    23d4:	3c 01       	movw	r6, r24
    23d6:	f6 01       	movw	r30, r12
    23d8:	93 81       	ldd	r25, Z+3	; 0x03
    23da:	f7 01       	movw	r30, r14
    23dc:	93 fd       	sbrc	r25, 3
    23de:	85 91       	lpm	r24, Z+
    23e0:	93 ff       	sbrs	r25, 3
    23e2:	81 91       	ld	r24, Z+
    23e4:	7f 01       	movw	r14, r30
    23e6:	88 23       	and	r24, r24
    23e8:	09 f4       	brne	.+2      	; 0x23ec <vfprintf+0x3a>
    23ea:	ba c1       	rjmp	.+884    	; 0x2760 <vfprintf+0x3ae>
    23ec:	85 32       	cpi	r24, 0x25	; 37
    23ee:	39 f4       	brne	.+14     	; 0x23fe <vfprintf+0x4c>
    23f0:	93 fd       	sbrc	r25, 3
    23f2:	85 91       	lpm	r24, Z+
    23f4:	93 ff       	sbrs	r25, 3
    23f6:	81 91       	ld	r24, Z+
    23f8:	7f 01       	movw	r14, r30
    23fa:	85 32       	cpi	r24, 0x25	; 37
    23fc:	29 f4       	brne	.+10     	; 0x2408 <vfprintf+0x56>
    23fe:	b6 01       	movw	r22, r12
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <fputc>
    2406:	e7 cf       	rjmp	.-50     	; 0x23d6 <vfprintf+0x24>
    2408:	91 2c       	mov	r9, r1
    240a:	21 2c       	mov	r2, r1
    240c:	31 2c       	mov	r3, r1
    240e:	ff e1       	ldi	r31, 0x1F	; 31
    2410:	f3 15       	cp	r31, r3
    2412:	d8 f0       	brcs	.+54     	; 0x244a <vfprintf+0x98>
    2414:	8b 32       	cpi	r24, 0x2B	; 43
    2416:	79 f0       	breq	.+30     	; 0x2436 <vfprintf+0x84>
    2418:	38 f4       	brcc	.+14     	; 0x2428 <vfprintf+0x76>
    241a:	80 32       	cpi	r24, 0x20	; 32
    241c:	79 f0       	breq	.+30     	; 0x243c <vfprintf+0x8a>
    241e:	83 32       	cpi	r24, 0x23	; 35
    2420:	a1 f4       	brne	.+40     	; 0x244a <vfprintf+0x98>
    2422:	23 2d       	mov	r18, r3
    2424:	20 61       	ori	r18, 0x10	; 16
    2426:	1d c0       	rjmp	.+58     	; 0x2462 <vfprintf+0xb0>
    2428:	8d 32       	cpi	r24, 0x2D	; 45
    242a:	61 f0       	breq	.+24     	; 0x2444 <vfprintf+0x92>
    242c:	80 33       	cpi	r24, 0x30	; 48
    242e:	69 f4       	brne	.+26     	; 0x244a <vfprintf+0x98>
    2430:	23 2d       	mov	r18, r3
    2432:	21 60       	ori	r18, 0x01	; 1
    2434:	16 c0       	rjmp	.+44     	; 0x2462 <vfprintf+0xb0>
    2436:	83 2d       	mov	r24, r3
    2438:	82 60       	ori	r24, 0x02	; 2
    243a:	38 2e       	mov	r3, r24
    243c:	e3 2d       	mov	r30, r3
    243e:	e4 60       	ori	r30, 0x04	; 4
    2440:	3e 2e       	mov	r3, r30
    2442:	2a c0       	rjmp	.+84     	; 0x2498 <vfprintf+0xe6>
    2444:	f3 2d       	mov	r31, r3
    2446:	f8 60       	ori	r31, 0x08	; 8
    2448:	1d c0       	rjmp	.+58     	; 0x2484 <vfprintf+0xd2>
    244a:	37 fc       	sbrc	r3, 7
    244c:	2d c0       	rjmp	.+90     	; 0x24a8 <vfprintf+0xf6>
    244e:	20 ed       	ldi	r18, 0xD0	; 208
    2450:	28 0f       	add	r18, r24
    2452:	2a 30       	cpi	r18, 0x0A	; 10
    2454:	40 f0       	brcs	.+16     	; 0x2466 <vfprintf+0xb4>
    2456:	8e 32       	cpi	r24, 0x2E	; 46
    2458:	b9 f4       	brne	.+46     	; 0x2488 <vfprintf+0xd6>
    245a:	36 fc       	sbrc	r3, 6
    245c:	81 c1       	rjmp	.+770    	; 0x2760 <vfprintf+0x3ae>
    245e:	23 2d       	mov	r18, r3
    2460:	20 64       	ori	r18, 0x40	; 64
    2462:	32 2e       	mov	r3, r18
    2464:	19 c0       	rjmp	.+50     	; 0x2498 <vfprintf+0xe6>
    2466:	36 fe       	sbrs	r3, 6
    2468:	06 c0       	rjmp	.+12     	; 0x2476 <vfprintf+0xc4>
    246a:	8a e0       	ldi	r24, 0x0A	; 10
    246c:	98 9e       	mul	r9, r24
    246e:	20 0d       	add	r18, r0
    2470:	11 24       	eor	r1, r1
    2472:	92 2e       	mov	r9, r18
    2474:	11 c0       	rjmp	.+34     	; 0x2498 <vfprintf+0xe6>
    2476:	ea e0       	ldi	r30, 0x0A	; 10
    2478:	2e 9e       	mul	r2, r30
    247a:	20 0d       	add	r18, r0
    247c:	11 24       	eor	r1, r1
    247e:	22 2e       	mov	r2, r18
    2480:	f3 2d       	mov	r31, r3
    2482:	f0 62       	ori	r31, 0x20	; 32
    2484:	3f 2e       	mov	r3, r31
    2486:	08 c0       	rjmp	.+16     	; 0x2498 <vfprintf+0xe6>
    2488:	8c 36       	cpi	r24, 0x6C	; 108
    248a:	21 f4       	brne	.+8      	; 0x2494 <vfprintf+0xe2>
    248c:	83 2d       	mov	r24, r3
    248e:	80 68       	ori	r24, 0x80	; 128
    2490:	38 2e       	mov	r3, r24
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <vfprintf+0xe6>
    2494:	88 36       	cpi	r24, 0x68	; 104
    2496:	41 f4       	brne	.+16     	; 0x24a8 <vfprintf+0xf6>
    2498:	f7 01       	movw	r30, r14
    249a:	93 fd       	sbrc	r25, 3
    249c:	85 91       	lpm	r24, Z+
    249e:	93 ff       	sbrs	r25, 3
    24a0:	81 91       	ld	r24, Z+
    24a2:	7f 01       	movw	r14, r30
    24a4:	81 11       	cpse	r24, r1
    24a6:	b3 cf       	rjmp	.-154    	; 0x240e <vfprintf+0x5c>
    24a8:	98 2f       	mov	r25, r24
    24aa:	9f 7d       	andi	r25, 0xDF	; 223
    24ac:	95 54       	subi	r25, 0x45	; 69
    24ae:	93 30       	cpi	r25, 0x03	; 3
    24b0:	28 f4       	brcc	.+10     	; 0x24bc <vfprintf+0x10a>
    24b2:	0c 5f       	subi	r16, 0xFC	; 252
    24b4:	1f 4f       	sbci	r17, 0xFF	; 255
    24b6:	9f e3       	ldi	r25, 0x3F	; 63
    24b8:	99 83       	std	Y+1, r25	; 0x01
    24ba:	0d c0       	rjmp	.+26     	; 0x24d6 <vfprintf+0x124>
    24bc:	83 36       	cpi	r24, 0x63	; 99
    24be:	31 f0       	breq	.+12     	; 0x24cc <vfprintf+0x11a>
    24c0:	83 37       	cpi	r24, 0x73	; 115
    24c2:	71 f0       	breq	.+28     	; 0x24e0 <vfprintf+0x12e>
    24c4:	83 35       	cpi	r24, 0x53	; 83
    24c6:	09 f0       	breq	.+2      	; 0x24ca <vfprintf+0x118>
    24c8:	59 c0       	rjmp	.+178    	; 0x257c <vfprintf+0x1ca>
    24ca:	21 c0       	rjmp	.+66     	; 0x250e <vfprintf+0x15c>
    24cc:	f8 01       	movw	r30, r16
    24ce:	80 81       	ld	r24, Z
    24d0:	89 83       	std	Y+1, r24	; 0x01
    24d2:	0e 5f       	subi	r16, 0xFE	; 254
    24d4:	1f 4f       	sbci	r17, 0xFF	; 255
    24d6:	88 24       	eor	r8, r8
    24d8:	83 94       	inc	r8
    24da:	91 2c       	mov	r9, r1
    24dc:	53 01       	movw	r10, r6
    24de:	13 c0       	rjmp	.+38     	; 0x2506 <vfprintf+0x154>
    24e0:	28 01       	movw	r4, r16
    24e2:	f2 e0       	ldi	r31, 0x02	; 2
    24e4:	4f 0e       	add	r4, r31
    24e6:	51 1c       	adc	r5, r1
    24e8:	f8 01       	movw	r30, r16
    24ea:	a0 80       	ld	r10, Z
    24ec:	b1 80       	ldd	r11, Z+1	; 0x01
    24ee:	36 fe       	sbrs	r3, 6
    24f0:	03 c0       	rjmp	.+6      	; 0x24f8 <vfprintf+0x146>
    24f2:	69 2d       	mov	r22, r9
    24f4:	70 e0       	ldi	r23, 0x00	; 0
    24f6:	02 c0       	rjmp	.+4      	; 0x24fc <vfprintf+0x14a>
    24f8:	6f ef       	ldi	r22, 0xFF	; 255
    24fa:	7f ef       	ldi	r23, 0xFF	; 255
    24fc:	c5 01       	movw	r24, r10
    24fe:	0e 94 c5 13 	call	0x278a	; 0x278a <strnlen>
    2502:	4c 01       	movw	r8, r24
    2504:	82 01       	movw	r16, r4
    2506:	f3 2d       	mov	r31, r3
    2508:	ff 77       	andi	r31, 0x7F	; 127
    250a:	3f 2e       	mov	r3, r31
    250c:	16 c0       	rjmp	.+44     	; 0x253a <vfprintf+0x188>
    250e:	28 01       	movw	r4, r16
    2510:	22 e0       	ldi	r18, 0x02	; 2
    2512:	42 0e       	add	r4, r18
    2514:	51 1c       	adc	r5, r1
    2516:	f8 01       	movw	r30, r16
    2518:	a0 80       	ld	r10, Z
    251a:	b1 80       	ldd	r11, Z+1	; 0x01
    251c:	36 fe       	sbrs	r3, 6
    251e:	03 c0       	rjmp	.+6      	; 0x2526 <vfprintf+0x174>
    2520:	69 2d       	mov	r22, r9
    2522:	70 e0       	ldi	r23, 0x00	; 0
    2524:	02 c0       	rjmp	.+4      	; 0x252a <vfprintf+0x178>
    2526:	6f ef       	ldi	r22, 0xFF	; 255
    2528:	7f ef       	ldi	r23, 0xFF	; 255
    252a:	c5 01       	movw	r24, r10
    252c:	0e 94 ba 13 	call	0x2774	; 0x2774 <strnlen_P>
    2530:	4c 01       	movw	r8, r24
    2532:	f3 2d       	mov	r31, r3
    2534:	f0 68       	ori	r31, 0x80	; 128
    2536:	3f 2e       	mov	r3, r31
    2538:	82 01       	movw	r16, r4
    253a:	33 fc       	sbrc	r3, 3
    253c:	1b c0       	rjmp	.+54     	; 0x2574 <vfprintf+0x1c2>
    253e:	82 2d       	mov	r24, r2
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	88 16       	cp	r8, r24
    2544:	99 06       	cpc	r9, r25
    2546:	b0 f4       	brcc	.+44     	; 0x2574 <vfprintf+0x1c2>
    2548:	b6 01       	movw	r22, r12
    254a:	80 e2       	ldi	r24, 0x20	; 32
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <fputc>
    2552:	2a 94       	dec	r2
    2554:	f4 cf       	rjmp	.-24     	; 0x253e <vfprintf+0x18c>
    2556:	f5 01       	movw	r30, r10
    2558:	37 fc       	sbrc	r3, 7
    255a:	85 91       	lpm	r24, Z+
    255c:	37 fe       	sbrs	r3, 7
    255e:	81 91       	ld	r24, Z+
    2560:	5f 01       	movw	r10, r30
    2562:	b6 01       	movw	r22, r12
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <fputc>
    256a:	21 10       	cpse	r2, r1
    256c:	2a 94       	dec	r2
    256e:	21 e0       	ldi	r18, 0x01	; 1
    2570:	82 1a       	sub	r8, r18
    2572:	91 08       	sbc	r9, r1
    2574:	81 14       	cp	r8, r1
    2576:	91 04       	cpc	r9, r1
    2578:	71 f7       	brne	.-36     	; 0x2556 <vfprintf+0x1a4>
    257a:	e8 c0       	rjmp	.+464    	; 0x274c <vfprintf+0x39a>
    257c:	84 36       	cpi	r24, 0x64	; 100
    257e:	11 f0       	breq	.+4      	; 0x2584 <vfprintf+0x1d2>
    2580:	89 36       	cpi	r24, 0x69	; 105
    2582:	41 f5       	brne	.+80     	; 0x25d4 <vfprintf+0x222>
    2584:	f8 01       	movw	r30, r16
    2586:	37 fe       	sbrs	r3, 7
    2588:	07 c0       	rjmp	.+14     	; 0x2598 <vfprintf+0x1e6>
    258a:	60 81       	ld	r22, Z
    258c:	71 81       	ldd	r23, Z+1	; 0x01
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	0c 5f       	subi	r16, 0xFC	; 252
    2594:	1f 4f       	sbci	r17, 0xFF	; 255
    2596:	08 c0       	rjmp	.+16     	; 0x25a8 <vfprintf+0x1f6>
    2598:	60 81       	ld	r22, Z
    259a:	71 81       	ldd	r23, Z+1	; 0x01
    259c:	07 2e       	mov	r0, r23
    259e:	00 0c       	add	r0, r0
    25a0:	88 0b       	sbc	r24, r24
    25a2:	99 0b       	sbc	r25, r25
    25a4:	0e 5f       	subi	r16, 0xFE	; 254
    25a6:	1f 4f       	sbci	r17, 0xFF	; 255
    25a8:	f3 2d       	mov	r31, r3
    25aa:	ff 76       	andi	r31, 0x6F	; 111
    25ac:	3f 2e       	mov	r3, r31
    25ae:	97 ff       	sbrs	r25, 7
    25b0:	09 c0       	rjmp	.+18     	; 0x25c4 <vfprintf+0x212>
    25b2:	90 95       	com	r25
    25b4:	80 95       	com	r24
    25b6:	70 95       	com	r23
    25b8:	61 95       	neg	r22
    25ba:	7f 4f       	sbci	r23, 0xFF	; 255
    25bc:	8f 4f       	sbci	r24, 0xFF	; 255
    25be:	9f 4f       	sbci	r25, 0xFF	; 255
    25c0:	f0 68       	ori	r31, 0x80	; 128
    25c2:	3f 2e       	mov	r3, r31
    25c4:	2a e0       	ldi	r18, 0x0A	; 10
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	a3 01       	movw	r20, r6
    25ca:	0e 94 0c 14 	call	0x2818	; 0x2818 <__ultoa_invert>
    25ce:	88 2e       	mov	r8, r24
    25d0:	86 18       	sub	r8, r6
    25d2:	45 c0       	rjmp	.+138    	; 0x265e <vfprintf+0x2ac>
    25d4:	85 37       	cpi	r24, 0x75	; 117
    25d6:	31 f4       	brne	.+12     	; 0x25e4 <vfprintf+0x232>
    25d8:	23 2d       	mov	r18, r3
    25da:	2f 7e       	andi	r18, 0xEF	; 239
    25dc:	b2 2e       	mov	r11, r18
    25de:	2a e0       	ldi	r18, 0x0A	; 10
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	25 c0       	rjmp	.+74     	; 0x262e <vfprintf+0x27c>
    25e4:	93 2d       	mov	r25, r3
    25e6:	99 7f       	andi	r25, 0xF9	; 249
    25e8:	b9 2e       	mov	r11, r25
    25ea:	8f 36       	cpi	r24, 0x6F	; 111
    25ec:	c1 f0       	breq	.+48     	; 0x261e <vfprintf+0x26c>
    25ee:	18 f4       	brcc	.+6      	; 0x25f6 <vfprintf+0x244>
    25f0:	88 35       	cpi	r24, 0x58	; 88
    25f2:	79 f0       	breq	.+30     	; 0x2612 <vfprintf+0x260>
    25f4:	b5 c0       	rjmp	.+362    	; 0x2760 <vfprintf+0x3ae>
    25f6:	80 37       	cpi	r24, 0x70	; 112
    25f8:	19 f0       	breq	.+6      	; 0x2600 <vfprintf+0x24e>
    25fa:	88 37       	cpi	r24, 0x78	; 120
    25fc:	21 f0       	breq	.+8      	; 0x2606 <vfprintf+0x254>
    25fe:	b0 c0       	rjmp	.+352    	; 0x2760 <vfprintf+0x3ae>
    2600:	e9 2f       	mov	r30, r25
    2602:	e0 61       	ori	r30, 0x10	; 16
    2604:	be 2e       	mov	r11, r30
    2606:	b4 fe       	sbrs	r11, 4
    2608:	0d c0       	rjmp	.+26     	; 0x2624 <vfprintf+0x272>
    260a:	fb 2d       	mov	r31, r11
    260c:	f4 60       	ori	r31, 0x04	; 4
    260e:	bf 2e       	mov	r11, r31
    2610:	09 c0       	rjmp	.+18     	; 0x2624 <vfprintf+0x272>
    2612:	34 fe       	sbrs	r3, 4
    2614:	0a c0       	rjmp	.+20     	; 0x262a <vfprintf+0x278>
    2616:	29 2f       	mov	r18, r25
    2618:	26 60       	ori	r18, 0x06	; 6
    261a:	b2 2e       	mov	r11, r18
    261c:	06 c0       	rjmp	.+12     	; 0x262a <vfprintf+0x278>
    261e:	28 e0       	ldi	r18, 0x08	; 8
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	05 c0       	rjmp	.+10     	; 0x262e <vfprintf+0x27c>
    2624:	20 e1       	ldi	r18, 0x10	; 16
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	02 c0       	rjmp	.+4      	; 0x262e <vfprintf+0x27c>
    262a:	20 e1       	ldi	r18, 0x10	; 16
    262c:	32 e0       	ldi	r19, 0x02	; 2
    262e:	f8 01       	movw	r30, r16
    2630:	b7 fe       	sbrs	r11, 7
    2632:	07 c0       	rjmp	.+14     	; 0x2642 <vfprintf+0x290>
    2634:	60 81       	ld	r22, Z
    2636:	71 81       	ldd	r23, Z+1	; 0x01
    2638:	82 81       	ldd	r24, Z+2	; 0x02
    263a:	93 81       	ldd	r25, Z+3	; 0x03
    263c:	0c 5f       	subi	r16, 0xFC	; 252
    263e:	1f 4f       	sbci	r17, 0xFF	; 255
    2640:	06 c0       	rjmp	.+12     	; 0x264e <vfprintf+0x29c>
    2642:	60 81       	ld	r22, Z
    2644:	71 81       	ldd	r23, Z+1	; 0x01
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	0e 5f       	subi	r16, 0xFE	; 254
    264c:	1f 4f       	sbci	r17, 0xFF	; 255
    264e:	a3 01       	movw	r20, r6
    2650:	0e 94 0c 14 	call	0x2818	; 0x2818 <__ultoa_invert>
    2654:	88 2e       	mov	r8, r24
    2656:	86 18       	sub	r8, r6
    2658:	fb 2d       	mov	r31, r11
    265a:	ff 77       	andi	r31, 0x7F	; 127
    265c:	3f 2e       	mov	r3, r31
    265e:	36 fe       	sbrs	r3, 6
    2660:	0d c0       	rjmp	.+26     	; 0x267c <vfprintf+0x2ca>
    2662:	23 2d       	mov	r18, r3
    2664:	2e 7f       	andi	r18, 0xFE	; 254
    2666:	a2 2e       	mov	r10, r18
    2668:	89 14       	cp	r8, r9
    266a:	58 f4       	brcc	.+22     	; 0x2682 <vfprintf+0x2d0>
    266c:	34 fe       	sbrs	r3, 4
    266e:	0b c0       	rjmp	.+22     	; 0x2686 <vfprintf+0x2d4>
    2670:	32 fc       	sbrc	r3, 2
    2672:	09 c0       	rjmp	.+18     	; 0x2686 <vfprintf+0x2d4>
    2674:	83 2d       	mov	r24, r3
    2676:	8e 7e       	andi	r24, 0xEE	; 238
    2678:	a8 2e       	mov	r10, r24
    267a:	05 c0       	rjmp	.+10     	; 0x2686 <vfprintf+0x2d4>
    267c:	b8 2c       	mov	r11, r8
    267e:	a3 2c       	mov	r10, r3
    2680:	03 c0       	rjmp	.+6      	; 0x2688 <vfprintf+0x2d6>
    2682:	b8 2c       	mov	r11, r8
    2684:	01 c0       	rjmp	.+2      	; 0x2688 <vfprintf+0x2d6>
    2686:	b9 2c       	mov	r11, r9
    2688:	a4 fe       	sbrs	r10, 4
    268a:	0f c0       	rjmp	.+30     	; 0x26aa <vfprintf+0x2f8>
    268c:	fe 01       	movw	r30, r28
    268e:	e8 0d       	add	r30, r8
    2690:	f1 1d       	adc	r31, r1
    2692:	80 81       	ld	r24, Z
    2694:	80 33       	cpi	r24, 0x30	; 48
    2696:	21 f4       	brne	.+8      	; 0x26a0 <vfprintf+0x2ee>
    2698:	9a 2d       	mov	r25, r10
    269a:	99 7e       	andi	r25, 0xE9	; 233
    269c:	a9 2e       	mov	r10, r25
    269e:	09 c0       	rjmp	.+18     	; 0x26b2 <vfprintf+0x300>
    26a0:	a2 fe       	sbrs	r10, 2
    26a2:	06 c0       	rjmp	.+12     	; 0x26b0 <vfprintf+0x2fe>
    26a4:	b3 94       	inc	r11
    26a6:	b3 94       	inc	r11
    26a8:	04 c0       	rjmp	.+8      	; 0x26b2 <vfprintf+0x300>
    26aa:	8a 2d       	mov	r24, r10
    26ac:	86 78       	andi	r24, 0x86	; 134
    26ae:	09 f0       	breq	.+2      	; 0x26b2 <vfprintf+0x300>
    26b0:	b3 94       	inc	r11
    26b2:	a3 fc       	sbrc	r10, 3
    26b4:	11 c0       	rjmp	.+34     	; 0x26d8 <vfprintf+0x326>
    26b6:	a0 fe       	sbrs	r10, 0
    26b8:	06 c0       	rjmp	.+12     	; 0x26c6 <vfprintf+0x314>
    26ba:	b2 14       	cp	r11, r2
    26bc:	88 f4       	brcc	.+34     	; 0x26e0 <vfprintf+0x32e>
    26be:	28 0c       	add	r2, r8
    26c0:	92 2c       	mov	r9, r2
    26c2:	9b 18       	sub	r9, r11
    26c4:	0e c0       	rjmp	.+28     	; 0x26e2 <vfprintf+0x330>
    26c6:	b2 14       	cp	r11, r2
    26c8:	60 f4       	brcc	.+24     	; 0x26e2 <vfprintf+0x330>
    26ca:	b6 01       	movw	r22, r12
    26cc:	80 e2       	ldi	r24, 0x20	; 32
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <fputc>
    26d4:	b3 94       	inc	r11
    26d6:	f7 cf       	rjmp	.-18     	; 0x26c6 <vfprintf+0x314>
    26d8:	b2 14       	cp	r11, r2
    26da:	18 f4       	brcc	.+6      	; 0x26e2 <vfprintf+0x330>
    26dc:	2b 18       	sub	r2, r11
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <vfprintf+0x332>
    26e0:	98 2c       	mov	r9, r8
    26e2:	21 2c       	mov	r2, r1
    26e4:	a4 fe       	sbrs	r10, 4
    26e6:	10 c0       	rjmp	.+32     	; 0x2708 <vfprintf+0x356>
    26e8:	b6 01       	movw	r22, r12
    26ea:	80 e3       	ldi	r24, 0x30	; 48
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <fputc>
    26f2:	a2 fe       	sbrs	r10, 2
    26f4:	17 c0       	rjmp	.+46     	; 0x2724 <vfprintf+0x372>
    26f6:	a1 fc       	sbrc	r10, 1
    26f8:	03 c0       	rjmp	.+6      	; 0x2700 <vfprintf+0x34e>
    26fa:	88 e7       	ldi	r24, 0x78	; 120
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <vfprintf+0x352>
    2700:	88 e5       	ldi	r24, 0x58	; 88
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	b6 01       	movw	r22, r12
    2706:	0c c0       	rjmp	.+24     	; 0x2720 <vfprintf+0x36e>
    2708:	8a 2d       	mov	r24, r10
    270a:	86 78       	andi	r24, 0x86	; 134
    270c:	59 f0       	breq	.+22     	; 0x2724 <vfprintf+0x372>
    270e:	a1 fe       	sbrs	r10, 1
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <vfprintf+0x364>
    2712:	8b e2       	ldi	r24, 0x2B	; 43
    2714:	01 c0       	rjmp	.+2      	; 0x2718 <vfprintf+0x366>
    2716:	80 e2       	ldi	r24, 0x20	; 32
    2718:	a7 fc       	sbrc	r10, 7
    271a:	8d e2       	ldi	r24, 0x2D	; 45
    271c:	b6 01       	movw	r22, r12
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <fputc>
    2724:	89 14       	cp	r8, r9
    2726:	38 f4       	brcc	.+14     	; 0x2736 <vfprintf+0x384>
    2728:	b6 01       	movw	r22, r12
    272a:	80 e3       	ldi	r24, 0x30	; 48
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <fputc>
    2732:	9a 94       	dec	r9
    2734:	f7 cf       	rjmp	.-18     	; 0x2724 <vfprintf+0x372>
    2736:	8a 94       	dec	r8
    2738:	f3 01       	movw	r30, r6
    273a:	e8 0d       	add	r30, r8
    273c:	f1 1d       	adc	r31, r1
    273e:	80 81       	ld	r24, Z
    2740:	b6 01       	movw	r22, r12
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <fputc>
    2748:	81 10       	cpse	r8, r1
    274a:	f5 cf       	rjmp	.-22     	; 0x2736 <vfprintf+0x384>
    274c:	22 20       	and	r2, r2
    274e:	09 f4       	brne	.+2      	; 0x2752 <vfprintf+0x3a0>
    2750:	42 ce       	rjmp	.-892    	; 0x23d6 <vfprintf+0x24>
    2752:	b6 01       	movw	r22, r12
    2754:	80 e2       	ldi	r24, 0x20	; 32
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <fputc>
    275c:	2a 94       	dec	r2
    275e:	f6 cf       	rjmp	.-20     	; 0x274c <vfprintf+0x39a>
    2760:	f6 01       	movw	r30, r12
    2762:	86 81       	ldd	r24, Z+6	; 0x06
    2764:	97 81       	ldd	r25, Z+7	; 0x07
    2766:	02 c0       	rjmp	.+4      	; 0x276c <vfprintf+0x3ba>
    2768:	8f ef       	ldi	r24, 0xFF	; 255
    276a:	9f ef       	ldi	r25, 0xFF	; 255
    276c:	2b 96       	adiw	r28, 0x0b	; 11
    276e:	e2 e1       	ldi	r30, 0x12	; 18
    2770:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__>

00002774 <strnlen_P>:
    2774:	fc 01       	movw	r30, r24
    2776:	05 90       	lpm	r0, Z+
    2778:	61 50       	subi	r22, 0x01	; 1
    277a:	70 40       	sbci	r23, 0x00	; 0
    277c:	01 10       	cpse	r0, r1
    277e:	d8 f7       	brcc	.-10     	; 0x2776 <strnlen_P+0x2>
    2780:	80 95       	com	r24
    2782:	90 95       	com	r25
    2784:	8e 0f       	add	r24, r30
    2786:	9f 1f       	adc	r25, r31
    2788:	08 95       	ret

0000278a <strnlen>:
    278a:	fc 01       	movw	r30, r24
    278c:	61 50       	subi	r22, 0x01	; 1
    278e:	70 40       	sbci	r23, 0x00	; 0
    2790:	01 90       	ld	r0, Z+
    2792:	01 10       	cpse	r0, r1
    2794:	d8 f7       	brcc	.-10     	; 0x278c <strnlen+0x2>
    2796:	80 95       	com	r24
    2798:	90 95       	com	r25
    279a:	8e 0f       	add	r24, r30
    279c:	9f 1f       	adc	r25, r31
    279e:	08 95       	ret

000027a0 <fputc>:
    27a0:	0f 93       	push	r16
    27a2:	1f 93       	push	r17
    27a4:	cf 93       	push	r28
    27a6:	df 93       	push	r29
    27a8:	fb 01       	movw	r30, r22
    27aa:	23 81       	ldd	r18, Z+3	; 0x03
    27ac:	21 fd       	sbrc	r18, 1
    27ae:	03 c0       	rjmp	.+6      	; 0x27b6 <fputc+0x16>
    27b0:	8f ef       	ldi	r24, 0xFF	; 255
    27b2:	9f ef       	ldi	r25, 0xFF	; 255
    27b4:	2c c0       	rjmp	.+88     	; 0x280e <fputc+0x6e>
    27b6:	22 ff       	sbrs	r18, 2
    27b8:	16 c0       	rjmp	.+44     	; 0x27e6 <fputc+0x46>
    27ba:	46 81       	ldd	r20, Z+6	; 0x06
    27bc:	57 81       	ldd	r21, Z+7	; 0x07
    27be:	24 81       	ldd	r18, Z+4	; 0x04
    27c0:	35 81       	ldd	r19, Z+5	; 0x05
    27c2:	42 17       	cp	r20, r18
    27c4:	53 07       	cpc	r21, r19
    27c6:	44 f4       	brge	.+16     	; 0x27d8 <fputc+0x38>
    27c8:	a0 81       	ld	r26, Z
    27ca:	b1 81       	ldd	r27, Z+1	; 0x01
    27cc:	9d 01       	movw	r18, r26
    27ce:	2f 5f       	subi	r18, 0xFF	; 255
    27d0:	3f 4f       	sbci	r19, 0xFF	; 255
    27d2:	31 83       	std	Z+1, r19	; 0x01
    27d4:	20 83       	st	Z, r18
    27d6:	8c 93       	st	X, r24
    27d8:	26 81       	ldd	r18, Z+6	; 0x06
    27da:	37 81       	ldd	r19, Z+7	; 0x07
    27dc:	2f 5f       	subi	r18, 0xFF	; 255
    27de:	3f 4f       	sbci	r19, 0xFF	; 255
    27e0:	37 83       	std	Z+7, r19	; 0x07
    27e2:	26 83       	std	Z+6, r18	; 0x06
    27e4:	14 c0       	rjmp	.+40     	; 0x280e <fputc+0x6e>
    27e6:	8b 01       	movw	r16, r22
    27e8:	ec 01       	movw	r28, r24
    27ea:	fb 01       	movw	r30, r22
    27ec:	00 84       	ldd	r0, Z+8	; 0x08
    27ee:	f1 85       	ldd	r31, Z+9	; 0x09
    27f0:	e0 2d       	mov	r30, r0
    27f2:	09 95       	icall
    27f4:	89 2b       	or	r24, r25
    27f6:	e1 f6       	brne	.-72     	; 0x27b0 <fputc+0x10>
    27f8:	d8 01       	movw	r26, r16
    27fa:	16 96       	adiw	r26, 0x06	; 6
    27fc:	8d 91       	ld	r24, X+
    27fe:	9c 91       	ld	r25, X
    2800:	17 97       	sbiw	r26, 0x07	; 7
    2802:	01 96       	adiw	r24, 0x01	; 1
    2804:	17 96       	adiw	r26, 0x07	; 7
    2806:	9c 93       	st	X, r25
    2808:	8e 93       	st	-X, r24
    280a:	16 97       	sbiw	r26, 0x06	; 6
    280c:	ce 01       	movw	r24, r28
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	1f 91       	pop	r17
    2814:	0f 91       	pop	r16
    2816:	08 95       	ret

00002818 <__ultoa_invert>:
    2818:	fa 01       	movw	r30, r20
    281a:	aa 27       	eor	r26, r26
    281c:	28 30       	cpi	r18, 0x08	; 8
    281e:	51 f1       	breq	.+84     	; 0x2874 <__ultoa_invert+0x5c>
    2820:	20 31       	cpi	r18, 0x10	; 16
    2822:	81 f1       	breq	.+96     	; 0x2884 <__ultoa_invert+0x6c>
    2824:	e8 94       	clt
    2826:	6f 93       	push	r22
    2828:	6e 7f       	andi	r22, 0xFE	; 254
    282a:	6e 5f       	subi	r22, 0xFE	; 254
    282c:	7f 4f       	sbci	r23, 0xFF	; 255
    282e:	8f 4f       	sbci	r24, 0xFF	; 255
    2830:	9f 4f       	sbci	r25, 0xFF	; 255
    2832:	af 4f       	sbci	r26, 0xFF	; 255
    2834:	b1 e0       	ldi	r27, 0x01	; 1
    2836:	3e d0       	rcall	.+124    	; 0x28b4 <__ultoa_invert+0x9c>
    2838:	b4 e0       	ldi	r27, 0x04	; 4
    283a:	3c d0       	rcall	.+120    	; 0x28b4 <__ultoa_invert+0x9c>
    283c:	67 0f       	add	r22, r23
    283e:	78 1f       	adc	r23, r24
    2840:	89 1f       	adc	r24, r25
    2842:	9a 1f       	adc	r25, r26
    2844:	a1 1d       	adc	r26, r1
    2846:	68 0f       	add	r22, r24
    2848:	79 1f       	adc	r23, r25
    284a:	8a 1f       	adc	r24, r26
    284c:	91 1d       	adc	r25, r1
    284e:	a1 1d       	adc	r26, r1
    2850:	6a 0f       	add	r22, r26
    2852:	71 1d       	adc	r23, r1
    2854:	81 1d       	adc	r24, r1
    2856:	91 1d       	adc	r25, r1
    2858:	a1 1d       	adc	r26, r1
    285a:	20 d0       	rcall	.+64     	; 0x289c <__ultoa_invert+0x84>
    285c:	09 f4       	brne	.+2      	; 0x2860 <__ultoa_invert+0x48>
    285e:	68 94       	set
    2860:	3f 91       	pop	r19
    2862:	2a e0       	ldi	r18, 0x0A	; 10
    2864:	26 9f       	mul	r18, r22
    2866:	11 24       	eor	r1, r1
    2868:	30 19       	sub	r19, r0
    286a:	30 5d       	subi	r19, 0xD0	; 208
    286c:	31 93       	st	Z+, r19
    286e:	de f6       	brtc	.-74     	; 0x2826 <__ultoa_invert+0xe>
    2870:	cf 01       	movw	r24, r30
    2872:	08 95       	ret
    2874:	46 2f       	mov	r20, r22
    2876:	47 70       	andi	r20, 0x07	; 7
    2878:	40 5d       	subi	r20, 0xD0	; 208
    287a:	41 93       	st	Z+, r20
    287c:	b3 e0       	ldi	r27, 0x03	; 3
    287e:	0f d0       	rcall	.+30     	; 0x289e <__ultoa_invert+0x86>
    2880:	c9 f7       	brne	.-14     	; 0x2874 <__ultoa_invert+0x5c>
    2882:	f6 cf       	rjmp	.-20     	; 0x2870 <__ultoa_invert+0x58>
    2884:	46 2f       	mov	r20, r22
    2886:	4f 70       	andi	r20, 0x0F	; 15
    2888:	40 5d       	subi	r20, 0xD0	; 208
    288a:	4a 33       	cpi	r20, 0x3A	; 58
    288c:	18 f0       	brcs	.+6      	; 0x2894 <__ultoa_invert+0x7c>
    288e:	49 5d       	subi	r20, 0xD9	; 217
    2890:	31 fd       	sbrc	r19, 1
    2892:	40 52       	subi	r20, 0x20	; 32
    2894:	41 93       	st	Z+, r20
    2896:	02 d0       	rcall	.+4      	; 0x289c <__ultoa_invert+0x84>
    2898:	a9 f7       	brne	.-22     	; 0x2884 <__ultoa_invert+0x6c>
    289a:	ea cf       	rjmp	.-44     	; 0x2870 <__ultoa_invert+0x58>
    289c:	b4 e0       	ldi	r27, 0x04	; 4
    289e:	a6 95       	lsr	r26
    28a0:	97 95       	ror	r25
    28a2:	87 95       	ror	r24
    28a4:	77 95       	ror	r23
    28a6:	67 95       	ror	r22
    28a8:	ba 95       	dec	r27
    28aa:	c9 f7       	brne	.-14     	; 0x289e <__ultoa_invert+0x86>
    28ac:	00 97       	sbiw	r24, 0x00	; 0
    28ae:	61 05       	cpc	r22, r1
    28b0:	71 05       	cpc	r23, r1
    28b2:	08 95       	ret
    28b4:	9b 01       	movw	r18, r22
    28b6:	ac 01       	movw	r20, r24
    28b8:	0a 2e       	mov	r0, r26
    28ba:	06 94       	lsr	r0
    28bc:	57 95       	ror	r21
    28be:	47 95       	ror	r20
    28c0:	37 95       	ror	r19
    28c2:	27 95       	ror	r18
    28c4:	ba 95       	dec	r27
    28c6:	c9 f7       	brne	.-14     	; 0x28ba <__ultoa_invert+0xa2>
    28c8:	62 0f       	add	r22, r18
    28ca:	73 1f       	adc	r23, r19
    28cc:	84 1f       	adc	r24, r20
    28ce:	95 1f       	adc	r25, r21
    28d0:	a0 1d       	adc	r26, r0
    28d2:	08 95       	ret

000028d4 <__prologue_saves__>:
    28d4:	2f 92       	push	r2
    28d6:	3f 92       	push	r3
    28d8:	4f 92       	push	r4
    28da:	5f 92       	push	r5
    28dc:	6f 92       	push	r6
    28de:	7f 92       	push	r7
    28e0:	8f 92       	push	r8
    28e2:	9f 92       	push	r9
    28e4:	af 92       	push	r10
    28e6:	bf 92       	push	r11
    28e8:	cf 92       	push	r12
    28ea:	df 92       	push	r13
    28ec:	ef 92       	push	r14
    28ee:	ff 92       	push	r15
    28f0:	0f 93       	push	r16
    28f2:	1f 93       	push	r17
    28f4:	cf 93       	push	r28
    28f6:	df 93       	push	r29
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62
    28fc:	ca 1b       	sub	r28, r26
    28fe:	db 0b       	sbc	r29, r27
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	09 94       	ijmp

0000290c <__epilogue_restores__>:
    290c:	2a 88       	ldd	r2, Y+18	; 0x12
    290e:	39 88       	ldd	r3, Y+17	; 0x11
    2910:	48 88       	ldd	r4, Y+16	; 0x10
    2912:	5f 84       	ldd	r5, Y+15	; 0x0f
    2914:	6e 84       	ldd	r6, Y+14	; 0x0e
    2916:	7d 84       	ldd	r7, Y+13	; 0x0d
    2918:	8c 84       	ldd	r8, Y+12	; 0x0c
    291a:	9b 84       	ldd	r9, Y+11	; 0x0b
    291c:	aa 84       	ldd	r10, Y+10	; 0x0a
    291e:	b9 84       	ldd	r11, Y+9	; 0x09
    2920:	c8 84       	ldd	r12, Y+8	; 0x08
    2922:	df 80       	ldd	r13, Y+7	; 0x07
    2924:	ee 80       	ldd	r14, Y+6	; 0x06
    2926:	fd 80       	ldd	r15, Y+5	; 0x05
    2928:	0c 81       	ldd	r16, Y+4	; 0x04
    292a:	1b 81       	ldd	r17, Y+3	; 0x03
    292c:	aa 81       	ldd	r26, Y+2	; 0x02
    292e:	b9 81       	ldd	r27, Y+1	; 0x01
    2930:	ce 0f       	add	r28, r30
    2932:	d1 1d       	adc	r29, r1
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	ed 01       	movw	r28, r26
    2940:	08 95       	ret

00002942 <_exit>:
    2942:	f8 94       	cli

00002944 <__stop_program>:
    2944:	ff cf       	rjmp	.-2      	; 0x2944 <__stop_program>
