
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003dc  00800100  00002eb2  00002f46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002eb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013e  008004dc  008004dc  00003322  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003322  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  000033c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003cff  00000000  00000000  000036d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012f2  00000000  00000000  000073d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022fd  00000000  00000000  000086c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009e8  00000000  00000000  0000a9c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cee  00000000  00000000  0000b3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002580  00000000  00000000  0000c09e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  0000e61e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__ctors_end>
       4:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       8:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      10:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      14:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_5>
      18:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      1c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      20:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      24:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__vector_9>
      28:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      2c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      30:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      34:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      38:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      3c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      40:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__vector_16>
      44:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      48:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      4c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      50:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <__vector_20>
      54:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__vector_21>
      58:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      5c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      60:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      64:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      68:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      6c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      70:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      74:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      78:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2339>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2276>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 20 43 61 69 6c 69 6e 20 44 65 6c 67      by  Cailin Delg
      d4:	61 64 6f 20 2d 20 34 38 30 32 37 39 34 32 00        ado - 48027942.

000000e3 <__c.2274>:
      e3:	20 5c 24 24 20 20 20 5c 24 24 20 20 20 20 20 5c      \$$   \$$     \
      f3:	24 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20     $     \$$   \$$ 
     103:	20 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20           \$$   \$$ 
     113:	20 5c 24 24 24 24 24 24 24 20 5c 24 24 20 20 20      \$$$$$$$ \$$   
     123:	20 20 20 20 20 5c 24 24 24 24 24 24 00                   \$$$$$$.

00000130 <__c.2272>:
     130:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 5c 24     | $$  | $$    \$
     140:	24 24 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20     $$   | $$  | $$ 
     150:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     160:	5c 24 24 20 20 20 20 20 5c 7c 20 24 24 20 20 20     \$$     \| $$   
     170:	20 20 20 20 5c 24 24 20 20 20 20 24 24 00               \$$    $$.

0000017e <__c.2270>:
     17e:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 5c 24 24     | $$  | $$   \$$
     18e:	20 24 24 20 20 7c 20 24 24 20 20 7c 20 24 24 20      $$  | $$  | $$ 
     19e:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 7c          | $$  | $$|
     1ae:	20 24 24 24 24 24 24 24 24 7c 20 24 24 20 20 20      $$$$$$$$| $$   
     1be:	20 20 20 7c 20 24 24 5f 5f 2f 20 24 24 00              | $$__/ $$.

000001cc <__c.2268>:
     1cc:	7c 20 24 24 24 24 24 24 24 24 20 20 5c 24 24 5c     | $$$$$$$$  \$$\
     1dc:	20 20 24 24 20 7c 20 24 24 24 24 24 24 24 5c 20       $$ | $$$$$$$\ 
     1ec:	20 20 20 20 20 7c 20 24 24 24 24 24 24 24 24 7c          | $$$$$$$$|
     1fc:	20 24 24 20 20 20 20 24 24 7c 20 24 24 20 20 20      $$    $$| $$   
     20c:	5c 24 24 7c 20 24 24 20 20 7c 20 24 24 00           \$$| $$  | $$.

0000021a <__c.2266>:
     21a:	7c 20 24 24 20 20 20 20 24 24 20 5c 24 24 5c 20     | $$    $$ \$$\ 
     22a:	2f 20 20 24 24 7c 20 24 24 20 20 20 20 24 24 20     /  $$| $$    $$ 
     23a:	20 20 20 20 20 7c 20 24 24 20 20 20 20 24 24 7c          | $$    $$|
     24a:	20 20 24 24 24 24 24 24 5c 7c 20 20 24 24 24 24       $$$$$$\|  $$$$
     25a:	24 24 5c 7c 20 20 24 24 24 24 24 24 5c 00           $$\|  $$$$$$\.

00000268 <__c.2264>:
     268:	7c 20 24 24 5f 5f 7c 20 24 24 7c 20 24 24 20 20     | $$__| $$| $$  
     278:	20 7c 20 24 24 7c 20 24 24 5f 5f 7c 20 24 24 20      | $$| $$__| $$ 
     288:	20 20 20 20 20 7c 20 24 24 5f 5f 7c 20 24 24 20          | $$__| $$ 
     298:	2f 20 20 20 20 20 20 5c 20 20 2f 20 20 20 20 20     /      \  /     
     2a8:	20 5c 20 20 2f 20 20 20 20 20 20 5c 00               \  /      \.

000002b5 <__c.2262>:
     2b5:	7c 20 20 24 24 24 24 24 24 5c 7c 20 24 24 20 20     |  $$$$$$\| $$  
     2c5:	20 7c 20 24 24 7c 20 24 24 24 24 24 24 24 5c 20      | $$| $$$$$$$\ 
     2d5:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     2e5:	20 5f 5f 5f 5f 5f 5f 20 20 20 20 5f 5f 5f 5f 5f      ______    _____
     2f5:	5f 20 20 20 20 5f 5f 5f 5f 5f 5f 00                 _    ______.

00000301 <__c.2260>:
     301:	20 2f 20 20 20 20 20 20 5c 20 7c 20 20 5c 20 20      /      \ |  \  
     311:	20 7c 20 20 5c 7c 20 20 20 20 20 20 20 5c 20 20      |  \|       \  
     321:	20 20 20 20 20 7c 20 20 5c 20 20 7c 20 20 5c 00          |  \  |  \.

00000331 <__c.2258>:
     331:	20 20 5f 5f 5f 5f 5f 5f 20 20 20 5f 5f 20 20 20       ______   __   
     341:	20 20 5f 5f 20 20 5f 5f 5f 5f 5f 5f 5f 20 20 20       __  _______   
     351:	20 20 20 20 20 20 5f 5f 20 20 20 20 5f 5f 00              __    __.

00000360 <__c.2058>:
     360:	1b 5b 3f 32 35 68 00                                .[?25h.

00000367 <__c.2054>:
     367:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000036e <__c.2050>:
     36e:	1b 5b 25 64 6d 00                                   .[%dm.

00000374 <__c.2045>:
     374:	1b 5b 4b 00                                         .[K.

00000378 <__c.2040>:
     378:	1b 5b 32 4a 00                                      .[2J.

0000037d <__c.2025>:
     37d:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000386 <__ctors_end>:
     386:	11 24       	eor	r1, r1
     388:	1f be       	out	0x3f, r1	; 63
     38a:	cf ef       	ldi	r28, 0xFF	; 255
     38c:	d8 e0       	ldi	r29, 0x08	; 8
     38e:	de bf       	out	0x3e, r29	; 62
     390:	cd bf       	out	0x3d, r28	; 61

00000392 <__do_copy_data>:
     392:	14 e0       	ldi	r17, 0x04	; 4
     394:	a0 e0       	ldi	r26, 0x00	; 0
     396:	b1 e0       	ldi	r27, 0x01	; 1
     398:	e2 eb       	ldi	r30, 0xB2	; 178
     39a:	fe e2       	ldi	r31, 0x2E	; 46
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__do_copy_data+0x10>
     39e:	05 90       	lpm	r0, Z+
     3a0:	0d 92       	st	X+, r0
     3a2:	ac 3d       	cpi	r26, 0xDC	; 220
     3a4:	b1 07       	cpc	r27, r17
     3a6:	d9 f7       	brne	.-10     	; 0x39e <__do_copy_data+0xc>

000003a8 <__do_clear_bss>:
     3a8:	26 e0       	ldi	r18, 0x06	; 6
     3aa:	ac ed       	ldi	r26, 0xDC	; 220
     3ac:	b4 e0       	ldi	r27, 0x04	; 4
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
     3b2:	aa 31       	cpi	r26, 0x1A	; 26
     3b4:	b2 07       	cpc	r27, r18
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>
     3b8:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <main>
     3bc:	0c 94 57 17 	jmp	0x2eae	; 0x2eae <_exit>

000003c0 <__bad_interrupt>:
     3c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c4 <init_button_interrupts>:
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void)
{
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     3c4:	e8 e6       	ldi	r30, 0x68	; 104
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	82 60       	ori	r24, 0x02	; 2
     3cc:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     3ce:	8b b3       	in	r24, 0x1b	; 27
     3d0:	82 60       	ori	r24, 0x02	; 2
     3d2:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     3d4:	ec e6       	ldi	r30, 0x6C	; 108
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	8f 60       	ori	r24, 0x0F	; 15
     3dc:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     3de:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <__data_end>
     3e2:	08 95       	ret

000003e4 <button_pushed>:

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0)
     3e4:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <__data_end>
     3e8:	18 16       	cp	r1, r24
     3ea:	14 f5       	brge	.+68     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     3ec:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3f0:	6f b7       	in	r22, 0x3f	; 63
		cli();
     3f2:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	09 c0       	rjmp	.+18     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		{
			button_queue[i - 1] = button_queue[i];
     3f8:	f9 01       	movw	r30, r18
     3fa:	e3 52       	subi	r30, 0x23	; 35
     3fc:	fb 4f       	sbci	r31, 0xFB	; 251
     3fe:	40 81       	ld	r20, Z
     400:	f9 01       	movw	r30, r18
     402:	e4 52       	subi	r30, 0x24	; 36
     404:	fb 4f       	sbci	r31, 0xFB	; 251
     406:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     408:	9f 5f       	subi	r25, 0xFF	; 255
     40a:	29 2f       	mov	r18, r25
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 91 dc 04 	lds	r20, 0x04DC	; 0x8004dc <__data_end>
     412:	04 2e       	mov	r0, r20
     414:	00 0c       	add	r0, r0
     416:	55 0b       	sbc	r21, r21
     418:	24 17       	cp	r18, r20
     41a:	35 07       	cpc	r19, r21
     41c:	6c f3       	brlt	.-38     	; 0x3f8 <button_pushed+0x14>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     41e:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <__data_end>
     422:	91 50       	subi	r25, 0x01	; 1
     424:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <__data_end>
		
		if (interrupts_were_enabled)
     428:	66 23       	and	r22, r22
     42a:	1c f4       	brge	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		{
			// Turn them back on again
			sei();
     42c:	78 94       	sei
     42e:	08 95       	ret
	queue_length = 0;
}

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     430:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     432:	08 95       	ret

00000434 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect)
{
     434:	1f 92       	push	r1
     436:	0f 92       	push	r0
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     44c:	43 b1       	in	r20, 0x03	; 3
     44e:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	26 c0       	rjmp	.+76     	; 0x4a0 <__vector_5+0x6c>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     454:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <__data_end>
     458:	94 30       	cpi	r25, 0x04	; 4
     45a:	0c f5       	brge	.+66     	; 0x49e <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     45c:	24 2f       	mov	r18, r20
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	08 2e       	mov	r0, r24
     462:	02 c0       	rjmp	.+4      	; 0x468 <__vector_5+0x34>
     464:	35 95       	asr	r19
     466:	27 95       	ror	r18
     468:	0a 94       	dec	r0
     46a:	e2 f7       	brpl	.-8      	; 0x464 <__vector_5+0x30>
     46c:	20 ff       	sbrs	r18, 0
     46e:	17 c0       	rjmp	.+46     	; 0x49e <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin)))
     470:	20 91 e1 04 	lds	r18, 0x04E1	; 0x8004e1 <last_button_state>
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	08 2e       	mov	r0, r24
     478:	02 c0       	rjmp	.+4      	; 0x47e <__vector_5+0x4a>
     47a:	35 95       	asr	r19
     47c:	27 95       	ror	r18
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <__vector_5+0x46>
     482:	20 fd       	sbrc	r18, 0
     484:	0c c0       	rjmp	.+24     	; 0x49e <__vector_5+0x6a>
				{
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     486:	e0 91 dc 04 	lds	r30, 0x04DC	; 0x8004dc <__data_end>
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	9e 0f       	add	r25, r30
     48e:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <__data_end>
     492:	0e 2e       	mov	r0, r30
     494:	00 0c       	add	r0, r0
     496:	ff 0b       	sbc	r31, r31
     498:	e3 52       	subi	r30, 0x23	; 35
     49a:	fb 4f       	sbci	r31, 0xFB	; 251
     49c:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	c0 f2       	brcs	.-80     	; 0x454 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     4a4:	40 93 e1 04 	sts	0x04E1, r20	; 0x8004e1 <last_button_state>
}
     4a8:	ff 91       	pop	r31
     4aa:	ef 91       	pop	r30
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <update_start_screen>:

// Update dynamic start screen based on the frame number (0-31)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	18 2f       	mov	r17, r24
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     4c8:	d4 e0       	ldi	r29, 0x04	; 4
     4ca:	36 c0       	rjmp	.+108    	; 0x538 <update_start_screen+0x78>
	{
		for (uint8_t col = 11; col < 16; col++)
		{
			colour = col == 14 ? COLOUR_YELLOW : COLOUR_BLACK;
     4cc:	ce 30       	cpi	r28, 0x0E	; 14
     4ce:	11 f4       	brne	.+4      	; 0x4d4 <update_start_screen+0x14>
     4d0:	4f ef       	ldi	r20, 0xFF	; 255
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <update_start_screen+0x16>
     4d4:	40 e0       	ldi	r20, 0x00	; 0
			if (((32+col-frame_number) & ((1<<(row-2))-1)) == (1<<(row-3))-1)
     4d6:	2c 2f       	mov	r18, r28
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	20 5e       	subi	r18, 0xE0	; 224
     4dc:	3f 4f       	sbci	r19, 0xFF	; 255
     4de:	21 1b       	sub	r18, r17
     4e0:	31 09       	sbc	r19, r1
     4e2:	ed 2f       	mov	r30, r29
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	bf 01       	movw	r22, r30
     4e8:	62 50       	subi	r22, 0x02	; 2
     4ea:	71 09       	sbc	r23, r1
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	dc 01       	movw	r26, r24
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <update_start_screen+0x38>
     4f4:	aa 0f       	add	r26, r26
     4f6:	bb 1f       	adc	r27, r27
     4f8:	6a 95       	dec	r22
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <update_start_screen+0x34>
     4fc:	bd 01       	movw	r22, r26
     4fe:	61 50       	subi	r22, 0x01	; 1
     500:	71 09       	sbc	r23, r1
     502:	26 23       	and	r18, r22
     504:	37 23       	and	r19, r23
     506:	33 97       	sbiw	r30, 0x03	; 3
     508:	02 c0       	rjmp	.+4      	; 0x50e <update_start_screen+0x4e>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	ea 95       	dec	r30
     510:	e2 f7       	brpl	.-8      	; 0x50a <update_start_screen+0x4a>
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	28 17       	cp	r18, r24
     516:	39 07       	cpc	r19, r25
     518:	29 f4       	brne	.+10     	; 0x524 <update_start_screen+0x64>
			{
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
     51a:	ce 30       	cpi	r28, 0x0E	; 14
     51c:	10 f4       	brcc	.+4      	; 0x522 <update_start_screen+0x62>
     51e:	4f e0       	ldi	r20, 0x0F	; 15
     520:	01 c0       	rjmp	.+2      	; 0x524 <update_start_screen+0x64>
     522:	40 ef       	ldi	r20, 0xF0	; 240
			}
			ledmatrix_update_pixel(col, row, colour);
     524:	6d 2f       	mov	r22, r29
     526:	8c 2f       	mov	r24, r28
     528:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
	{
		for (uint8_t col = 11; col < 16; col++)
     52c:	cf 5f       	subi	r28, 0xFF	; 255
     52e:	01 c0       	rjmp	.+2      	; 0x532 <update_start_screen+0x72>
     530:	cb e0       	ldi	r28, 0x0B	; 11
     532:	c0 31       	cpi	r28, 0x10	; 16
     534:	58 f2       	brcs	.-106    	; 0x4cc <update_start_screen+0xc>
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     536:	df 5f       	subi	r29, 0xFF	; 255
     538:	d8 30       	cpi	r29, 0x08	; 8
     53a:	d0 f3       	brcs	.-12     	; 0x530 <update_start_screen+0x70>
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
			}
			ledmatrix_update_pixel(col, row, colour);
		}
	}
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	08 95       	ret

00000544 <show_start_screen>:
// Stored as a 5 x 3 grid pattern going from Left-to-Right, Top-to-Bottom
// Padded with a leading zero so that it fits into a 16-bit value


void show_start_screen(void)
{
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	28 97       	sbiw	r28, 0x08	; 8
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     55a:	0e 94 b0 07 	call	0xf60	; 0xf60 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	31 c0       	rjmp	.+98     	; 0x5c4 <show_start_screen+0x80>
	{
		col_data = pong_display[col];
     562:	e1 2f       	mov	r30, r17
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	e6 5e       	subi	r30, 0xE6	; 230
     568:	fe 4f       	sbci	r31, 0xFE	; 254
     56a:	90 81       	ld	r25, Z
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	21 c0       	rjmp	.+66     	; 0x5b2 <show_start_screen+0x6e>
		{
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data>>row & 1)
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	49 2f       	mov	r20, r25
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	08 2e       	mov	r0, r24
     57a:	02 c0       	rjmp	.+4      	; 0x580 <show_start_screen+0x3c>
     57c:	55 95       	asr	r21
     57e:	47 95       	ror	r20
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <show_start_screen+0x38>
     584:	40 ff       	sbrs	r20, 0
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <show_start_screen+0x5e>
			{
				column_colour_data[row] = (row < 4 ? COLOUR_RED : COLOUR_GREEN);
     588:	84 30       	cpi	r24, 0x04	; 4
     58a:	10 f4       	brcc	.+4      	; 0x590 <show_start_screen+0x4c>
     58c:	4f e0       	ldi	r20, 0x0F	; 15
     58e:	01 c0       	rjmp	.+2      	; 0x592 <show_start_screen+0x4e>
     590:	40 ef       	ldi	r20, 0xF0	; 240
     592:	e1 e0       	ldi	r30, 0x01	; 1
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	ec 0f       	add	r30, r28
     598:	fd 1f       	adc	r31, r29
     59a:	e2 0f       	add	r30, r18
     59c:	f3 1f       	adc	r31, r19
     59e:	40 83       	st	Z, r20
     5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <show_start_screen+0x6c>
			}
			else
			{
				column_colour_data[row] = 0;
     5a2:	e1 e0       	ldi	r30, 0x01	; 1
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	ec 0f       	add	r30, r28
     5a8:	fd 1f       	adc	r31, r29
     5aa:	e2 0f       	add	r30, r18
     5ac:	f3 1f       	adc	r31, r19
     5ae:	10 82       	st	Z, r1
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
	{
		col_data = pong_display[col];
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	88 30       	cpi	r24, 0x08	; 8
     5b4:	e8 f2       	brcs	.-70     	; 0x570 <show_start_screen+0x2c>
			else
			{
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
     5b6:	be 01       	movw	r22, r28
     5b8:	6f 5f       	subi	r22, 0xFF	; 255
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	81 2f       	mov	r24, r17
     5be:	0e 94 93 07 	call	0xf26	; 0xf26 <ledmatrix_update_column>
{
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     5c2:	1f 5f       	subi	r17, 0xFF	; 255
     5c4:	10 31       	cpi	r17, 0x10	; 16
     5c6:	68 f2       	brcs	.-102    	; 0x562 <show_start_screen+0x1e>
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
	}
	update_start_screen(0);
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
}
     5ce:	28 96       	adiw	r28, 0x08	; 8
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	08 95       	ret

000005e2 <default_grid>:
}

// Initialize the display for the board, this creates the display
// for an empty board.
void default_grid(void)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	28 97       	sbiw	r28, 0x08	; 8
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_clear();
     5f6:	0e 94 b0 07 	call	0xf60	; 0xf60 <ledmatrix_clear>
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <default_grid+0x2e>
	{
		colours[row] = COLOUR_YELLOW;
     5fe:	e1 e0       	ldi	r30, 0x01	; 1
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	e8 0f       	add	r30, r24
     608:	f1 1d       	adc	r31, r1
     60a:	9f ef       	ldi	r25, 0xFF	; 255
     60c:	90 83       	st	Z, r25
void default_grid(void)
{
	ledmatrix_clear();
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     60e:	8f 5f       	subi	r24, 0xFF	; 255
     610:	88 30       	cpi	r24, 0x08	; 8
     612:	a8 f3       	brcs	.-22     	; 0x5fe <default_grid+0x1c>
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
     614:	be 01       	movw	r22, r28
     616:	6f 5f       	subi	r22, 0xFF	; 255
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	8d e0       	ldi	r24, 0x0D	; 13
     61c:	0e 94 93 07 	call	0xf26	; 0xf26 <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	09 c0       	rjmp	.+18     	; 0x636 <default_grid+0x54>
	{
		colours[row] = COLOUR_HALF_YELLOW;
     624:	e1 e0       	ldi	r30, 0x01	; 1
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ec 0f       	add	r30, r28
     62a:	fd 1f       	adc	r31, r29
     62c:	e8 0f       	add	r30, r24
     62e:	f1 1d       	adc	r31, r1
     630:	95 e5       	ldi	r25, 0x55	; 85
     632:	90 83       	st	Z, r25
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	88 30       	cpi	r24, 0x08	; 8
     638:	a8 f3       	brcs	.-22     	; 0x624 <default_grid+0x42>
	{
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
     63a:	be 01       	movw	r22, r28
     63c:	6f 5f       	subi	r22, 0xFF	; 255
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	8c e0       	ldi	r24, 0x0C	; 12
     642:	0e 94 93 07 	call	0xf26	; 0xf26 <ledmatrix_update_column>
	ledmatrix_update_column(14, colours);
     646:	be 01       	movw	r22, r28
     648:	6f 5f       	subi	r22, 0xFF	; 255
     64a:	7f 4f       	sbci	r23, 0xFF	; 255
     64c:	8e e0       	ldi	r24, 0x0E	; 14
     64e:	0e 94 93 07 	call	0xf26	; 0xf26 <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	09 c0       	rjmp	.+18     	; 0x668 <default_grid+0x86>
	{
		colours[row] = COLOUR_QUART_YELLOW;
     656:	e1 e0       	ldi	r30, 0x01	; 1
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	e8 0f       	add	r30, r24
     660:	f1 1d       	adc	r31, r1
     662:	91 e1       	ldi	r25, 0x11	; 17
     664:	90 83       	st	Z, r25
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
	ledmatrix_update_column(14, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	88 30       	cpi	r24, 0x08	; 8
     66a:	a8 f3       	brcs	.-22     	; 0x656 <default_grid+0x74>
	{
		colours[row] = COLOUR_QUART_YELLOW;
	}
	ledmatrix_update_column(11, colours);
     66c:	be 01       	movw	r22, r28
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	8b e0       	ldi	r24, 0x0B	; 11
     674:	0e 94 93 07 	call	0xf26	; 0xf26 <ledmatrix_update_column>
	ledmatrix_update_column(15, colours);
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	8f e0       	ldi	r24, 0x0F	; 15
     680:	0e 94 93 07 	call	0xf26	; 0xf26 <ledmatrix_update_column>
}
     684:	28 96       	adiw	r28, 0x08	; 8
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <update_points>:
uint8_t game_over = 0;

//updates the points in the terminal
void update_points() {
	//clear terminal line and reprint the game score with the points
	move_terminal_cursor(10, 13);
     696:	6d e0       	ldi	r22, 0x0D	; 13
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	8a e0       	ldi	r24, 0x0A	; 10
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	clear_to_end_of_line();
     6a2:	0e 94 02 11 	call	0x2204	; 0x2204 <clear_to_end_of_line>

	// if x >= 10 and [-9, 0)
	if ((points >= 10) || (points < 0 && points >= -9)) {
     6a6:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     6aa:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     6ae:	8a 30       	cpi	r24, 0x0A	; 10
     6b0:	91 05       	cpc	r25, r1
     6b2:	34 f4       	brge	.+12     	; 0x6c0 <update_points+0x2a>
     6b4:	9c 01       	movw	r18, r24
     6b6:	27 5f       	subi	r18, 0xF7	; 247
     6b8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ba:	29 30       	cpi	r18, 0x09	; 9
     6bc:	31 05       	cpc	r19, r1
     6be:	68 f4       	brcc	.+26     	; 0x6da <update_points+0x44>
		printf("Game Score:   %d", points);
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	8a e2       	ldi	r24, 0x2A	; 42
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	08 95       	ret
		
		//if x >= 100 and (-9, -99)
	} else if ((points >= 100) || (points < -9 && points > -99)) {
     6da:	84 36       	cpi	r24, 0x64	; 100
     6dc:	91 05       	cpc	r25, r1
     6de:	34 f4       	brge	.+12     	; 0x6ec <update_points+0x56>
     6e0:	9c 01       	movw	r18, r24
     6e2:	2e 59       	subi	r18, 0x9E	; 158
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255
     6e6:	29 35       	cpi	r18, 0x59	; 89
     6e8:	31 05       	cpc	r19, r1
     6ea:	68 f4       	brcc	.+26     	; 0x706 <update_points+0x70>
		printf("Game Score:  %d", points);
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	8b e3       	ldi	r24, 0x3B	; 59
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	08 95       	ret
		
		//if x < -99
	} else if (points < -99) {
     706:	8d 39       	cpi	r24, 0x9D	; 157
     708:	2f ef       	ldi	r18, 0xFF	; 255
     70a:	92 07       	cpc	r25, r18
     70c:	6c f4       	brge	.+26     	; 0x728 <update_points+0x92>
		printf("Game Score: %d", points);
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	8b e4       	ldi	r24, 0x4B	; 75
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	08 95       	ret
		
	} else {
		printf("Game Score:    %d", points);
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	8a e5       	ldi	r24, 0x5A	; 90
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	9f 93       	push	r25
     732:	8f 93       	push	r24
     734:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	08 95       	ret

00000742 <update_combo>:
}

//updates the combo points in the terminal
void update_combo() {
	//Clear terminal line and reprint the combo count
	move_terminal_cursor(10, 14);
     742:	6e e0       	ldi	r22, 0x0E	; 14
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	8a e0       	ldi	r24, 0x0A	; 10
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	clear_to_end_of_line();
     74e:	0e 94 02 11 	call	0x2204	; 0x2204 <clear_to_end_of_line>
	
	//adjusts the combo count padding so it matches points
	if (combo_count >= 10) {
     752:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <combo_count>
     756:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <combo_count+0x1>
     75a:	8a 30       	cpi	r24, 0x0A	; 10
     75c:	91 05       	cpc	r25, r1
     75e:	6c f0       	brlt	.+26     	; 0x77a <update_combo+0x38>
		printf("Combo Count:  %d", combo_count);
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	8c e6       	ldi	r24, 0x6C	; 108
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	9f 93       	push	r25
     76a:	8f 93       	push	r24
     76c:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0c c0       	rjmp	.+24     	; 0x792 <update_combo+0x50>
		
	} else {
		printf("Combo Count:   %d", combo_count);
     77a:	9f 93       	push	r25
     77c:	8f 93       	push	r24
     77e:	8d e7       	ldi	r24, 0x7D	; 125
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	9f 93       	push	r25
     784:	8f 93       	push	r24
     786:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
	}
	
	//update combo check accordingly
	if (combo_count >= 3) {
     792:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <combo_count>
     796:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <combo_count+0x1>
     79a:	03 97       	sbiw	r24, 0x03	; 3
     79c:	3c f0       	brlt	.+14     	; 0x7ac <update_combo+0x6a>
		combo_check = 1;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	90 93 f7 04 	sts	0x04F7, r25	; 0x8004f7 <combo_check+0x1>
     7a6:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <combo_check>
     7aa:	08 95       	ret
	} else {
		combo_check = 0;
     7ac:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <combo_check+0x1>
     7b0:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <combo_check>
     7b4:	08 95       	ret

000007b6 <sound_note>:
	/*
	move_terminal_cursor(10, 18);
	clear_to_end_of_line();
	printf("current lane: %d", lane);
	*/
	if (lane == -1 && col == -1) {
     7b6:	8f 3f       	cpi	r24, 0xFF	; 255
     7b8:	2f ef       	ldi	r18, 0xFF	; 255
     7ba:	92 07       	cpc	r25, r18
     7bc:	91 f4       	brne	.+36     	; 0x7e2 <sound_note+0x2c>
     7be:	6f 3f       	cpi	r22, 0xFF	; 255
     7c0:	2f ef       	ldi	r18, 0xFF	; 255
     7c2:	72 07       	cpc	r23, r18
     7c4:	71 f4       	brne	.+28     	; 0x7e2 <sound_note+0x2c>
		//turn off buzzer
		freq = 1;
     7c6:	21 e0       	ldi	r18, 0x01	; 1
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	30 93 f1 04 	sts	0x04F1, r19	; 0x8004f1 <freq+0x1>
     7ce:	20 93 f0 04 	sts	0x04F0, r18	; 0x8004f0 <freq>
		duty_cycle = 0;
     7d2:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <duty_cycle>
     7d6:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <duty_cycle+0x1>
     7da:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <duty_cycle+0x2>
     7de:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <duty_cycle+0x3>
	}
	
	if (lane == 3) {
     7e2:	83 30       	cpi	r24, 0x03	; 3
     7e4:	91 05       	cpc	r25, r1
     7e6:	39 f4       	brne	.+14     	; 0x7f6 <sound_note+0x40>
		freq = 784;
     7e8:	80 e1       	ldi	r24, 0x10	; 16
     7ea:	93 e0       	ldi	r25, 0x03	; 3
     7ec:	90 93 f1 04 	sts	0x04F1, r25	; 0x8004f1 <freq+0x1>
     7f0:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <freq>
     7f4:	1c c0       	rjmp	.+56     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		
	} else if (lane == 2) {
     7f6:	82 30       	cpi	r24, 0x02	; 2
     7f8:	91 05       	cpc	r25, r1
     7fa:	39 f4       	brne	.+14     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		freq = 698;
     7fc:	8a eb       	ldi	r24, 0xBA	; 186
     7fe:	92 e0       	ldi	r25, 0x02	; 2
     800:	90 93 f1 04 	sts	0x04F1, r25	; 0x8004f1 <freq+0x1>
     804:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <freq>
     808:	12 c0       	rjmp	.+36     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		
	} else if (lane == 1) {
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	91 05       	cpc	r25, r1
     80e:	39 f4       	brne	.+14     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
		freq = 622;
     810:	8e e6       	ldi	r24, 0x6E	; 110
     812:	92 e0       	ldi	r25, 0x02	; 2
     814:	90 93 f1 04 	sts	0x04F1, r25	; 0x8004f1 <freq+0x1>
     818:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <freq>
     81c:	08 c0       	rjmp	.+16     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		
	} else if (!lane) {
     81e:	89 2b       	or	r24, r25
     820:	31 f4       	brne	.+12     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		freq = 523;
     822:	8b e0       	ldi	r24, 0x0B	; 11
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	90 93 f1 04 	sts	0x04F1, r25	; 0x8004f1 <freq+0x1>
     82a:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <freq>
	move_terminal_cursor(10, 19);
	clear_to_end_of_line();
	printf("current column: %d", col);
	*/
	//set duty cycle appropriately
	if (col == 11) {
     82e:	6b 30       	cpi	r22, 0x0B	; 11
     830:	71 05       	cpc	r23, r1
     832:	69 f4       	brne	.+26     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		duty_cycle = 2;
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	a0 e0       	ldi	r26, 0x00	; 0
     83a:	b0 e4       	ldi	r27, 0x40	; 64
     83c:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <duty_cycle>
     840:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <duty_cycle+0x1>
     844:	a0 93 fa 04 	sts	0x04FA, r26	; 0x8004fa <duty_cycle+0x2>
     848:	b0 93 fb 04 	sts	0x04FB, r27	; 0x8004fb <duty_cycle+0x3>
     84c:	3f c0       	rjmp	.+126    	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
		
	} else if (col == 12) {
     84e:	6c 30       	cpi	r22, 0x0C	; 12
     850:	71 05       	cpc	r23, r1
     852:	69 f4       	brne	.+26     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
		duty_cycle = 10;
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e2       	ldi	r26, 0x20	; 32
     85a:	b1 e4       	ldi	r27, 0x41	; 65
     85c:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <duty_cycle>
     860:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <duty_cycle+0x1>
     864:	a0 93 fa 04 	sts	0x04FA, r26	; 0x8004fa <duty_cycle+0x2>
     868:	b0 93 fb 04 	sts	0x04FB, r27	; 0x8004fb <duty_cycle+0x3>
     86c:	2f c0       	rjmp	.+94     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
		
	} else if (col == 13) {
     86e:	6d 30       	cpi	r22, 0x0D	; 13
     870:	71 05       	cpc	r23, r1
     872:	69 f4       	brne	.+26     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
		duty_cycle = 50;
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a8 e4       	ldi	r26, 0x48	; 72
     87a:	b2 e4       	ldi	r27, 0x42	; 66
     87c:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <duty_cycle>
     880:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <duty_cycle+0x1>
     884:	a0 93 fa 04 	sts	0x04FA, r26	; 0x8004fa <duty_cycle+0x2>
     888:	b0 93 fb 04 	sts	0x04FB, r27	; 0x8004fb <duty_cycle+0x3>
     88c:	1f c0       	rjmp	.+62     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
		
	} else if (col == 14) {
     88e:	6e 30       	cpi	r22, 0x0E	; 14
     890:	71 05       	cpc	r23, r1
     892:	69 f4       	brne	.+26     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
		duty_cycle = 90;
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	a4 eb       	ldi	r26, 0xB4	; 180
     89a:	b2 e4       	ldi	r27, 0x42	; 66
     89c:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <duty_cycle>
     8a0:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <duty_cycle+0x1>
     8a4:	a0 93 fa 04 	sts	0x04FA, r26	; 0x8004fa <duty_cycle+0x2>
     8a8:	b0 93 fb 04 	sts	0x04FB, r27	; 0x8004fb <duty_cycle+0x3>
     8ac:	0f c0       	rjmp	.+30     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
		
	} else if (col == 15) {
     8ae:	6f 30       	cpi	r22, 0x0F	; 15
     8b0:	71 05       	cpc	r23, r1
     8b2:	61 f4       	brne	.+24     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
		duty_cycle = 98;
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a4 ec       	ldi	r26, 0xC4	; 196
     8ba:	b2 e4       	ldi	r27, 0x42	; 66
     8bc:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <duty_cycle>
     8c0:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <duty_cycle+0x1>
     8c4:	a0 93 fa 04 	sts	0x04FA, r26	; 0x8004fa <duty_cycle+0x2>
     8c8:	b0 93 fb 04 	sts	0x04FB, r27	; 0x8004fb <duty_cycle+0x3>
		
	}
	
	note_sound();
     8cc:	0e 94 94 11 	call	0x2328	; 0x2328 <note_sound>
     8d0:	08 95       	ret

000008d2 <initialise_game>:

// Initialize the game by resetting the grid and beat
void initialise_game(void)
{
	// initialize the display we are using.
	default_grid();
     8d2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <default_grid>
	
	beat = 0;
     8d6:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <beat+0x1>
     8da:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <beat>
	game_over = 0;
     8de:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <game_over>
	update_points();
     8e2:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
	update_combo();
     8e6:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
     8ea:	08 95       	ret

000008ec <play_note>:
}

// Play a note in the given lane
void play_note(uint8_t lane)
{	
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	d8 2f       	mov	r29, r24

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     8f8:	cb e0       	ldi	r28, 0x0B	; 11
     8fa:	bb c0       	rjmp	.+374    	; 0xa72 <__stack+0x173>
	
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col; //this is the next position that the note will be in
     8fc:	8f e0       	ldi	r24, 0x0F	; 15
     8fe:	8c 1b       	sub	r24, r28
		uint8_t index = (future + beat) / 5; 
     900:	40 91 fc 04 	lds	r20, 0x04FC	; 0x8004fc <beat>
     904:	50 91 fd 04 	lds	r21, 0x04FD	; 0x8004fd <beat+0x1>
     908:	48 0f       	add	r20, r24
     90a:	51 1d       	adc	r21, r1
     90c:	9a 01       	movw	r18, r20
     90e:	ad ec       	ldi	r26, 0xCD	; 205
     910:	bc ec       	ldi	r27, 0xCC	; 204
     912:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__umulhisi3>
     916:	fc 01       	movw	r30, r24
     918:	f6 95       	lsr	r31
     91a:	e7 95       	ror	r30
     91c:	f6 95       	lsr	r31
     91e:	e7 95       	ror	r30
		
		if ((future + beat) % 5) {
     920:	cf 01       	movw	r24, r30
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	88 0f       	add	r24, r24
     928:	99 1f       	adc	r25, r25
     92a:	8e 0f       	add	r24, r30
     92c:	9f 1f       	adc	r25, r31
     92e:	48 17       	cp	r20, r24
     930:	59 07       	cpc	r21, r25
     932:	09 f0       	breq	.+2      	; 0x936 <__stack+0x37>
     934:	9d c0       	rjmp	.+314    	; 0xa70 <__stack+0x171>
			continue;
		}
		if (track[index] & (1<<lane))
     936:	ff 27       	eor	r31, r31
     938:	e1 57       	subi	r30, 0x71	; 113
     93a:	fe 4f       	sbci	r31, 0xFE	; 254
     93c:	80 81       	ld	r24, Z
     93e:	ed 2e       	mov	r14, r29
     940:	f1 2c       	mov	r15, r1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0d 2e       	mov	r0, r29
     946:	02 c0       	rjmp	.+4      	; 0x94c <__stack+0x4d>
     948:	95 95       	asr	r25
     94a:	87 95       	ror	r24
     94c:	0a 94       	dec	r0
     94e:	e2 f7       	brpl	.-8      	; 0x948 <__stack+0x49>
     950:	80 ff       	sbrs	r24, 0
     952:	7d c0       	rjmp	.+250    	; 0xa4e <__stack+0x14f>
		{	
			if (green_check == lane) {
     954:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     958:	d8 13       	cpse	r29, r24
     95a:	12 c0       	rjmp	.+36     	; 0x980 <__stack+0x81>
				points--;
     95c:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     960:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     964:	01 97       	sbiw	r24, 0x01	; 1
     966:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     96a:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
				update_points();
     96e:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
				
				combo_count = 0;
     972:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <combo_count+0x1>
     976:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <combo_count>
				update_combo();
     97a:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
				
				break;
     97e:	7c c0       	rjmp	.+248    	; 0xa78 <__stack+0x179>
			}
			
			green_check = lane;
     980:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			// if so, colour the two pixels green
			ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     984:	40 ef       	ldi	r20, 0xF0	; 240
     986:	1d 2f       	mov	r17, r29
     988:	11 0f       	add	r17, r17
     98a:	61 2f       	mov	r22, r17
     98c:	8c 2f       	mov	r24, r28
     98e:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	61 0f       	add	r22, r17
     996:	40 ef       	ldi	r20, 0xF0	; 240
     998:	8c 2f       	mov	r24, r28
     99a:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			
			//if the note is in the two specified lanes then award the appropriate amount of points
			if (col == 11 || col == 15) {
     99e:	cb 30       	cpi	r28, 0x0B	; 11
     9a0:	11 f0       	breq	.+4      	; 0x9a6 <__stack+0xa7>
     9a2:	cf 30       	cpi	r28, 0x0F	; 15
     9a4:	99 f4       	brne	.+38     	; 0x9cc <__stack+0xcd>
				points++;
     9a6:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     9aa:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     9b4:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
				combo_count = 0;
     9b8:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <combo_count+0x1>
     9bc:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <combo_count>
				sound_note(lane, col);
     9c0:	6c 2f       	mov	r22, r28
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	c7 01       	movw	r24, r14
     9c6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
     9ca:	4e c0       	rjmp	.+156    	; 0xa68 <__stack+0x169>
				
			} else if (col == 12 || col == 14) {
     9cc:	cc 30       	cpi	r28, 0x0C	; 12
     9ce:	11 f0       	breq	.+4      	; 0x9d4 <__stack+0xd5>
     9d0:	ce 30       	cpi	r28, 0x0E	; 14
     9d2:	99 f4       	brne	.+38     	; 0x9fa <__stack+0xfb>
				points += 2;
     9d4:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     9d8:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     9dc:	02 96       	adiw	r24, 0x02	; 2
     9de:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     9e2:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
				combo_count = 0;
     9e6:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <combo_count+0x1>
     9ea:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <combo_count>
				sound_note(lane, col);
     9ee:	6c 2f       	mov	r22, r28
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	c7 01       	movw	r24, r14
     9f4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
     9f8:	37 c0       	rjmp	.+110    	; 0xa68 <__stack+0x169>
				
			} else if (col == 13) {
     9fa:	cd 30       	cpi	r28, 0x0D	; 13
     9fc:	a9 f5       	brne	.+106    	; 0xa68 <__stack+0x169>
				combo_count++;
     9fe:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <combo_count>
     a02:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <combo_count+0x1>
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	90 93 f5 04 	sts	0x04F5, r25	; 0x8004f5 <combo_count+0x1>
     a0c:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <combo_count>
				sound_note(lane, col);
     a10:	6c 2f       	mov	r22, r28
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	c7 01       	movw	r24, r14
     a16:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
				
				if (combo_count > 3) {
     a1a:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <combo_count>
     a1e:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <combo_count+0x1>
     a22:	04 97       	sbiw	r24, 0x04	; 4
     a24:	54 f0       	brlt	.+20     	; 0xa3a <__stack+0x13b>
					points += 4;
     a26:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     a2a:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     a2e:	04 96       	adiw	r24, 0x04	; 4
     a30:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     a34:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
     a38:	17 c0       	rjmp	.+46     	; 0xa68 <__stack+0x169>
				} else {
					points += 3;
     a3a:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     a3e:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     a42:	03 96       	adiw	r24, 0x03	; 3
     a44:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     a48:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
     a4c:	0d c0       	rjmp	.+26     	; 0xa68 <__stack+0x169>
					
				}
			}
			
		} else {
			points--;
     a4e:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     a52:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     a5c:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
			combo_count = 0;
     a60:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <combo_count+0x1>
     a64:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <combo_count>
		
		}
			
		update_points();
     a68:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
		update_combo();
     a6c:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>

// Play a note in the given lane
void play_note(uint8_t lane)
{	

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     a70:	cf 5f       	subi	r28, 0xFF	; 255
     a72:	c0 31       	cpi	r28, 0x10	; 16
     a74:	08 f4       	brcc	.+2      	; 0xa78 <__stack+0x179>
     a76:	42 cf       	rjmp	.-380    	; 0x8fc <play_note+0x10>
		}
			
		update_points();
		update_combo();
		}	
}
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	08 95       	ret

00000a84 <advance_note>:
	

// Advance the notes one row down the display
void advance_note(void)
{
     a84:	9f 92       	push	r9
     a86:	af 92       	push	r10
     a88:	bf 92       	push	r11
     a8a:	cf 92       	push	r12
     a8c:	df 92       	push	r13
     a8e:	ef 92       	push	r14
     a90:	ff 92       	push	r15
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	PixelColour color = COLOUR_RED;
	
	if (combo_check) {
     a9a:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <combo_check>
     a9e:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <combo_check+0x1>
     aa2:	89 2b       	or	r24, r25
     aa4:	39 f4       	brne	.+14     	; 0xab4 <advance_note+0x30>
// Advance the notes one row down the display
void advance_note(void)
{
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	PixelColour color = COLOUR_RED;
     aa6:	0f 2e       	mov	r0, r31
     aa8:	ff e0       	ldi	r31, 0x0F	; 15
     aaa:	ff 2e       	mov	r15, r31
     aac:	f0 2d       	mov	r31, r0

// Advance the notes one row down the display
void advance_note(void)
{
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
     aae:	ee 24       	eor	r14, r14
     ab0:	e3 94       	inc	r14
     ab2:	08 c0       	rjmp	.+16     	; 0xac4 <advance_note+0x40>
	PixelColour color = COLOUR_RED;
	
	if (combo_check) {
		dark_colour = COLOUR_DARK_ORANGE;
		color = COLOUR_ORANGE;
     ab4:	0f 2e       	mov	r0, r31
     ab6:	fc e3       	ldi	r31, 0x3C	; 60
     ab8:	ff 2e       	mov	r15, r31
     aba:	f0 2d       	mov	r31, r0
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	PixelColour color = COLOUR_RED;
	
	if (combo_check) {
		dark_colour = COLOUR_DARK_ORANGE;
     abc:	0f 2e       	mov	r0, r31
     abe:	f4 e3       	ldi	r31, 0x34	; 52
     ac0:	ef 2e       	mov	r14, r31
     ac2:	f0 2d       	mov	r31, r0
		color = COLOUR_ORANGE;
	}
	
	
	if (advance_count == 5) {
     ac4:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <advance_count>
     ac8:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <advance_count+0x1>
     acc:	05 97       	sbiw	r24, 0x05	; 5
     ace:	51 f4       	brne	.+20     	; 0xae4 <advance_note+0x60>
		sound_note(-1, -1);
     ad0:	6f ef       	ldi	r22, 0xFF	; 255
     ad2:	7f ef       	ldi	r23, 0xFF	; 255
     ad4:	8f ef       	ldi	r24, 0xFF	; 255
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
		advance_count = 0;
     adc:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <advance_count+0x1>
     ae0:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <advance_count>
     ae4:	10 e0       	ldi	r17, 0x00	; 0
     ae6:	e9 c0       	rjmp	.+466    	; 0xcba <advance_note+0x236>
	}
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
	{
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col;
     ae8:	8f e0       	ldi	r24, 0x0F	; 15
     aea:	81 1b       	sub	r24, r17
		uint8_t index = (future + beat) / 5;
     aec:	e0 91 fc 04 	lds	r30, 0x04FC	; 0x8004fc <beat>
     af0:	f0 91 fd 04 	lds	r31, 0x04FD	; 0x8004fd <beat+0x1>
     af4:	af 01       	movw	r20, r30
     af6:	48 0f       	add	r20, r24
     af8:	51 1d       	adc	r21, r1
     afa:	9a 01       	movw	r18, r20
     afc:	ad ec       	ldi	r26, 0xCD	; 205
     afe:	bc ec       	ldi	r27, 0xCC	; 204
     b00:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__umulhisi3>
     b04:	ec 01       	movw	r28, r24
     b06:	d6 95       	lsr	r29
     b08:	c7 95       	ror	r28
     b0a:	d6 95       	lsr	r29
     b0c:	c7 95       	ror	r28
     b0e:	0c 2f       	mov	r16, r28
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     b10:	9f 01       	movw	r18, r30
     b12:	21 5f       	subi	r18, 0xF1	; 241
     b14:	3f 4f       	sbci	r19, 0xFF	; 255
     b16:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__umulhisi3>
     b1a:	96 95       	lsr	r25
     b1c:	87 95       	ror	r24
     b1e:	96 95       	lsr	r25
     b20:	87 95       	ror	r24
		uint8_t ghost_index = ghost_start_index +1;
     b22:	8f 5f       	subi	r24, 0xFF	; 255
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     b24:	08 c0       	rjmp	.+16     	; 0xb36 <advance_note+0xb2>
			if (track[ghost_index] & 0x0F) {
     b26:	e8 2f       	mov	r30, r24
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	e1 57       	subi	r30, 0x71	; 113
     b2c:	fe 4f       	sbci	r31, 0xFE	; 254
     b2e:	90 81       	ld	r25, Z
     b30:	9f 70       	andi	r25, 0x0F	; 15
     b32:	19 f4       	brne	.+6      	; 0xb3a <advance_note+0xb6>
		uint8_t index = (future + beat) / 5;
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
		uint8_t ghost_index = ghost_start_index +1;
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     b34:	8f 5f       	subi	r24, 0xFF	; 255
     b36:	81 38       	cpi	r24, 0x81	; 129
     b38:	b0 f3       	brcs	.-20     	; 0xb26 <advance_note+0xa2>
			if (track[ghost_index] & 0x0F) {
				break;
			}
		}
		uint8_t ghost_note = track[ghost_index];
     b3a:	e8 2f       	mov	r30, r24
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	e1 57       	subi	r30, 0x71	; 113
     b40:	fe 4f       	sbci	r31, 0xFE	; 254
     b42:	d0 80       	ld	r13, Z
		
		if (index >= TRACK_LENGTH)
     b44:	01 38       	cpi	r16, 0x81	; 129
     b46:	20 f0       	brcs	.+8      	; 0xb50 <advance_note+0xcc>
		{
			//Game Over
			game_over = 1;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <game_over>
			break;
     b4e:	b8 c0       	rjmp	.+368    	; 0xcc0 <advance_note+0x23c>
		}
		if ((future+beat) % 5)
     b50:	9a 01       	movw	r18, r20
     b52:	ad ec       	ldi	r26, 0xCD	; 205
     b54:	bc ec       	ldi	r27, 0xCC	; 204
     b56:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__umulhisi3>
     b5a:	96 95       	lsr	r25
     b5c:	87 95       	ror	r24
     b5e:	96 95       	lsr	r25
     b60:	87 95       	ror	r24
     b62:	9c 01       	movw	r18, r24
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	22 0f       	add	r18, r18
     b6a:	33 1f       	adc	r19, r19
     b6c:	82 0f       	add	r24, r18
     b6e:	93 1f       	adc	r25, r19
     b70:	48 17       	cp	r20, r24
     b72:	59 07       	cpc	r21, r25
     b74:	09 f0       	breq	.+2      	; 0xb78 <advance_note+0xf4>
     b76:	a0 c0       	rjmp	.+320    	; 0xcb8 <advance_note+0x234>
     b78:	00 e0       	ldi	r16, 0x00	; 0
     b7a:	9b c0       	rjmp	.+310    	; 0xcb2 <advance_note+0x22e>
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
		{
			//check if the next note is in the appropriate lane
			if ((ghost_note == 0x01) & (lane == 0)) {
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	d9 12       	cpse	r13, r25
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	01 11       	cpse	r16, r1
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	89 23       	and	r24, r25
     b8a:	71 f0       	breq	.+28     	; 0xba8 <advance_note+0x124>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     b8c:	4e 2d       	mov	r20, r14
     b8e:	c0 2e       	mov	r12, r16
     b90:	cc 0c       	add	r12, r12
     b92:	6c 2d       	mov	r22, r12
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     b9a:	61 e0       	ldi	r22, 0x01	; 1
     b9c:	6c 0d       	add	r22, r12
     b9e:	4e 2d       	mov	r20, r14
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
     ba6:	47 c0       	rjmp	.+142    	; 0xc36 <advance_note+0x1b2>
				
			} else if ((ghost_note == 0x02) & (lane == 1)) {
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	d8 12       	cpse	r13, r24
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	01 30       	cpi	r16, 0x01	; 1
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <advance_note+0x134>
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	89 23       	and	r24, r25
     bba:	71 f0       	breq	.+28     	; 0xbd8 <advance_note+0x154>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     bbc:	4e 2d       	mov	r20, r14
     bbe:	c0 2e       	mov	r12, r16
     bc0:	cc 0c       	add	r12, r12
     bc2:	6c 2d       	mov	r22, r12
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	6c 0d       	add	r22, r12
     bce:	4e 2d       	mov	r20, r14
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
     bd6:	2f c0       	rjmp	.+94     	; 0xc36 <advance_note+0x1b2>
			
			} else if ((ghost_note == 0x04) & (lane == 2)) {
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	84 e0       	ldi	r24, 0x04	; 4
     bdc:	d8 12       	cpse	r13, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	02 30       	cpi	r16, 0x02	; 2
     be4:	09 f0       	breq	.+2      	; 0xbe8 <advance_note+0x164>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	89 23       	and	r24, r25
     bea:	71 f0       	breq	.+28     	; 0xc08 <advance_note+0x184>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     bec:	4e 2d       	mov	r20, r14
     bee:	c0 2e       	mov	r12, r16
     bf0:	cc 0c       	add	r12, r12
     bf2:	6c 2d       	mov	r22, r12
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     bfa:	61 e0       	ldi	r22, 0x01	; 1
     bfc:	6c 0d       	add	r22, r12
     bfe:	4e 2d       	mov	r20, r14
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
     c06:	17 c0       	rjmp	.+46     	; 0xc36 <advance_note+0x1b2>
			
			} else if ((ghost_note == 0x08) & (lane == 3)) {
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	88 e0       	ldi	r24, 0x08	; 8
     c0c:	d8 12       	cpse	r13, r24
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	03 30       	cpi	r16, 0x03	; 3
     c14:	09 f0       	breq	.+2      	; 0xc18 <advance_note+0x194>
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	89 23       	and	r24, r25
     c1a:	69 f0       	breq	.+26     	; 0xc36 <advance_note+0x1b2>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     c1c:	4e 2d       	mov	r20, r14
     c1e:	c0 2e       	mov	r12, r16
     c20:	cc 0c       	add	r12, r12
     c22:	6c 2d       	mov	r22, r12
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	6c 0d       	add	r22, r12
     c2e:	4e 2d       	mov	r20, r14
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			
			}
				
			if (track[index] & (1<<lane))
     c36:	fe 01       	movw	r30, r28
     c38:	ff 27       	eor	r31, r31
     c3a:	e1 57       	subi	r30, 0x71	; 113
     c3c:	fe 4f       	sbci	r31, 0xFE	; 254
     c3e:	80 81       	ld	r24, Z
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	00 2e       	mov	r0, r16
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <advance_note+0x1c6>
     c46:	95 95       	asr	r25
     c48:	87 95       	ror	r24
     c4a:	0a 94       	dec	r0
     c4c:	e2 f7       	brpl	.-8      	; 0xc46 <advance_note+0x1c2>
     c4e:	80 ff       	sbrs	r24, 0
     c50:	2f c0       	rjmp	.+94     	; 0xcb0 <advance_note+0x22c>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
     c52:	1b 30       	cpi	r17, 0x0B	; 11
     c54:	59 f0       	breq	.+22     	; 0xc6c <advance_note+0x1e8>
     c56:	1f 30       	cpi	r17, 0x0F	; 15
     c58:	71 f0       	breq	.+28     	; 0xc76 <advance_note+0x1f2>
				{
					colour = COLOUR_QUART_YELLOW;
				}
				else if (col==12 || col == 14)
     c5a:	1c 30       	cpi	r17, 0x0C	; 12
     c5c:	89 f0       	breq	.+34     	; 0xc80 <advance_note+0x1fc>
     c5e:	1e 30       	cpi	r17, 0x0E	; 14
     c60:	a1 f0       	breq	.+40     	; 0xc8a <advance_note+0x206>
				{
					colour = COLOUR_HALF_YELLOW;
				}
				else if (col==13)
     c62:	1d 30       	cpi	r17, 0x0D	; 13
     c64:	b9 f4       	brne	.+46     	; 0xc94 <advance_note+0x210>
				{
					colour = COLOUR_YELLOW;
     c66:	bb 24       	eor	r11, r11
     c68:	ba 94       	dec	r11
     c6a:	15 c0       	rjmp	.+42     	; 0xc96 <advance_note+0x212>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
				{
					colour = COLOUR_QUART_YELLOW;
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f1 e1       	ldi	r31, 0x11	; 17
     c70:	bf 2e       	mov	r11, r31
     c72:	f0 2d       	mov	r31, r0
     c74:	10 c0       	rjmp	.+32     	; 0xc96 <advance_note+0x212>
     c76:	0f 2e       	mov	r0, r31
     c78:	f1 e1       	ldi	r31, 0x11	; 17
     c7a:	bf 2e       	mov	r11, r31
     c7c:	f0 2d       	mov	r31, r0
     c7e:	0b c0       	rjmp	.+22     	; 0xc96 <advance_note+0x212>
				}
				else if (col==12 || col == 14)
				{
					colour = COLOUR_HALF_YELLOW;
     c80:	0f 2e       	mov	r0, r31
     c82:	f5 e5       	ldi	r31, 0x55	; 85
     c84:	bf 2e       	mov	r11, r31
     c86:	f0 2d       	mov	r31, r0
     c88:	06 c0       	rjmp	.+12     	; 0xc96 <advance_note+0x212>
     c8a:	0f 2e       	mov	r0, r31
     c8c:	f5 e5       	ldi	r31, 0x55	; 85
     c8e:	bf 2e       	mov	r11, r31
     c90:	f0 2d       	mov	r31, r0
     c92:	01 c0       	rjmp	.+2      	; 0xc96 <advance_note+0x212>
				{
					colour = COLOUR_YELLOW;
				}
				else
				{
					colour = COLOUR_BLACK;
     c94:	b1 2c       	mov	r11, r1
				}
				ledmatrix_update_pixel(col, 2*lane, colour);
     c96:	4b 2d       	mov	r20, r11
     c98:	c0 2e       	mov	r12, r16
     c9a:	cc 0c       	add	r12, r12
     c9c:	6c 2d       	mov	r22, r12
     c9e:	81 2f       	mov	r24, r17
     ca0:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 2*lane+1, colour);
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	6c 0d       	add	r22, r12
     ca8:	4b 2d       	mov	r20, r11
     caa:	81 2f       	mov	r24, r17
     cac:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
		}
		if ((future+beat) % 5)
		{
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
     cb0:	0f 5f       	subi	r16, 0xFF	; 255
     cb2:	04 30       	cpi	r16, 0x04	; 4
     cb4:	08 f4       	brcc	.+2      	; 0xcb8 <advance_note+0x234>
     cb6:	62 cf       	rjmp	.-316    	; 0xb7c <advance_note+0xf8>
		sound_note(-1, -1);
		advance_count = 0;
	}
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     cb8:	1f 5f       	subi	r17, 0xFF	; 255
     cba:	10 31       	cpi	r17, 0x10	; 16
     cbc:	08 f4       	brcc	.+2      	; 0xcc0 <advance_note+0x23c>
     cbe:	14 cf       	rjmp	.-472    	; 0xae8 <advance_note+0x64>
			}
		}
	}
	
	// increment the beat
	beat++;
     cc0:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <beat>
     cc4:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <beat+0x1>
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <beat+0x1>
     cce:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <beat>
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     cd2:	c0 e0       	ldi	r28, 0x00	; 0
     cd4:	ee c0       	rjmp	.+476    	; 0xeb2 <advance_note+0x42e>
	{
		// col counts from one end, future from the other
		uint8_t future = MATRIX_NUM_COLUMNS-1-col;
     cd6:	8f e0       	ldi	r24, 0x0F	; 15
     cd8:	8c 1b       	sub	r24, r28
		// notes are only drawn every five columns
		if ((future+beat)%5)
     cda:	e0 91 fc 04 	lds	r30, 0x04FC	; 0x8004fc <beat>
     cde:	f0 91 fd 04 	lds	r31, 0x04FD	; 0x8004fd <beat+0x1>
     ce2:	af 01       	movw	r20, r30
     ce4:	48 0f       	add	r20, r24
     ce6:	51 1d       	adc	r21, r1
     ce8:	9a 01       	movw	r18, r20
     cea:	ad ec       	ldi	r26, 0xCD	; 205
     cec:	bc ec       	ldi	r27, 0xCC	; 204
     cee:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__umulhisi3>
     cf2:	96 95       	lsr	r25
     cf4:	87 95       	ror	r24
     cf6:	96 95       	lsr	r25
     cf8:	87 95       	ror	r24
     cfa:	9c 01       	movw	r18, r24
     cfc:	22 0f       	add	r18, r18
     cfe:	33 1f       	adc	r19, r19
     d00:	22 0f       	add	r18, r18
     d02:	33 1f       	adc	r19, r19
     d04:	82 0f       	add	r24, r18
     d06:	93 1f       	adc	r25, r19
     d08:	48 17       	cp	r20, r24
     d0a:	59 07       	cpc	r21, r25
     d0c:	09 f0       	breq	.+2      	; 0xd10 <advance_note+0x28c>
     d0e:	d0 c0       	rjmp	.+416    	; 0xeb0 <advance_note+0x42c>
		{
			continue;
		}
		
		// index of which note in the track to play
		uint8_t index = (future+beat)/5;
     d10:	9a 01       	movw	r18, r20
     d12:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__umulhisi3>
     d16:	8c 01       	movw	r16, r24
     d18:	16 95       	lsr	r17
     d1a:	07 95       	ror	r16
     d1c:	16 95       	lsr	r17
     d1e:	07 95       	ror	r16
		
		uint8_t ghost_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     d20:	9f 01       	movw	r18, r30
     d22:	21 5f       	subi	r18, 0xF1	; 241
     d24:	3f 4f       	sbci	r19, 0xFF	; 255
     d26:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__umulhisi3>
     d2a:	96 95       	lsr	r25
     d2c:	87 95       	ror	r24
     d2e:	96 95       	lsr	r25
     d30:	87 95       	ror	r24
		//next note in track that is coming
		uint8_t ghost_note = track[ghost_index];
     d32:	fc 01       	movw	r30, r24
     d34:	ff 27       	eor	r31, r31
     d36:	e1 57       	subi	r30, 0x71	; 113
     d38:	fe 4f       	sbci	r31, 0xFE	; 254
     d3a:	e0 80       	ld	r14, Z
		
		int long_check = 0;
		
		// if the index is beyond the end of the track,
		// no note can be drawn
		if (index >= TRACK_LENGTH || (index + 1) >= TRACK_LENGTH)
     d3c:	01 38       	cpi	r16, 0x81	; 129
     d3e:	08 f0       	brcs	.+2      	; 0xd42 <advance_note+0x2be>
     d40:	b7 c0       	rjmp	.+366    	; 0xeb0 <advance_note+0x42c>
     d42:	11 27       	eor	r17, r17
     d44:	58 01       	movw	r10, r16
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	a8 1a       	sub	r10, r24
     d4a:	b8 0a       	sbc	r11, r24
     d4c:	81 e8       	ldi	r24, 0x81	; 129
     d4e:	a8 16       	cp	r10, r24
     d50:	b1 04       	cpc	r11, r1
     d52:	0c f0       	brlt	.+2      	; 0xd56 <advance_note+0x2d2>
     d54:	ad c0       	rjmp	.+346    	; 0xeb0 <advance_note+0x42c>
     d56:	d0 e0       	ldi	r29, 0x00	; 0
     d58:	c1 2c       	mov	r12, r1
     d5a:	d1 2c       	mov	r13, r1
     d5c:	a6 c0       	rjmp	.+332    	; 0xeaa <advance_note+0x426>
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{									
			
			uint8_t current_note = track[index];
     d5e:	f8 01       	movw	r30, r16
     d60:	e1 57       	subi	r30, 0x71	; 113
     d62:	fe 4f       	sbci	r31, 0xFE	; 254
     d64:	80 81       	ld	r24, Z
			
			//check if at the start of a long note
			if (current_note == current_note>>4) {
     d66:	98 2f       	mov	r25, r24
     d68:	92 95       	swap	r25
     d6a:	9f 70       	andi	r25, 0x0F	; 15
     d6c:	89 17       	cp	r24, r25
     d6e:	d1 f0       	breq	.+52     	; 0xda4 <advance_note+0x320>
				long_check = 1;
			
			//check if in the middle of long note
			} else if ((long_check) && (track[index + 1] == current_note)) {
     d70:	c1 14       	cp	r12, r1
     d72:	d1 04       	cpc	r13, r1
     d74:	39 f0       	breq	.+14     	; 0xd84 <advance_note+0x300>
     d76:	f5 01       	movw	r30, r10
     d78:	e1 57       	subi	r30, 0x71	; 113
     d7a:	fe 4f       	sbci	r31, 0xFE	; 254
     d7c:	20 81       	ld	r18, Z
     d7e:	82 17       	cp	r24, r18
     d80:	09 f4       	brne	.+2      	; 0xd84 <advance_note+0x300>
     d82:	92 c0       	rjmp	.+292    	; 0xea8 <advance_note+0x424>
				continue; 
			//check if at the end of long note
			} else if ((long_check) && (track[index + 1] != track[index - 1])) {
     d84:	c1 14       	cp	r12, r1
     d86:	d1 04       	cpc	r13, r1
     d88:	81 f0       	breq	.+32     	; 0xdaa <advance_note+0x326>
     d8a:	f5 01       	movw	r30, r10
     d8c:	e1 57       	subi	r30, 0x71	; 113
     d8e:	fe 4f       	sbci	r31, 0xFE	; 254
     d90:	30 81       	ld	r19, Z
     d92:	f8 01       	movw	r30, r16
     d94:	e2 57       	subi	r30, 0x72	; 114
     d96:	fe 4f       	sbci	r31, 0xFE	; 254
     d98:	20 81       	ld	r18, Z
     d9a:	32 13       	cpse	r19, r18
     d9c:	85 c0       	rjmp	.+266    	; 0xea8 <advance_note+0x424>
				continue;
			
			//else outside long note.
			} else {
				long_check = 0;
     d9e:	c1 2c       	mov	r12, r1
     da0:	d1 2c       	mov	r13, r1
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <advance_note+0x326>
			
			uint8_t current_note = track[index];
			
			//check if at the start of a long note
			if (current_note == current_note>>4) {
				long_check = 1;
     da4:	cc 24       	eor	r12, r12
     da6:	c3 94       	inc	r12
     da8:	d1 2c       	mov	r13, r1
			} else {
				long_check = 0;
				
			}
			
			if (long_check) {
     daa:	c1 14       	cp	r12, r1
     dac:	d1 04       	cpc	r13, r1
     dae:	09 f4       	brne	.+2      	; 0xdb2 <advance_note+0x32e>
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{									
			
			uint8_t current_note = track[index];
     db0:	98 2f       	mov	r25, r24
			if (long_check) {
				current_note = current_note>>4;
			}
			
			//check if there's a note in the specific path
			if (current_note & (1<<lane)) {
     db2:	29 2f       	mov	r18, r25
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	0d 2e       	mov	r0, r29
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <advance_note+0x33a>
     dba:	35 95       	asr	r19
     dbc:	27 95       	ror	r18
     dbe:	0a 94       	dec	r0
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <advance_note+0x336>
     dc2:	20 ff       	sbrs	r18, 0
     dc4:	71 c0       	rjmp	.+226    	; 0xea8 <advance_note+0x424>
				
				//check if theres a note in the led matrix section
				if ((green_check == lane) & ((col >= 11) & (col <= 15))) {
     dc6:	21 e0       	ldi	r18, 0x01	; 1
     dc8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     dcc:	8d 13       	cpse	r24, r29
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	31 e0       	ldi	r19, 0x01	; 1
     dd2:	85 ef       	ldi	r24, 0xF5	; 245
     dd4:	8c 0f       	add	r24, r28
     dd6:	85 30       	cpi	r24, 0x05	; 5
     dd8:	08 f0       	brcs	.+2      	; 0xddc <advance_note+0x358>
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	22 23       	and	r18, r18
     dde:	81 f0       	breq	.+32     	; 0xe00 <advance_note+0x37c>
     de0:	33 23       	and	r19, r19
     de2:	71 f0       	breq	.+28     	; 0xe00 <advance_note+0x37c>
					//if true set pixels to green
					ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     de4:	40 ef       	ldi	r20, 0xF0	; 240
     de6:	9d 2e       	mov	r9, r29
     de8:	99 0c       	add	r9, r9
     dea:	69 2d       	mov	r22, r9
     dec:	8c 2f       	mov	r24, r28
     dee:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     df2:	61 e0       	ldi	r22, 0x01	; 1
     df4:	69 0d       	add	r22, r9
     df6:	40 ef       	ldi	r20, 0xF0	; 240
     df8:	8c 2f       	mov	r24, r28
     dfa:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
     dfe:	4f c0       	rjmp	.+158    	; 0xe9e <advance_note+0x41a>
				
				} else if (ghost_note != current_note) {					
     e00:	9e 15       	cp	r25, r14
     e02:	39 f1       	breq	.+78     	; 0xe52 <advance_note+0x3ce>
					ledmatrix_update_pixel(col, 2*lane, color);
     e04:	4f 2d       	mov	r20, r15
     e06:	9d 2e       	mov	r9, r29
     e08:	99 0c       	add	r9, r9
     e0a:	69 2d       	mov	r22, r9
     e0c:	8c 2f       	mov	r24, r28
     e0e:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, color);
     e12:	61 e0       	ldi	r22, 0x01	; 1
     e14:	69 0d       	add	r22, r9
     e16:	4f 2d       	mov	r20, r15
     e18:	8c 2f       	mov	r24, r28
     e1a:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
					
					//if note slides off screen and green_check isn't checked to a lane
					if (col == 15) {
     e1e:	cf 30       	cpi	r28, 0x0F	; 15
     e20:	f1 f5       	brne	.+124    	; 0xe9e <advance_note+0x41a>
						points--;
     e22:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     e26:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     e30:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
						update_points();		
     e34:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
						
						if (combo_count != 0) {
     e38:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <combo_count>
     e3c:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <combo_count+0x1>
     e40:	89 2b       	or	r24, r25
     e42:	69 f1       	breq	.+90     	; 0xe9e <advance_note+0x41a>
							combo_count = 0;
     e44:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <combo_count+0x1>
     e48:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <combo_count>
							update_combo();				
     e4c:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
     e50:	26 c0       	rjmp	.+76     	; 0xe9e <advance_note+0x41a>
						}
					}
					
				} else {
					ledmatrix_update_pixel(col, 2*lane, color);
     e52:	4f 2d       	mov	r20, r15
     e54:	9d 2e       	mov	r9, r29
     e56:	99 0c       	add	r9, r9
     e58:	69 2d       	mov	r22, r9
     e5a:	8c 2f       	mov	r24, r28
     e5c:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, color);	
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	69 0d       	add	r22, r9
     e64:	4f 2d       	mov	r20, r15
     e66:	8c 2f       	mov	r24, r28
     e68:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
					
					//if note slides off screen and green_check isn't checked to a lane
					if (col == 15) {
     e6c:	cf 30       	cpi	r28, 0x0F	; 15
     e6e:	b9 f4       	brne	.+46     	; 0xe9e <advance_note+0x41a>
						points--;
     e70:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     e74:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     e7e:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
						update_points();		
     e82:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
						
						if (combo_count != 0) {
     e86:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <combo_count>
     e8a:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <combo_count+0x1>
     e8e:	89 2b       	or	r24, r25
     e90:	31 f0       	breq	.+12     	; 0xe9e <advance_note+0x41a>
							combo_count = 0;
     e92:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <combo_count+0x1>
     e96:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <combo_count>
							update_combo();
     e9a:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
						}			
					}
				} 
				
				//check if the current note goes off the screen
				if (col >= 15) {
     e9e:	cf 30       	cpi	r28, 0x0F	; 15
     ea0:	18 f0       	brcs	.+6      	; 0xea8 <advance_note+0x424>
					green_check = -1;
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
     ea4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		{
			continue;
		}
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
     ea8:	df 5f       	subi	r29, 0xFF	; 255
     eaa:	d4 30       	cpi	r29, 0x04	; 4
     eac:	08 f4       	brcc	.+2      	; 0xeb0 <advance_note+0x42c>
     eae:	57 cf       	rjmp	.-338    	; 0xd5e <advance_note+0x2da>
	
	// increment the beat
	beat++;
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     eb0:	cf 5f       	subi	r28, 0xFF	; 255
     eb2:	c0 31       	cpi	r28, 0x10	; 16
     eb4:	08 f4       	brcc	.+2      	; 0xeb8 <advance_note+0x434>
     eb6:	0f cf       	rjmp	.-482    	; 0xcd6 <advance_note+0x252>
				
			}
		}
		
	}
}
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	ff 90       	pop	r15
     ec2:	ef 90       	pop	r14
     ec4:	df 90       	pop	r13
     ec6:	cf 90       	pop	r12
     ec8:	bf 90       	pop	r11
     eca:	af 90       	pop	r10
     ecc:	9f 90       	pop	r9
     ece:	08 95       	ret

00000ed0 <is_game_over>:

// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over(void)
{
	// Detect if the game is over i.e. if a player has won.
	if (game_over) {	
     ed0:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <game_over>
     ed4:	88 23       	and	r24, r24
     ed6:	19 f0       	breq	.+6      	; 0xede <is_game_over+0xe>
		game_over = 0; //reset game over check
     ed8:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <game_over>
		return 1;	
     edc:	81 e0       	ldi	r24, 0x01	; 1
	
	} else {
	return 0;
	
	}
     ede:	08 95       	ret

00000ee0 <ledmatrix_setup>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     ee0:	80 e8       	ldi	r24, 0x80	; 128
     ee2:	0e 94 b6 10 	call	0x216c	; 0x216c <spi_setup_master>
     ee6:	08 95       	ret

00000ee8 <ledmatrix_update_pixel>:
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	80 31       	cpi	r24, 0x10	; 16
     ef0:	b0 f4       	brcc	.+44     	; 0xf1e <ledmatrix_update_pixel+0x36>
     ef2:	68 30       	cpi	r22, 0x08	; 8
     ef4:	a0 f4       	brcc	.+40     	; 0xf1e <ledmatrix_update_pixel+0x36>
     ef6:	14 2f       	mov	r17, r20
     ef8:	c6 2f       	mov	r28, r22
     efa:	d8 2f       	mov	r29, r24
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <spi_send_byte>
     f02:	6c 2f       	mov	r22, r28
     f04:	67 70       	andi	r22, 0x07	; 7
     f06:	80 e1       	ldi	r24, 0x10	; 16
     f08:	68 9f       	mul	r22, r24
     f0a:	90 01       	movw	r18, r0
     f0c:	11 24       	eor	r1, r1
     f0e:	8d 2f       	mov	r24, r29
     f10:	8f 70       	andi	r24, 0x0F	; 15
     f12:	82 2b       	or	r24, r18
     f14:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <spi_send_byte>
     f18:	81 2f       	mov	r24, r17
     f1a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <spi_send_byte>
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	08 95       	ret

00000f26 <ledmatrix_update_column>:
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	80 31       	cpi	r24, 0x10	; 16
     f2e:	a0 f4       	brcc	.+40     	; 0xf58 <ledmatrix_update_column+0x32>
     f30:	8b 01       	movw	r16, r22
     f32:	c8 2f       	mov	r28, r24
     f34:	83 e0       	ldi	r24, 0x03	; 3
     f36:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <spi_send_byte>
     f3a:	8c 2f       	mov	r24, r28
     f3c:	8f 70       	andi	r24, 0x0F	; 15
     f3e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <spi_send_byte>
     f42:	c0 e0       	ldi	r28, 0x00	; 0
     f44:	07 c0       	rjmp	.+14     	; 0xf54 <ledmatrix_update_column+0x2e>
     f46:	f8 01       	movw	r30, r16
     f48:	ec 0f       	add	r30, r28
     f4a:	f1 1d       	adc	r31, r1
     f4c:	80 81       	ld	r24, Z
     f4e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <spi_send_byte>
     f52:	cf 5f       	subi	r28, 0xFF	; 255
     f54:	c8 30       	cpi	r28, 0x08	; 8
     f56:	b8 f3       	brcs	.-18     	; 0xf46 <ledmatrix_update_column+0x20>
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	08 95       	ret

00000f60 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     f60:	8f e0       	ldi	r24, 0x0F	; 15
     f62:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <spi_send_byte>
     f66:	08 95       	ret

00000f68 <initialise_hardware>:
	}
}

void initialise_hardware(void)
{
	ledmatrix_setup();
     f68:	0e 94 70 07 	call	0xee0	; 0xee0 <ledmatrix_setup>
	init_button_interrupts();
     f6c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <init_button_interrupts>
	
	//Make all bits of port C and the upper 5 bits of port D to be output bits
	DDRC = 0xFF; //0xFF => 0b11111111
     f70:	8f ef       	ldi	r24, 0xFF	; 255
     f72:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFC; //0xFC => 0b11111100	
     f74:	8c ef       	ldi	r24, 0xFC	; 252
     f76:	8a b9       	out	0x0a, r24	; 10
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     f78:	40 e0       	ldi	r20, 0x00	; 0
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	7b e4       	ldi	r23, 0x4B	; 75
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <init_serial_stdio>
	
	init_timer0();
     f86:	0e 94 2a 11 	call	0x2254	; 0x2254 <init_timer0>
	init_timer1();
     f8a:	0e 94 75 11 	call	0x22ea	; 0x22ea <init_timer1>
	init_timer2();
     f8e:	0e 94 cf 11 	call	0x239e	; 0x239e <init_timer2>
	
	// Turn on global interrupts
	sei();
     f92:	78 94       	sei
     f94:	08 95       	ret

00000f96 <start_screen>:
}

void start_screen(void)
{
     f96:	4f 92       	push	r4
     f98:	5f 92       	push	r5
     f9a:	6f 92       	push	r6
     f9c:	7f 92       	push	r7
     f9e:	8f 92       	push	r8
     fa0:	9f 92       	push	r9
     fa2:	af 92       	push	r10
     fa4:	bf 92       	push	r11
     fa6:	cf 92       	push	r12
     fa8:	df 92       	push	r13
     faa:	ef 92       	push	r14
     fac:	ff 92       	push	r15
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
	// Clear terminal screen and output a message
	clear_terminal();
     fb2:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <clear_terminal>
	show_cursor();
     fb6:	0e 94 21 11 	call	0x2242	; 0x2242 <show_cursor>
	clear_terminal();
     fba:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <clear_terminal>
	hide_cursor();
     fbe:	0e 94 18 11 	call	0x2230	; 0x2230 <hide_cursor>
	set_display_attribute(FG_WHITE);
     fc2:	85 e2       	ldi	r24, 0x25	; 37
     fc4:	0e 94 0b 11 	call	0x2216	; 0x2216 <set_display_attribute>
	move_terminal_cursor(10,4);
     fc8:	64 e0       	ldi	r22, 0x04	; 4
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	8a e0       	ldi	r24, 0x0A	; 10
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	printf_P(PSTR("  ______   __     __  _______         __    __"));
     fd4:	81 e3       	ldi	r24, 0x31	; 49
     fd6:	93 e0       	ldi	r25, 0x03	; 3
     fd8:	9f 93       	push	r25
     fda:	8f 93       	push	r24
     fdc:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
	move_terminal_cursor(10,5);
     fe0:	65 e0       	ldi	r22, 0x05	; 5
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	8a e0       	ldi	r24, 0x0A	; 10
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	printf_P(PSTR(" /      \\ |  \\   |  \\|       \\       |  \\  |  \\"));
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	93 e0       	ldi	r25, 0x03	; 3
     ff0:	9f 93       	push	r25
     ff2:	8f 93       	push	r24
     ff4:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
	move_terminal_cursor(10,6);
     ff8:	66 e0       	ldi	r22, 0x06	; 6
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	8a e0       	ldi	r24, 0x0A	; 10
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	printf_P(PSTR("|  $$$$$$\\| $$   | $$| $$$$$$$\\      | $$  | $$  ______    ______    ______"));
    1004:	85 eb       	ldi	r24, 0xB5	; 181
    1006:	92 e0       	ldi	r25, 0x02	; 2
    1008:	9f 93       	push	r25
    100a:	8f 93       	push	r24
    100c:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
	move_terminal_cursor(10,7);
    1010:	67 e0       	ldi	r22, 0x07	; 7
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	8a e0       	ldi	r24, 0x0A	; 10
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	printf_P(PSTR("| $$__| $$| $$   | $$| $$__| $$      | $$__| $$ /      \\  /      \\  /      \\"));
    101c:	88 e6       	ldi	r24, 0x68	; 104
    101e:	92 e0       	ldi	r25, 0x02	; 2
    1020:	9f 93       	push	r25
    1022:	8f 93       	push	r24
    1024:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
	move_terminal_cursor(10,8);
    1028:	68 e0       	ldi	r22, 0x08	; 8
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	8a e0       	ldi	r24, 0x0A	; 10
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	printf_P(PSTR("| $$    $$ \\$$\\ /  $$| $$    $$      | $$    $$|  $$$$$$\\|  $$$$$$\\|  $$$$$$\\"));
    1034:	8a e1       	ldi	r24, 0x1A	; 26
    1036:	92 e0       	ldi	r25, 0x02	; 2
    1038:	9f 93       	push	r25
    103a:	8f 93       	push	r24
    103c:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
	move_terminal_cursor(10,9);
    1040:	69 e0       	ldi	r22, 0x09	; 9
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	8a e0       	ldi	r24, 0x0A	; 10
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	printf_P(PSTR("| $$$$$$$$  \\$$\\  $$ | $$$$$$$\\      | $$$$$$$$| $$    $$| $$   \\$$| $$  | $$"));
    104c:	8c ec       	ldi	r24, 0xCC	; 204
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	9f 93       	push	r25
    1052:	8f 93       	push	r24
    1054:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
	move_terminal_cursor(10,10);
    1058:	6a e0       	ldi	r22, 0x0A	; 10
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	8a e0       	ldi	r24, 0x0A	; 10
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$   \\$$ $$  | $$  | $$      | $$  | $$| $$$$$$$$| $$      | $$__/ $$"));
    1064:	8e e7       	ldi	r24, 0x7E	; 126
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	9f 93       	push	r25
    106a:	8f 93       	push	r24
    106c:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
	move_terminal_cursor(10,11);
    1070:	6b e0       	ldi	r22, 0x0B	; 11
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	8a e0       	ldi	r24, 0x0A	; 10
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$    \\$$$   | $$  | $$      | $$  | $$ \\$$     \\| $$       \\$$    $$"));
    107c:	80 e3       	ldi	r24, 0x30	; 48
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	9f 93       	push	r25
    1082:	8f 93       	push	r24
    1084:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
	move_terminal_cursor(10,12);
    1088:	6c e0       	ldi	r22, 0x0C	; 12
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	8a e0       	ldi	r24, 0x0A	; 10
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	printf_P(PSTR(" \\$$   \\$$     \\$     \\$$   \\$$       \\$$   \\$$  \\$$$$$$$ \\$$        \\$$$$$$"));
    1094:	83 ee       	ldi	r24, 0xE3	; 227
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	9f 93       	push	r25
    109a:	8f 93       	push	r24
    109c:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
	move_terminal_cursor(10,14);
    10a0:	6e e0       	ldi	r22, 0x0E	; 14
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	8a e0       	ldi	r24, 0x0A	; 10
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	// change this to your name and student number; remove the chevrons <>
	printf_P(PSTR("CSSE2010/7201 A2 by  Cailin Delgado - 48027942"));
    10ac:	84 eb       	ldi	r24, 0xB4	; 180
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	9f 93       	push	r25
    10b2:	8f 93       	push	r24
    10b4:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
    10b8:	0e 94 a2 02 	call	0x544	; 0x544 <show_start_screen>
	
	//Display current track
	move_terminal_cursor(10, 15);
    10bc:	6f e0       	ldi	r22, 0x0F	; 15
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	8a e0       	ldi	r24, 0x0A	; 10
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	printf("Track: Through Fire & Flames");															//do %s and add a new track title at the end.
    10c8:	80 e1       	ldi	r24, 0x10	; 16
    10ca:	92 e0       	ldi	r25, 0x02	; 2
    10cc:	9f 93       	push	r25
    10ce:	8f 93       	push	r24
    10d0:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
    10d4:	0e 94 40 11 	call	0x2280	; 0x2280 <get_current_time>
    10d8:	6b 01       	movw	r12, r22
    10da:	7c 01       	movw	r14, r24
	
	uint8_t frame_number = 0;
	game_speed = 1000;
    10dc:	88 ee       	ldi	r24, 0xE8	; 232
    10de:	93 e0       	ldi	r25, 0x03	; 3
    10e0:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <game_speed+0x1>
    10e4:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <game_speed>
	
	
	move_terminal_cursor(10, 17);
    10e8:	61 e1       	ldi	r22, 0x11	; 17
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	8a e0       	ldi	r24, 0x0A	; 10
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	clear_to_end_of_line();
    10f4:	0e 94 02 11 	call	0x2204	; 0x2204 <clear_to_end_of_line>
	//update game speed in terminal appropriately
	if (game_speed == 1000) {
    10f8:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <game_speed>
    10fc:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <game_speed+0x1>
    1100:	2d b7       	in	r18, 0x3d	; 61
    1102:	3e b7       	in	r19, 0x3e	; 62
    1104:	2a 5e       	subi	r18, 0xEA	; 234
    1106:	3f 4f       	sbci	r19, 0xFF	; 255
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	3e bf       	out	0x3e, r19	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	2d bf       	out	0x3d, r18	; 61
    1112:	88 3e       	cpi	r24, 0xE8	; 232
    1114:	33 e0       	ldi	r19, 0x03	; 3
    1116:	93 07       	cpc	r25, r19
    1118:	69 f4       	brne	.+26     	; 0x1134 <start_screen+0x19e>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    111a:	9f 93       	push	r25
    111c:	8f 93       	push	r24
    111e:	8d e2       	ldi	r24, 0x2D	; 45
    1120:	92 e0       	ldi	r25, 0x02	; 2
    1122:	9f 93       	push	r25
    1124:	8f 93       	push	r24
    1126:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	20 c0       	rjmp	.+64     	; 0x1174 <start_screen+0x1de>
		
	} else if (game_speed == 500) {
    1134:	84 3f       	cpi	r24, 0xF4	; 244
    1136:	21 e0       	ldi	r18, 0x01	; 1
    1138:	92 07       	cpc	r25, r18
    113a:	69 f4       	brne	.+26     	; 0x1156 <start_screen+0x1c0>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    113c:	9f 93       	push	r25
    113e:	8f 93       	push	r24
    1140:	83 e5       	ldi	r24, 0x53	; 83
    1142:	92 e0       	ldi	r25, 0x02	; 2
    1144:	9f 93       	push	r25
    1146:	8f 93       	push	r24
    1148:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f c0       	rjmp	.+30     	; 0x1174 <start_screen+0x1de>
		
	} else if (game_speed == 250) {
    1156:	8a 3f       	cpi	r24, 0xFA	; 250
    1158:	91 05       	cpc	r25, r1
    115a:	61 f4       	brne	.+24     	; 0x1174 <start_screen+0x1de>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    115c:	9f 93       	push	r25
    115e:	8f 93       	push	r24
    1160:	87 e7       	ldi	r24, 0x77	; 119
    1162:	92 e0       	ldi	r25, 0x02	; 2
    1164:	9f 93       	push	r25
    1166:	8f 93       	push	r24
    1168:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
			current_time = get_current_time();
			if (current_time - last_screen_update > game_speed/5)
			{
				update_start_screen(frame_number);
				frame_number = (frame_number + 1) % 32;
				last_screen_update = current_time;
    1174:	d0 e0       	ldi	r29, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available())
    1176:	0e 94 15 10 	call	0x202a	; 0x202a <serial_input_available>
    117a:	88 23       	and	r24, r24
    117c:	41 f0       	breq	.+16     	; 0x118e <start_screen+0x1f8>
		{
			serial_input = fgetc(stdin);
    117e:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <__iob>
    1182:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <__iob+0x1>
    1186:	0e 94 15 14 	call	0x282a	; 0x282a <fgetc>
    118a:	c8 2f       	mov	r28, r24
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <start_screen+0x1fa>
	{
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
    118e:	cf ef       	ldi	r28, 0xFF	; 255
		if (serial_input_available())
		{
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S')
    1190:	c3 37       	cpi	r28, 0x73	; 115
    1192:	09 f4       	brne	.+2      	; 0x1196 <start_screen+0x200>
    1194:	cd c0       	rjmp	.+410    	; 0x1330 <start_screen+0x39a>
    1196:	c3 35       	cpi	r28, 0x53	; 83
    1198:	09 f4       	brne	.+2      	; 0x119c <start_screen+0x206>
    119a:	ca c0       	rjmp	.+404    	; 0x1330 <start_screen+0x39a>
			break;
		} 
		
		
		//display the game speed to the terminal
		if (serial_input == '1') {
    119c:	c1 33       	cpi	r28, 0x31	; 49
    119e:	f9 f4       	brne	.+62     	; 0x11de <start_screen+0x248>
			game_speed = 1000; //set game speed to 1000ms
    11a0:	88 ee       	ldi	r24, 0xE8	; 232
    11a2:	93 e0       	ldi	r25, 0x03	; 3
    11a4:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <game_speed+0x1>
    11a8:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <game_speed>
			
			move_terminal_cursor(10, 17);
    11ac:	61 e1       	ldi	r22, 0x11	; 17
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	8a e0       	ldi	r24, 0x0A	; 10
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
			clear_to_end_of_line();
    11b8:	0e 94 02 11 	call	0x2204	; 0x2204 <clear_to_end_of_line>
			printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    11bc:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <game_speed+0x1>
    11c0:	8f 93       	push	r24
    11c2:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <game_speed>
    11c6:	8f 93       	push	r24
    11c8:	8d e2       	ldi	r24, 0x2D	; 45
    11ca:	92 e0       	ldi	r25, 0x02	; 2
    11cc:	9f 93       	push	r25
    11ce:	8f 93       	push	r24
    11d0:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	41 c0       	rjmp	.+130    	; 0x1260 <start_screen+0x2ca>
			
		} else if (serial_input == '2') {
    11de:	c2 33       	cpi	r28, 0x32	; 50
    11e0:	f9 f4       	brne	.+62     	; 0x1220 <start_screen+0x28a>
			game_speed = 500; //set game speed to 500ms
    11e2:	84 ef       	ldi	r24, 0xF4	; 244
    11e4:	91 e0       	ldi	r25, 0x01	; 1
    11e6:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <game_speed+0x1>
    11ea:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <game_speed>
			
			move_terminal_cursor(10, 17);
    11ee:	61 e1       	ldi	r22, 0x11	; 17
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	8a e0       	ldi	r24, 0x0A	; 10
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
			clear_to_end_of_line();
    11fa:	0e 94 02 11 	call	0x2204	; 0x2204 <clear_to_end_of_line>
			printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    11fe:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <game_speed+0x1>
    1202:	8f 93       	push	r24
    1204:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <game_speed>
    1208:	8f 93       	push	r24
    120a:	83 e5       	ldi	r24, 0x53	; 83
    120c:	92 e0       	ldi	r25, 0x02	; 2
    120e:	9f 93       	push	r25
    1210:	8f 93       	push	r24
    1212:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	20 c0       	rjmp	.+64     	; 0x1260 <start_screen+0x2ca>
			
		} else if (serial_input == '3') {
    1220:	c3 33       	cpi	r28, 0x33	; 51
    1222:	f1 f4       	brne	.+60     	; 0x1260 <start_screen+0x2ca>
			game_speed = 250; //set game speed to 250ms
    1224:	8a ef       	ldi	r24, 0xFA	; 250
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <game_speed+0x1>
    122c:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <game_speed>
			
			move_terminal_cursor(10, 17);
    1230:	61 e1       	ldi	r22, 0x11	; 17
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	8a e0       	ldi	r24, 0x0A	; 10
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
			clear_to_end_of_line();
    123c:	0e 94 02 11 	call	0x2204	; 0x2204 <clear_to_end_of_line>
			printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1240:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <game_speed+0x1>
    1244:	8f 93       	push	r24
    1246:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <game_speed>
    124a:	8f 93       	push	r24
    124c:	87 e7       	ldi	r24, 0x77	; 119
    124e:	92 e0       	ldi	r25, 0x02	; 2
    1250:	9f 93       	push	r25
    1252:	8f 93       	push	r24
    1254:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
		}
		
		
		// Next check for any button presses
		int8_t btn = button_pushed();
    1260:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
		if (btn != NO_BUTTON_PUSHED)
    1264:	8f 3f       	cpi	r24, 0xFF	; 255
    1266:	09 f0       	breq	.+2      	; 0x126a <start_screen+0x2d4>
    1268:	63 c0       	rjmp	.+198    	; 0x1330 <start_screen+0x39a>
		{
			break;
			
		} else if (serial_input == 'm' || serial_input == 'M') {
    126a:	cd 36       	cpi	r28, 0x6D	; 109
    126c:	11 f0       	breq	.+4      	; 0x1272 <start_screen+0x2dc>
    126e:	cd 34       	cpi	r28, 0x4D	; 77
    1270:	09 f5       	brne	.+66     	; 0x12b4 <start_screen+0x31e>
			//clear manual mode alert
			move_terminal_cursor(10, 16);
    1272:	60 e1       	ldi	r22, 0x10	; 16
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	8a e0       	ldi	r24, 0x0A	; 10
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
			clear_to_end_of_line();
    127e:	0e 94 02 11 	call	0x2204	; 0x2204 <clear_to_end_of_line>
			
			if (man_mode) {
    1282:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <man_mode>
    1286:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <man_mode+0x1>
    128a:	89 2b       	or	r24, r25
    128c:	29 f0       	breq	.+10     	; 0x1298 <start_screen+0x302>
				man_mode = 0;  // toggle manual mode checker
    128e:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <man_mode+0x1>
    1292:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <man_mode>
    1296:	0e c0       	rjmp	.+28     	; 0x12b4 <start_screen+0x31e>
				
			} else {
				man_mode = 1; //toggle manual mode checker				
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <man_mode+0x1>
    12a0:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <man_mode>
				//print to terminal that manual mode is on
				printf("Manual Mode: ON");
    12a4:	8e e9       	ldi	r24, 0x9E	; 158
    12a6:	92 e0       	ldi	r25, 0x02	; 2
    12a8:	9f 93       	push	r25
    12aa:	8f 93       	push	r24
    12ac:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
			}
		} 		

		if (!man_mode) {
    12b4:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <man_mode>
    12b8:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <man_mode+0x1>
    12bc:	89 2b       	or	r24, r25
    12be:	09 f0       	breq	.+2      	; 0x12c2 <start_screen+0x32c>
    12c0:	5a cf       	rjmp	.-332    	; 0x1176 <start_screen+0x1e0>
			// every 200 ms, update the animation
			current_time = get_current_time();
    12c2:	0e 94 40 11 	call	0x2280	; 0x2280 <get_current_time>
    12c6:	4b 01       	movw	r8, r22
    12c8:	5c 01       	movw	r10, r24
			if (current_time - last_screen_update > game_speed/5)
    12ca:	2b 01       	movw	r4, r22
    12cc:	3c 01       	movw	r6, r24
    12ce:	4c 18       	sub	r4, r12
    12d0:	5d 08       	sbc	r5, r13
    12d2:	6e 08       	sbc	r6, r14
    12d4:	7f 08       	sbc	r7, r15
    12d6:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <game_speed>
    12da:	30 91 ff 04 	lds	r19, 0x04FF	; 0x8004ff <game_speed+0x1>
    12de:	ad ec       	ldi	r26, 0xCD	; 205
    12e0:	bc ec       	ldi	r27, 0xCC	; 204
    12e2:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__umulhisi3>
    12e6:	96 95       	lsr	r25
    12e8:	87 95       	ror	r24
    12ea:	96 95       	lsr	r25
    12ec:	87 95       	ror	r24
    12ee:	a0 e0       	ldi	r26, 0x00	; 0
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	84 15       	cp	r24, r4
    12f4:	95 05       	cpc	r25, r5
    12f6:	a6 05       	cpc	r26, r6
    12f8:	b7 05       	cpc	r27, r7
    12fa:	90 f4       	brcc	.+36     	; 0x1320 <start_screen+0x38a>
			{
				update_start_screen(frame_number);
    12fc:	8d 2f       	mov	r24, r29
    12fe:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
				frame_number = (frame_number + 1) % 32;
    1302:	8d 2f       	mov	r24, r29
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	8f 71       	andi	r24, 0x1F	; 31
    130a:	90 78       	andi	r25, 0x80	; 128
    130c:	99 23       	and	r25, r25
    130e:	24 f4       	brge	.+8      	; 0x1318 <start_screen+0x382>
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	80 6e       	ori	r24, 0xE0	; 224
    1314:	9f 6f       	ori	r25, 0xFF	; 255
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	d8 2f       	mov	r29, r24
				last_screen_update = current_time;
    131a:	75 01       	movw	r14, r10
    131c:	64 01       	movw	r12, r8
    131e:	2b cf       	rjmp	.-426    	; 0x1176 <start_screen+0x1e0>
			} else {
				if (serial_input == 'n' || serial_input == 'N') {
    1320:	ce 36       	cpi	r28, 0x6E	; 110
    1322:	19 f0       	breq	.+6      	; 0x132a <start_screen+0x394>
    1324:	ce 34       	cpi	r28, 0x4E	; 78
    1326:	09 f0       	breq	.+2      	; 0x132a <start_screen+0x394>
    1328:	26 cf       	rjmp	.-436    	; 0x1176 <start_screen+0x1e0>
					advance_note();
    132a:	0e 94 42 05 	call	0xa84	; 0xa84 <advance_note>
    132e:	23 cf       	rjmp	.-442    	; 0x1176 <start_screen+0x1e0>
				}
			}
		}
	}
}
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	cf 90       	pop	r12
    133c:	bf 90       	pop	r11
    133e:	af 90       	pop	r10
    1340:	9f 90       	pop	r9
    1342:	8f 90       	pop	r8
    1344:	7f 90       	pop	r7
    1346:	6f 90       	pop	r6
    1348:	5f 90       	pop	r5
    134a:	4f 90       	pop	r4
    134c:	08 95       	ret

0000134e <display_countdown>:

void display_countdown(int countdown) {
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	ec 01       	movw	r28, r24
	
	//clear display
	ledmatrix_clear();
    1354:	0e 94 b0 07 	call	0xf60	; 0xf60 <ledmatrix_clear>
	
	switch (countdown) {
    1358:	c2 30       	cpi	r28, 0x02	; 2
    135a:	d1 05       	cpc	r29, r1
    135c:	a9 f1       	breq	.+106    	; 0x13c8 <display_countdown+0x7a>
    135e:	1c f4       	brge	.+6      	; 0x1366 <display_countdown+0x18>
    1360:	21 97       	sbiw	r28, 0x01	; 1
    1362:	71 f1       	breq	.+92     	; 0x13c0 <display_countdown+0x72>
    1364:	74 c1       	rjmp	.+744    	; 0x164e <display_countdown+0x300>
    1366:	c3 30       	cpi	r28, 0x03	; 3
    1368:	d1 05       	cpc	r29, r1
    136a:	09 f4       	brne	.+2      	; 0x136e <display_countdown+0x20>
    136c:	f3 c0       	rjmp	.+486    	; 0x1554 <display_countdown+0x206>
    136e:	24 97       	sbiw	r28, 0x04	; 4
    1370:	09 f4       	brne	.+2      	; 0x1374 <display_countdown+0x26>
    1372:	f5 c0       	rjmp	.+490    	; 0x155e <display_countdown+0x210>
    1374:	6c c1       	rjmp	.+728    	; 0x164e <display_countdown+0x300>
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
				ledmatrix_update_pixel(col, 3, COLOUR_YELLOW);
    1376:	4f ef       	ldi	r20, 0xFF	; 255
    1378:	63 e0       	ldi	r22, 0x03	; 3
    137a:	8c 2f       	mov	r24, r28
    137c:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 4, COLOUR_YELLOW);
    1380:	4f ef       	ldi	r20, 0xFF	; 255
    1382:	64 e0       	ldi	r22, 0x04	; 4
    1384:	8c 2f       	mov	r24, r28
    1386:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
				
				if (col == 5) {
    138a:	c5 30       	cpi	r28, 0x05	; 5
    138c:	59 f4       	brne	.+22     	; 0x13a4 <display_countdown+0x56>
					ledmatrix_update_pixel(col, 2, COLOUR_YELLOW);
    138e:	4f ef       	ldi	r20, 0xFF	; 255
    1390:	62 e0       	ldi	r22, 0x02	; 2
    1392:	8c 2f       	mov	r24, r28
    1394:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_YELLOW);
    1398:	4f ef       	ldi	r20, 0xFF	; 255
    139a:	64 e0       	ldi	r22, 0x04	; 4
    139c:	8c 2f       	mov	r24, r28
    139e:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
    13a2:	0c c0       	rjmp	.+24     	; 0x13bc <display_countdown+0x6e>
					
					} else if (col == 10) {
    13a4:	ca 30       	cpi	r28, 0x0A	; 10
    13a6:	51 f4       	brne	.+20     	; 0x13bc <display_countdown+0x6e>
					ledmatrix_update_pixel(col, 2, COLOUR_YELLOW);
    13a8:	4f ef       	ldi	r20, 0xFF	; 255
    13aa:	62 e0       	ldi	r22, 0x02	; 2
    13ac:	8c 2f       	mov	r24, r28
    13ae:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_YELLOW);
    13b2:	4f ef       	ldi	r20, 0xFF	; 255
    13b4:	65 e0       	ldi	r22, 0x05	; 5
    13b6:	8c 2f       	mov	r24, r28
    13b8:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
    13bc:	cf 5f       	subi	r28, 0xFF	; 255
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <display_countdown+0x74>
void display_countdown(int countdown) {
	
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
    13c0:	c4 e0       	ldi	r28, 0x04	; 4
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
    13c2:	cb 30       	cpi	r28, 0x0B	; 11
    13c4:	c0 f2       	brcs	.-80     	; 0x1376 <display_countdown+0x28>
    13c6:	43 c1       	rjmp	.+646    	; 0x164e <display_countdown+0x300>
				}
			}
			break;
			
		case 2:  //Then draw the 2
			ledmatrix_update_pixel(4, 2, COLOUR_RED);
    13c8:	4f e0       	ldi	r20, 0x0F	; 15
    13ca:	62 e0       	ldi	r22, 0x02	; 2
    13cc:	84 e0       	ldi	r24, 0x04	; 4
    13ce:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 3, COLOUR_RED);
    13d2:	4f e0       	ldi	r20, 0x0F	; 15
    13d4:	63 e0       	ldi	r22, 0x03	; 3
    13d6:	84 e0       	ldi	r24, 0x04	; 4
    13d8:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 4, COLOUR_RED);
    13dc:	4f e0       	ldi	r20, 0x0F	; 15
    13de:	64 e0       	ldi	r22, 0x04	; 4
    13e0:	84 e0       	ldi	r24, 0x04	; 4
    13e2:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 5, COLOUR_RED);
    13e6:	4f e0       	ldi	r20, 0x0F	; 15
    13e8:	65 e0       	ldi	r22, 0x05	; 5
    13ea:	84 e0       	ldi	r24, 0x04	; 4
    13ec:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(5, 1, COLOUR_RED);
    13f0:	4f e0       	ldi	r20, 0x0F	; 15
    13f2:	61 e0       	ldi	r22, 0x01	; 1
    13f4:	85 e0       	ldi	r24, 0x05	; 5
    13f6:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 2, COLOUR_RED);
    13fa:	4f e0       	ldi	r20, 0x0F	; 15
    13fc:	62 e0       	ldi	r22, 0x02	; 2
    13fe:	85 e0       	ldi	r24, 0x05	; 5
    1400:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 5, COLOUR_RED);
    1404:	4f e0       	ldi	r20, 0x0F	; 15
    1406:	65 e0       	ldi	r22, 0x05	; 5
    1408:	85 e0       	ldi	r24, 0x05	; 5
    140a:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 6, COLOUR_RED);
    140e:	4f e0       	ldi	r20, 0x0F	; 15
    1410:	66 e0       	ldi	r22, 0x06	; 6
    1412:	85 e0       	ldi	r24, 0x05	; 5
    1414:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(6, 5, COLOUR_RED);
    1418:	4f e0       	ldi	r20, 0x0F	; 15
    141a:	65 e0       	ldi	r22, 0x05	; 5
    141c:	86 e0       	ldi	r24, 0x06	; 6
    141e:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 6, COLOUR_RED);
    1422:	4f e0       	ldi	r20, 0x0F	; 15
    1424:	66 e0       	ldi	r22, 0x06	; 6
    1426:	86 e0       	ldi	r24, 0x06	; 6
    1428:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(7, 5, COLOUR_RED);
    142c:	4f e0       	ldi	r20, 0x0F	; 15
    142e:	65 e0       	ldi	r22, 0x05	; 5
    1430:	87 e0       	ldi	r24, 0x07	; 7
    1432:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 6, COLOUR_RED);
    1436:	4f e0       	ldi	r20, 0x0F	; 15
    1438:	66 e0       	ldi	r22, 0x06	; 6
    143a:	87 e0       	ldi	r24, 0x07	; 7
    143c:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(8, 2, COLOUR_RED);
    1440:	4f e0       	ldi	r20, 0x0F	; 15
    1442:	62 e0       	ldi	r22, 0x02	; 2
    1444:	88 e0       	ldi	r24, 0x08	; 8
    1446:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 3, COLOUR_RED);
    144a:	4f e0       	ldi	r20, 0x0F	; 15
    144c:	63 e0       	ldi	r22, 0x03	; 3
    144e:	88 e0       	ldi	r24, 0x08	; 8
    1450:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 4, COLOUR_RED);
    1454:	4f e0       	ldi	r20, 0x0F	; 15
    1456:	64 e0       	ldi	r22, 0x04	; 4
    1458:	88 e0       	ldi	r24, 0x08	; 8
    145a:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(9, 1, COLOUR_RED);
    145e:	4f e0       	ldi	r20, 0x0F	; 15
    1460:	61 e0       	ldi	r22, 0x01	; 1
    1462:	89 e0       	ldi	r24, 0x09	; 9
    1464:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 2, COLOUR_RED);
    1468:	4f e0       	ldi	r20, 0x0F	; 15
    146a:	62 e0       	ldi	r22, 0x02	; 2
    146c:	89 e0       	ldi	r24, 0x09	; 9
    146e:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(10, 1, COLOUR_RED);
    1472:	4f e0       	ldi	r20, 0x0F	; 15
    1474:	61 e0       	ldi	r22, 0x01	; 1
    1476:	8a e0       	ldi	r24, 0x0A	; 10
    1478:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 2, COLOUR_RED);
    147c:	4f e0       	ldi	r20, 0x0F	; 15
    147e:	62 e0       	ldi	r22, 0x02	; 2
    1480:	8a e0       	ldi	r24, 0x0A	; 10
    1482:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 3, COLOUR_RED);
    1486:	4f e0       	ldi	r20, 0x0F	; 15
    1488:	63 e0       	ldi	r22, 0x03	; 3
    148a:	8a e0       	ldi	r24, 0x0A	; 10
    148c:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 4, COLOUR_RED);
    1490:	4f e0       	ldi	r20, 0x0F	; 15
    1492:	64 e0       	ldi	r22, 0x04	; 4
    1494:	8a e0       	ldi	r24, 0x0A	; 10
    1496:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
    149a:	4f e0       	ldi	r20, 0x0F	; 15
    149c:	65 e0       	ldi	r22, 0x05	; 5
    149e:	8a e0       	ldi	r24, 0x0A	; 10
    14a0:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
    14a4:	4f e0       	ldi	r20, 0x0F	; 15
    14a6:	66 e0       	ldi	r22, 0x06	; 6
    14a8:	8a e0       	ldi	r24, 0x0A	; 10
    14aa:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			break;
    14ae:	cf c0       	rjmp	.+414    	; 0x164e <display_countdown+0x300>
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
				if (col == 4 || col == 10) {
    14b0:	c4 30       	cpi	r28, 0x04	; 4
    14b2:	11 f0       	breq	.+4      	; 0x14b8 <display_countdown+0x16a>
    14b4:	ca 30       	cpi	r28, 0x0A	; 10
    14b6:	a9 f4       	brne	.+42     	; 0x14e2 <display_countdown+0x194>
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    14b8:	4f e0       	ldi	r20, 0x0F	; 15
    14ba:	62 e0       	ldi	r22, 0x02	; 2
    14bc:	8c 2f       	mov	r24, r28
    14be:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 3, COLOUR_RED);
    14c2:	4f e0       	ldi	r20, 0x0F	; 15
    14c4:	63 e0       	ldi	r22, 0x03	; 3
    14c6:	8c 2f       	mov	r24, r28
    14c8:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_RED);
    14cc:	4f e0       	ldi	r20, 0x0F	; 15
    14ce:	64 e0       	ldi	r22, 0x04	; 4
    14d0:	8c 2f       	mov	r24, r28
    14d2:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_RED);
    14d6:	4f e0       	ldi	r20, 0x0F	; 15
    14d8:	65 e0       	ldi	r22, 0x05	; 5
    14da:	8c 2f       	mov	r24, r28
    14dc:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
    14e0:	37 c0       	rjmp	.+110    	; 0x1550 <display_countdown+0x202>
					
					} else if (col == 5 || col == 9) {
    14e2:	c5 30       	cpi	r28, 0x05	; 5
    14e4:	11 f0       	breq	.+4      	; 0x14ea <display_countdown+0x19c>
    14e6:	c9 30       	cpi	r28, 0x09	; 9
    14e8:	a9 f4       	brne	.+42     	; 0x1514 <display_countdown+0x1c6>
					ledmatrix_update_pixel(col, 1, COLOUR_RED);
    14ea:	4f e0       	ldi	r20, 0x0F	; 15
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	8c 2f       	mov	r24, r28
    14f0:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    14f4:	4f e0       	ldi	r20, 0x0F	; 15
    14f6:	62 e0       	ldi	r22, 0x02	; 2
    14f8:	8c 2f       	mov	r24, r28
    14fa:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_RED);
    14fe:	4f e0       	ldi	r20, 0x0F	; 15
    1500:	65 e0       	ldi	r22, 0x05	; 5
    1502:	8c 2f       	mov	r24, r28
    1504:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 6, COLOUR_RED);
    1508:	4f e0       	ldi	r20, 0x0F	; 15
    150a:	66 e0       	ldi	r22, 0x06	; 6
    150c:	8c 2f       	mov	r24, r28
    150e:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
    1512:	1e c0       	rjmp	.+60     	; 0x1550 <display_countdown+0x202>
					
					} else if (col == 6 || col == 8) {
    1514:	c6 30       	cpi	r28, 0x06	; 6
    1516:	11 f0       	breq	.+4      	; 0x151c <display_countdown+0x1ce>
    1518:	c8 30       	cpi	r28, 0x08	; 8
    151a:	59 f4       	brne	.+22     	; 0x1532 <display_countdown+0x1e4>
					ledmatrix_update_pixel(col, 5, COLOUR_RED);
    151c:	4f e0       	ldi	r20, 0x0F	; 15
    151e:	65 e0       	ldi	r22, 0x05	; 5
    1520:	8c 2f       	mov	r24, r28
    1522:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 6, COLOUR_RED);
    1526:	4f e0       	ldi	r20, 0x0F	; 15
    1528:	66 e0       	ldi	r22, 0x06	; 6
    152a:	8c 2f       	mov	r24, r28
    152c:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
    1530:	0f c0       	rjmp	.+30     	; 0x1550 <display_countdown+0x202>
					
					} else {
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    1532:	4f e0       	ldi	r20, 0x0F	; 15
    1534:	62 e0       	ldi	r22, 0x02	; 2
    1536:	8c 2f       	mov	r24, r28
    1538:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 3, COLOUR_RED);
    153c:	4f e0       	ldi	r20, 0x0F	; 15
    153e:	63 e0       	ldi	r22, 0x03	; 3
    1540:	8c 2f       	mov	r24, r28
    1542:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_RED);
    1546:	4f e0       	ldi	r20, 0x0F	; 15
    1548:	64 e0       	ldi	r22, 0x04	; 4
    154a:	8c 2f       	mov	r24, r28
    154c:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
			break;
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
    1550:	cf 5f       	subi	r28, 0xFF	; 255
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <display_countdown+0x208>
void display_countdown(int countdown) {
	
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
    1554:	c4 e0       	ldi	r28, 0x04	; 4
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
			break;
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
    1556:	cb 30       	cpi	r28, 0x0B	; 11
    1558:	08 f4       	brcc	.+2      	; 0x155c <display_countdown+0x20e>
    155a:	aa cf       	rjmp	.-172    	; 0x14b0 <display_countdown+0x162>
    155c:	78 c0       	rjmp	.+240    	; 0x164e <display_countdown+0x300>
				}
			}
			break;
		
		case 4: //Then draw the Go
			ledmatrix_update_pixel(5, 1, COLOUR_GREEN);
    155e:	40 ef       	ldi	r20, 0xF0	; 240
    1560:	61 e0       	ldi	r22, 0x01	; 1
    1562:	85 e0       	ldi	r24, 0x05	; 5
    1564:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 2, COLOUR_GREEN);
    1568:	40 ef       	ldi	r20, 0xF0	; 240
    156a:	62 e0       	ldi	r22, 0x02	; 2
    156c:	85 e0       	ldi	r24, 0x05	; 5
    156e:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 3, COLOUR_GREEN);
    1572:	40 ef       	ldi	r20, 0xF0	; 240
    1574:	63 e0       	ldi	r22, 0x03	; 3
    1576:	85 e0       	ldi	r24, 0x05	; 5
    1578:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 5, COLOUR_GREEN);
    157c:	40 ef       	ldi	r20, 0xF0	; 240
    157e:	65 e0       	ldi	r22, 0x05	; 5
    1580:	85 e0       	ldi	r24, 0x05	; 5
    1582:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 6, COLOUR_GREEN);
    1586:	40 ef       	ldi	r20, 0xF0	; 240
    1588:	66 e0       	ldi	r22, 0x06	; 6
    158a:	85 e0       	ldi	r24, 0x05	; 5
    158c:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 7, COLOUR_GREEN);
    1590:	40 ef       	ldi	r20, 0xF0	; 240
    1592:	67 e0       	ldi	r22, 0x07	; 7
    1594:	85 e0       	ldi	r24, 0x05	; 5
    1596:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(6, 0, COLOUR_GREEN);
    159a:	40 ef       	ldi	r20, 0xF0	; 240
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	86 e0       	ldi	r24, 0x06	; 6
    15a0:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 5, COLOUR_GREEN);
    15a4:	40 ef       	ldi	r20, 0xF0	; 240
    15a6:	65 e0       	ldi	r22, 0x05	; 5
    15a8:	86 e0       	ldi	r24, 0x06	; 6
    15aa:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 7, COLOUR_GREEN);
    15ae:	40 ef       	ldi	r20, 0xF0	; 240
    15b0:	67 e0       	ldi	r22, 0x07	; 7
    15b2:	86 e0       	ldi	r24, 0x06	; 6
    15b4:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(7, 0, COLOUR_GREEN);
    15b8:	40 ef       	ldi	r20, 0xF0	; 240
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	87 e0       	ldi	r24, 0x07	; 7
    15be:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 2, COLOUR_GREEN);
    15c2:	40 ef       	ldi	r20, 0xF0	; 240
    15c4:	62 e0       	ldi	r22, 0x02	; 2
    15c6:	87 e0       	ldi	r24, 0x07	; 7
    15c8:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 3, COLOUR_GREEN);
    15cc:	40 ef       	ldi	r20, 0xF0	; 240
    15ce:	63 e0       	ldi	r22, 0x03	; 3
    15d0:	87 e0       	ldi	r24, 0x07	; 7
    15d2:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 5, COLOUR_GREEN);
    15d6:	40 ef       	ldi	r20, 0xF0	; 240
    15d8:	65 e0       	ldi	r22, 0x05	; 5
    15da:	87 e0       	ldi	r24, 0x07	; 7
    15dc:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 7, COLOUR_GREEN);
    15e0:	40 ef       	ldi	r20, 0xF0	; 240
    15e2:	67 e0       	ldi	r22, 0x07	; 7
    15e4:	87 e0       	ldi	r24, 0x07	; 7
    15e6:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(8, 0, COLOUR_GREEN);
    15ea:	40 ef       	ldi	r20, 0xF0	; 240
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	88 e0       	ldi	r24, 0x08	; 8
    15f0:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 3, COLOUR_GREEN);
    15f4:	40 ef       	ldi	r20, 0xF0	; 240
    15f6:	63 e0       	ldi	r22, 0x03	; 3
    15f8:	88 e0       	ldi	r24, 0x08	; 8
    15fa:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 5, COLOUR_GREEN);
    15fe:	40 ef       	ldi	r20, 0xF0	; 240
    1600:	65 e0       	ldi	r22, 0x05	; 5
    1602:	88 e0       	ldi	r24, 0x08	; 8
    1604:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 7, COLOUR_GREEN);
    1608:	40 ef       	ldi	r20, 0xF0	; 240
    160a:	67 e0       	ldi	r22, 0x07	; 7
    160c:	88 e0       	ldi	r24, 0x08	; 8
    160e:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(9, 1, COLOUR_GREEN);
    1612:	40 ef       	ldi	r20, 0xF0	; 240
    1614:	61 e0       	ldi	r22, 0x01	; 1
    1616:	89 e0       	ldi	r24, 0x09	; 9
    1618:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 2, COLOUR_GREEN);
    161c:	40 ef       	ldi	r20, 0xF0	; 240
    161e:	62 e0       	ldi	r22, 0x02	; 2
    1620:	89 e0       	ldi	r24, 0x09	; 9
    1622:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 3, COLOUR_GREEN);
    1626:	40 ef       	ldi	r20, 0xF0	; 240
    1628:	63 e0       	ldi	r22, 0x03	; 3
    162a:	85 e0       	ldi	r24, 0x05	; 5
    162c:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 5, COLOUR_GREEN);
    1630:	40 ef       	ldi	r20, 0xF0	; 240
    1632:	65 e0       	ldi	r22, 0x05	; 5
    1634:	89 e0       	ldi	r24, 0x09	; 9
    1636:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 6, COLOUR_GREEN);
    163a:	40 ef       	ldi	r20, 0xF0	; 240
    163c:	66 e0       	ldi	r22, 0x06	; 6
    163e:	89 e0       	ldi	r24, 0x09	; 9
    1640:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 7, COLOUR_GREEN);
    1644:	40 ef       	ldi	r20, 0xF0	; 240
    1646:	67 e0       	ldi	r22, 0x07	; 7
    1648:	89 e0       	ldi	r24, 0x09	; 9
    164a:	0e 94 74 07 	call	0xee8	; 0xee8 <ledmatrix_update_pixel>
		
		default:
			break;
	}
	
}
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	08 95       	ret

00001654 <game_countdown>:

void game_countdown() {
    1654:	8f 92       	push	r8
    1656:	9f 92       	push	r9
    1658:	af 92       	push	r10
    165a:	bf 92       	push	r11
    165c:	cf 92       	push	r12
    165e:	df 92       	push	r13
    1660:	ef 92       	push	r14
    1662:	ff 92       	push	r15
	
	uint32_t current_time = get_current_time();
    1664:	0e 94 40 11 	call	0x2280	; 0x2280 <get_current_time>
    1668:	4b 01       	movw	r8, r22
    166a:	5c 01       	movw	r10, r24
	uint32_t last_recorded_time = current_time;

	display_countdown(3); // display 1
    166c:	83 e0       	ldi	r24, 0x03	; 3
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 a7 09 	call	0x134e	; 0x134e <display_countdown>
	
	while (1) {
		//update current time
		current_time = get_current_time();
    1674:	0e 94 40 11 	call	0x2280	; 0x2280 <get_current_time>
    1678:	6b 01       	movw	r12, r22
    167a:	7c 01       	movw	r14, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    167c:	ab 01       	movw	r20, r22
    167e:	bc 01       	movw	r22, r24
    1680:	48 19       	sub	r20, r8
    1682:	59 09       	sbc	r21, r9
    1684:	6a 09       	sbc	r22, r10
    1686:	7b 09       	sbc	r23, r11
    1688:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <game_speed>
    168c:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <game_speed+0x1>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	a0 e0       	ldi	r26, 0x00	; 0
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	48 17       	cp	r20, r24
    169a:	59 07       	cpc	r21, r25
    169c:	6a 07       	cpc	r22, r26
    169e:	7b 07       	cpc	r23, r27
    16a0:	48 f3       	brcs	.-46     	; 0x1674 <game_countdown+0x20>
			display_countdown(2); //display 2
    16a2:	82 e0       	ldi	r24, 0x02	; 2
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 a7 09 	call	0x134e	; 0x134e <display_countdown>
		}
	}
	
	while (1) {
		//update current time
		current_time = get_current_time();
    16aa:	0e 94 40 11 	call	0x2280	; 0x2280 <get_current_time>
    16ae:	4b 01       	movw	r8, r22
    16b0:	5c 01       	movw	r10, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    16b2:	ab 01       	movw	r20, r22
    16b4:	bc 01       	movw	r22, r24
    16b6:	4c 19       	sub	r20, r12
    16b8:	5d 09       	sbc	r21, r13
    16ba:	6e 09       	sbc	r22, r14
    16bc:	7f 09       	sbc	r23, r15
    16be:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <game_speed>
    16c2:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <game_speed+0x1>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	a0 e0       	ldi	r26, 0x00	; 0
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	48 17       	cp	r20, r24
    16d0:	59 07       	cpc	r21, r25
    16d2:	6a 07       	cpc	r22, r26
    16d4:	7b 07       	cpc	r23, r27
    16d6:	48 f3       	brcs	.-46     	; 0x16aa <game_countdown+0x56>
			display_countdown(1); //display 3
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 a7 09 	call	0x134e	; 0x134e <display_countdown>
		}
	}
	
	while (1) {
		//update current time
		current_time = get_current_time();
    16e0:	0e 94 40 11 	call	0x2280	; 0x2280 <get_current_time>
    16e4:	6b 01       	movw	r12, r22
    16e6:	7c 01       	movw	r14, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    16e8:	ab 01       	movw	r20, r22
    16ea:	bc 01       	movw	r22, r24
    16ec:	48 19       	sub	r20, r8
    16ee:	59 09       	sbc	r21, r9
    16f0:	6a 09       	sbc	r22, r10
    16f2:	7b 09       	sbc	r23, r11
    16f4:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <game_speed>
    16f8:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <game_speed+0x1>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	a0 e0       	ldi	r26, 0x00	; 0
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	48 17       	cp	r20, r24
    1706:	59 07       	cpc	r21, r25
    1708:	6a 07       	cpc	r22, r26
    170a:	7b 07       	cpc	r23, r27
    170c:	48 f3       	brcs	.-46     	; 0x16e0 <game_countdown+0x8c>
			display_countdown(4); //display go
    170e:	84 e0       	ldi	r24, 0x04	; 4
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 a7 09 	call	0x134e	; 0x134e <display_countdown>
	}
	
																														//turn into a loop
	while (1) {
		//update current time
		current_time = get_current_time();
    1716:	0e 94 40 11 	call	0x2280	; 0x2280 <get_current_time>
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    171a:	ab 01       	movw	r20, r22
    171c:	bc 01       	movw	r22, r24
    171e:	4c 19       	sub	r20, r12
    1720:	5d 09       	sbc	r21, r13
    1722:	6e 09       	sbc	r22, r14
    1724:	7f 09       	sbc	r23, r15
    1726:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <game_speed>
    172a:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <game_speed+0x1>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	a0 e0       	ldi	r26, 0x00	; 0
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	48 17       	cp	r20, r24
    1738:	59 07       	cpc	r21, r25
    173a:	6a 07       	cpc	r22, r26
    173c:	7b 07       	cpc	r23, r27
    173e:	58 f3       	brcs	.-42     	; 0x1716 <game_countdown+0xc2>
			break;
		}
	}
}
    1740:	ff 90       	pop	r15
    1742:	ef 90       	pop	r14
    1744:	df 90       	pop	r13
    1746:	cf 90       	pop	r12
    1748:	bf 90       	pop	r11
    174a:	af 90       	pop	r10
    174c:	9f 90       	pop	r9
    174e:	8f 90       	pop	r8
    1750:	08 95       	ret

00001752 <ssd_display>:

void ssd_display() {
	//SSD section  //maybe put into the interrupt section
	//change displayed digit,
	int left_digit = points;
    1752:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
    1756:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
	int right_digit = 0;
	
	if (!((points < 10) && (points >= 0))) {
    175a:	8a 30       	cpi	r24, 0x0A	; 10
    175c:	91 05       	cpc	r25, r1
    175e:	08 f4       	brcc	.+2      	; 0x1762 <ssd_display+0x10>
    1760:	61 c0       	rjmp	.+194    	; 0x1824 <ssd_display+0xd2>
		if ((points > 9) && (points < 100)) {
    1762:	9c 01       	movw	r18, r24
    1764:	2a 50       	subi	r18, 0x0A	; 10
    1766:	31 09       	sbc	r19, r1
    1768:	2a 35       	cpi	r18, 0x5A	; 90
    176a:	31 05       	cpc	r19, r1
    176c:	28 f4       	brcc	.+10     	; 0x1778 <ssd_display+0x26>
			left_digit = points	/ 10; // tens column
			right_digit = points % 10; //ones column
    176e:	6a e0       	ldi	r22, 0x0A	; 10
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	0e 94 9d 13 	call	0x273a	; 0x273a <__divmodhi4>
    1776:	2a c0       	rjmp	.+84     	; 0x17cc <ssd_display+0x7a>
		
		} else if ((points >= 100)) {
    1778:	84 36       	cpi	r24, 0x64	; 100
    177a:	91 05       	cpc	r25, r1
    177c:	7c f0       	brlt	.+30     	; 0x179c <ssd_display+0x4a>
			left_digit = points /10 % 10; //tens column
    177e:	2a e0       	ldi	r18, 0x0A	; 10
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	b9 01       	movw	r22, r18
    1784:	0e 94 9d 13 	call	0x273a	; 0x273a <__divmodhi4>
    1788:	e8 2f       	mov	r30, r24
    178a:	49 2f       	mov	r20, r25
    178c:	cb 01       	movw	r24, r22
    178e:	b9 01       	movw	r22, r18
    1790:	0e 94 9d 13 	call	0x273a	; 0x273a <__divmodhi4>
    1794:	bc 01       	movw	r22, r24
			right_digit = points % 10;
    1796:	8e 2f       	mov	r24, r30
    1798:	94 2f       	mov	r25, r20
    179a:	18 c0       	rjmp	.+48     	; 0x17cc <ssd_display+0x7a>
			
		} else if ((points < 0) && (points > -10)) {
    179c:	9c 01       	movw	r18, r24
    179e:	27 5f       	subi	r18, 0xF7	; 247
    17a0:	3f 4f       	sbci	r19, 0xFF	; 255
    17a2:	29 30       	cpi	r18, 0x09	; 9
    17a4:	31 05       	cpc	r19, r1
    17a6:	30 f4       	brcc	.+12     	; 0x17b4 <ssd_display+0x62>
			right_digit = -1 * points;
    17a8:	91 95       	neg	r25
    17aa:	81 95       	neg	r24
    17ac:	91 09       	sbc	r25, r1
			left_digit = 10;
    17ae:	6a e0       	ldi	r22, 0x0A	; 10
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	0c c0       	rjmp	.+24     	; 0x17cc <ssd_display+0x7a>
	
		} else if (points <= -10) {
    17b4:	87 3f       	cpi	r24, 0xF7	; 247
    17b6:	2f ef       	ldi	r18, 0xFF	; 255
    17b8:	92 07       	cpc	r25, r18
    17ba:	24 f0       	brlt	.+8      	; 0x17c4 <ssd_display+0x72>
}

void ssd_display() {
	//SSD section  //maybe put into the interrupt section
	//change displayed digit,
	int left_digit = points;
    17bc:	bc 01       	movw	r22, r24
	int right_digit = 0;
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	04 c0       	rjmp	.+8      	; 0x17cc <ssd_display+0x7a>
			right_digit = -1 * points;
			left_digit = 10;
	
		} else if (points <= -10) {
			//SSD displays "--"
			right_digit = 10;
    17c4:	8a e0       	ldi	r24, 0x0A	; 10
    17c6:	90 e0       	ldi	r25, 0x00	; 0
			left_digit = 10;
    17c8:	6a e0       	ldi	r22, 0x0A	; 10
    17ca:	70 e0       	ldi	r23, 0x00	; 0
		}
	
		if (seven_seg_cc) { //is seven_seg_cc, then ssd displays to the left
    17cc:	20 91 e3 04 	lds	r18, 0x04E3	; 0x8004e3 <seven_seg_cc>
    17d0:	30 91 e4 04 	lds	r19, 0x04E4	; 0x8004e4 <seven_seg_cc+0x1>
    17d4:	23 2b       	or	r18, r19
    17d6:	99 f0       	breq	.+38     	; 0x17fe <ssd_display+0xac>
			PORTD = PORTD | (1<<2);	
    17d8:	8b b1       	in	r24, 0x0b	; 11
    17da:	84 60       	ori	r24, 0x04	; 4
    17dc:	8b b9       	out	0x0b, r24	; 11
			PORTC = seven_seg_data[left_digit];
    17de:	fb 01       	movw	r30, r22
    17e0:	ef 5f       	subi	r30, 0xFF	; 255
    17e2:	fe 4f       	sbci	r31, 0xFE	; 254
    17e4:	80 81       	ld	r24, Z
    17e6:	88 b9       	out	0x08, r24	; 8
		
			seven_seg_cc ^= 1;
    17e8:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <seven_seg_cc>
    17ec:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <seven_seg_cc+0x1>
    17f0:	21 e0       	ldi	r18, 0x01	; 1
    17f2:	82 27       	eor	r24, r18
    17f4:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <seven_seg_cc+0x1>
    17f8:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <seven_seg_cc>
    17fc:	08 95       	ret
		
		} else {
			PORTD = PORTD & 0b11111011;				//Display Right digit
    17fe:	2b b1       	in	r18, 0x0b	; 11
    1800:	2b 7f       	andi	r18, 0xFB	; 251
    1802:	2b b9       	out	0x0b, r18	; 11
			PORTC = seven_seg_data[right_digit];
    1804:	fc 01       	movw	r30, r24
    1806:	ef 5f       	subi	r30, 0xFF	; 255
    1808:	fe 4f       	sbci	r31, 0xFE	; 254
    180a:	80 81       	ld	r24, Z
    180c:	88 b9       	out	0x08, r24	; 8
			
			seven_seg_cc ^= 1;
    180e:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <seven_seg_cc>
    1812:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <seven_seg_cc+0x1>
    1816:	21 e0       	ldi	r18, 0x01	; 1
    1818:	82 27       	eor	r24, r18
    181a:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <seven_seg_cc+0x1>
    181e:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <seven_seg_cc>
    1822:	08 95       	ret
		}
		
	} else {
		if (seven_seg_cc) {
    1824:	20 91 e3 04 	lds	r18, 0x04E3	; 0x8004e3 <seven_seg_cc>
    1828:	30 91 e4 04 	lds	r19, 0x04E4	; 0x8004e4 <seven_seg_cc+0x1>
    182c:	23 2b       	or	r18, r19
    182e:	31 f0       	breq	.+12     	; 0x183c <ssd_display+0xea>
			PORTC = seven_seg_data[left_digit];
    1830:	fc 01       	movw	r30, r24
    1832:	ef 5f       	subi	r30, 0xFF	; 255
    1834:	fe 4f       	sbci	r31, 0xFE	; 254
    1836:	80 81       	ld	r24, Z
    1838:	88 b9       	out	0x08, r24	; 8
    183a:	08 95       	ret
		} else {
			seven_seg_cc ^= 1;
    183c:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <seven_seg_cc>
    1840:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <seven_seg_cc+0x1>
    1844:	21 e0       	ldi	r18, 0x01	; 1
    1846:	82 27       	eor	r24, r18
    1848:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <seven_seg_cc+0x1>
    184c:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <seven_seg_cc>
    1850:	08 95       	ret

00001852 <new_game>:
}

void new_game(void)
{
	// Clear the serial terminal
	clear_terminal();
    1852:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <clear_terminal>
	
	//reset number of points player has
	points = 0;
    1856:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <points+0x1>
    185a:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <points>
	combo_count = 0;
    185e:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <combo_count+0x1>
    1862:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <combo_count>
	
	//Start Game Countdown
	game_countdown();
    1866:	0e 94 2a 0b 	call	0x1654	; 0x1654 <game_countdown>
		
	// Initialize the game and display
	initialise_game();
    186a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    186e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
	clear_serial_input_buffer();
    1872:	0e 94 1c 10 	call	0x2038	; 0x2038 <clear_serial_input_buffer>
    1876:	08 95       	ret

00001878 <play_game>:
}

void play_game(void)
{
    1878:	4f 92       	push	r4
    187a:	5f 92       	push	r5
    187c:	6f 92       	push	r6
    187e:	7f 92       	push	r7
    1880:	8f 92       	push	r8
    1882:	9f 92       	push	r9
    1884:	af 92       	push	r10
    1886:	bf 92       	push	r11
    1888:	cf 92       	push	r12
    188a:	df 92       	push	r13
    188c:	ef 92       	push	r14
    188e:	ff 92       	push	r15
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	00 d0       	rcall	.+0      	; 0x189a <play_game+0x22>
    189a:	00 d0       	rcall	.+0      	; 0x189c <play_game+0x24>
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
	
	int8_t btn; // The button pushed
	
	int combo_line = 0;
	
	last_advance_time = get_current_time();
    18a0:	0e 94 40 11 	call	0x2280	; 0x2280 <get_current_time>
    18a4:	2b 01       	movw	r4, r22
    18a6:	3c 01       	movw	r6, r24
	
	//Display current track
	move_terminal_cursor(10, 15);
    18a8:	6f e0       	ldi	r22, 0x0F	; 15
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	8a e0       	ldi	r24, 0x0A	; 10
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	printf("Track: Through Fire & Flames");													//do %s and add a new track title at the end.
    18b4:	80 e1       	ldi	r24, 0x10	; 16
    18b6:	92 e0       	ldi	r25, 0x02	; 2
    18b8:	9f 93       	push	r25
    18ba:	8f 93       	push	r24
    18bc:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
	
	move_terminal_cursor(10, 18);
    18c0:	62 e1       	ldi	r22, 0x12	; 18
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	8a e0       	ldi	r24, 0x0A	; 10
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	clear_to_end_of_line();
    18cc:	0e 94 02 11 	call	0x2204	; 0x2204 <clear_to_end_of_line>
	//update terminal line appropriately
	if (game_speed == 1000) {
    18d0:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <game_speed>
    18d4:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <game_speed+0x1>
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	88 3e       	cpi	r24, 0xE8	; 232
    18de:	23 e0       	ldi	r18, 0x03	; 3
    18e0:	92 07       	cpc	r25, r18
    18e2:	69 f4       	brne	.+26     	; 0x18fe <play_game+0x86>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    18e4:	9f 93       	push	r25
    18e6:	8f 93       	push	r24
    18e8:	8d e2       	ldi	r24, 0x2D	; 45
    18ea:	92 e0       	ldi	r25, 0x02	; 2
    18ec:	9f 93       	push	r25
    18ee:	8f 93       	push	r24
    18f0:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	20 c0       	rjmp	.+64     	; 0x193e <play_game+0xc6>
		
	} else if (game_speed == 500) {
    18fe:	84 3f       	cpi	r24, 0xF4	; 244
    1900:	31 e0       	ldi	r19, 0x01	; 1
    1902:	93 07       	cpc	r25, r19
    1904:	69 f4       	brne	.+26     	; 0x1920 <play_game+0xa8>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1906:	9f 93       	push	r25
    1908:	8f 93       	push	r24
    190a:	83 e5       	ldi	r24, 0x53	; 83
    190c:	92 e0       	ldi	r25, 0x02	; 2
    190e:	9f 93       	push	r25
    1910:	8f 93       	push	r24
    1912:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f c0       	rjmp	.+30     	; 0x193e <play_game+0xc6>
		
	} else if (game_speed == 250) {
    1920:	8a 3f       	cpi	r24, 0xFA	; 250
    1922:	91 05       	cpc	r25, r1
    1924:	61 f4       	brne	.+24     	; 0x193e <play_game+0xc6>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1926:	9f 93       	push	r25
    1928:	8f 93       	push	r24
    192a:	87 e7       	ldi	r24, 0x77	; 119
    192c:	92 e0       	ldi	r25, 0x02	; 2
    192e:	9f 93       	push	r25
    1930:	8f 93       	push	r24
    1932:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
		if (!man_mode & !paused) {
			current_time = get_current_time();
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
			{
				pause_time = 0;
    193e:	00 e0       	ldi	r16, 0x00	; 0
    1940:	10 e0       	ldi	r17, 0x00	; 0
    1942:	81 2c       	mov	r8, r1
    1944:	91 2c       	mov	r9, r1
    1946:	54 01       	movw	r10, r8
    1948:	02 c2       	rjmp	.+1028   	; 0x1d4e <play_game+0x4d6>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
    194a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    194e:	89 83       	std	Y+1, r24	; 0x01
		
		char keyboard_input = -1;
		
		if (serial_input_available()) {
    1950:	0e 94 15 10 	call	0x202a	; 0x202a <serial_input_available>
    1954:	88 23       	and	r24, r24
    1956:	41 f0       	breq	.+16     	; 0x1968 <play_game+0xf0>
			keyboard_input = fgetc(stdin);
    1958:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <__iob>
    195c:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <__iob+0x1>
    1960:	0e 94 15 14 	call	0x282a	; 0x282a <fgetc>
    1964:	f8 2e       	mov	r15, r24
    1966:	02 c0       	rjmp	.+4      	; 0x196c <play_game+0xf4>
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
		
		char keyboard_input = -1;
    1968:	ff 24       	eor	r15, r15
    196a:	fa 94       	dec	r15
		
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		if (!paused) {
    196c:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <paused>
    1970:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <paused+0x1>
    1974:	89 2b       	or	r24, r25
    1976:	99 f5       	brne	.+102    	; 0x19de <play_game+0x166>
			if ((btn == BUTTON0_PUSHED) || (keyboard_input == 'f' || keyboard_input == 'F')) {
    1978:	49 81       	ldd	r20, Y+1	; 0x01
    197a:	44 23       	and	r20, r20
    197c:	31 f0       	breq	.+12     	; 0x198a <play_game+0x112>
    197e:	56 e6       	ldi	r21, 0x66	; 102
    1980:	f5 16       	cp	r15, r21
    1982:	19 f0       	breq	.+6      	; 0x198a <play_game+0x112>
    1984:	86 e4       	ldi	r24, 0x46	; 70
    1986:	f8 12       	cpse	r15, r24
    1988:	04 c0       	rjmp	.+8      	; 0x1992 <play_game+0x11a>
				// If button 0 play the lowest note (right lane)
				play_note(3);
    198a:	83 e0       	ldi	r24, 0x03	; 3
    198c:	0e 94 76 04 	call	0x8ec	; 0x8ec <play_note>
    1990:	26 c0       	rjmp	.+76     	; 0x19de <play_game+0x166>
		
			} else if ((btn == BUTTON1_PUSHED) || (keyboard_input == 'd' || keyboard_input == 'D')) {
    1992:	99 81       	ldd	r25, Y+1	; 0x01
    1994:	91 30       	cpi	r25, 0x01	; 1
    1996:	31 f0       	breq	.+12     	; 0x19a4 <play_game+0x12c>
    1998:	24 e6       	ldi	r18, 0x64	; 100
    199a:	f2 16       	cp	r15, r18
    199c:	19 f0       	breq	.+6      	; 0x19a4 <play_game+0x12c>
    199e:	34 e4       	ldi	r19, 0x44	; 68
    19a0:	f3 12       	cpse	r15, r19
    19a2:	04 c0       	rjmp	.+8      	; 0x19ac <play_game+0x134>
				//If button 1 is pushed play the second lowest note
				play_note(2);		
    19a4:	82 e0       	ldi	r24, 0x02	; 2
    19a6:	0e 94 76 04 	call	0x8ec	; 0x8ec <play_note>
    19aa:	19 c0       	rjmp	.+50     	; 0x19de <play_game+0x166>
		
			} else if ((btn == BUTTON2_PUSHED) || (keyboard_input == 's' || keyboard_input == 'S')) {
    19ac:	49 81       	ldd	r20, Y+1	; 0x01
    19ae:	42 30       	cpi	r20, 0x02	; 2
    19b0:	31 f0       	breq	.+12     	; 0x19be <play_game+0x146>
    19b2:	53 e7       	ldi	r21, 0x73	; 115
    19b4:	f5 16       	cp	r15, r21
    19b6:	19 f0       	breq	.+6      	; 0x19be <play_game+0x146>
    19b8:	83 e5       	ldi	r24, 0x53	; 83
    19ba:	f8 12       	cpse	r15, r24
    19bc:	04 c0       	rjmp	.+8      	; 0x19c6 <play_game+0x14e>
				//If button 2 is pushed play the second highest note
				play_note(1); 
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	0e 94 76 04 	call	0x8ec	; 0x8ec <play_note>
    19c4:	0c c0       	rjmp	.+24     	; 0x19de <play_game+0x166>
				
			} else if ((btn == BUTTON3_PUSHED) || (keyboard_input == 'a' || keyboard_input == 'A')) {
    19c6:	99 81       	ldd	r25, Y+1	; 0x01
    19c8:	93 30       	cpi	r25, 0x03	; 3
    19ca:	31 f0       	breq	.+12     	; 0x19d8 <play_game+0x160>
    19cc:	21 e6       	ldi	r18, 0x61	; 97
    19ce:	f2 16       	cp	r15, r18
    19d0:	19 f0       	breq	.+6      	; 0x19d8 <play_game+0x160>
    19d2:	31 e4       	ldi	r19, 0x41	; 65
    19d4:	f3 12       	cpse	r15, r19
    19d6:	03 c0       	rjmp	.+6      	; 0x19de <play_game+0x166>
				//If button 3 is pushed play the highest note
				play_note(0);
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	0e 94 76 04 	call	0x8ec	; 0x8ec <play_note>
			
			} 
		}
		
		if (keyboard_input == 'm' || keyboard_input == 'M') {
    19de:	4d e6       	ldi	r20, 0x6D	; 109
    19e0:	f4 16       	cp	r15, r20
    19e2:	19 f0       	breq	.+6      	; 0x19ea <play_game+0x172>
    19e4:	5d e4       	ldi	r21, 0x4D	; 77
    19e6:	f5 12       	cpse	r15, r21
    19e8:	27 c0       	rjmp	.+78     	; 0x1a38 <play_game+0x1c0>
			//check to see if the game is currently paused
			if (!paused) {
    19ea:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <paused>
    19ee:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <paused+0x1>
    19f2:	89 2b       	or	r24, r25
    19f4:	09 f5       	brne	.+66     	; 0x1a38 <play_game+0x1c0>
				//clear manual mode alert
				move_terminal_cursor(10, 16);
    19f6:	60 e1       	ldi	r22, 0x10	; 16
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	8a e0       	ldi	r24, 0x0A	; 10
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
				clear_to_end_of_line();
    1a02:	0e 94 02 11 	call	0x2204	; 0x2204 <clear_to_end_of_line>
				if (man_mode) {
    1a06:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <man_mode>
    1a0a:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <man_mode+0x1>
    1a0e:	89 2b       	or	r24, r25
    1a10:	29 f0       	breq	.+10     	; 0x1a1c <play_game+0x1a4>
					man_mode = 0;
    1a12:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <man_mode+0x1>
    1a16:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <man_mode>
    1a1a:	0e c0       	rjmp	.+28     	; 0x1a38 <play_game+0x1c0>
		
				} else {
					man_mode = 1;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <man_mode+0x1>
    1a24:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <man_mode>
					
					//print to terminal that manual mode is on
					printf("Manual Mode: ON");
    1a28:	8e e9       	ldi	r24, 0x9E	; 158
    1a2a:	92 e0       	ldi	r25, 0x02	; 2
    1a2c:	9f 93       	push	r25
    1a2e:	8f 93       	push	r24
    1a30:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
				}
			}	
		}
		
		if (keyboard_input == 'p' || keyboard_input == 'P') {
    1a38:	80 e7       	ldi	r24, 0x70	; 112
    1a3a:	f8 16       	cp	r15, r24
    1a3c:	19 f0       	breq	.+6      	; 0x1a44 <play_game+0x1cc>
    1a3e:	90 e5       	ldi	r25, 0x50	; 80
    1a40:	f9 12       	cpse	r15, r25
    1a42:	35 c0       	rjmp	.+106    	; 0x1aae <play_game+0x236>
			//Check to see if the game is in manual mode
			if (!man_mode) {
    1a44:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <man_mode>
    1a48:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <man_mode+0x1>
    1a4c:	89 2b       	or	r24, r25
    1a4e:	79 f5       	brne	.+94     	; 0x1aae <play_game+0x236>
				//clear pause line in terminal
				move_terminal_cursor(10, 17);
    1a50:	61 e1       	ldi	r22, 0x11	; 17
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	8a e0       	ldi	r24, 0x0A	; 10
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
				clear_to_end_of_line();
    1a5c:	0e 94 02 11 	call	0x2204	; 0x2204 <clear_to_end_of_line>
				if (paused) {
    1a60:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <paused>
    1a64:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <paused+0x1>
    1a68:	89 2b       	or	r24, r25
    1a6a:	41 f0       	breq	.+16     	; 0x1a7c <play_game+0x204>
					paused = 0;
    1a6c:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <paused+0x1>
    1a70:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <paused>
					PORTD = PORTD & 0b11110111;
    1a74:	8b b1       	in	r24, 0x0b	; 11
    1a76:	87 7f       	andi	r24, 0xF7	; 247
    1a78:	8b b9       	out	0x0b, r24	; 11
    1a7a:	19 c0       	rjmp	.+50     	; 0x1aae <play_game+0x236>
			
				} else {
					paused = 1;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <paused+0x1>
    1a84:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <paused>
					pause_time = get_current_time() - last_advance_time; 
    1a88:	0e 94 40 11 	call	0x2280	; 0x2280 <get_current_time>
    1a8c:	4b 01       	movw	r8, r22
    1a8e:	5c 01       	movw	r10, r24
    1a90:	84 18       	sub	r8, r4
    1a92:	95 08       	sbc	r9, r5
    1a94:	a6 08       	sbc	r10, r6
    1a96:	b7 08       	sbc	r11, r7
					
					PORTD = PORTD | (1<<3); //essentially just PORTD | 0b00001000
    1a98:	8b b1       	in	r24, 0x0b	; 11
    1a9a:	88 60       	ori	r24, 0x08	; 8
    1a9c:	8b b9       	out	0x0b, r24	; 11
					
					//tell user that game is currently paused
					printf("Game Paused");
    1a9e:	8e ea       	ldi	r24, 0xAE	; 174
    1aa0:	92 e0       	ldi	r25, 0x02	; 2
    1aa2:	9f 93       	push	r25
    1aa4:	8f 93       	push	r24
    1aa6:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
				
			}
		}
		
		//Combo IO board LED's
		if (combo_count == 0) {
    1aae:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <combo_count>
    1ab2:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <combo_count+0x1>
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	21 f4       	brne	.+8      	; 0x1ac2 <play_game+0x24a>
			//set portD outputs to the I/O boards LED matrix to be 0
			PORTD = PORTD & 0b00011111;
    1aba:	8b b1       	in	r24, 0x0b	; 11
    1abc:	8f 71       	andi	r24, 0x1F	; 31
    1abe:	8b b9       	out	0x0b, r24	; 11
    1ac0:	13 c0       	rjmp	.+38     	; 0x1ae8 <play_game+0x270>

		} else if (combo_count == 1) {
    1ac2:	81 30       	cpi	r24, 0x01	; 1
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	21 f4       	brne	.+8      	; 0x1ad0 <play_game+0x258>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<5); 
    1ac8:	8b b1       	in	r24, 0x0b	; 11
    1aca:	80 62       	ori	r24, 0x20	; 32
    1acc:	8b b9       	out	0x0b, r24	; 11
    1ace:	0c c0       	rjmp	.+24     	; 0x1ae8 <play_game+0x270>
			
		} else if (combo_count == 2) {
    1ad0:	82 30       	cpi	r24, 0x02	; 2
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	21 f4       	brne	.+8      	; 0x1ade <play_game+0x266>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<6);
    1ad6:	8b b1       	in	r24, 0x0b	; 11
    1ad8:	80 64       	ori	r24, 0x40	; 64
    1ada:	8b b9       	out	0x0b, r24	; 11
    1adc:	05 c0       	rjmp	.+10     	; 0x1ae8 <play_game+0x270>
			
		} else if (combo_count >= 3) {
    1ade:	03 97       	sbiw	r24, 0x03	; 3
    1ae0:	1c f0       	brlt	.+6      	; 0x1ae8 <play_game+0x270>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<7);
    1ae2:	8b b1       	in	r24, 0x0b	; 11
    1ae4:	80 68       	ori	r24, 0x80	; 128
    1ae6:	8b b9       	out	0x0b, r24	; 11
		}
		
		//Combo display
		if ((combo_check) && (combo_line == 0)) {
    1ae8:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <combo_check>
    1aec:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <combo_check+0x1>
    1af0:	89 2b       	or	r24, r25
    1af2:	a1 f0       	breq	.+40     	; 0x1b1c <play_game+0x2a4>
    1af4:	01 15       	cp	r16, r1
    1af6:	11 05       	cpc	r17, r1
    1af8:	89 f4       	brne	.+34     	; 0x1b1c <play_game+0x2a4>
			move_terminal_cursor(10, 3);
    1afa:	63 e0       	ldi	r22, 0x03	; 3
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	8a e0       	ldi	r24, 0x0A	; 10
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
			printf("  ______                           __                  __");
    1b06:	8a eb       	ldi	r24, 0xBA	; 186
    1b08:	92 e0       	ldi	r25, 0x02	; 2
    1b0a:	9f 93       	push	r25
    1b0c:	8f 93       	push	r24
    1b0e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
			
			combo_line++; //increment combo line so in next loop the next line is printed of ascii art
    1b12:	0f 5f       	subi	r16, 0xFF	; 255
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	9f c0       	rjmp	.+318    	; 0x1c5a <play_game+0x3e2>
		} else if (combo_line == 1) {
    1b1c:	01 30       	cpi	r16, 0x01	; 1
    1b1e:	11 05       	cpc	r17, r1
    1b20:	89 f4       	brne	.+34     	; 0x1b44 <play_game+0x2cc>
			move_terminal_cursor(10,4);
    1b22:	64 e0       	ldi	r22, 0x04	; 4
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	8a e0       	ldi	r24, 0x0A	; 10
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
			printf(" /      \\                         |  \\                |  \\");
    1b2e:	84 ef       	ldi	r24, 0xF4	; 244
    1b30:	92 e0       	ldi	r25, 0x02	; 2
    1b32:	9f 93       	push	r25
    1b34:	8f 93       	push	r24
    1b36:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
			
			combo_line++;
    1b3a:	0f 5f       	subi	r16, 0xFF	; 255
    1b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	8b c0       	rjmp	.+278    	; 0x1c5a <play_game+0x3e2>
		} else if (combo_line == 2) {
    1b44:	02 30       	cpi	r16, 0x02	; 2
    1b46:	11 05       	cpc	r17, r1
    1b48:	89 f4       	brne	.+34     	; 0x1b6c <play_game+0x2f4>
			move_terminal_cursor(10,5);
    1b4a:	65 e0       	ldi	r22, 0x05	; 5
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	8a e0       	ldi	r24, 0x0A	; 10
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
			printf("|  $$$$$$\\  ______   ______ ____  | $$____    ______  | $$");
    1b56:	8f e2       	ldi	r24, 0x2F	; 47
    1b58:	93 e0       	ldi	r25, 0x03	; 3
    1b5a:	9f 93       	push	r25
    1b5c:	8f 93       	push	r24
    1b5e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
			
			combo_line++;
    1b62:	0f 5f       	subi	r16, 0xFF	; 255
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	77 c0       	rjmp	.+238    	; 0x1c5a <play_game+0x3e2>
		} else if (combo_line == 3) {
    1b6c:	03 30       	cpi	r16, 0x03	; 3
    1b6e:	11 05       	cpc	r17, r1
    1b70:	89 f4       	brne	.+34     	; 0x1b94 <play_game+0x31c>
			move_terminal_cursor(10,6);
    1b72:	66 e0       	ldi	r22, 0x06	; 6
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	8a e0       	ldi	r24, 0x0A	; 10
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
			printf("| $$   \\$$ /      \\ |      \\    \\ | $$    \\  /      \\ | $$");
    1b7e:	8a e6       	ldi	r24, 0x6A	; 106
    1b80:	93 e0       	ldi	r25, 0x03	; 3
    1b82:	9f 93       	push	r25
    1b84:	8f 93       	push	r24
    1b86:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
			
			combo_line++;
    1b8a:	0f 5f       	subi	r16, 0xFF	; 255
    1b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	63 c0       	rjmp	.+198    	; 0x1c5a <play_game+0x3e2>
		} else if (combo_line == 4) {
    1b94:	04 30       	cpi	r16, 0x04	; 4
    1b96:	11 05       	cpc	r17, r1
    1b98:	89 f4       	brne	.+34     	; 0x1bbc <play_game+0x344>
			move_terminal_cursor(10,7);
    1b9a:	67 e0       	ldi	r22, 0x07	; 7
    1b9c:	70 e0       	ldi	r23, 0x00	; 0
    1b9e:	8a e0       	ldi	r24, 0x0A	; 10
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
			printf("| $$      |  $$$$$$\\| $$$$$$\\$$$$\\| $$$$$$$\\|  $$$$$$\\| $$");
    1ba6:	85 ea       	ldi	r24, 0xA5	; 165
    1ba8:	93 e0       	ldi	r25, 0x03	; 3
    1baa:	9f 93       	push	r25
    1bac:	8f 93       	push	r24
    1bae:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
			
			combo_line++;
    1bb2:	0f 5f       	subi	r16, 0xFF	; 255
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	4f c0       	rjmp	.+158    	; 0x1c5a <play_game+0x3e2>
		}  else if (combo_line == 5) {
    1bbc:	05 30       	cpi	r16, 0x05	; 5
    1bbe:	11 05       	cpc	r17, r1
    1bc0:	89 f4       	brne	.+34     	; 0x1be4 <play_game+0x36c>
			move_terminal_cursor(10,8);
    1bc2:	68 e0       	ldi	r22, 0x08	; 8
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	8a e0       	ldi	r24, 0x0A	; 10
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
			printf("| $$   __ | $$  | $$| $$ | $$ | $$| $$  | $$| $$  | $$ \\$$");
    1bce:	80 ee       	ldi	r24, 0xE0	; 224
    1bd0:	93 e0       	ldi	r25, 0x03	; 3
    1bd2:	9f 93       	push	r25
    1bd4:	8f 93       	push	r24
    1bd6:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
			
			combo_line++;
    1bda:	0f 5f       	subi	r16, 0xFF	; 255
    1bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	3b c0       	rjmp	.+118    	; 0x1c5a <play_game+0x3e2>
		} else if (combo_line == 6) {
    1be4:	06 30       	cpi	r16, 0x06	; 6
    1be6:	11 05       	cpc	r17, r1
    1be8:	89 f4       	brne	.+34     	; 0x1c0c <play_game+0x394>
			move_terminal_cursor(10,9);
    1bea:	69 e0       	ldi	r22, 0x09	; 9
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	8a e0       	ldi	r24, 0x0A	; 10
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
			printf("| $$__/  \\| $$__/ $$| $$ | $$ | $$| $$__/ $$| $$__/ $$ __");
    1bf6:	8b e1       	ldi	r24, 0x1B	; 27
    1bf8:	94 e0       	ldi	r25, 0x04	; 4
    1bfa:	9f 93       	push	r25
    1bfc:	8f 93       	push	r24
    1bfe:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
			
			combo_line++;
    1c02:	0f 5f       	subi	r16, 0xFF	; 255
    1c04:	1f 4f       	sbci	r17, 0xFF	; 255
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	27 c0       	rjmp	.+78     	; 0x1c5a <play_game+0x3e2>
		} else if (combo_line == 7) {
    1c0c:	07 30       	cpi	r16, 0x07	; 7
    1c0e:	11 05       	cpc	r17, r1
    1c10:	89 f4       	brne	.+34     	; 0x1c34 <play_game+0x3bc>
			move_terminal_cursor(10,10);
    1c12:	6a e0       	ldi	r22, 0x0A	; 10
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	8a e0       	ldi	r24, 0x0A	; 10
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
			printf(" \\$$    $$ \\$$    $$| $$ | $$ | $$| $$    $$ \\$$    $$|  \\");
    1c1e:	85 e5       	ldi	r24, 0x55	; 85
    1c20:	94 e0       	ldi	r25, 0x04	; 4
    1c22:	9f 93       	push	r25
    1c24:	8f 93       	push	r24
    1c26:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
			
			combo_line++;
    1c2a:	0f 5f       	subi	r16, 0xFF	; 255
    1c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	13 c0       	rjmp	.+38     	; 0x1c5a <play_game+0x3e2>
		} else if (combo_line == 8) {
    1c34:	08 30       	cpi	r16, 0x08	; 8
    1c36:	11 05       	cpc	r17, r1
    1c38:	81 f4       	brne	.+32     	; 0x1c5a <play_game+0x3e2>
			move_terminal_cursor(10,11);
    1c3a:	6b e0       	ldi	r22, 0x0B	; 11
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	8a e0       	ldi	r24, 0x0A	; 10
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
			printf("  \\$$$$$$   \\$$$$$$  \\$$  \\$$  \\$$ \\$$$$$$$   \\$$$$$$  \\$$");
    1c46:	80 e9       	ldi	r24, 0x90	; 144
    1c48:	94 e0       	ldi	r25, 0x04	; 4
    1c4a:	9f 93       	push	r25
    1c4c:	8f 93       	push	r24
    1c4e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
			
			combo_line = 0;
    1c56:	00 e0       	ldi	r16, 0x00	; 0
    1c58:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		if (!combo_check) {
    1c5a:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <combo_check>
    1c5e:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <combo_check+0x1>
    1c62:	89 2b       	or	r24, r25
    1c64:	81 f0       	breq	.+32     	; 0x1c86 <play_game+0x40e>
    1c66:	17 c0       	rjmp	.+46     	; 0x1c96 <play_game+0x41e>
			for (int term_line = 3; term_line < 12; term_line++) {
				move_terminal_cursor(10, term_line);
    1c68:	69 81       	ldd	r22, Y+1	; 0x01
    1c6a:	7a 81       	ldd	r23, Y+2	; 0x02
    1c6c:	8a e0       	ldi	r24, 0x0A	; 10
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
				clear_to_end_of_line();
    1c74:	0e 94 02 11 	call	0x2204	; 0x2204 <clear_to_end_of_line>
			
			combo_line = 0;
		}
		
		if (!combo_check) {
			for (int term_line = 3; term_line < 12; term_line++) {
    1c78:	29 81       	ldd	r18, Y+1	; 0x01
    1c7a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c7c:	2f 5f       	subi	r18, 0xFF	; 255
    1c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c80:	3a 83       	std	Y+2, r19	; 0x02
    1c82:	29 83       	std	Y+1, r18	; 0x01
    1c84:	04 c0       	rjmp	.+8      	; 0x1c8e <play_game+0x416>
    1c86:	43 e0       	ldi	r20, 0x03	; 3
    1c88:	50 e0       	ldi	r21, 0x00	; 0
    1c8a:	5a 83       	std	Y+2, r21	; 0x02
    1c8c:	49 83       	std	Y+1, r20	; 0x01
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	9a 81       	ldd	r25, Y+2	; 0x02
    1c92:	0c 97       	sbiw	r24, 0x0c	; 12
    1c94:	4c f3       	brlt	.-46     	; 0x1c68 <play_game+0x3f0>
				
			}
		}
		

		if (!man_mode & !paused) {
    1c96:	20 91 e7 04 	lds	r18, 0x04E7	; 0x8004e7 <man_mode>
    1c9a:	30 91 e8 04 	lds	r19, 0x04E8	; 0x8004e8 <man_mode+0x1>
    1c9e:	91 e0       	ldi	r25, 0x01	; 1
    1ca0:	40 91 e5 04 	lds	r20, 0x04E5	; 0x8004e5 <paused>
    1ca4:	50 91 e6 04 	lds	r21, 0x04E6	; 0x8004e6 <paused+0x1>
    1ca8:	45 2b       	or	r20, r21
    1caa:	09 f0       	breq	.+2      	; 0x1cae <play_game+0x436>
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	21 15       	cp	r18, r1
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	09 f0       	breq	.+2      	; 0x1cb8 <play_game+0x440>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	89 23       	and	r24, r25
    1cba:	b1 f1       	breq	.+108    	; 0x1d28 <play_game+0x4b0>
			current_time = get_current_time();
    1cbc:	0e 94 40 11 	call	0x2280	; 0x2280 <get_current_time>
    1cc0:	69 83       	std	Y+1, r22	; 0x01
    1cc2:	7a 83       	std	Y+2, r23	; 0x02
    1cc4:	8b 83       	std	Y+3, r24	; 0x03
    1cc6:	9c 83       	std	Y+4, r25	; 0x04
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
    1cc8:	6b 01       	movw	r12, r22
    1cca:	7c 01       	movw	r14, r24
    1ccc:	c8 18       	sub	r12, r8
    1cce:	d9 08       	sbc	r13, r9
    1cd0:	ea 08       	sbc	r14, r10
    1cd2:	fb 08       	sbc	r15, r11
    1cd4:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <game_speed>
    1cd8:	30 91 ff 04 	lds	r19, 0x04FF	; 0x8004ff <game_speed+0x1>
    1cdc:	ad ec       	ldi	r26, 0xCD	; 205
    1cde:	bc ec       	ldi	r27, 0xCC	; 204
    1ce0:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__umulhisi3>
    1ce4:	96 95       	lsr	r25
    1ce6:	87 95       	ror	r24
    1ce8:	96 95       	lsr	r25
    1cea:	87 95       	ror	r24
    1cec:	a3 01       	movw	r20, r6
    1cee:	92 01       	movw	r18, r4
    1cf0:	28 0f       	add	r18, r24
    1cf2:	39 1f       	adc	r19, r25
    1cf4:	41 1d       	adc	r20, r1
    1cf6:	51 1d       	adc	r21, r1
    1cf8:	c2 16       	cp	r12, r18
    1cfa:	d3 06       	cpc	r13, r19
    1cfc:	e4 06       	cpc	r14, r20
    1cfe:	f5 06       	cpc	r15, r21
    1d00:	30 f1       	brcs	.+76     	; 0x1d4e <play_game+0x4d6>
			{
				pause_time = 0;
				// 200ms (0.2 second) has passed since the last time we advance the
				// notes here, so update the advance the notes
				advance_note();
    1d02:	0e 94 42 05 	call	0xa84	; 0xa84 <advance_note>
				advance_count++;
    1d06:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <advance_count>
    1d0a:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <advance_count+0x1>
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <advance_count+0x1>
    1d14:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <advance_count>
				
				// Update the most recent time the notes were advanced
				last_advance_time = current_time;
    1d18:	49 80       	ldd	r4, Y+1	; 0x01
    1d1a:	5a 80       	ldd	r5, Y+2	; 0x02
    1d1c:	6b 80       	ldd	r6, Y+3	; 0x03
    1d1e:	7c 80       	ldd	r7, Y+4	; 0x04
		if (!man_mode & !paused) {
			current_time = get_current_time();
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
			{
				pause_time = 0;
    1d20:	81 2c       	mov	r8, r1
    1d22:	91 2c       	mov	r9, r1
    1d24:	54 01       	movw	r10, r8
    1d26:	13 c0       	rjmp	.+38     	; 0x1d4e <play_game+0x4d6>
				
				// Update the most recent time the notes were advanced
				last_advance_time = current_time;
			}
			
		} else if (man_mode) {
    1d28:	23 2b       	or	r18, r19
    1d2a:	89 f0       	breq	.+34     	; 0x1d4e <play_game+0x4d6>
			if (keyboard_input == 'n' || keyboard_input == 'N') {
    1d2c:	3e e6       	ldi	r19, 0x6E	; 110
    1d2e:	f3 16       	cp	r15, r19
    1d30:	19 f0       	breq	.+6      	; 0x1d38 <play_game+0x4c0>
    1d32:	4e e4       	ldi	r20, 0x4E	; 78
    1d34:	f4 12       	cpse	r15, r20
    1d36:	0b c0       	rjmp	.+22     	; 0x1d4e <play_game+0x4d6>
				advance_note();
    1d38:	0e 94 42 05 	call	0xa84	; 0xa84 <advance_note>
				advance_count++;
    1d3c:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <advance_count>
    1d40:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <advance_count+0x1>
    1d44:	01 96       	adiw	r24, 0x01	; 1
    1d46:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <advance_count+0x1>
    1d4a:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <advance_count>
	} else if (game_speed == 250) {
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
	}
	
	// We play the game until it's over
	while (!is_game_over())
    1d4e:	0e 94 68 07 	call	0xed0	; 0xed0 <is_game_over>
    1d52:	88 23       	and	r24, r24
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <play_game+0x4e0>
    1d56:	f9 cd       	rjmp	.-1038   	; 0x194a <play_game+0xd2>
				advance_note();
				advance_count++;
			}
		}
	}
}
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	1f 91       	pop	r17
    1d66:	0f 91       	pop	r16
    1d68:	ff 90       	pop	r15
    1d6a:	ef 90       	pop	r14
    1d6c:	df 90       	pop	r13
    1d6e:	cf 90       	pop	r12
    1d70:	bf 90       	pop	r11
    1d72:	af 90       	pop	r10
    1d74:	9f 90       	pop	r9
    1d76:	8f 90       	pop	r8
    1d78:	7f 90       	pop	r7
    1d7a:	6f 90       	pop	r6
    1d7c:	5f 90       	pop	r5
    1d7e:	4f 90       	pop	r4
    1d80:	08 95       	ret

00001d82 <handle_game_over>:

void handle_game_over()
{
	clear_terminal();
    1d82:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <clear_terminal>
	move_terminal_cursor(10,13);
    1d86:	6d e0       	ldi	r22, 0x0D	; 13
    1d88:	70 e0       	ldi	r23, 0x00	; 0
    1d8a:	8a e0       	ldi	r24, 0x0A	; 10
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    1d92:	8a ea       	ldi	r24, 0xAA	; 170
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9f 93       	push	r25
    1d98:	8f 93       	push	r24
    1d9a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
	move_terminal_cursor(10,14);
    1d9e:	6e e0       	ldi	r22, 0x0E	; 14
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	8a e0       	ldi	r24, 0x0A	; 10
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	printf("Final Score: %d\n", points);
    1daa:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <points+0x1>
    1dae:	8f 93       	push	r24
    1db0:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
    1db4:	8f 93       	push	r24
    1db6:	8b ec       	ldi	r24, 0xCB	; 203
    1db8:	94 e0       	ldi	r25, 0x04	; 4
    1dba:	9f 93       	push	r25
    1dbc:	8f 93       	push	r24
    1dbe:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
	//Display current track
	move_terminal_cursor(10, 15);
    1dc2:	6f e0       	ldi	r22, 0x0F	; 15
    1dc4:	70 e0       	ldi	r23, 0x00	; 0
    1dc6:	8a e0       	ldi	r24, 0x0A	; 10
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	printf("Track: Through Fire & Flames");														//do %s and add a new track title at the end.
    1dce:	80 e1       	ldi	r24, 0x10	; 16
    1dd0:	92 e0       	ldi	r25, 0x02	; 2
    1dd2:	9f 93       	push	r25
    1dd4:	8f 93       	push	r24
    1dd6:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
	move_terminal_cursor(10, 16);
    1dda:	60 e1       	ldi	r22, 0x10	; 16
    1ddc:	70 e0       	ldi	r23, 0x00	; 0
    1dde:	8a e0       	ldi	r24, 0x0A	; 10
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	clear_to_end_of_line();
    1de6:	0e 94 02 11 	call	0x2204	; 0x2204 <clear_to_end_of_line>
	//display game sped
	if (game_speed == 1000) {
    1dea:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <game_speed>
    1dee:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <game_speed+0x1>
    1df2:	2d b7       	in	r18, 0x3d	; 61
    1df4:	3e b7       	in	r19, 0x3e	; 62
    1df6:	28 5f       	subi	r18, 0xF8	; 248
    1df8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	3e bf       	out	0x3e, r19	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	2d bf       	out	0x3d, r18	; 61
    1e04:	88 3e       	cpi	r24, 0xE8	; 232
    1e06:	33 e0       	ldi	r19, 0x03	; 3
    1e08:	93 07       	cpc	r25, r19
    1e0a:	69 f4       	brne	.+26     	; 0x1e26 <handle_game_over+0xa4>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    1e0c:	9f 93       	push	r25
    1e0e:	8f 93       	push	r24
    1e10:	8d e2       	ldi	r24, 0x2D	; 45
    1e12:	92 e0       	ldi	r25, 0x02	; 2
    1e14:	9f 93       	push	r25
    1e16:	8f 93       	push	r24
    1e18:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	20 c0       	rjmp	.+64     	; 0x1e66 <handle_game_over+0xe4>
		
		} else if (game_speed == 500) {
    1e26:	84 3f       	cpi	r24, 0xF4	; 244
    1e28:	21 e0       	ldi	r18, 0x01	; 1
    1e2a:	92 07       	cpc	r25, r18
    1e2c:	69 f4       	brne	.+26     	; 0x1e48 <handle_game_over+0xc6>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1e2e:	9f 93       	push	r25
    1e30:	8f 93       	push	r24
    1e32:	83 e5       	ldi	r24, 0x53	; 83
    1e34:	92 e0       	ldi	r25, 0x02	; 2
    1e36:	9f 93       	push	r25
    1e38:	8f 93       	push	r24
    1e3a:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f c0       	rjmp	.+30     	; 0x1e66 <handle_game_over+0xe4>
		
		} else if (game_speed == 250) {
    1e48:	8a 3f       	cpi	r24, 0xFA	; 250
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	61 f4       	brne	.+24     	; 0x1e66 <handle_game_over+0xe4>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1e4e:	9f 93       	push	r25
    1e50:	8f 93       	push	r24
    1e52:	87 e7       	ldi	r24, 0x77	; 119
    1e54:	92 e0       	ldi	r25, 0x02	; 2
    1e56:	9f 93       	push	r25
    1e58:	8f 93       	push	r24
    1e5a:	0e 94 53 14 	call	0x28a6	; 0x28a6 <printf>
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
	}
	
	move_terminal_cursor(10, 17);
    1e66:	61 e1       	ldi	r22, 0x11	; 17
    1e68:	70 e0       	ldi	r23, 0x00	; 0
    1e6a:	8a e0       	ldi	r24, 0x0A	; 10
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
    1e72:	8c e7       	ldi	r24, 0x7C	; 124
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	9f 93       	push	r25
    1e78:	8f 93       	push	r24
    1e7a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	10 c0       	rjmp	.+32     	; 0x1ea4 <handle_game_over+0x122>
	{
		char keyboard_input = -1;
				
		if (serial_input_available()) {
    1e84:	0e 94 15 10 	call	0x202a	; 0x202a <serial_input_available>
    1e88:	88 23       	and	r24, r24
    1e8a:	39 f0       	breq	.+14     	; 0x1e9a <handle_game_over+0x118>
			keyboard_input = fgetc(stdin);
    1e8c:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <__iob>
    1e90:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <__iob+0x1>
    1e94:	0e 94 15 14 	call	0x282a	; 0x282a <fgetc>
    1e98:	01 c0       	rjmp	.+2      	; 0x1e9c <handle_game_over+0x11a>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
	{
		char keyboard_input = -1;
    1e9a:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		//check if the user presses s
		if (keyboard_input == 's' || keyboard_input == 'S') {
    1e9c:	83 37       	cpi	r24, 0x73	; 115
    1e9e:	31 f0       	breq	.+12     	; 0x1eac <handle_game_over+0x12a>
    1ea0:	83 35       	cpi	r24, 0x53	; 83
    1ea2:	21 f0       	breq	.+8      	; 0x1eac <handle_game_over+0x12a>
	move_terminal_cursor(10, 17);
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    1ea4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    1ea8:	8f 3f       	cpi	r24, 0xFF	; 255
    1eaa:	61 f3       	breq	.-40     	; 0x1e84 <handle_game_over+0x102>
		if (keyboard_input == 's' || keyboard_input == 'S') {
			break;
		}
	}	
	
	start_screen();
    1eac:	0e 94 cb 07 	call	0xf96	; 0xf96 <start_screen>
    1eb0:	08 95       	ret

00001eb2 <main>:
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1eb2:	0e 94 b4 07 	call	0xf68	; 0xf68 <initialise_hardware>
	
	points = 0;
    1eb6:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <points+0x1>
    1eba:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <points>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
    1ebe:	0e 94 cb 07 	call	0xf96	; 0xf96 <start_screen>
	
	// Loop forever and continuously play the game.
	while(1)
	{
		new_game();
    1ec2:	0e 94 29 0c 	call	0x1852	; 0x1852 <new_game>
		play_game();
    1ec6:	0e 94 3c 0c 	call	0x1878	; 0x1878 <play_game>
		handle_game_over();
    1eca:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <handle_game_over>
    1ece:	f9 cf       	rjmp	.-14     	; 0x1ec2 <main+0x10>

00001ed0 <uart_put_char>:
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream)
{
    1ed0:	cf 93       	push	r28
    1ed2:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n')
    1ed4:	8a 30       	cpi	r24, 0x0A	; 10
    1ed6:	19 f4       	brne	.+6      	; 0x1ede <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
    1ed8:	8d e0       	ldi	r24, 0x0D	; 13
    1eda:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1ede:	9f b7       	in	r25, 0x3f	; 63
    1ee0:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
    1ee4:	99 23       	and	r25, r25
    1ee6:	29 f1       	breq	.+74     	; 0x1f32 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1ee8:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <bytes_in_out_buffer>
    1eec:	8f 3f       	cpi	r24, 0xFF	; 255
    1eee:	d1 f3       	breq	.-12     	; 0x1ee4 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1ef0:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1ef2:	e0 91 00 05 	lds	r30, 0x0500	; 0x800500 <out_insert_pos>
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	8e 0f       	add	r24, r30
    1efa:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <out_insert_pos>
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	ee 5f       	subi	r30, 0xFE	; 254
    1f02:	fa 4f       	sbci	r31, 0xFA	; 250
    1f04:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1f06:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <bytes_in_out_buffer>
    1f0a:	8f 5f       	subi	r24, 0xFF	; 255
    1f0c:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
    1f10:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <out_insert_pos>
    1f14:	8f 3f       	cpi	r24, 0xFF	; 255
    1f16:	11 f4       	brne	.+4      	; 0x1f1c <uart_put_char+0x4c>
	{
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1f18:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1f1c:	e1 ec       	ldi	r30, 0xC1	; 193
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	80 62       	ori	r24, 0x20	; 32
    1f24:	80 83       	st	Z, r24
	if (interrupts_enabled)
    1f26:	99 23       	and	r25, r25
    1f28:	39 f0       	breq	.+14     	; 0x1f38 <uart_put_char+0x68>
	{
		sei();
    1f2a:	78 94       	sei
	}
	return 0;
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	05 c0       	rjmp	.+10     	; 0x1f3c <uart_put_char+0x6c>
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
}
    1f3c:	cf 91       	pop	r28
    1f3e:	08 95       	ret

00001f40 <uart_get_char>:

int uart_get_char(FILE* stream)
{
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0)
    1f40:	80 91 13 06 	lds	r24, 0x0613	; 0x800613 <bytes_in_input_buffer>
    1f44:	88 23       	and	r24, r24
    1f46:	e1 f3       	breq	.-8      	; 0x1f40 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1f48:	2f b7       	in	r18, 0x3f	; 63
    1f4a:	20 78       	andi	r18, 0x80	; 128
	cli();
    1f4c:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
    1f4e:	80 91 01 06 	lds	r24, 0x0601	; 0x800601 <input_insert_pos>
    1f52:	30 91 13 06 	lds	r19, 0x0613	; 0x800613 <bytes_in_input_buffer>
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	83 1b       	sub	r24, r19
    1f5a:	91 09       	sbc	r25, r1
    1f5c:	5a f4       	brpl	.+22     	; 0x1f74 <uart_get_char+0x34>
	{
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1f5e:	e0 91 01 06 	lds	r30, 0x0601	; 0x800601 <input_insert_pos>
    1f62:	80 91 13 06 	lds	r24, 0x0613	; 0x800613 <bytes_in_input_buffer>
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	e8 1b       	sub	r30, r24
    1f6a:	f1 09       	sbc	r31, r1
    1f6c:	ee 5e       	subi	r30, 0xEE	; 238
    1f6e:	f9 4f       	sbci	r31, 0xF9	; 249
    1f70:	80 81       	ld	r24, Z
    1f72:	0a c0       	rjmp	.+20     	; 0x1f88 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1f74:	e0 91 01 06 	lds	r30, 0x0601	; 0x800601 <input_insert_pos>
    1f78:	80 91 13 06 	lds	r24, 0x0613	; 0x800613 <bytes_in_input_buffer>
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	e8 1b       	sub	r30, r24
    1f80:	f1 09       	sbc	r31, r1
    1f82:	ee 5f       	subi	r30, 0xFE	; 254
    1f84:	f9 4f       	sbci	r31, 0xF9	; 249
    1f86:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1f88:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <bytes_in_input_buffer>
    1f8c:	91 50       	subi	r25, 0x01	; 1
    1f8e:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <bytes_in_input_buffer>
	if (interrupts_enabled)
    1f92:	22 23       	and	r18, r18
    1f94:	09 f0       	breq	.+2      	; 0x1f98 <uart_get_char+0x58>
	{
		sei();
    1f96:	78 94       	sei
	}	
	return c;
}
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	08 95       	ret

00001f9c <init_serial_stdio>:
{
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1f9c:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1fa0:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1fa4:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1fa8:	10 92 13 06 	sts	0x0613, r1	; 0x800613 <bytes_in_input_buffer>
	input_overrun = 0;
    1fac:	10 92 12 06 	sts	0x0612, r1	; 0x800612 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1fb0:	40 93 e9 04 	sts	0x04E9, r20	; 0x8004e9 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	aa 1f       	adc	r26, r26
    1fbe:	bb 1f       	adc	r27, r27
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	aa 1f       	adc	r26, r26
    1fc6:	bb 1f       	adc	r27, r27
    1fc8:	9c 01       	movw	r18, r24
    1fca:	ad 01       	movw	r20, r26
    1fcc:	22 0f       	add	r18, r18
    1fce:	33 1f       	adc	r19, r19
    1fd0:	44 1f       	adc	r20, r20
    1fd2:	55 1f       	adc	r21, r21
    1fd4:	60 e0       	ldi	r22, 0x00	; 0
    1fd6:	72 e1       	ldi	r23, 0x12	; 18
    1fd8:	8a e7       	ldi	r24, 0x7A	; 122
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__divmodsi4>
    1fe0:	ba 01       	movw	r22, r20
    1fe2:	a9 01       	movw	r20, r18
    1fe4:	4f 5f       	subi	r20, 0xFF	; 255
    1fe6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe8:	6f 4f       	sbci	r22, 0xFF	; 255
    1fea:	7f 4f       	sbci	r23, 0xFF	; 255
    1fec:	db 01       	movw	r26, r22
    1fee:	ca 01       	movw	r24, r20
    1ff0:	1a f4       	brpl	.+6      	; 0x1ff8 <init_serial_stdio+0x5c>
    1ff2:	01 96       	adiw	r24, 0x01	; 1
    1ff4:	a1 1d       	adc	r26, r1
    1ff6:	b1 1d       	adc	r27, r1
    1ff8:	b5 95       	asr	r27
    1ffa:	a7 95       	ror	r26
    1ffc:	97 95       	ror	r25
    1ffe:	87 95       	ror	r24
    2000:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    2002:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    2006:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    200a:	e1 ec       	ldi	r30, 0xC1	; 193
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	88 e1       	ldi	r24, 0x18	; 24
    2010:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
    2012:	80 81       	ld	r24, Z
    2014:	80 68       	ori	r24, 0x80	; 128
    2016:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    2018:	e4 e1       	ldi	r30, 0x14	; 20
    201a:	f6 e0       	ldi	r31, 0x06	; 6
    201c:	8c e0       	ldi	r24, 0x0C	; 12
    201e:	91 e0       	ldi	r25, 0x01	; 1
    2020:	93 83       	std	Z+3, r25	; 0x03
    2022:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    2024:	91 83       	std	Z+1, r25	; 0x01
    2026:	80 83       	st	Z, r24
    2028:	08 95       	ret

0000202a <serial_input_available>:
}

int8_t serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
    202a:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <bytes_in_input_buffer>
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	91 11       	cpse	r25, r1
    2032:	01 c0       	rjmp	.+2      	; 0x2036 <serial_input_available+0xc>
    2034:	80 e0       	ldi	r24, 0x00	; 0
}
    2036:	08 95       	ret

00002038 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    2038:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <input_insert_pos>
	bytes_in_input_buffer = 0;
    203c:	10 92 13 06 	sts	0x0613, r1	; 0x800613 <bytes_in_input_buffer>
    2040:	08 95       	ret

00002042 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    2042:	1f 92       	push	r1
    2044:	0f 92       	push	r0
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	0f 92       	push	r0
    204a:	11 24       	eor	r1, r1
    204c:	2f 93       	push	r18
    204e:	8f 93       	push	r24
    2050:	9f 93       	push	r25
    2052:	ef 93       	push	r30
    2054:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0)
    2056:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <bytes_in_out_buffer>
    205a:	88 23       	and	r24, r24
    205c:	29 f1       	breq	.+74     	; 0x20a8 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
    205e:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <out_insert_pos>
    2062:	20 91 01 05 	lds	r18, 0x0501	; 0x800501 <bytes_in_out_buffer>
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	82 1b       	sub	r24, r18
    206a:	91 09       	sbc	r25, r1
    206c:	5a f4       	brpl	.+22     	; 0x2084 <__vector_21+0x42>
		{
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    206e:	e0 91 00 05 	lds	r30, 0x0500	; 0x800500 <out_insert_pos>
    2072:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <bytes_in_out_buffer>
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	e8 1b       	sub	r30, r24
    207a:	f1 09       	sbc	r31, r1
    207c:	ef 5f       	subi	r30, 0xFF	; 255
    207e:	f9 4f       	sbci	r31, 0xF9	; 249
    2080:	90 81       	ld	r25, Z
    2082:	0a c0       	rjmp	.+20     	; 0x2098 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    2084:	e0 91 00 05 	lds	r30, 0x0500	; 0x800500 <out_insert_pos>
    2088:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <bytes_in_out_buffer>
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	e8 1b       	sub	r30, r24
    2090:	f1 09       	sbc	r31, r1
    2092:	ee 5f       	subi	r30, 0xFE	; 254
    2094:	fa 4f       	sbci	r31, 0xFA	; 250
    2096:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    2098:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <bytes_in_out_buffer>
    209c:	81 50       	subi	r24, 0x01	; 1
    209e:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    20a2:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    20a6:	05 c0       	rjmp	.+10     	; 0x20b2 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
    20a8:	e1 ec       	ldi	r30, 0xC1	; 193
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	8f 7d       	andi	r24, 0xDF	; 223
    20b0:	80 83       	st	Z, r24
	}
}
    20b2:	ff 91       	pop	r31
    20b4:	ef 91       	pop	r30
    20b6:	9f 91       	pop	r25
    20b8:	8f 91       	pop	r24
    20ba:	2f 91       	pop	r18
    20bc:	0f 90       	pop	r0
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	0f 90       	pop	r0
    20c2:	1f 90       	pop	r1
    20c4:	18 95       	reti

000020c6 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    20c6:	1f 92       	push	r1
    20c8:	0f 92       	push	r0
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	0f 92       	push	r0
    20ce:	11 24       	eor	r1, r1
    20d0:	2f 93       	push	r18
    20d2:	3f 93       	push	r19
    20d4:	4f 93       	push	r20
    20d6:	5f 93       	push	r21
    20d8:	6f 93       	push	r22
    20da:	7f 93       	push	r23
    20dc:	8f 93       	push	r24
    20de:	9f 93       	push	r25
    20e0:	af 93       	push	r26
    20e2:	bf 93       	push	r27
    20e4:	cf 93       	push	r28
    20e6:	ef 93       	push	r30
    20e8:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    20ea:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
    20ee:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <do_echo>
    20f2:	88 23       	and	r24, r24
    20f4:	49 f0       	breq	.+18     	; 0x2108 <__vector_20+0x42>
    20f6:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <bytes_in_out_buffer>
    20fa:	8f 3f       	cpi	r24, 0xFF	; 255
    20fc:	29 f0       	breq	.+10     	; 0x2108 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    20fe:	60 e0       	ldi	r22, 0x00	; 0
    2100:	70 e0       	ldi	r23, 0x00	; 0
    2102:	8c 2f       	mov	r24, r28
    2104:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
    2108:	80 91 13 06 	lds	r24, 0x0613	; 0x800613 <bytes_in_input_buffer>
    210c:	80 31       	cpi	r24, 0x10	; 16
    210e:	20 f0       	brcs	.+8      	; 0x2118 <__vector_20+0x52>
	{
		input_overrun = 1;
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <input_overrun>
    2116:	18 c0       	rjmp	.+48     	; 0x2148 <__vector_20+0x82>
	} else
	{
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r')
    2118:	cd 30       	cpi	r28, 0x0D	; 13
    211a:	09 f4       	brne	.+2      	; 0x211e <__vector_20+0x58>
		{
			c = '\n';
    211c:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    211e:	e0 91 01 06 	lds	r30, 0x0601	; 0x800601 <input_insert_pos>
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	8e 0f       	add	r24, r30
    2126:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <input_insert_pos>
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	ee 5f       	subi	r30, 0xFE	; 254
    212e:	f9 4f       	sbci	r31, 0xF9	; 249
    2130:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    2132:	80 91 13 06 	lds	r24, 0x0613	; 0x800613 <bytes_in_input_buffer>
    2136:	8f 5f       	subi	r24, 0xFF	; 255
    2138:	80 93 13 06 	sts	0x0613, r24	; 0x800613 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
    213c:	80 91 01 06 	lds	r24, 0x0601	; 0x800601 <input_insert_pos>
    2140:	80 31       	cpi	r24, 0x10	; 16
    2142:	11 f4       	brne	.+4      	; 0x2148 <__vector_20+0x82>
		{
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    2144:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <input_insert_pos>
		}
	}
}
    2148:	ff 91       	pop	r31
    214a:	ef 91       	pop	r30
    214c:	cf 91       	pop	r28
    214e:	bf 91       	pop	r27
    2150:	af 91       	pop	r26
    2152:	9f 91       	pop	r25
    2154:	8f 91       	pop	r24
    2156:	7f 91       	pop	r23
    2158:	6f 91       	pop	r22
    215a:	5f 91       	pop	r21
    215c:	4f 91       	pop	r20
    215e:	3f 91       	pop	r19
    2160:	2f 91       	pop	r18
    2162:	0f 90       	pop	r0
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	0f 90       	pop	r0
    2168:	1f 90       	pop	r1
    216a:	18 95       	reti

0000216c <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider)
{
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    216c:	94 b1       	in	r25, 0x04	; 4
    216e:	90 6b       	ori	r25, 0xB0	; 176
    2170:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
    2172:	95 b1       	in	r25, 0x05	; 5
    2174:	90 61       	ori	r25, 0x10	; 16
    2176:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    2178:	90 e5       	ldi	r25, 0x50	; 80
    217a:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider)
    217c:	88 30       	cpi	r24, 0x08	; 8
    217e:	21 f0       	breq	.+8      	; 0x2188 <spi_setup_master+0x1c>
    2180:	80 32       	cpi	r24, 0x20	; 32
    2182:	11 f0       	breq	.+4      	; 0x2188 <spi_setup_master+0x1c>
    2184:	82 30       	cpi	r24, 0x02	; 2
    2186:	19 f4       	brne	.+6      	; 0x218e <spi_setup_master+0x22>
	{
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
    2188:	91 e0       	ldi	r25, 0x01	; 1
    218a:	9d bd       	out	0x2d, r25	; 45
			break;
    218c:	01 c0       	rjmp	.+2      	; 0x2190 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    218e:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
    2190:	80 32       	cpi	r24, 0x20	; 32
    2192:	69 f0       	breq	.+26     	; 0x21ae <spi_setup_master+0x42>
    2194:	28 f4       	brcc	.+10     	; 0x21a0 <spi_setup_master+0x34>
    2196:	88 30       	cpi	r24, 0x08	; 8
    2198:	71 f0       	breq	.+28     	; 0x21b6 <spi_setup_master+0x4a>
    219a:	80 31       	cpi	r24, 0x10	; 16
    219c:	61 f0       	breq	.+24     	; 0x21b6 <spi_setup_master+0x4a>
    219e:	0e c0       	rjmp	.+28     	; 0x21bc <spi_setup_master+0x50>
    21a0:	80 34       	cpi	r24, 0x40	; 64
    21a2:	29 f0       	breq	.+10     	; 0x21ae <spi_setup_master+0x42>
    21a4:	80 38       	cpi	r24, 0x80	; 128
    21a6:	51 f4       	brne	.+20     	; 0x21bc <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
    21a8:	8c b5       	in	r24, 0x2c	; 44
    21aa:	81 60       	ori	r24, 0x01	; 1
    21ac:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
    21ae:	8c b5       	in	r24, 0x2c	; 44
    21b0:	82 60       	ori	r24, 0x02	; 2
    21b2:	8c bd       	out	0x2c, r24	; 44
			break;
    21b4:	03 c0       	rjmp	.+6      	; 0x21bc <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
    21b6:	8c b5       	in	r24, 0x2c	; 44
    21b8:	81 60       	ori	r24, 0x01	; 1
    21ba:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
    21bc:	85 b1       	in	r24, 0x05	; 5
    21be:	8f 7e       	andi	r24, 0xEF	; 239
    21c0:	85 b9       	out	0x05, r24	; 5
    21c2:	08 95       	ret

000021c4 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    21c4:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    21c6:	0d b4       	in	r0, 0x2d	; 45
    21c8:	07 fe       	sbrs	r0, 7
    21ca:	fd cf       	rjmp	.-6      	; 0x21c6 <spi_send_byte+0x2>
	{
		; // wait
	}
	return SPDR0;
    21cc:	8e b5       	in	r24, 0x2e	; 46
}
    21ce:	08 95       	ret

000021d0 <move_terminal_cursor>:
}

void reverse_video(void)
{
	printf_P(PSTR("\x1b[7m"));
}
    21d0:	9f 93       	push	r25
    21d2:	8f 93       	push	r24
    21d4:	7f 93       	push	r23
    21d6:	6f 93       	push	r22
    21d8:	8d e7       	ldi	r24, 0x7D	; 125
    21da:	93 e0       	ldi	r25, 0x03	; 3
    21dc:	9f 93       	push	r25
    21de:	8f 93       	push	r24
    21e0:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	08 95       	ret

000021f2 <clear_terminal>:

void clear_terminal(void)
{
	printf_P(PSTR("\x1b[2J"));
    21f2:	88 e7       	ldi	r24, 0x78	; 120
    21f4:	93 e0       	ldi	r25, 0x03	; 3
    21f6:	9f 93       	push	r25
    21f8:	8f 93       	push	r24
    21fa:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
}
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	08 95       	ret

00002204 <clear_to_end_of_line>:

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
    2204:	84 e7       	ldi	r24, 0x74	; 116
    2206:	93 e0       	ldi	r25, 0x03	; 3
    2208:	9f 93       	push	r25
    220a:	8f 93       	push	r24
    220c:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
}
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	08 95       	ret

00002216 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    2216:	1f 92       	push	r1
    2218:	8f 93       	push	r24
    221a:	8e e6       	ldi	r24, 0x6E	; 110
    221c:	93 e0       	ldi	r25, 0x03	; 3
    221e:	9f 93       	push	r25
    2220:	8f 93       	push	r24
    2222:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
}
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	08 95       	ret

00002230 <hide_cursor>:

void hide_cursor()
{
	printf_P(PSTR("\x1b[?25l"));
    2230:	87 e6       	ldi	r24, 0x67	; 103
    2232:	93 e0       	ldi	r25, 0x03	; 3
    2234:	9f 93       	push	r25
    2236:	8f 93       	push	r24
    2238:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
}
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	08 95       	ret

00002242 <show_cursor>:

void show_cursor()
{
	printf_P(PSTR("\x1b[?25h"));
    2242:	80 e6       	ldi	r24, 0x60	; 96
    2244:	93 e0       	ldi	r25, 0x03	; 3
    2246:	9f 93       	push	r25
    2248:	8f 93       	push	r24
    224a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <printf_P>
}
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	08 95       	ret

00002254 <init_timer0>:
void init_timer0(void)
{
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
    2254:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <clock_ticks_ms>
    2258:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <clock_ticks_ms+0x1>
    225c:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <clock_ticks_ms+0x2>
    2260:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    2264:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    2266:	8c e7       	ldi	r24, 0x7C	; 124
    2268:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
    226a:	92 e0       	ldi	r25, 0x02	; 2
    226c:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    226e:	83 e0       	ldi	r24, 0x03	; 3
    2270:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
    2272:	ee e6       	ldi	r30, 0x6E	; 110
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	82 60       	ori	r24, 0x02	; 2
    227a:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
    227c:	95 bb       	out	0x15, r25	; 21
    227e:	08 95       	ret

00002280 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    2280:	8f b7       	in	r24, 0x3f	; 63
    2282:	28 2f       	mov	r18, r24
    2284:	20 78       	andi	r18, 0x80	; 128
	cli();
    2286:	f8 94       	cli
	return_value = clock_ticks_ms;
    2288:	60 91 ea 04 	lds	r22, 0x04EA	; 0x8004ea <clock_ticks_ms>
    228c:	70 91 eb 04 	lds	r23, 0x04EB	; 0x8004eb <clock_ticks_ms+0x1>
    2290:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <clock_ticks_ms+0x2>
    2294:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    2298:	22 23       	and	r18, r18
    229a:	09 f0       	breq	.+2      	; 0x229e <get_current_time+0x1e>
	{
		sei();
    229c:	78 94       	sei
	}
	return return_value;
}
    229e:	08 95       	ret

000022a0 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
    22a0:	1f 92       	push	r1
    22a2:	0f 92       	push	r0
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	0f 92       	push	r0
    22a8:	11 24       	eor	r1, r1
    22aa:	8f 93       	push	r24
    22ac:	9f 93       	push	r25
    22ae:	af 93       	push	r26
    22b0:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
    22b2:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <clock_ticks_ms>
    22b6:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <clock_ticks_ms+0x1>
    22ba:	a0 91 ec 04 	lds	r26, 0x04EC	; 0x8004ec <clock_ticks_ms+0x2>
    22be:	b0 91 ed 04 	lds	r27, 0x04ED	; 0x8004ed <clock_ticks_ms+0x3>
    22c2:	01 96       	adiw	r24, 0x01	; 1
    22c4:	a1 1d       	adc	r26, r1
    22c6:	b1 1d       	adc	r27, r1
    22c8:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <clock_ticks_ms>
    22cc:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <clock_ticks_ms+0x1>
    22d0:	a0 93 ec 04 	sts	0x04EC, r26	; 0x8004ec <clock_ticks_ms+0x2>
    22d4:	b0 93 ed 04 	sts	0x04ED, r27	; 0x8004ed <clock_ticks_ms+0x3>
}
    22d8:	bf 91       	pop	r27
    22da:	af 91       	pop	r26
    22dc:	9f 91       	pop	r25
    22de:	8f 91       	pop	r24
    22e0:	0f 90       	pop	r0
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	0f 90       	pop	r0
    22e6:	1f 90       	pop	r1
    22e8:	18 95       	reti

000022ea <init_timer1>:
 */


void init_timer1(void)
{
	freq = 1;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	90 93 f1 04 	sts	0x04F1, r25	; 0x8004f1 <freq+0x1>
    22f2:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <freq>
	duty_cycle = 0;
    22f6:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <duty_cycle>
    22fa:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <duty_cycle+0x1>
    22fe:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <duty_cycle+0x2>
    2302:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <duty_cycle+0x3>
	
	uint16_t clockperiod = (1000000UL / freq);
	uint16_t pulsewidth = (duty_cycle * clockperiod)/100;
	
	// Set the maximum count value for timer/counter 1 to be one less than the clockperiod
	OCR1A = clockperiod - 1;
    2306:	8f e3       	ldi	r24, 0x3F	; 63
    2308:	92 e4       	ldi	r25, 0x42	; 66
    230a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    230e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// Set the count compare value based on the pulse width. The value will be 1 less
	// than the pulse width - unless the pulse width is 0.
	if(pulsewidth == 0) {
		OCR1B = 0;
    2312:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2316:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	//set up timer 1 for;
	//Fast PWM, counting from 0 to the value in OCR1A
	//before reseting to 0. Count at 1MHz (CLK/8).
	//Configure output OC1B to be CTC non-inverting mode.
	TCCR1A = (1 << COM1B1) | (1 << WGM10) | (1 <<WGM11);
    231a:	83 e2       	ldi	r24, 0x23	; 35
    231c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << CS11) | (1 << WGM12) |(1 << WGM13);
    2320:	8a e1       	ldi	r24, 0x1A	; 26
    2322:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    2326:	08 95       	ret

00002328 <note_sound>:
	
}

void note_sound() {
    2328:	cf 92       	push	r12
    232a:	df 92       	push	r13
    232c:	ef 92       	push	r14
    232e:	ff 92       	push	r15
	
	uint16_t clockperiod = (1000000UL / freq);
    2330:	20 91 f0 04 	lds	r18, 0x04F0	; 0x8004f0 <freq>
    2334:	30 91 f1 04 	lds	r19, 0x04F1	; 0x8004f1 <freq+0x1>
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	50 e0       	ldi	r21, 0x00	; 0
    233c:	60 e4       	ldi	r22, 0x40	; 64
    233e:	72 e4       	ldi	r23, 0x42	; 66
    2340:	8f e0       	ldi	r24, 0x0F	; 15
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	0e 94 b1 13 	call	0x2762	; 0x2762 <__udivmodsi4>
    2348:	69 01       	movw	r12, r18
    234a:	7a 01       	movw	r14, r20
	uint16_t pulsewidth = (duty_cycle * clockperiod)/100;
    234c:	b9 01       	movw	r22, r18
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 a2 12 	call	0x2544	; 0x2544 <__floatunsisf>
    2356:	20 91 f8 04 	lds	r18, 0x04F8	; 0x8004f8 <duty_cycle>
    235a:	30 91 f9 04 	lds	r19, 0x04F9	; 0x8004f9 <duty_cycle+0x1>
    235e:	40 91 fa 04 	lds	r20, 0x04FA	; 0x8004fa <duty_cycle+0x2>
    2362:	50 91 fb 04 	lds	r21, 0x04FB	; 0x8004fb <duty_cycle+0x3>
    2366:	0e 94 30 13 	call	0x2660	; 0x2660 <__mulsf3>
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	48 ec       	ldi	r20, 0xC8	; 200
    2370:	52 e4       	ldi	r21, 0x42	; 66
    2372:	0e 94 01 12 	call	0x2402	; 0x2402 <__divsf3>
    2376:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__fixunssfsi>
	
	OCR1A = clockperiod - 1;
    237a:	21 e0       	ldi	r18, 0x01	; 1
    237c:	c2 1a       	sub	r12, r18
    237e:	d1 08       	sbc	r13, r1
    2380:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2384:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = pulsewidth - 1;
    2388:	61 50       	subi	r22, 0x01	; 1
    238a:	71 09       	sbc	r23, r1
    238c:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2390:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    2394:	ff 90       	pop	r15
    2396:	ef 90       	pop	r14
    2398:	df 90       	pop	r13
    239a:	cf 90       	pop	r12
    239c:	08 95       	ret

0000239e <init_timer2>:
void init_timer2(void)
{
	
	//TCNT2 = 0;
	//set up so that there is an interrupt every 10ms (100 times per second)
	OCR2A = 77; //clock divided by 1024 - count for 10000 cycles
    239e:	8d e4       	ldi	r24, 0x4D	; 77
    23a0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = 0; //CTC mode
    23a4:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1<<WGM22) | (1<<CS22) | (1<<CS20); // Divide clock by 1024(PRE) 
    23a8:	8d e0       	ldi	r24, 0x0D	; 13
    23aa:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	//enable interrupt on timer on output compare match
	TIMSK2 = (1<<OCIE2A);
    23ae:	82 e0       	ldi	r24, 0x02	; 2
    23b0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	
	//Ensure interrupt flag is cleared
	TIFR2 = (1<<OCF2A);
    23b4:	87 bb       	out	0x17, r24	; 23
	
	// Turn on global interrupts
	sei();
    23b6:	78 94       	sei
    23b8:	08 95       	ret

000023ba <__vector_9>:
}

ISR(TIMER2_COMPA_vect) {
    23ba:	1f 92       	push	r1
    23bc:	0f 92       	push	r0
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	0f 92       	push	r0
    23c2:	11 24       	eor	r1, r1
    23c4:	2f 93       	push	r18
    23c6:	3f 93       	push	r19
    23c8:	4f 93       	push	r20
    23ca:	5f 93       	push	r21
    23cc:	6f 93       	push	r22
    23ce:	7f 93       	push	r23
    23d0:	8f 93       	push	r24
    23d2:	9f 93       	push	r25
    23d4:	af 93       	push	r26
    23d6:	bf 93       	push	r27
    23d8:	ef 93       	push	r30
    23da:	ff 93       	push	r31
	ssd_display();
    23dc:	0e 94 a9 0b 	call	0x1752	; 0x1752 <ssd_display>
}
    23e0:	ff 91       	pop	r31
    23e2:	ef 91       	pop	r30
    23e4:	bf 91       	pop	r27
    23e6:	af 91       	pop	r26
    23e8:	9f 91       	pop	r25
    23ea:	8f 91       	pop	r24
    23ec:	7f 91       	pop	r23
    23ee:	6f 91       	pop	r22
    23f0:	5f 91       	pop	r21
    23f2:	4f 91       	pop	r20
    23f4:	3f 91       	pop	r19
    23f6:	2f 91       	pop	r18
    23f8:	0f 90       	pop	r0
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	0f 90       	pop	r0
    23fe:	1f 90       	pop	r1
    2400:	18 95       	reti

00002402 <__divsf3>:
    2402:	0e 94 15 12 	call	0x242a	; 0x242a <__divsf3x>
    2406:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__fp_round>
    240a:	0e 94 ef 12 	call	0x25de	; 0x25de <__fp_pscB>
    240e:	58 f0       	brcs	.+22     	; 0x2426 <__divsf3+0x24>
    2410:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__fp_pscA>
    2414:	40 f0       	brcs	.+16     	; 0x2426 <__divsf3+0x24>
    2416:	29 f4       	brne	.+10     	; 0x2422 <__divsf3+0x20>
    2418:	5f 3f       	cpi	r21, 0xFF	; 255
    241a:	29 f0       	breq	.+10     	; 0x2426 <__divsf3+0x24>
    241c:	0c 94 df 12 	jmp	0x25be	; 0x25be <__fp_inf>
    2420:	51 11       	cpse	r21, r1
    2422:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__fp_szero>
    2426:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <__fp_nan>

0000242a <__divsf3x>:
    242a:	0e 94 07 13 	call	0x260e	; 0x260e <__fp_split3>
    242e:	68 f3       	brcs	.-38     	; 0x240a <__divsf3+0x8>

00002430 <__divsf3_pse>:
    2430:	99 23       	and	r25, r25
    2432:	b1 f3       	breq	.-20     	; 0x2420 <__divsf3+0x1e>
    2434:	55 23       	and	r21, r21
    2436:	91 f3       	breq	.-28     	; 0x241c <__divsf3+0x1a>
    2438:	95 1b       	sub	r25, r21
    243a:	55 0b       	sbc	r21, r21
    243c:	bb 27       	eor	r27, r27
    243e:	aa 27       	eor	r26, r26
    2440:	62 17       	cp	r22, r18
    2442:	73 07       	cpc	r23, r19
    2444:	84 07       	cpc	r24, r20
    2446:	38 f0       	brcs	.+14     	; 0x2456 <__divsf3_pse+0x26>
    2448:	9f 5f       	subi	r25, 0xFF	; 255
    244a:	5f 4f       	sbci	r21, 0xFF	; 255
    244c:	22 0f       	add	r18, r18
    244e:	33 1f       	adc	r19, r19
    2450:	44 1f       	adc	r20, r20
    2452:	aa 1f       	adc	r26, r26
    2454:	a9 f3       	breq	.-22     	; 0x2440 <__divsf3_pse+0x10>
    2456:	35 d0       	rcall	.+106    	; 0x24c2 <__divsf3_pse+0x92>
    2458:	0e 2e       	mov	r0, r30
    245a:	3a f0       	brmi	.+14     	; 0x246a <__divsf3_pse+0x3a>
    245c:	e0 e8       	ldi	r30, 0x80	; 128
    245e:	32 d0       	rcall	.+100    	; 0x24c4 <__divsf3_pse+0x94>
    2460:	91 50       	subi	r25, 0x01	; 1
    2462:	50 40       	sbci	r21, 0x00	; 0
    2464:	e6 95       	lsr	r30
    2466:	00 1c       	adc	r0, r0
    2468:	ca f7       	brpl	.-14     	; 0x245c <__divsf3_pse+0x2c>
    246a:	2b d0       	rcall	.+86     	; 0x24c2 <__divsf3_pse+0x92>
    246c:	fe 2f       	mov	r31, r30
    246e:	29 d0       	rcall	.+82     	; 0x24c2 <__divsf3_pse+0x92>
    2470:	66 0f       	add	r22, r22
    2472:	77 1f       	adc	r23, r23
    2474:	88 1f       	adc	r24, r24
    2476:	bb 1f       	adc	r27, r27
    2478:	26 17       	cp	r18, r22
    247a:	37 07       	cpc	r19, r23
    247c:	48 07       	cpc	r20, r24
    247e:	ab 07       	cpc	r26, r27
    2480:	b0 e8       	ldi	r27, 0x80	; 128
    2482:	09 f0       	breq	.+2      	; 0x2486 <__divsf3_pse+0x56>
    2484:	bb 0b       	sbc	r27, r27
    2486:	80 2d       	mov	r24, r0
    2488:	bf 01       	movw	r22, r30
    248a:	ff 27       	eor	r31, r31
    248c:	93 58       	subi	r25, 0x83	; 131
    248e:	5f 4f       	sbci	r21, 0xFF	; 255
    2490:	3a f0       	brmi	.+14     	; 0x24a0 <__divsf3_pse+0x70>
    2492:	9e 3f       	cpi	r25, 0xFE	; 254
    2494:	51 05       	cpc	r21, r1
    2496:	78 f0       	brcs	.+30     	; 0x24b6 <__divsf3_pse+0x86>
    2498:	0c 94 df 12 	jmp	0x25be	; 0x25be <__fp_inf>
    249c:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__fp_szero>
    24a0:	5f 3f       	cpi	r21, 0xFF	; 255
    24a2:	e4 f3       	brlt	.-8      	; 0x249c <__divsf3_pse+0x6c>
    24a4:	98 3e       	cpi	r25, 0xE8	; 232
    24a6:	d4 f3       	brlt	.-12     	; 0x249c <__divsf3_pse+0x6c>
    24a8:	86 95       	lsr	r24
    24aa:	77 95       	ror	r23
    24ac:	67 95       	ror	r22
    24ae:	b7 95       	ror	r27
    24b0:	f7 95       	ror	r31
    24b2:	9f 5f       	subi	r25, 0xFF	; 255
    24b4:	c9 f7       	brne	.-14     	; 0x24a8 <__divsf3_pse+0x78>
    24b6:	88 0f       	add	r24, r24
    24b8:	91 1d       	adc	r25, r1
    24ba:	96 95       	lsr	r25
    24bc:	87 95       	ror	r24
    24be:	97 f9       	bld	r25, 7
    24c0:	08 95       	ret
    24c2:	e1 e0       	ldi	r30, 0x01	; 1
    24c4:	66 0f       	add	r22, r22
    24c6:	77 1f       	adc	r23, r23
    24c8:	88 1f       	adc	r24, r24
    24ca:	bb 1f       	adc	r27, r27
    24cc:	62 17       	cp	r22, r18
    24ce:	73 07       	cpc	r23, r19
    24d0:	84 07       	cpc	r24, r20
    24d2:	ba 07       	cpc	r27, r26
    24d4:	20 f0       	brcs	.+8      	; 0x24de <__divsf3_pse+0xae>
    24d6:	62 1b       	sub	r22, r18
    24d8:	73 0b       	sbc	r23, r19
    24da:	84 0b       	sbc	r24, r20
    24dc:	ba 0b       	sbc	r27, r26
    24de:	ee 1f       	adc	r30, r30
    24e0:	88 f7       	brcc	.-30     	; 0x24c4 <__divsf3_pse+0x94>
    24e2:	e0 95       	com	r30
    24e4:	08 95       	ret

000024e6 <__fixunssfsi>:
    24e6:	0e 94 0f 13 	call	0x261e	; 0x261e <__fp_splitA>
    24ea:	88 f0       	brcs	.+34     	; 0x250e <__fixunssfsi+0x28>
    24ec:	9f 57       	subi	r25, 0x7F	; 127
    24ee:	98 f0       	brcs	.+38     	; 0x2516 <__fixunssfsi+0x30>
    24f0:	b9 2f       	mov	r27, r25
    24f2:	99 27       	eor	r25, r25
    24f4:	b7 51       	subi	r27, 0x17	; 23
    24f6:	b0 f0       	brcs	.+44     	; 0x2524 <__fixunssfsi+0x3e>
    24f8:	e1 f0       	breq	.+56     	; 0x2532 <__fixunssfsi+0x4c>
    24fa:	66 0f       	add	r22, r22
    24fc:	77 1f       	adc	r23, r23
    24fe:	88 1f       	adc	r24, r24
    2500:	99 1f       	adc	r25, r25
    2502:	1a f0       	brmi	.+6      	; 0x250a <__fixunssfsi+0x24>
    2504:	ba 95       	dec	r27
    2506:	c9 f7       	brne	.-14     	; 0x24fa <__fixunssfsi+0x14>
    2508:	14 c0       	rjmp	.+40     	; 0x2532 <__fixunssfsi+0x4c>
    250a:	b1 30       	cpi	r27, 0x01	; 1
    250c:	91 f0       	breq	.+36     	; 0x2532 <__fixunssfsi+0x4c>
    250e:	0e 94 29 13 	call	0x2652	; 0x2652 <__fp_zero>
    2512:	b1 e0       	ldi	r27, 0x01	; 1
    2514:	08 95       	ret
    2516:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__fp_zero>
    251a:	67 2f       	mov	r22, r23
    251c:	78 2f       	mov	r23, r24
    251e:	88 27       	eor	r24, r24
    2520:	b8 5f       	subi	r27, 0xF8	; 248
    2522:	39 f0       	breq	.+14     	; 0x2532 <__fixunssfsi+0x4c>
    2524:	b9 3f       	cpi	r27, 0xF9	; 249
    2526:	cc f3       	brlt	.-14     	; 0x251a <__fixunssfsi+0x34>
    2528:	86 95       	lsr	r24
    252a:	77 95       	ror	r23
    252c:	67 95       	ror	r22
    252e:	b3 95       	inc	r27
    2530:	d9 f7       	brne	.-10     	; 0x2528 <__fixunssfsi+0x42>
    2532:	3e f4       	brtc	.+14     	; 0x2542 <__fixunssfsi+0x5c>
    2534:	90 95       	com	r25
    2536:	80 95       	com	r24
    2538:	70 95       	com	r23
    253a:	61 95       	neg	r22
    253c:	7f 4f       	sbci	r23, 0xFF	; 255
    253e:	8f 4f       	sbci	r24, 0xFF	; 255
    2540:	9f 4f       	sbci	r25, 0xFF	; 255
    2542:	08 95       	ret

00002544 <__floatunsisf>:
    2544:	e8 94       	clt
    2546:	09 c0       	rjmp	.+18     	; 0x255a <__floatsisf+0x12>

00002548 <__floatsisf>:
    2548:	97 fb       	bst	r25, 7
    254a:	3e f4       	brtc	.+14     	; 0x255a <__floatsisf+0x12>
    254c:	90 95       	com	r25
    254e:	80 95       	com	r24
    2550:	70 95       	com	r23
    2552:	61 95       	neg	r22
    2554:	7f 4f       	sbci	r23, 0xFF	; 255
    2556:	8f 4f       	sbci	r24, 0xFF	; 255
    2558:	9f 4f       	sbci	r25, 0xFF	; 255
    255a:	99 23       	and	r25, r25
    255c:	a9 f0       	breq	.+42     	; 0x2588 <__floatsisf+0x40>
    255e:	f9 2f       	mov	r31, r25
    2560:	96 e9       	ldi	r25, 0x96	; 150
    2562:	bb 27       	eor	r27, r27
    2564:	93 95       	inc	r25
    2566:	f6 95       	lsr	r31
    2568:	87 95       	ror	r24
    256a:	77 95       	ror	r23
    256c:	67 95       	ror	r22
    256e:	b7 95       	ror	r27
    2570:	f1 11       	cpse	r31, r1
    2572:	f8 cf       	rjmp	.-16     	; 0x2564 <__floatsisf+0x1c>
    2574:	fa f4       	brpl	.+62     	; 0x25b4 <__floatsisf+0x6c>
    2576:	bb 0f       	add	r27, r27
    2578:	11 f4       	brne	.+4      	; 0x257e <__floatsisf+0x36>
    257a:	60 ff       	sbrs	r22, 0
    257c:	1b c0       	rjmp	.+54     	; 0x25b4 <__floatsisf+0x6c>
    257e:	6f 5f       	subi	r22, 0xFF	; 255
    2580:	7f 4f       	sbci	r23, 0xFF	; 255
    2582:	8f 4f       	sbci	r24, 0xFF	; 255
    2584:	9f 4f       	sbci	r25, 0xFF	; 255
    2586:	16 c0       	rjmp	.+44     	; 0x25b4 <__floatsisf+0x6c>
    2588:	88 23       	and	r24, r24
    258a:	11 f0       	breq	.+4      	; 0x2590 <__floatsisf+0x48>
    258c:	96 e9       	ldi	r25, 0x96	; 150
    258e:	11 c0       	rjmp	.+34     	; 0x25b2 <__floatsisf+0x6a>
    2590:	77 23       	and	r23, r23
    2592:	21 f0       	breq	.+8      	; 0x259c <__floatsisf+0x54>
    2594:	9e e8       	ldi	r25, 0x8E	; 142
    2596:	87 2f       	mov	r24, r23
    2598:	76 2f       	mov	r23, r22
    259a:	05 c0       	rjmp	.+10     	; 0x25a6 <__floatsisf+0x5e>
    259c:	66 23       	and	r22, r22
    259e:	71 f0       	breq	.+28     	; 0x25bc <__floatsisf+0x74>
    25a0:	96 e8       	ldi	r25, 0x86	; 134
    25a2:	86 2f       	mov	r24, r22
    25a4:	70 e0       	ldi	r23, 0x00	; 0
    25a6:	60 e0       	ldi	r22, 0x00	; 0
    25a8:	2a f0       	brmi	.+10     	; 0x25b4 <__floatsisf+0x6c>
    25aa:	9a 95       	dec	r25
    25ac:	66 0f       	add	r22, r22
    25ae:	77 1f       	adc	r23, r23
    25b0:	88 1f       	adc	r24, r24
    25b2:	da f7       	brpl	.-10     	; 0x25aa <__floatsisf+0x62>
    25b4:	88 0f       	add	r24, r24
    25b6:	96 95       	lsr	r25
    25b8:	87 95       	ror	r24
    25ba:	97 f9       	bld	r25, 7
    25bc:	08 95       	ret

000025be <__fp_inf>:
    25be:	97 f9       	bld	r25, 7
    25c0:	9f 67       	ori	r25, 0x7F	; 127
    25c2:	80 e8       	ldi	r24, 0x80	; 128
    25c4:	70 e0       	ldi	r23, 0x00	; 0
    25c6:	60 e0       	ldi	r22, 0x00	; 0
    25c8:	08 95       	ret

000025ca <__fp_nan>:
    25ca:	9f ef       	ldi	r25, 0xFF	; 255
    25cc:	80 ec       	ldi	r24, 0xC0	; 192
    25ce:	08 95       	ret

000025d0 <__fp_pscA>:
    25d0:	00 24       	eor	r0, r0
    25d2:	0a 94       	dec	r0
    25d4:	16 16       	cp	r1, r22
    25d6:	17 06       	cpc	r1, r23
    25d8:	18 06       	cpc	r1, r24
    25da:	09 06       	cpc	r0, r25
    25dc:	08 95       	ret

000025de <__fp_pscB>:
    25de:	00 24       	eor	r0, r0
    25e0:	0a 94       	dec	r0
    25e2:	12 16       	cp	r1, r18
    25e4:	13 06       	cpc	r1, r19
    25e6:	14 06       	cpc	r1, r20
    25e8:	05 06       	cpc	r0, r21
    25ea:	08 95       	ret

000025ec <__fp_round>:
    25ec:	09 2e       	mov	r0, r25
    25ee:	03 94       	inc	r0
    25f0:	00 0c       	add	r0, r0
    25f2:	11 f4       	brne	.+4      	; 0x25f8 <__fp_round+0xc>
    25f4:	88 23       	and	r24, r24
    25f6:	52 f0       	brmi	.+20     	; 0x260c <__fp_round+0x20>
    25f8:	bb 0f       	add	r27, r27
    25fa:	40 f4       	brcc	.+16     	; 0x260c <__fp_round+0x20>
    25fc:	bf 2b       	or	r27, r31
    25fe:	11 f4       	brne	.+4      	; 0x2604 <__fp_round+0x18>
    2600:	60 ff       	sbrs	r22, 0
    2602:	04 c0       	rjmp	.+8      	; 0x260c <__fp_round+0x20>
    2604:	6f 5f       	subi	r22, 0xFF	; 255
    2606:	7f 4f       	sbci	r23, 0xFF	; 255
    2608:	8f 4f       	sbci	r24, 0xFF	; 255
    260a:	9f 4f       	sbci	r25, 0xFF	; 255
    260c:	08 95       	ret

0000260e <__fp_split3>:
    260e:	57 fd       	sbrc	r21, 7
    2610:	90 58       	subi	r25, 0x80	; 128
    2612:	44 0f       	add	r20, r20
    2614:	55 1f       	adc	r21, r21
    2616:	59 f0       	breq	.+22     	; 0x262e <__fp_splitA+0x10>
    2618:	5f 3f       	cpi	r21, 0xFF	; 255
    261a:	71 f0       	breq	.+28     	; 0x2638 <__fp_splitA+0x1a>
    261c:	47 95       	ror	r20

0000261e <__fp_splitA>:
    261e:	88 0f       	add	r24, r24
    2620:	97 fb       	bst	r25, 7
    2622:	99 1f       	adc	r25, r25
    2624:	61 f0       	breq	.+24     	; 0x263e <__fp_splitA+0x20>
    2626:	9f 3f       	cpi	r25, 0xFF	; 255
    2628:	79 f0       	breq	.+30     	; 0x2648 <__fp_splitA+0x2a>
    262a:	87 95       	ror	r24
    262c:	08 95       	ret
    262e:	12 16       	cp	r1, r18
    2630:	13 06       	cpc	r1, r19
    2632:	14 06       	cpc	r1, r20
    2634:	55 1f       	adc	r21, r21
    2636:	f2 cf       	rjmp	.-28     	; 0x261c <__fp_split3+0xe>
    2638:	46 95       	lsr	r20
    263a:	f1 df       	rcall	.-30     	; 0x261e <__fp_splitA>
    263c:	08 c0       	rjmp	.+16     	; 0x264e <__fp_splitA+0x30>
    263e:	16 16       	cp	r1, r22
    2640:	17 06       	cpc	r1, r23
    2642:	18 06       	cpc	r1, r24
    2644:	99 1f       	adc	r25, r25
    2646:	f1 cf       	rjmp	.-30     	; 0x262a <__fp_splitA+0xc>
    2648:	86 95       	lsr	r24
    264a:	71 05       	cpc	r23, r1
    264c:	61 05       	cpc	r22, r1
    264e:	08 94       	sec
    2650:	08 95       	ret

00002652 <__fp_zero>:
    2652:	e8 94       	clt

00002654 <__fp_szero>:
    2654:	bb 27       	eor	r27, r27
    2656:	66 27       	eor	r22, r22
    2658:	77 27       	eor	r23, r23
    265a:	cb 01       	movw	r24, r22
    265c:	97 f9       	bld	r25, 7
    265e:	08 95       	ret

00002660 <__mulsf3>:
    2660:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3x>
    2664:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__fp_round>
    2668:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__fp_pscA>
    266c:	38 f0       	brcs	.+14     	; 0x267c <__mulsf3+0x1c>
    266e:	0e 94 ef 12 	call	0x25de	; 0x25de <__fp_pscB>
    2672:	20 f0       	brcs	.+8      	; 0x267c <__mulsf3+0x1c>
    2674:	95 23       	and	r25, r21
    2676:	11 f0       	breq	.+4      	; 0x267c <__mulsf3+0x1c>
    2678:	0c 94 df 12 	jmp	0x25be	; 0x25be <__fp_inf>
    267c:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <__fp_nan>
    2680:	11 24       	eor	r1, r1
    2682:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__fp_szero>

00002686 <__mulsf3x>:
    2686:	0e 94 07 13 	call	0x260e	; 0x260e <__fp_split3>
    268a:	70 f3       	brcs	.-36     	; 0x2668 <__mulsf3+0x8>

0000268c <__mulsf3_pse>:
    268c:	95 9f       	mul	r25, r21
    268e:	c1 f3       	breq	.-16     	; 0x2680 <__mulsf3+0x20>
    2690:	95 0f       	add	r25, r21
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	55 1f       	adc	r21, r21
    2696:	62 9f       	mul	r22, r18
    2698:	f0 01       	movw	r30, r0
    269a:	72 9f       	mul	r23, r18
    269c:	bb 27       	eor	r27, r27
    269e:	f0 0d       	add	r31, r0
    26a0:	b1 1d       	adc	r27, r1
    26a2:	63 9f       	mul	r22, r19
    26a4:	aa 27       	eor	r26, r26
    26a6:	f0 0d       	add	r31, r0
    26a8:	b1 1d       	adc	r27, r1
    26aa:	aa 1f       	adc	r26, r26
    26ac:	64 9f       	mul	r22, r20
    26ae:	66 27       	eor	r22, r22
    26b0:	b0 0d       	add	r27, r0
    26b2:	a1 1d       	adc	r26, r1
    26b4:	66 1f       	adc	r22, r22
    26b6:	82 9f       	mul	r24, r18
    26b8:	22 27       	eor	r18, r18
    26ba:	b0 0d       	add	r27, r0
    26bc:	a1 1d       	adc	r26, r1
    26be:	62 1f       	adc	r22, r18
    26c0:	73 9f       	mul	r23, r19
    26c2:	b0 0d       	add	r27, r0
    26c4:	a1 1d       	adc	r26, r1
    26c6:	62 1f       	adc	r22, r18
    26c8:	83 9f       	mul	r24, r19
    26ca:	a0 0d       	add	r26, r0
    26cc:	61 1d       	adc	r22, r1
    26ce:	22 1f       	adc	r18, r18
    26d0:	74 9f       	mul	r23, r20
    26d2:	33 27       	eor	r19, r19
    26d4:	a0 0d       	add	r26, r0
    26d6:	61 1d       	adc	r22, r1
    26d8:	23 1f       	adc	r18, r19
    26da:	84 9f       	mul	r24, r20
    26dc:	60 0d       	add	r22, r0
    26de:	21 1d       	adc	r18, r1
    26e0:	82 2f       	mov	r24, r18
    26e2:	76 2f       	mov	r23, r22
    26e4:	6a 2f       	mov	r22, r26
    26e6:	11 24       	eor	r1, r1
    26e8:	9f 57       	subi	r25, 0x7F	; 127
    26ea:	50 40       	sbci	r21, 0x00	; 0
    26ec:	9a f0       	brmi	.+38     	; 0x2714 <__mulsf3_pse+0x88>
    26ee:	f1 f0       	breq	.+60     	; 0x272c <__mulsf3_pse+0xa0>
    26f0:	88 23       	and	r24, r24
    26f2:	4a f0       	brmi	.+18     	; 0x2706 <__mulsf3_pse+0x7a>
    26f4:	ee 0f       	add	r30, r30
    26f6:	ff 1f       	adc	r31, r31
    26f8:	bb 1f       	adc	r27, r27
    26fa:	66 1f       	adc	r22, r22
    26fc:	77 1f       	adc	r23, r23
    26fe:	88 1f       	adc	r24, r24
    2700:	91 50       	subi	r25, 0x01	; 1
    2702:	50 40       	sbci	r21, 0x00	; 0
    2704:	a9 f7       	brne	.-22     	; 0x26f0 <__mulsf3_pse+0x64>
    2706:	9e 3f       	cpi	r25, 0xFE	; 254
    2708:	51 05       	cpc	r21, r1
    270a:	80 f0       	brcs	.+32     	; 0x272c <__mulsf3_pse+0xa0>
    270c:	0c 94 df 12 	jmp	0x25be	; 0x25be <__fp_inf>
    2710:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__fp_szero>
    2714:	5f 3f       	cpi	r21, 0xFF	; 255
    2716:	e4 f3       	brlt	.-8      	; 0x2710 <__mulsf3_pse+0x84>
    2718:	98 3e       	cpi	r25, 0xE8	; 232
    271a:	d4 f3       	brlt	.-12     	; 0x2710 <__mulsf3_pse+0x84>
    271c:	86 95       	lsr	r24
    271e:	77 95       	ror	r23
    2720:	67 95       	ror	r22
    2722:	b7 95       	ror	r27
    2724:	f7 95       	ror	r31
    2726:	e7 95       	ror	r30
    2728:	9f 5f       	subi	r25, 0xFF	; 255
    272a:	c1 f7       	brne	.-16     	; 0x271c <__mulsf3_pse+0x90>
    272c:	fe 2b       	or	r31, r30
    272e:	88 0f       	add	r24, r24
    2730:	91 1d       	adc	r25, r1
    2732:	96 95       	lsr	r25
    2734:	87 95       	ror	r24
    2736:	97 f9       	bld	r25, 7
    2738:	08 95       	ret

0000273a <__divmodhi4>:
    273a:	97 fb       	bst	r25, 7
    273c:	07 2e       	mov	r0, r23
    273e:	16 f4       	brtc	.+4      	; 0x2744 <__divmodhi4+0xa>
    2740:	00 94       	com	r0
    2742:	07 d0       	rcall	.+14     	; 0x2752 <__divmodhi4_neg1>
    2744:	77 fd       	sbrc	r23, 7
    2746:	09 d0       	rcall	.+18     	; 0x275a <__divmodhi4_neg2>
    2748:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodhi4>
    274c:	07 fc       	sbrc	r0, 7
    274e:	05 d0       	rcall	.+10     	; 0x275a <__divmodhi4_neg2>
    2750:	3e f4       	brtc	.+14     	; 0x2760 <__divmodhi4_exit>

00002752 <__divmodhi4_neg1>:
    2752:	90 95       	com	r25
    2754:	81 95       	neg	r24
    2756:	9f 4f       	sbci	r25, 0xFF	; 255
    2758:	08 95       	ret

0000275a <__divmodhi4_neg2>:
    275a:	70 95       	com	r23
    275c:	61 95       	neg	r22
    275e:	7f 4f       	sbci	r23, 0xFF	; 255

00002760 <__divmodhi4_exit>:
    2760:	08 95       	ret

00002762 <__udivmodsi4>:
    2762:	a1 e2       	ldi	r26, 0x21	; 33
    2764:	1a 2e       	mov	r1, r26
    2766:	aa 1b       	sub	r26, r26
    2768:	bb 1b       	sub	r27, r27
    276a:	fd 01       	movw	r30, r26
    276c:	0d c0       	rjmp	.+26     	; 0x2788 <__udivmodsi4_ep>

0000276e <__udivmodsi4_loop>:
    276e:	aa 1f       	adc	r26, r26
    2770:	bb 1f       	adc	r27, r27
    2772:	ee 1f       	adc	r30, r30
    2774:	ff 1f       	adc	r31, r31
    2776:	a2 17       	cp	r26, r18
    2778:	b3 07       	cpc	r27, r19
    277a:	e4 07       	cpc	r30, r20
    277c:	f5 07       	cpc	r31, r21
    277e:	20 f0       	brcs	.+8      	; 0x2788 <__udivmodsi4_ep>
    2780:	a2 1b       	sub	r26, r18
    2782:	b3 0b       	sbc	r27, r19
    2784:	e4 0b       	sbc	r30, r20
    2786:	f5 0b       	sbc	r31, r21

00002788 <__udivmodsi4_ep>:
    2788:	66 1f       	adc	r22, r22
    278a:	77 1f       	adc	r23, r23
    278c:	88 1f       	adc	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	1a 94       	dec	r1
    2792:	69 f7       	brne	.-38     	; 0x276e <__udivmodsi4_loop>
    2794:	60 95       	com	r22
    2796:	70 95       	com	r23
    2798:	80 95       	com	r24
    279a:	90 95       	com	r25
    279c:	9b 01       	movw	r18, r22
    279e:	ac 01       	movw	r20, r24
    27a0:	bd 01       	movw	r22, r26
    27a2:	cf 01       	movw	r24, r30
    27a4:	08 95       	ret

000027a6 <__divmodsi4>:
    27a6:	05 2e       	mov	r0, r21
    27a8:	97 fb       	bst	r25, 7
    27aa:	1e f4       	brtc	.+6      	; 0x27b2 <__divmodsi4+0xc>
    27ac:	00 94       	com	r0
    27ae:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__negsi2>
    27b2:	57 fd       	sbrc	r21, 7
    27b4:	07 d0       	rcall	.+14     	; 0x27c4 <__divmodsi4_neg2>
    27b6:	0e 94 b1 13 	call	0x2762	; 0x2762 <__udivmodsi4>
    27ba:	07 fc       	sbrc	r0, 7
    27bc:	03 d0       	rcall	.+6      	; 0x27c4 <__divmodsi4_neg2>
    27be:	4e f4       	brtc	.+18     	; 0x27d2 <__divmodsi4_exit>
    27c0:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__negsi2>

000027c4 <__divmodsi4_neg2>:
    27c4:	50 95       	com	r21
    27c6:	40 95       	com	r20
    27c8:	30 95       	com	r19
    27ca:	21 95       	neg	r18
    27cc:	3f 4f       	sbci	r19, 0xFF	; 255
    27ce:	4f 4f       	sbci	r20, 0xFF	; 255
    27d0:	5f 4f       	sbci	r21, 0xFF	; 255

000027d2 <__divmodsi4_exit>:
    27d2:	08 95       	ret

000027d4 <__negsi2>:
    27d4:	90 95       	com	r25
    27d6:	80 95       	com	r24
    27d8:	70 95       	com	r23
    27da:	61 95       	neg	r22
    27dc:	7f 4f       	sbci	r23, 0xFF	; 255
    27de:	8f 4f       	sbci	r24, 0xFF	; 255
    27e0:	9f 4f       	sbci	r25, 0xFF	; 255
    27e2:	08 95       	ret

000027e4 <__umulhisi3>:
    27e4:	a2 9f       	mul	r26, r18
    27e6:	b0 01       	movw	r22, r0
    27e8:	b3 9f       	mul	r27, r19
    27ea:	c0 01       	movw	r24, r0
    27ec:	a3 9f       	mul	r26, r19
    27ee:	70 0d       	add	r23, r0
    27f0:	81 1d       	adc	r24, r1
    27f2:	11 24       	eor	r1, r1
    27f4:	91 1d       	adc	r25, r1
    27f6:	b2 9f       	mul	r27, r18
    27f8:	70 0d       	add	r23, r0
    27fa:	81 1d       	adc	r24, r1
    27fc:	11 24       	eor	r1, r1
    27fe:	91 1d       	adc	r25, r1
    2800:	08 95       	ret

00002802 <__udivmodhi4>:
    2802:	aa 1b       	sub	r26, r26
    2804:	bb 1b       	sub	r27, r27
    2806:	51 e1       	ldi	r21, 0x11	; 17
    2808:	07 c0       	rjmp	.+14     	; 0x2818 <__udivmodhi4_ep>

0000280a <__udivmodhi4_loop>:
    280a:	aa 1f       	adc	r26, r26
    280c:	bb 1f       	adc	r27, r27
    280e:	a6 17       	cp	r26, r22
    2810:	b7 07       	cpc	r27, r23
    2812:	10 f0       	brcs	.+4      	; 0x2818 <__udivmodhi4_ep>
    2814:	a6 1b       	sub	r26, r22
    2816:	b7 0b       	sbc	r27, r23

00002818 <__udivmodhi4_ep>:
    2818:	88 1f       	adc	r24, r24
    281a:	99 1f       	adc	r25, r25
    281c:	5a 95       	dec	r21
    281e:	a9 f7       	brne	.-22     	; 0x280a <__udivmodhi4_loop>
    2820:	80 95       	com	r24
    2822:	90 95       	com	r25
    2824:	bc 01       	movw	r22, r24
    2826:	cd 01       	movw	r24, r26
    2828:	08 95       	ret

0000282a <fgetc>:
    282a:	cf 93       	push	r28
    282c:	df 93       	push	r29
    282e:	ec 01       	movw	r28, r24
    2830:	2b 81       	ldd	r18, Y+3	; 0x03
    2832:	20 ff       	sbrs	r18, 0
    2834:	33 c0       	rjmp	.+102    	; 0x289c <fgetc+0x72>
    2836:	26 ff       	sbrs	r18, 6
    2838:	0a c0       	rjmp	.+20     	; 0x284e <fgetc+0x24>
    283a:	2f 7b       	andi	r18, 0xBF	; 191
    283c:	2b 83       	std	Y+3, r18	; 0x03
    283e:	8e 81       	ldd	r24, Y+6	; 0x06
    2840:	9f 81       	ldd	r25, Y+7	; 0x07
    2842:	01 96       	adiw	r24, 0x01	; 1
    2844:	9f 83       	std	Y+7, r25	; 0x07
    2846:	8e 83       	std	Y+6, r24	; 0x06
    2848:	8a 81       	ldd	r24, Y+2	; 0x02
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	29 c0       	rjmp	.+82     	; 0x28a0 <fgetc+0x76>
    284e:	22 ff       	sbrs	r18, 2
    2850:	0f c0       	rjmp	.+30     	; 0x2870 <fgetc+0x46>
    2852:	e8 81       	ld	r30, Y
    2854:	f9 81       	ldd	r31, Y+1	; 0x01
    2856:	80 81       	ld	r24, Z
    2858:	08 2e       	mov	r0, r24
    285a:	00 0c       	add	r0, r0
    285c:	99 0b       	sbc	r25, r25
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	19 f4       	brne	.+6      	; 0x2868 <fgetc+0x3e>
    2862:	20 62       	ori	r18, 0x20	; 32
    2864:	2b 83       	std	Y+3, r18	; 0x03
    2866:	1a c0       	rjmp	.+52     	; 0x289c <fgetc+0x72>
    2868:	31 96       	adiw	r30, 0x01	; 1
    286a:	f9 83       	std	Y+1, r31	; 0x01
    286c:	e8 83       	st	Y, r30
    286e:	0e c0       	rjmp	.+28     	; 0x288c <fgetc+0x62>
    2870:	ea 85       	ldd	r30, Y+10	; 0x0a
    2872:	fb 85       	ldd	r31, Y+11	; 0x0b
    2874:	09 95       	icall
    2876:	97 ff       	sbrs	r25, 7
    2878:	09 c0       	rjmp	.+18     	; 0x288c <fgetc+0x62>
    287a:	2b 81       	ldd	r18, Y+3	; 0x03
    287c:	01 96       	adiw	r24, 0x01	; 1
    287e:	11 f0       	breq	.+4      	; 0x2884 <fgetc+0x5a>
    2880:	80 e2       	ldi	r24, 0x20	; 32
    2882:	01 c0       	rjmp	.+2      	; 0x2886 <fgetc+0x5c>
    2884:	80 e1       	ldi	r24, 0x10	; 16
    2886:	82 2b       	or	r24, r18
    2888:	8b 83       	std	Y+3, r24	; 0x03
    288a:	08 c0       	rjmp	.+16     	; 0x289c <fgetc+0x72>
    288c:	2e 81       	ldd	r18, Y+6	; 0x06
    288e:	3f 81       	ldd	r19, Y+7	; 0x07
    2890:	2f 5f       	subi	r18, 0xFF	; 255
    2892:	3f 4f       	sbci	r19, 0xFF	; 255
    2894:	3f 83       	std	Y+7, r19	; 0x07
    2896:	2e 83       	std	Y+6, r18	; 0x06
    2898:	99 27       	eor	r25, r25
    289a:	02 c0       	rjmp	.+4      	; 0x28a0 <fgetc+0x76>
    289c:	8f ef       	ldi	r24, 0xFF	; 255
    289e:	9f ef       	ldi	r25, 0xFF	; 255
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	08 95       	ret

000028a6 <printf>:
    28a6:	a0 e0       	ldi	r26, 0x00	; 0
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e9 e5       	ldi	r30, 0x59	; 89
    28ac:	f4 e1       	ldi	r31, 0x14	; 20
    28ae:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__prologue_saves__+0x20>
    28b2:	ae 01       	movw	r20, r28
    28b4:	4b 5f       	subi	r20, 0xFB	; 251
    28b6:	5f 4f       	sbci	r21, 0xFF	; 255
    28b8:	fa 01       	movw	r30, r20
    28ba:	61 91       	ld	r22, Z+
    28bc:	71 91       	ld	r23, Z+
    28be:	af 01       	movw	r20, r30
    28c0:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <__iob+0x2>
    28c4:	90 91 17 06 	lds	r25, 0x0617	; 0x800617 <__iob+0x3>
    28c8:	0e 94 8f 14 	call	0x291e	; 0x291e <vfprintf>
    28cc:	e2 e0       	ldi	r30, 0x02	; 2
    28ce:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__epilogue_restores__+0x20>

000028d2 <printf_P>:
    28d2:	a0 e0       	ldi	r26, 0x00	; 0
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	ef e6       	ldi	r30, 0x6F	; 111
    28d8:	f4 e1       	ldi	r31, 0x14	; 20
    28da:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__prologue_saves__+0x1c>
    28de:	ae 01       	movw	r20, r28
    28e0:	49 5f       	subi	r20, 0xF9	; 249
    28e2:	5f 4f       	sbci	r21, 0xFF	; 255
    28e4:	da 01       	movw	r26, r20
    28e6:	6d 91       	ld	r22, X+
    28e8:	7d 91       	ld	r23, X+
    28ea:	ad 01       	movw	r20, r26
    28ec:	04 e1       	ldi	r16, 0x14	; 20
    28ee:	16 e0       	ldi	r17, 0x06	; 6
    28f0:	f8 01       	movw	r30, r16
    28f2:	82 81       	ldd	r24, Z+2	; 0x02
    28f4:	93 81       	ldd	r25, Z+3	; 0x03
    28f6:	dc 01       	movw	r26, r24
    28f8:	13 96       	adiw	r26, 0x03	; 3
    28fa:	2c 91       	ld	r18, X
    28fc:	13 97       	sbiw	r26, 0x03	; 3
    28fe:	28 60       	ori	r18, 0x08	; 8
    2900:	13 96       	adiw	r26, 0x03	; 3
    2902:	2c 93       	st	X, r18
    2904:	0e 94 8f 14 	call	0x291e	; 0x291e <vfprintf>
    2908:	d8 01       	movw	r26, r16
    290a:	12 96       	adiw	r26, 0x02	; 2
    290c:	ed 91       	ld	r30, X+
    290e:	fc 91       	ld	r31, X
    2910:	13 97       	sbiw	r26, 0x03	; 3
    2912:	23 81       	ldd	r18, Z+3	; 0x03
    2914:	27 7f       	andi	r18, 0xF7	; 247
    2916:	23 83       	std	Z+3, r18	; 0x03
    2918:	e4 e0       	ldi	r30, 0x04	; 4
    291a:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__epilogue_restores__+0x1c>

0000291e <vfprintf>:
    291e:	ab e0       	ldi	r26, 0x0B	; 11
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	e5 e9       	ldi	r30, 0x95	; 149
    2924:	f4 e1       	ldi	r31, 0x14	; 20
    2926:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__prologue_saves__>
    292a:	6c 01       	movw	r12, r24
    292c:	7b 01       	movw	r14, r22
    292e:	8a 01       	movw	r16, r20
    2930:	fc 01       	movw	r30, r24
    2932:	17 82       	std	Z+7, r1	; 0x07
    2934:	16 82       	std	Z+6, r1	; 0x06
    2936:	83 81       	ldd	r24, Z+3	; 0x03
    2938:	81 ff       	sbrs	r24, 1
    293a:	cc c1       	rjmp	.+920    	; 0x2cd4 <vfprintf+0x3b6>
    293c:	ce 01       	movw	r24, r28
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	3c 01       	movw	r6, r24
    2942:	f6 01       	movw	r30, r12
    2944:	93 81       	ldd	r25, Z+3	; 0x03
    2946:	f7 01       	movw	r30, r14
    2948:	93 fd       	sbrc	r25, 3
    294a:	85 91       	lpm	r24, Z+
    294c:	93 ff       	sbrs	r25, 3
    294e:	81 91       	ld	r24, Z+
    2950:	7f 01       	movw	r14, r30
    2952:	88 23       	and	r24, r24
    2954:	09 f4       	brne	.+2      	; 0x2958 <vfprintf+0x3a>
    2956:	ba c1       	rjmp	.+884    	; 0x2ccc <vfprintf+0x3ae>
    2958:	85 32       	cpi	r24, 0x25	; 37
    295a:	39 f4       	brne	.+14     	; 0x296a <vfprintf+0x4c>
    295c:	93 fd       	sbrc	r25, 3
    295e:	85 91       	lpm	r24, Z+
    2960:	93 ff       	sbrs	r25, 3
    2962:	81 91       	ld	r24, Z+
    2964:	7f 01       	movw	r14, r30
    2966:	85 32       	cpi	r24, 0x25	; 37
    2968:	29 f4       	brne	.+10     	; 0x2974 <vfprintf+0x56>
    296a:	b6 01       	movw	r22, r12
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <fputc>
    2972:	e7 cf       	rjmp	.-50     	; 0x2942 <vfprintf+0x24>
    2974:	91 2c       	mov	r9, r1
    2976:	21 2c       	mov	r2, r1
    2978:	31 2c       	mov	r3, r1
    297a:	ff e1       	ldi	r31, 0x1F	; 31
    297c:	f3 15       	cp	r31, r3
    297e:	d8 f0       	brcs	.+54     	; 0x29b6 <vfprintf+0x98>
    2980:	8b 32       	cpi	r24, 0x2B	; 43
    2982:	79 f0       	breq	.+30     	; 0x29a2 <vfprintf+0x84>
    2984:	38 f4       	brcc	.+14     	; 0x2994 <vfprintf+0x76>
    2986:	80 32       	cpi	r24, 0x20	; 32
    2988:	79 f0       	breq	.+30     	; 0x29a8 <vfprintf+0x8a>
    298a:	83 32       	cpi	r24, 0x23	; 35
    298c:	a1 f4       	brne	.+40     	; 0x29b6 <vfprintf+0x98>
    298e:	23 2d       	mov	r18, r3
    2990:	20 61       	ori	r18, 0x10	; 16
    2992:	1d c0       	rjmp	.+58     	; 0x29ce <vfprintf+0xb0>
    2994:	8d 32       	cpi	r24, 0x2D	; 45
    2996:	61 f0       	breq	.+24     	; 0x29b0 <vfprintf+0x92>
    2998:	80 33       	cpi	r24, 0x30	; 48
    299a:	69 f4       	brne	.+26     	; 0x29b6 <vfprintf+0x98>
    299c:	23 2d       	mov	r18, r3
    299e:	21 60       	ori	r18, 0x01	; 1
    29a0:	16 c0       	rjmp	.+44     	; 0x29ce <vfprintf+0xb0>
    29a2:	83 2d       	mov	r24, r3
    29a4:	82 60       	ori	r24, 0x02	; 2
    29a6:	38 2e       	mov	r3, r24
    29a8:	e3 2d       	mov	r30, r3
    29aa:	e4 60       	ori	r30, 0x04	; 4
    29ac:	3e 2e       	mov	r3, r30
    29ae:	2a c0       	rjmp	.+84     	; 0x2a04 <vfprintf+0xe6>
    29b0:	f3 2d       	mov	r31, r3
    29b2:	f8 60       	ori	r31, 0x08	; 8
    29b4:	1d c0       	rjmp	.+58     	; 0x29f0 <vfprintf+0xd2>
    29b6:	37 fc       	sbrc	r3, 7
    29b8:	2d c0       	rjmp	.+90     	; 0x2a14 <vfprintf+0xf6>
    29ba:	20 ed       	ldi	r18, 0xD0	; 208
    29bc:	28 0f       	add	r18, r24
    29be:	2a 30       	cpi	r18, 0x0A	; 10
    29c0:	40 f0       	brcs	.+16     	; 0x29d2 <vfprintf+0xb4>
    29c2:	8e 32       	cpi	r24, 0x2E	; 46
    29c4:	b9 f4       	brne	.+46     	; 0x29f4 <vfprintf+0xd6>
    29c6:	36 fc       	sbrc	r3, 6
    29c8:	81 c1       	rjmp	.+770    	; 0x2ccc <vfprintf+0x3ae>
    29ca:	23 2d       	mov	r18, r3
    29cc:	20 64       	ori	r18, 0x40	; 64
    29ce:	32 2e       	mov	r3, r18
    29d0:	19 c0       	rjmp	.+50     	; 0x2a04 <vfprintf+0xe6>
    29d2:	36 fe       	sbrs	r3, 6
    29d4:	06 c0       	rjmp	.+12     	; 0x29e2 <vfprintf+0xc4>
    29d6:	8a e0       	ldi	r24, 0x0A	; 10
    29d8:	98 9e       	mul	r9, r24
    29da:	20 0d       	add	r18, r0
    29dc:	11 24       	eor	r1, r1
    29de:	92 2e       	mov	r9, r18
    29e0:	11 c0       	rjmp	.+34     	; 0x2a04 <vfprintf+0xe6>
    29e2:	ea e0       	ldi	r30, 0x0A	; 10
    29e4:	2e 9e       	mul	r2, r30
    29e6:	20 0d       	add	r18, r0
    29e8:	11 24       	eor	r1, r1
    29ea:	22 2e       	mov	r2, r18
    29ec:	f3 2d       	mov	r31, r3
    29ee:	f0 62       	ori	r31, 0x20	; 32
    29f0:	3f 2e       	mov	r3, r31
    29f2:	08 c0       	rjmp	.+16     	; 0x2a04 <vfprintf+0xe6>
    29f4:	8c 36       	cpi	r24, 0x6C	; 108
    29f6:	21 f4       	brne	.+8      	; 0x2a00 <vfprintf+0xe2>
    29f8:	83 2d       	mov	r24, r3
    29fa:	80 68       	ori	r24, 0x80	; 128
    29fc:	38 2e       	mov	r3, r24
    29fe:	02 c0       	rjmp	.+4      	; 0x2a04 <vfprintf+0xe6>
    2a00:	88 36       	cpi	r24, 0x68	; 104
    2a02:	41 f4       	brne	.+16     	; 0x2a14 <vfprintf+0xf6>
    2a04:	f7 01       	movw	r30, r14
    2a06:	93 fd       	sbrc	r25, 3
    2a08:	85 91       	lpm	r24, Z+
    2a0a:	93 ff       	sbrs	r25, 3
    2a0c:	81 91       	ld	r24, Z+
    2a0e:	7f 01       	movw	r14, r30
    2a10:	81 11       	cpse	r24, r1
    2a12:	b3 cf       	rjmp	.-154    	; 0x297a <vfprintf+0x5c>
    2a14:	98 2f       	mov	r25, r24
    2a16:	9f 7d       	andi	r25, 0xDF	; 223
    2a18:	95 54       	subi	r25, 0x45	; 69
    2a1a:	93 30       	cpi	r25, 0x03	; 3
    2a1c:	28 f4       	brcc	.+10     	; 0x2a28 <vfprintf+0x10a>
    2a1e:	0c 5f       	subi	r16, 0xFC	; 252
    2a20:	1f 4f       	sbci	r17, 0xFF	; 255
    2a22:	9f e3       	ldi	r25, 0x3F	; 63
    2a24:	99 83       	std	Y+1, r25	; 0x01
    2a26:	0d c0       	rjmp	.+26     	; 0x2a42 <vfprintf+0x124>
    2a28:	83 36       	cpi	r24, 0x63	; 99
    2a2a:	31 f0       	breq	.+12     	; 0x2a38 <vfprintf+0x11a>
    2a2c:	83 37       	cpi	r24, 0x73	; 115
    2a2e:	71 f0       	breq	.+28     	; 0x2a4c <vfprintf+0x12e>
    2a30:	83 35       	cpi	r24, 0x53	; 83
    2a32:	09 f0       	breq	.+2      	; 0x2a36 <vfprintf+0x118>
    2a34:	59 c0       	rjmp	.+178    	; 0x2ae8 <vfprintf+0x1ca>
    2a36:	21 c0       	rjmp	.+66     	; 0x2a7a <vfprintf+0x15c>
    2a38:	f8 01       	movw	r30, r16
    2a3a:	80 81       	ld	r24, Z
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	0e 5f       	subi	r16, 0xFE	; 254
    2a40:	1f 4f       	sbci	r17, 0xFF	; 255
    2a42:	88 24       	eor	r8, r8
    2a44:	83 94       	inc	r8
    2a46:	91 2c       	mov	r9, r1
    2a48:	53 01       	movw	r10, r6
    2a4a:	13 c0       	rjmp	.+38     	; 0x2a72 <vfprintf+0x154>
    2a4c:	28 01       	movw	r4, r16
    2a4e:	f2 e0       	ldi	r31, 0x02	; 2
    2a50:	4f 0e       	add	r4, r31
    2a52:	51 1c       	adc	r5, r1
    2a54:	f8 01       	movw	r30, r16
    2a56:	a0 80       	ld	r10, Z
    2a58:	b1 80       	ldd	r11, Z+1	; 0x01
    2a5a:	36 fe       	sbrs	r3, 6
    2a5c:	03 c0       	rjmp	.+6      	; 0x2a64 <vfprintf+0x146>
    2a5e:	69 2d       	mov	r22, r9
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <vfprintf+0x14a>
    2a64:	6f ef       	ldi	r22, 0xFF	; 255
    2a66:	7f ef       	ldi	r23, 0xFF	; 255
    2a68:	c5 01       	movw	r24, r10
    2a6a:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <strnlen>
    2a6e:	4c 01       	movw	r8, r24
    2a70:	82 01       	movw	r16, r4
    2a72:	f3 2d       	mov	r31, r3
    2a74:	ff 77       	andi	r31, 0x7F	; 127
    2a76:	3f 2e       	mov	r3, r31
    2a78:	16 c0       	rjmp	.+44     	; 0x2aa6 <vfprintf+0x188>
    2a7a:	28 01       	movw	r4, r16
    2a7c:	22 e0       	ldi	r18, 0x02	; 2
    2a7e:	42 0e       	add	r4, r18
    2a80:	51 1c       	adc	r5, r1
    2a82:	f8 01       	movw	r30, r16
    2a84:	a0 80       	ld	r10, Z
    2a86:	b1 80       	ldd	r11, Z+1	; 0x01
    2a88:	36 fe       	sbrs	r3, 6
    2a8a:	03 c0       	rjmp	.+6      	; 0x2a92 <vfprintf+0x174>
    2a8c:	69 2d       	mov	r22, r9
    2a8e:	70 e0       	ldi	r23, 0x00	; 0
    2a90:	02 c0       	rjmp	.+4      	; 0x2a96 <vfprintf+0x178>
    2a92:	6f ef       	ldi	r22, 0xFF	; 255
    2a94:	7f ef       	ldi	r23, 0xFF	; 255
    2a96:	c5 01       	movw	r24, r10
    2a98:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <strnlen_P>
    2a9c:	4c 01       	movw	r8, r24
    2a9e:	f3 2d       	mov	r31, r3
    2aa0:	f0 68       	ori	r31, 0x80	; 128
    2aa2:	3f 2e       	mov	r3, r31
    2aa4:	82 01       	movw	r16, r4
    2aa6:	33 fc       	sbrc	r3, 3
    2aa8:	1b c0       	rjmp	.+54     	; 0x2ae0 <vfprintf+0x1c2>
    2aaa:	82 2d       	mov	r24, r2
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	88 16       	cp	r8, r24
    2ab0:	99 06       	cpc	r9, r25
    2ab2:	b0 f4       	brcc	.+44     	; 0x2ae0 <vfprintf+0x1c2>
    2ab4:	b6 01       	movw	r22, r12
    2ab6:	80 e2       	ldi	r24, 0x20	; 32
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <fputc>
    2abe:	2a 94       	dec	r2
    2ac0:	f4 cf       	rjmp	.-24     	; 0x2aaa <vfprintf+0x18c>
    2ac2:	f5 01       	movw	r30, r10
    2ac4:	37 fc       	sbrc	r3, 7
    2ac6:	85 91       	lpm	r24, Z+
    2ac8:	37 fe       	sbrs	r3, 7
    2aca:	81 91       	ld	r24, Z+
    2acc:	5f 01       	movw	r10, r30
    2ace:	b6 01       	movw	r22, r12
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <fputc>
    2ad6:	21 10       	cpse	r2, r1
    2ad8:	2a 94       	dec	r2
    2ada:	21 e0       	ldi	r18, 0x01	; 1
    2adc:	82 1a       	sub	r8, r18
    2ade:	91 08       	sbc	r9, r1
    2ae0:	81 14       	cp	r8, r1
    2ae2:	91 04       	cpc	r9, r1
    2ae4:	71 f7       	brne	.-36     	; 0x2ac2 <vfprintf+0x1a4>
    2ae6:	e8 c0       	rjmp	.+464    	; 0x2cb8 <vfprintf+0x39a>
    2ae8:	84 36       	cpi	r24, 0x64	; 100
    2aea:	11 f0       	breq	.+4      	; 0x2af0 <vfprintf+0x1d2>
    2aec:	89 36       	cpi	r24, 0x69	; 105
    2aee:	41 f5       	brne	.+80     	; 0x2b40 <vfprintf+0x222>
    2af0:	f8 01       	movw	r30, r16
    2af2:	37 fe       	sbrs	r3, 7
    2af4:	07 c0       	rjmp	.+14     	; 0x2b04 <vfprintf+0x1e6>
    2af6:	60 81       	ld	r22, Z
    2af8:	71 81       	ldd	r23, Z+1	; 0x01
    2afa:	82 81       	ldd	r24, Z+2	; 0x02
    2afc:	93 81       	ldd	r25, Z+3	; 0x03
    2afe:	0c 5f       	subi	r16, 0xFC	; 252
    2b00:	1f 4f       	sbci	r17, 0xFF	; 255
    2b02:	08 c0       	rjmp	.+16     	; 0x2b14 <vfprintf+0x1f6>
    2b04:	60 81       	ld	r22, Z
    2b06:	71 81       	ldd	r23, Z+1	; 0x01
    2b08:	07 2e       	mov	r0, r23
    2b0a:	00 0c       	add	r0, r0
    2b0c:	88 0b       	sbc	r24, r24
    2b0e:	99 0b       	sbc	r25, r25
    2b10:	0e 5f       	subi	r16, 0xFE	; 254
    2b12:	1f 4f       	sbci	r17, 0xFF	; 255
    2b14:	f3 2d       	mov	r31, r3
    2b16:	ff 76       	andi	r31, 0x6F	; 111
    2b18:	3f 2e       	mov	r3, r31
    2b1a:	97 ff       	sbrs	r25, 7
    2b1c:	09 c0       	rjmp	.+18     	; 0x2b30 <vfprintf+0x212>
    2b1e:	90 95       	com	r25
    2b20:	80 95       	com	r24
    2b22:	70 95       	com	r23
    2b24:	61 95       	neg	r22
    2b26:	7f 4f       	sbci	r23, 0xFF	; 255
    2b28:	8f 4f       	sbci	r24, 0xFF	; 255
    2b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2c:	f0 68       	ori	r31, 0x80	; 128
    2b2e:	3f 2e       	mov	r3, r31
    2b30:	2a e0       	ldi	r18, 0x0A	; 10
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	a3 01       	movw	r20, r6
    2b36:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__ultoa_invert>
    2b3a:	88 2e       	mov	r8, r24
    2b3c:	86 18       	sub	r8, r6
    2b3e:	45 c0       	rjmp	.+138    	; 0x2bca <vfprintf+0x2ac>
    2b40:	85 37       	cpi	r24, 0x75	; 117
    2b42:	31 f4       	brne	.+12     	; 0x2b50 <vfprintf+0x232>
    2b44:	23 2d       	mov	r18, r3
    2b46:	2f 7e       	andi	r18, 0xEF	; 239
    2b48:	b2 2e       	mov	r11, r18
    2b4a:	2a e0       	ldi	r18, 0x0A	; 10
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	25 c0       	rjmp	.+74     	; 0x2b9a <vfprintf+0x27c>
    2b50:	93 2d       	mov	r25, r3
    2b52:	99 7f       	andi	r25, 0xF9	; 249
    2b54:	b9 2e       	mov	r11, r25
    2b56:	8f 36       	cpi	r24, 0x6F	; 111
    2b58:	c1 f0       	breq	.+48     	; 0x2b8a <vfprintf+0x26c>
    2b5a:	18 f4       	brcc	.+6      	; 0x2b62 <vfprintf+0x244>
    2b5c:	88 35       	cpi	r24, 0x58	; 88
    2b5e:	79 f0       	breq	.+30     	; 0x2b7e <vfprintf+0x260>
    2b60:	b5 c0       	rjmp	.+362    	; 0x2ccc <vfprintf+0x3ae>
    2b62:	80 37       	cpi	r24, 0x70	; 112
    2b64:	19 f0       	breq	.+6      	; 0x2b6c <vfprintf+0x24e>
    2b66:	88 37       	cpi	r24, 0x78	; 120
    2b68:	21 f0       	breq	.+8      	; 0x2b72 <vfprintf+0x254>
    2b6a:	b0 c0       	rjmp	.+352    	; 0x2ccc <vfprintf+0x3ae>
    2b6c:	e9 2f       	mov	r30, r25
    2b6e:	e0 61       	ori	r30, 0x10	; 16
    2b70:	be 2e       	mov	r11, r30
    2b72:	b4 fe       	sbrs	r11, 4
    2b74:	0d c0       	rjmp	.+26     	; 0x2b90 <vfprintf+0x272>
    2b76:	fb 2d       	mov	r31, r11
    2b78:	f4 60       	ori	r31, 0x04	; 4
    2b7a:	bf 2e       	mov	r11, r31
    2b7c:	09 c0       	rjmp	.+18     	; 0x2b90 <vfprintf+0x272>
    2b7e:	34 fe       	sbrs	r3, 4
    2b80:	0a c0       	rjmp	.+20     	; 0x2b96 <vfprintf+0x278>
    2b82:	29 2f       	mov	r18, r25
    2b84:	26 60       	ori	r18, 0x06	; 6
    2b86:	b2 2e       	mov	r11, r18
    2b88:	06 c0       	rjmp	.+12     	; 0x2b96 <vfprintf+0x278>
    2b8a:	28 e0       	ldi	r18, 0x08	; 8
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	05 c0       	rjmp	.+10     	; 0x2b9a <vfprintf+0x27c>
    2b90:	20 e1       	ldi	r18, 0x10	; 16
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	02 c0       	rjmp	.+4      	; 0x2b9a <vfprintf+0x27c>
    2b96:	20 e1       	ldi	r18, 0x10	; 16
    2b98:	32 e0       	ldi	r19, 0x02	; 2
    2b9a:	f8 01       	movw	r30, r16
    2b9c:	b7 fe       	sbrs	r11, 7
    2b9e:	07 c0       	rjmp	.+14     	; 0x2bae <vfprintf+0x290>
    2ba0:	60 81       	ld	r22, Z
    2ba2:	71 81       	ldd	r23, Z+1	; 0x01
    2ba4:	82 81       	ldd	r24, Z+2	; 0x02
    2ba6:	93 81       	ldd	r25, Z+3	; 0x03
    2ba8:	0c 5f       	subi	r16, 0xFC	; 252
    2baa:	1f 4f       	sbci	r17, 0xFF	; 255
    2bac:	06 c0       	rjmp	.+12     	; 0x2bba <vfprintf+0x29c>
    2bae:	60 81       	ld	r22, Z
    2bb0:	71 81       	ldd	r23, Z+1	; 0x01
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	0e 5f       	subi	r16, 0xFE	; 254
    2bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bba:	a3 01       	movw	r20, r6
    2bbc:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__ultoa_invert>
    2bc0:	88 2e       	mov	r8, r24
    2bc2:	86 18       	sub	r8, r6
    2bc4:	fb 2d       	mov	r31, r11
    2bc6:	ff 77       	andi	r31, 0x7F	; 127
    2bc8:	3f 2e       	mov	r3, r31
    2bca:	36 fe       	sbrs	r3, 6
    2bcc:	0d c0       	rjmp	.+26     	; 0x2be8 <vfprintf+0x2ca>
    2bce:	23 2d       	mov	r18, r3
    2bd0:	2e 7f       	andi	r18, 0xFE	; 254
    2bd2:	a2 2e       	mov	r10, r18
    2bd4:	89 14       	cp	r8, r9
    2bd6:	58 f4       	brcc	.+22     	; 0x2bee <vfprintf+0x2d0>
    2bd8:	34 fe       	sbrs	r3, 4
    2bda:	0b c0       	rjmp	.+22     	; 0x2bf2 <vfprintf+0x2d4>
    2bdc:	32 fc       	sbrc	r3, 2
    2bde:	09 c0       	rjmp	.+18     	; 0x2bf2 <vfprintf+0x2d4>
    2be0:	83 2d       	mov	r24, r3
    2be2:	8e 7e       	andi	r24, 0xEE	; 238
    2be4:	a8 2e       	mov	r10, r24
    2be6:	05 c0       	rjmp	.+10     	; 0x2bf2 <vfprintf+0x2d4>
    2be8:	b8 2c       	mov	r11, r8
    2bea:	a3 2c       	mov	r10, r3
    2bec:	03 c0       	rjmp	.+6      	; 0x2bf4 <vfprintf+0x2d6>
    2bee:	b8 2c       	mov	r11, r8
    2bf0:	01 c0       	rjmp	.+2      	; 0x2bf4 <vfprintf+0x2d6>
    2bf2:	b9 2c       	mov	r11, r9
    2bf4:	a4 fe       	sbrs	r10, 4
    2bf6:	0f c0       	rjmp	.+30     	; 0x2c16 <vfprintf+0x2f8>
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	e8 0d       	add	r30, r8
    2bfc:	f1 1d       	adc	r31, r1
    2bfe:	80 81       	ld	r24, Z
    2c00:	80 33       	cpi	r24, 0x30	; 48
    2c02:	21 f4       	brne	.+8      	; 0x2c0c <vfprintf+0x2ee>
    2c04:	9a 2d       	mov	r25, r10
    2c06:	99 7e       	andi	r25, 0xE9	; 233
    2c08:	a9 2e       	mov	r10, r25
    2c0a:	09 c0       	rjmp	.+18     	; 0x2c1e <vfprintf+0x300>
    2c0c:	a2 fe       	sbrs	r10, 2
    2c0e:	06 c0       	rjmp	.+12     	; 0x2c1c <vfprintf+0x2fe>
    2c10:	b3 94       	inc	r11
    2c12:	b3 94       	inc	r11
    2c14:	04 c0       	rjmp	.+8      	; 0x2c1e <vfprintf+0x300>
    2c16:	8a 2d       	mov	r24, r10
    2c18:	86 78       	andi	r24, 0x86	; 134
    2c1a:	09 f0       	breq	.+2      	; 0x2c1e <vfprintf+0x300>
    2c1c:	b3 94       	inc	r11
    2c1e:	a3 fc       	sbrc	r10, 3
    2c20:	11 c0       	rjmp	.+34     	; 0x2c44 <vfprintf+0x326>
    2c22:	a0 fe       	sbrs	r10, 0
    2c24:	06 c0       	rjmp	.+12     	; 0x2c32 <vfprintf+0x314>
    2c26:	b2 14       	cp	r11, r2
    2c28:	88 f4       	brcc	.+34     	; 0x2c4c <vfprintf+0x32e>
    2c2a:	28 0c       	add	r2, r8
    2c2c:	92 2c       	mov	r9, r2
    2c2e:	9b 18       	sub	r9, r11
    2c30:	0e c0       	rjmp	.+28     	; 0x2c4e <vfprintf+0x330>
    2c32:	b2 14       	cp	r11, r2
    2c34:	60 f4       	brcc	.+24     	; 0x2c4e <vfprintf+0x330>
    2c36:	b6 01       	movw	r22, r12
    2c38:	80 e2       	ldi	r24, 0x20	; 32
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <fputc>
    2c40:	b3 94       	inc	r11
    2c42:	f7 cf       	rjmp	.-18     	; 0x2c32 <vfprintf+0x314>
    2c44:	b2 14       	cp	r11, r2
    2c46:	18 f4       	brcc	.+6      	; 0x2c4e <vfprintf+0x330>
    2c48:	2b 18       	sub	r2, r11
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <vfprintf+0x332>
    2c4c:	98 2c       	mov	r9, r8
    2c4e:	21 2c       	mov	r2, r1
    2c50:	a4 fe       	sbrs	r10, 4
    2c52:	10 c0       	rjmp	.+32     	; 0x2c74 <vfprintf+0x356>
    2c54:	b6 01       	movw	r22, r12
    2c56:	80 e3       	ldi	r24, 0x30	; 48
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <fputc>
    2c5e:	a2 fe       	sbrs	r10, 2
    2c60:	17 c0       	rjmp	.+46     	; 0x2c90 <vfprintf+0x372>
    2c62:	a1 fc       	sbrc	r10, 1
    2c64:	03 c0       	rjmp	.+6      	; 0x2c6c <vfprintf+0x34e>
    2c66:	88 e7       	ldi	r24, 0x78	; 120
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	02 c0       	rjmp	.+4      	; 0x2c70 <vfprintf+0x352>
    2c6c:	88 e5       	ldi	r24, 0x58	; 88
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	b6 01       	movw	r22, r12
    2c72:	0c c0       	rjmp	.+24     	; 0x2c8c <vfprintf+0x36e>
    2c74:	8a 2d       	mov	r24, r10
    2c76:	86 78       	andi	r24, 0x86	; 134
    2c78:	59 f0       	breq	.+22     	; 0x2c90 <vfprintf+0x372>
    2c7a:	a1 fe       	sbrs	r10, 1
    2c7c:	02 c0       	rjmp	.+4      	; 0x2c82 <vfprintf+0x364>
    2c7e:	8b e2       	ldi	r24, 0x2B	; 43
    2c80:	01 c0       	rjmp	.+2      	; 0x2c84 <vfprintf+0x366>
    2c82:	80 e2       	ldi	r24, 0x20	; 32
    2c84:	a7 fc       	sbrc	r10, 7
    2c86:	8d e2       	ldi	r24, 0x2D	; 45
    2c88:	b6 01       	movw	r22, r12
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <fputc>
    2c90:	89 14       	cp	r8, r9
    2c92:	38 f4       	brcc	.+14     	; 0x2ca2 <vfprintf+0x384>
    2c94:	b6 01       	movw	r22, r12
    2c96:	80 e3       	ldi	r24, 0x30	; 48
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <fputc>
    2c9e:	9a 94       	dec	r9
    2ca0:	f7 cf       	rjmp	.-18     	; 0x2c90 <vfprintf+0x372>
    2ca2:	8a 94       	dec	r8
    2ca4:	f3 01       	movw	r30, r6
    2ca6:	e8 0d       	add	r30, r8
    2ca8:	f1 1d       	adc	r31, r1
    2caa:	80 81       	ld	r24, Z
    2cac:	b6 01       	movw	r22, r12
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <fputc>
    2cb4:	81 10       	cpse	r8, r1
    2cb6:	f5 cf       	rjmp	.-22     	; 0x2ca2 <vfprintf+0x384>
    2cb8:	22 20       	and	r2, r2
    2cba:	09 f4       	brne	.+2      	; 0x2cbe <vfprintf+0x3a0>
    2cbc:	42 ce       	rjmp	.-892    	; 0x2942 <vfprintf+0x24>
    2cbe:	b6 01       	movw	r22, r12
    2cc0:	80 e2       	ldi	r24, 0x20	; 32
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <fputc>
    2cc8:	2a 94       	dec	r2
    2cca:	f6 cf       	rjmp	.-20     	; 0x2cb8 <vfprintf+0x39a>
    2ccc:	f6 01       	movw	r30, r12
    2cce:	86 81       	ldd	r24, Z+6	; 0x06
    2cd0:	97 81       	ldd	r25, Z+7	; 0x07
    2cd2:	02 c0       	rjmp	.+4      	; 0x2cd8 <vfprintf+0x3ba>
    2cd4:	8f ef       	ldi	r24, 0xFF	; 255
    2cd6:	9f ef       	ldi	r25, 0xFF	; 255
    2cd8:	2b 96       	adiw	r28, 0x0b	; 11
    2cda:	e2 e1       	ldi	r30, 0x12	; 18
    2cdc:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__epilogue_restores__>

00002ce0 <strnlen_P>:
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	05 90       	lpm	r0, Z+
    2ce4:	61 50       	subi	r22, 0x01	; 1
    2ce6:	70 40       	sbci	r23, 0x00	; 0
    2ce8:	01 10       	cpse	r0, r1
    2cea:	d8 f7       	brcc	.-10     	; 0x2ce2 <strnlen_P+0x2>
    2cec:	80 95       	com	r24
    2cee:	90 95       	com	r25
    2cf0:	8e 0f       	add	r24, r30
    2cf2:	9f 1f       	adc	r25, r31
    2cf4:	08 95       	ret

00002cf6 <strnlen>:
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	61 50       	subi	r22, 0x01	; 1
    2cfa:	70 40       	sbci	r23, 0x00	; 0
    2cfc:	01 90       	ld	r0, Z+
    2cfe:	01 10       	cpse	r0, r1
    2d00:	d8 f7       	brcc	.-10     	; 0x2cf8 <strnlen+0x2>
    2d02:	80 95       	com	r24
    2d04:	90 95       	com	r25
    2d06:	8e 0f       	add	r24, r30
    2d08:	9f 1f       	adc	r25, r31
    2d0a:	08 95       	ret

00002d0c <fputc>:
    2d0c:	0f 93       	push	r16
    2d0e:	1f 93       	push	r17
    2d10:	cf 93       	push	r28
    2d12:	df 93       	push	r29
    2d14:	fb 01       	movw	r30, r22
    2d16:	23 81       	ldd	r18, Z+3	; 0x03
    2d18:	21 fd       	sbrc	r18, 1
    2d1a:	03 c0       	rjmp	.+6      	; 0x2d22 <fputc+0x16>
    2d1c:	8f ef       	ldi	r24, 0xFF	; 255
    2d1e:	9f ef       	ldi	r25, 0xFF	; 255
    2d20:	2c c0       	rjmp	.+88     	; 0x2d7a <fputc+0x6e>
    2d22:	22 ff       	sbrs	r18, 2
    2d24:	16 c0       	rjmp	.+44     	; 0x2d52 <fputc+0x46>
    2d26:	46 81       	ldd	r20, Z+6	; 0x06
    2d28:	57 81       	ldd	r21, Z+7	; 0x07
    2d2a:	24 81       	ldd	r18, Z+4	; 0x04
    2d2c:	35 81       	ldd	r19, Z+5	; 0x05
    2d2e:	42 17       	cp	r20, r18
    2d30:	53 07       	cpc	r21, r19
    2d32:	44 f4       	brge	.+16     	; 0x2d44 <fputc+0x38>
    2d34:	a0 81       	ld	r26, Z
    2d36:	b1 81       	ldd	r27, Z+1	; 0x01
    2d38:	9d 01       	movw	r18, r26
    2d3a:	2f 5f       	subi	r18, 0xFF	; 255
    2d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d3e:	31 83       	std	Z+1, r19	; 0x01
    2d40:	20 83       	st	Z, r18
    2d42:	8c 93       	st	X, r24
    2d44:	26 81       	ldd	r18, Z+6	; 0x06
    2d46:	37 81       	ldd	r19, Z+7	; 0x07
    2d48:	2f 5f       	subi	r18, 0xFF	; 255
    2d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4c:	37 83       	std	Z+7, r19	; 0x07
    2d4e:	26 83       	std	Z+6, r18	; 0x06
    2d50:	14 c0       	rjmp	.+40     	; 0x2d7a <fputc+0x6e>
    2d52:	8b 01       	movw	r16, r22
    2d54:	ec 01       	movw	r28, r24
    2d56:	fb 01       	movw	r30, r22
    2d58:	00 84       	ldd	r0, Z+8	; 0x08
    2d5a:	f1 85       	ldd	r31, Z+9	; 0x09
    2d5c:	e0 2d       	mov	r30, r0
    2d5e:	09 95       	icall
    2d60:	89 2b       	or	r24, r25
    2d62:	e1 f6       	brne	.-72     	; 0x2d1c <fputc+0x10>
    2d64:	d8 01       	movw	r26, r16
    2d66:	16 96       	adiw	r26, 0x06	; 6
    2d68:	8d 91       	ld	r24, X+
    2d6a:	9c 91       	ld	r25, X
    2d6c:	17 97       	sbiw	r26, 0x07	; 7
    2d6e:	01 96       	adiw	r24, 0x01	; 1
    2d70:	17 96       	adiw	r26, 0x07	; 7
    2d72:	9c 93       	st	X, r25
    2d74:	8e 93       	st	-X, r24
    2d76:	16 97       	sbiw	r26, 0x06	; 6
    2d78:	ce 01       	movw	r24, r28
    2d7a:	df 91       	pop	r29
    2d7c:	cf 91       	pop	r28
    2d7e:	1f 91       	pop	r17
    2d80:	0f 91       	pop	r16
    2d82:	08 95       	ret

00002d84 <__ultoa_invert>:
    2d84:	fa 01       	movw	r30, r20
    2d86:	aa 27       	eor	r26, r26
    2d88:	28 30       	cpi	r18, 0x08	; 8
    2d8a:	51 f1       	breq	.+84     	; 0x2de0 <__ultoa_invert+0x5c>
    2d8c:	20 31       	cpi	r18, 0x10	; 16
    2d8e:	81 f1       	breq	.+96     	; 0x2df0 <__ultoa_invert+0x6c>
    2d90:	e8 94       	clt
    2d92:	6f 93       	push	r22
    2d94:	6e 7f       	andi	r22, 0xFE	; 254
    2d96:	6e 5f       	subi	r22, 0xFE	; 254
    2d98:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d9e:	af 4f       	sbci	r26, 0xFF	; 255
    2da0:	b1 e0       	ldi	r27, 0x01	; 1
    2da2:	3e d0       	rcall	.+124    	; 0x2e20 <__ultoa_invert+0x9c>
    2da4:	b4 e0       	ldi	r27, 0x04	; 4
    2da6:	3c d0       	rcall	.+120    	; 0x2e20 <__ultoa_invert+0x9c>
    2da8:	67 0f       	add	r22, r23
    2daa:	78 1f       	adc	r23, r24
    2dac:	89 1f       	adc	r24, r25
    2dae:	9a 1f       	adc	r25, r26
    2db0:	a1 1d       	adc	r26, r1
    2db2:	68 0f       	add	r22, r24
    2db4:	79 1f       	adc	r23, r25
    2db6:	8a 1f       	adc	r24, r26
    2db8:	91 1d       	adc	r25, r1
    2dba:	a1 1d       	adc	r26, r1
    2dbc:	6a 0f       	add	r22, r26
    2dbe:	71 1d       	adc	r23, r1
    2dc0:	81 1d       	adc	r24, r1
    2dc2:	91 1d       	adc	r25, r1
    2dc4:	a1 1d       	adc	r26, r1
    2dc6:	20 d0       	rcall	.+64     	; 0x2e08 <__ultoa_invert+0x84>
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <__ultoa_invert+0x48>
    2dca:	68 94       	set
    2dcc:	3f 91       	pop	r19
    2dce:	2a e0       	ldi	r18, 0x0A	; 10
    2dd0:	26 9f       	mul	r18, r22
    2dd2:	11 24       	eor	r1, r1
    2dd4:	30 19       	sub	r19, r0
    2dd6:	30 5d       	subi	r19, 0xD0	; 208
    2dd8:	31 93       	st	Z+, r19
    2dda:	de f6       	brtc	.-74     	; 0x2d92 <__ultoa_invert+0xe>
    2ddc:	cf 01       	movw	r24, r30
    2dde:	08 95       	ret
    2de0:	46 2f       	mov	r20, r22
    2de2:	47 70       	andi	r20, 0x07	; 7
    2de4:	40 5d       	subi	r20, 0xD0	; 208
    2de6:	41 93       	st	Z+, r20
    2de8:	b3 e0       	ldi	r27, 0x03	; 3
    2dea:	0f d0       	rcall	.+30     	; 0x2e0a <__ultoa_invert+0x86>
    2dec:	c9 f7       	brne	.-14     	; 0x2de0 <__ultoa_invert+0x5c>
    2dee:	f6 cf       	rjmp	.-20     	; 0x2ddc <__ultoa_invert+0x58>
    2df0:	46 2f       	mov	r20, r22
    2df2:	4f 70       	andi	r20, 0x0F	; 15
    2df4:	40 5d       	subi	r20, 0xD0	; 208
    2df6:	4a 33       	cpi	r20, 0x3A	; 58
    2df8:	18 f0       	brcs	.+6      	; 0x2e00 <__ultoa_invert+0x7c>
    2dfa:	49 5d       	subi	r20, 0xD9	; 217
    2dfc:	31 fd       	sbrc	r19, 1
    2dfe:	40 52       	subi	r20, 0x20	; 32
    2e00:	41 93       	st	Z+, r20
    2e02:	02 d0       	rcall	.+4      	; 0x2e08 <__ultoa_invert+0x84>
    2e04:	a9 f7       	brne	.-22     	; 0x2df0 <__ultoa_invert+0x6c>
    2e06:	ea cf       	rjmp	.-44     	; 0x2ddc <__ultoa_invert+0x58>
    2e08:	b4 e0       	ldi	r27, 0x04	; 4
    2e0a:	a6 95       	lsr	r26
    2e0c:	97 95       	ror	r25
    2e0e:	87 95       	ror	r24
    2e10:	77 95       	ror	r23
    2e12:	67 95       	ror	r22
    2e14:	ba 95       	dec	r27
    2e16:	c9 f7       	brne	.-14     	; 0x2e0a <__ultoa_invert+0x86>
    2e18:	00 97       	sbiw	r24, 0x00	; 0
    2e1a:	61 05       	cpc	r22, r1
    2e1c:	71 05       	cpc	r23, r1
    2e1e:	08 95       	ret
    2e20:	9b 01       	movw	r18, r22
    2e22:	ac 01       	movw	r20, r24
    2e24:	0a 2e       	mov	r0, r26
    2e26:	06 94       	lsr	r0
    2e28:	57 95       	ror	r21
    2e2a:	47 95       	ror	r20
    2e2c:	37 95       	ror	r19
    2e2e:	27 95       	ror	r18
    2e30:	ba 95       	dec	r27
    2e32:	c9 f7       	brne	.-14     	; 0x2e26 <__ultoa_invert+0xa2>
    2e34:	62 0f       	add	r22, r18
    2e36:	73 1f       	adc	r23, r19
    2e38:	84 1f       	adc	r24, r20
    2e3a:	95 1f       	adc	r25, r21
    2e3c:	a0 1d       	adc	r26, r0
    2e3e:	08 95       	ret

00002e40 <__prologue_saves__>:
    2e40:	2f 92       	push	r2
    2e42:	3f 92       	push	r3
    2e44:	4f 92       	push	r4
    2e46:	5f 92       	push	r5
    2e48:	6f 92       	push	r6
    2e4a:	7f 92       	push	r7
    2e4c:	8f 92       	push	r8
    2e4e:	9f 92       	push	r9
    2e50:	af 92       	push	r10
    2e52:	bf 92       	push	r11
    2e54:	cf 92       	push	r12
    2e56:	df 92       	push	r13
    2e58:	ef 92       	push	r14
    2e5a:	ff 92       	push	r15
    2e5c:	0f 93       	push	r16
    2e5e:	1f 93       	push	r17
    2e60:	cf 93       	push	r28
    2e62:	df 93       	push	r29
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	ca 1b       	sub	r28, r26
    2e6a:	db 0b       	sbc	r29, r27
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	f8 94       	cli
    2e70:	de bf       	out	0x3e, r29	; 62
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	cd bf       	out	0x3d, r28	; 61
    2e76:	09 94       	ijmp

00002e78 <__epilogue_restores__>:
    2e78:	2a 88       	ldd	r2, Y+18	; 0x12
    2e7a:	39 88       	ldd	r3, Y+17	; 0x11
    2e7c:	48 88       	ldd	r4, Y+16	; 0x10
    2e7e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e80:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e82:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e84:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e86:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e88:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e8a:	b9 84       	ldd	r11, Y+9	; 0x09
    2e8c:	c8 84       	ldd	r12, Y+8	; 0x08
    2e8e:	df 80       	ldd	r13, Y+7	; 0x07
    2e90:	ee 80       	ldd	r14, Y+6	; 0x06
    2e92:	fd 80       	ldd	r15, Y+5	; 0x05
    2e94:	0c 81       	ldd	r16, Y+4	; 0x04
    2e96:	1b 81       	ldd	r17, Y+3	; 0x03
    2e98:	aa 81       	ldd	r26, Y+2	; 0x02
    2e9a:	b9 81       	ldd	r27, Y+1	; 0x01
    2e9c:	ce 0f       	add	r28, r30
    2e9e:	d1 1d       	adc	r29, r1
    2ea0:	0f b6       	in	r0, 0x3f	; 63
    2ea2:	f8 94       	cli
    2ea4:	de bf       	out	0x3e, r29	; 62
    2ea6:	0f be       	out	0x3f, r0	; 63
    2ea8:	cd bf       	out	0x3d, r28	; 61
    2eaa:	ed 01       	movw	r28, r26
    2eac:	08 95       	ret

00002eae <_exit>:
    2eae:	f8 94       	cli

00002eb0 <__stop_program>:
    2eb0:	ff cf       	rjmp	.-2      	; 0x2eb0 <__stop_program>
