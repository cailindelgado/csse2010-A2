
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  00001c88  00001d1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012e  00800202  00800202  00001e1e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bf8  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011c0  00000000  00000000  00004d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a8f  00000000  00000000  00005f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f4  00000000  00000000  000079e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ba9  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a72  00000000  00000000  00008d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000a7f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__ctors_end>
       4:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       8:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      10:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      14:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_5>
      18:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      1c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      20:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      24:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      28:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      2c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      30:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      34:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      38:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      3c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      40:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__vector_16>
      44:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      48:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      4c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      50:	0c 94 96 09 	jmp	0x132c	; 0x132c <__vector_20>
      54:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__vector_21>
      58:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      5c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      60:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      64:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      68:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      6c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      70:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      74:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      78:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2288>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2264>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 20 43 61 69 6c 69 6e 20 44 65 6c 67      by  Cailin Delg
      d4:	61 64 6f 20 2d 20 34 38 30 32 37 39 34 32 00        ado - 48027942.

000000e3 <__c.2262>:
      e3:	20 5c 24 24 20 20 20 5c 24 24 20 20 20 20 20 5c      \$$   \$$     \
      f3:	24 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20     $     \$$   \$$ 
     103:	20 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20           \$$   \$$ 
     113:	20 5c 24 24 24 24 24 24 24 20 5c 24 24 20 20 20      \$$$$$$$ \$$   
     123:	20 20 20 20 20 5c 24 24 24 24 24 24 00                   \$$$$$$.

00000130 <__c.2260>:
     130:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 5c 24     | $$  | $$    \$
     140:	24 24 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20     $$   | $$  | $$ 
     150:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     160:	5c 24 24 20 20 20 20 20 5c 7c 20 24 24 20 20 20     \$$     \| $$   
     170:	20 20 20 20 5c 24 24 20 20 20 20 24 24 00               \$$    $$.

0000017e <__c.2258>:
     17e:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 5c 24 24     | $$  | $$   \$$
     18e:	20 24 24 20 20 7c 20 24 24 20 20 7c 20 24 24 20      $$  | $$  | $$ 
     19e:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 7c          | $$  | $$|
     1ae:	20 24 24 24 24 24 24 24 24 7c 20 24 24 20 20 20      $$$$$$$$| $$   
     1be:	20 20 20 7c 20 24 24 5f 5f 2f 20 24 24 00              | $$__/ $$.

000001cc <__c.2256>:
     1cc:	7c 20 24 24 24 24 24 24 24 24 20 20 5c 24 24 5c     | $$$$$$$$  \$$\
     1dc:	20 20 24 24 20 7c 20 24 24 24 24 24 24 24 5c 20       $$ | $$$$$$$\ 
     1ec:	20 20 20 20 20 7c 20 24 24 24 24 24 24 24 24 7c          | $$$$$$$$|
     1fc:	20 24 24 20 20 20 20 24 24 7c 20 24 24 20 20 20      $$    $$| $$   
     20c:	5c 24 24 7c 20 24 24 20 20 7c 20 24 24 00           \$$| $$  | $$.

0000021a <__c.2254>:
     21a:	7c 20 24 24 20 20 20 20 24 24 20 5c 24 24 5c 20     | $$    $$ \$$\ 
     22a:	2f 20 20 24 24 7c 20 24 24 20 20 20 20 24 24 20     /  $$| $$    $$ 
     23a:	20 20 20 20 20 7c 20 24 24 20 20 20 20 24 24 7c          | $$    $$|
     24a:	20 20 24 24 24 24 24 24 5c 7c 20 20 24 24 24 24       $$$$$$\|  $$$$
     25a:	24 24 5c 7c 20 20 24 24 24 24 24 24 5c 00           $$\|  $$$$$$\.

00000268 <__c.2252>:
     268:	7c 20 24 24 5f 5f 7c 20 24 24 7c 20 24 24 20 20     | $$__| $$| $$  
     278:	20 7c 20 24 24 7c 20 24 24 5f 5f 7c 20 24 24 20      | $$| $$__| $$ 
     288:	20 20 20 20 20 7c 20 24 24 5f 5f 7c 20 24 24 20          | $$__| $$ 
     298:	2f 20 20 20 20 20 20 5c 20 20 2f 20 20 20 20 20     /      \  /     
     2a8:	20 5c 20 20 2f 20 20 20 20 20 20 5c 00               \  /      \.

000002b5 <__c.2250>:
     2b5:	7c 20 20 24 24 24 24 24 24 5c 7c 20 24 24 20 20     |  $$$$$$\| $$  
     2c5:	20 7c 20 24 24 7c 20 24 24 24 24 24 24 24 5c 20      | $$| $$$$$$$\ 
     2d5:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     2e5:	20 5f 5f 5f 5f 5f 5f 20 20 20 20 5f 5f 5f 5f 5f      ______    _____
     2f5:	5f 20 20 20 20 5f 5f 5f 5f 5f 5f 00                 _    ______.

00000301 <__c.2248>:
     301:	20 2f 20 20 20 20 20 20 5c 20 7c 20 20 5c 20 20      /      \ |  \  
     311:	20 7c 20 20 5c 7c 20 20 20 20 20 20 20 5c 20 20      |  \|       \  
     321:	20 20 20 20 20 7c 20 20 5c 20 20 7c 20 20 5c 00          |  \  |  \.

00000331 <__c.2246>:
     331:	20 20 5f 5f 5f 5f 5f 5f 20 20 20 5f 5f 20 20 20       ______   __   
     341:	20 20 5f 5f 20 20 5f 5f 5f 5f 5f 5f 5f 20 20 20       __  _______   
     351:	20 20 20 20 20 20 5f 5f 20 20 20 20 5f 5f 00              __    __.

00000360 <__c.2058>:
     360:	1b 5b 3f 32 35 68 00                                .[?25h.

00000367 <__c.2054>:
     367:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000036e <__c.2050>:
     36e:	1b 5b 25 64 6d 00                                   .[%dm.

00000374 <__c.2045>:
     374:	1b 5b 4b 00                                         .[K.

00000378 <__c.2040>:
     378:	1b 5b 32 4a 00                                      .[2J.

0000037d <__c.2025>:
     37d:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000386 <__ctors_end>:
     386:	11 24       	eor	r1, r1
     388:	1f be       	out	0x3f, r1	; 63
     38a:	cf ef       	ldi	r28, 0xFF	; 255
     38c:	d8 e0       	ldi	r29, 0x08	; 8
     38e:	de bf       	out	0x3e, r29	; 62
     390:	cd bf       	out	0x3d, r28	; 61

00000392 <__do_copy_data>:
     392:	12 e0       	ldi	r17, 0x02	; 2
     394:	a0 e0       	ldi	r26, 0x00	; 0
     396:	b1 e0       	ldi	r27, 0x01	; 1
     398:	e8 e8       	ldi	r30, 0x88	; 136
     39a:	fc e1       	ldi	r31, 0x1C	; 28
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__do_copy_data+0x10>
     39e:	05 90       	lpm	r0, Z+
     3a0:	0d 92       	st	X+, r0
     3a2:	a2 30       	cpi	r26, 0x02	; 2
     3a4:	b1 07       	cpc	r27, r17
     3a6:	d9 f7       	brne	.-10     	; 0x39e <__do_copy_data+0xc>

000003a8 <__do_clear_bss>:
     3a8:	23 e0       	ldi	r18, 0x03	; 3
     3aa:	a2 e0       	ldi	r26, 0x02	; 2
     3ac:	b2 e0       	ldi	r27, 0x02	; 2
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
     3b2:	a0 33       	cpi	r26, 0x30	; 48
     3b4:	b2 07       	cpc	r27, r18
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>
     3b8:	0e 94 8c 08 	call	0x1118	; 0x1118 <main>
     3bc:	0c 94 42 0e 	jmp	0x1c84	; 0x1c84 <_exit>

000003c0 <__bad_interrupt>:
     3c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c4 <init_button_interrupts>:
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void)
{
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     3c4:	e8 e6       	ldi	r30, 0x68	; 104
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	82 60       	ori	r24, 0x02	; 2
     3cc:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     3ce:	8b b3       	in	r24, 0x1b	; 27
     3d0:	82 60       	ori	r24, 0x02	; 2
     3d2:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     3d4:	ec e6       	ldi	r30, 0x6C	; 108
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	8f 60       	ori	r24, 0x0F	; 15
     3dc:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     3de:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
     3e2:	08 95       	ret

000003e4 <button_pushed>:

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0)
     3e4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
     3e8:	18 16       	cp	r1, r24
     3ea:	14 f5       	brge	.+68     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     3ec:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3f0:	6f b7       	in	r22, 0x3f	; 63
		cli();
     3f2:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	09 c0       	rjmp	.+18     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		{
			button_queue[i - 1] = button_queue[i];
     3f8:	f9 01       	movw	r30, r18
     3fa:	ed 5f       	subi	r30, 0xFD	; 253
     3fc:	fd 4f       	sbci	r31, 0xFD	; 253
     3fe:	40 81       	ld	r20, Z
     400:	f9 01       	movw	r30, r18
     402:	ee 5f       	subi	r30, 0xFE	; 254
     404:	fd 4f       	sbci	r31, 0xFD	; 253
     406:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     408:	9f 5f       	subi	r25, 0xFF	; 255
     40a:	29 2f       	mov	r18, r25
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <__data_end>
     412:	04 2e       	mov	r0, r20
     414:	00 0c       	add	r0, r0
     416:	55 0b       	sbc	r21, r21
     418:	24 17       	cp	r18, r20
     41a:	35 07       	cpc	r19, r21
     41c:	6c f3       	brlt	.-38     	; 0x3f8 <button_pushed+0x14>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     41e:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <__data_end>
     422:	91 50       	subi	r25, 0x01	; 1
     424:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__data_end>
		
		if (interrupts_were_enabled)
     428:	66 23       	and	r22, r22
     42a:	1c f4       	brge	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		{
			// Turn them back on again
			sei();
     42c:	78 94       	sei
     42e:	08 95       	ret
	queue_length = 0;
}

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     430:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     432:	08 95       	ret

00000434 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect)
{
     434:	1f 92       	push	r1
     436:	0f 92       	push	r0
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     44c:	43 b1       	in	r20, 0x03	; 3
     44e:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	26 c0       	rjmp	.+76     	; 0x4a0 <__vector_5+0x6c>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     454:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <__data_end>
     458:	94 30       	cpi	r25, 0x04	; 4
     45a:	0c f5       	brge	.+66     	; 0x49e <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     45c:	24 2f       	mov	r18, r20
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	08 2e       	mov	r0, r24
     462:	02 c0       	rjmp	.+4      	; 0x468 <__vector_5+0x34>
     464:	35 95       	asr	r19
     466:	27 95       	ror	r18
     468:	0a 94       	dec	r0
     46a:	e2 f7       	brpl	.-8      	; 0x464 <__vector_5+0x30>
     46c:	20 ff       	sbrs	r18, 0
     46e:	17 c0       	rjmp	.+46     	; 0x49e <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin)))
     470:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <last_button_state>
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	08 2e       	mov	r0, r24
     478:	02 c0       	rjmp	.+4      	; 0x47e <__vector_5+0x4a>
     47a:	35 95       	asr	r19
     47c:	27 95       	ror	r18
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <__vector_5+0x46>
     482:	20 fd       	sbrc	r18, 0
     484:	0c c0       	rjmp	.+24     	; 0x49e <__vector_5+0x6a>
				{
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     486:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__data_end>
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	9e 0f       	add	r25, r30
     48e:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__data_end>
     492:	0e 2e       	mov	r0, r30
     494:	00 0c       	add	r0, r0
     496:	ff 0b       	sbc	r31, r31
     498:	ed 5f       	subi	r30, 0xFD	; 253
     49a:	fd 4f       	sbci	r31, 0xFD	; 253
     49c:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	c0 f2       	brcs	.-80     	; 0x454 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     4a4:	40 93 07 02 	sts	0x0207, r20	; 0x800207 <last_button_state>
}
     4a8:	ff 91       	pop	r31
     4aa:	ef 91       	pop	r30
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <update_start_screen>:

// Update dynamic start screen based on the frame number (0-31)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	18 2f       	mov	r17, r24
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     4c8:	d4 e0       	ldi	r29, 0x04	; 4
     4ca:	36 c0       	rjmp	.+108    	; 0x538 <update_start_screen+0x78>
	{
		for (uint8_t col = 11; col < 16; col++)
		{
			colour = col == 14 ? COLOUR_YELLOW : COLOUR_BLACK;
     4cc:	ce 30       	cpi	r28, 0x0E	; 14
     4ce:	11 f4       	brne	.+4      	; 0x4d4 <update_start_screen+0x14>
     4d0:	4f ef       	ldi	r20, 0xFF	; 255
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <update_start_screen+0x16>
     4d4:	40 e0       	ldi	r20, 0x00	; 0
			if (((32+col-frame_number) & ((1<<(row-2))-1)) == (1<<(row-3))-1)
     4d6:	2c 2f       	mov	r18, r28
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	20 5e       	subi	r18, 0xE0	; 224
     4dc:	3f 4f       	sbci	r19, 0xFF	; 255
     4de:	21 1b       	sub	r18, r17
     4e0:	31 09       	sbc	r19, r1
     4e2:	ed 2f       	mov	r30, r29
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	bf 01       	movw	r22, r30
     4e8:	62 50       	subi	r22, 0x02	; 2
     4ea:	71 09       	sbc	r23, r1
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	dc 01       	movw	r26, r24
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <update_start_screen+0x38>
     4f4:	aa 0f       	add	r26, r26
     4f6:	bb 1f       	adc	r27, r27
     4f8:	6a 95       	dec	r22
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <update_start_screen+0x34>
     4fc:	bd 01       	movw	r22, r26
     4fe:	61 50       	subi	r22, 0x01	; 1
     500:	71 09       	sbc	r23, r1
     502:	26 23       	and	r18, r22
     504:	37 23       	and	r19, r23
     506:	33 97       	sbiw	r30, 0x03	; 3
     508:	02 c0       	rjmp	.+4      	; 0x50e <update_start_screen+0x4e>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	ea 95       	dec	r30
     510:	e2 f7       	brpl	.-8      	; 0x50a <update_start_screen+0x4a>
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	28 17       	cp	r18, r24
     516:	39 07       	cpc	r19, r25
     518:	29 f4       	brne	.+10     	; 0x524 <update_start_screen+0x64>
			{
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
     51a:	ce 30       	cpi	r28, 0x0E	; 14
     51c:	10 f4       	brcc	.+4      	; 0x522 <update_start_screen+0x62>
     51e:	4f e0       	ldi	r20, 0x0F	; 15
     520:	01 c0       	rjmp	.+2      	; 0x524 <update_start_screen+0x64>
     522:	40 ef       	ldi	r20, 0xF0	; 240
			}
			ledmatrix_update_pixel(col, row, colour);
     524:	6d 2f       	mov	r22, r29
     526:	8c 2f       	mov	r24, r28
     528:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
	{
		for (uint8_t col = 11; col < 16; col++)
     52c:	cf 5f       	subi	r28, 0xFF	; 255
     52e:	01 c0       	rjmp	.+2      	; 0x532 <update_start_screen+0x72>
     530:	cb e0       	ldi	r28, 0x0B	; 11
     532:	c0 31       	cpi	r28, 0x10	; 16
     534:	58 f2       	brcs	.-106    	; 0x4cc <update_start_screen+0xc>
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     536:	df 5f       	subi	r29, 0xFF	; 255
     538:	d8 30       	cpi	r29, 0x08	; 8
     53a:	d0 f3       	brcs	.-12     	; 0x530 <update_start_screen+0x70>
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
			}
			ledmatrix_update_pixel(col, row, colour);
		}
	}
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	08 95       	ret

00000544 <show_start_screen>:
// Stored as a 5 x 3 grid pattern going from Left-to-Right, Top-to-Bottom
// Padded with a leading zero so that it fits into a 16-bit value


void show_start_screen(void)
{
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	28 97       	sbiw	r28, 0x08	; 8
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     55a:	0e 94 33 06 	call	0xc66	; 0xc66 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	31 c0       	rjmp	.+98     	; 0x5c4 <show_start_screen+0x80>
	{
		col_data = pong_display[col];
     562:	e1 2f       	mov	r30, r17
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	e1 5f       	subi	r30, 0xF1	; 241
     568:	fe 4f       	sbci	r31, 0xFE	; 254
     56a:	90 81       	ld	r25, Z
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	21 c0       	rjmp	.+66     	; 0x5b2 <show_start_screen+0x6e>
		{
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data>>row & 1)
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	49 2f       	mov	r20, r25
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	08 2e       	mov	r0, r24
     57a:	02 c0       	rjmp	.+4      	; 0x580 <show_start_screen+0x3c>
     57c:	55 95       	asr	r21
     57e:	47 95       	ror	r20
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <show_start_screen+0x38>
     584:	40 ff       	sbrs	r20, 0
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <show_start_screen+0x5e>
			{
				column_colour_data[row] = (row < 4 ? COLOUR_RED : COLOUR_GREEN);
     588:	84 30       	cpi	r24, 0x04	; 4
     58a:	10 f4       	brcc	.+4      	; 0x590 <show_start_screen+0x4c>
     58c:	4f e0       	ldi	r20, 0x0F	; 15
     58e:	01 c0       	rjmp	.+2      	; 0x592 <show_start_screen+0x4e>
     590:	40 ef       	ldi	r20, 0xF0	; 240
     592:	e1 e0       	ldi	r30, 0x01	; 1
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	ec 0f       	add	r30, r28
     598:	fd 1f       	adc	r31, r29
     59a:	e2 0f       	add	r30, r18
     59c:	f3 1f       	adc	r31, r19
     59e:	40 83       	st	Z, r20
     5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <show_start_screen+0x6c>
			}
			else
			{
				column_colour_data[row] = 0;
     5a2:	e1 e0       	ldi	r30, 0x01	; 1
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	ec 0f       	add	r30, r28
     5a8:	fd 1f       	adc	r31, r29
     5aa:	e2 0f       	add	r30, r18
     5ac:	f3 1f       	adc	r31, r19
     5ae:	10 82       	st	Z, r1
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
	{
		col_data = pong_display[col];
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	88 30       	cpi	r24, 0x08	; 8
     5b4:	e8 f2       	brcs	.-70     	; 0x570 <show_start_screen+0x2c>
			else
			{
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
     5b6:	be 01       	movw	r22, r28
     5b8:	6f 5f       	subi	r22, 0xFF	; 255
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	81 2f       	mov	r24, r17
     5be:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_column>
{
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     5c2:	1f 5f       	subi	r17, 0xFF	; 255
     5c4:	10 31       	cpi	r17, 0x10	; 16
     5c6:	68 f2       	brcs	.-102    	; 0x562 <show_start_screen+0x1e>
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
	}
	update_start_screen(0);
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
}
     5ce:	28 96       	adiw	r28, 0x08	; 8
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	08 95       	ret

000005e2 <default_grid>:
}

// Initialise the display for the board, this creates the display
// for an empty board.
void default_grid(void)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	28 97       	sbiw	r28, 0x08	; 8
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_clear();
     5f6:	0e 94 33 06 	call	0xc66	; 0xc66 <ledmatrix_clear>
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <default_grid+0x2e>
	{
		colours[row] = COLOUR_YELLOW;
     5fe:	e1 e0       	ldi	r30, 0x01	; 1
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	e8 0f       	add	r30, r24
     608:	f1 1d       	adc	r31, r1
     60a:	9f ef       	ldi	r25, 0xFF	; 255
     60c:	90 83       	st	Z, r25
void default_grid(void)
{
	ledmatrix_clear();
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     60e:	8f 5f       	subi	r24, 0xFF	; 255
     610:	88 30       	cpi	r24, 0x08	; 8
     612:	a8 f3       	brcs	.-22     	; 0x5fe <default_grid+0x1c>
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
     614:	be 01       	movw	r22, r28
     616:	6f 5f       	subi	r22, 0xFF	; 255
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	8d e0       	ldi	r24, 0x0D	; 13
     61c:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	09 c0       	rjmp	.+18     	; 0x636 <default_grid+0x54>
	{
		colours[row] = COLOUR_HALF_YELLOW;
     624:	e1 e0       	ldi	r30, 0x01	; 1
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ec 0f       	add	r30, r28
     62a:	fd 1f       	adc	r31, r29
     62c:	e8 0f       	add	r30, r24
     62e:	f1 1d       	adc	r31, r1
     630:	95 e5       	ldi	r25, 0x55	; 85
     632:	90 83       	st	Z, r25
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	88 30       	cpi	r24, 0x08	; 8
     638:	a8 f3       	brcs	.-22     	; 0x624 <default_grid+0x42>
	{
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
     63a:	be 01       	movw	r22, r28
     63c:	6f 5f       	subi	r22, 0xFF	; 255
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	8c e0       	ldi	r24, 0x0C	; 12
     642:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_column>
	ledmatrix_update_column(14, colours);
     646:	be 01       	movw	r22, r28
     648:	6f 5f       	subi	r22, 0xFF	; 255
     64a:	7f 4f       	sbci	r23, 0xFF	; 255
     64c:	8e e0       	ldi	r24, 0x0E	; 14
     64e:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	09 c0       	rjmp	.+18     	; 0x668 <default_grid+0x86>
	{
		colours[row] = COLOUR_QUART_YELLOW;
     656:	e1 e0       	ldi	r30, 0x01	; 1
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	e8 0f       	add	r30, r24
     660:	f1 1d       	adc	r31, r1
     662:	91 e1       	ldi	r25, 0x11	; 17
     664:	90 83       	st	Z, r25
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
	ledmatrix_update_column(14, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	88 30       	cpi	r24, 0x08	; 8
     66a:	a8 f3       	brcs	.-22     	; 0x656 <default_grid+0x74>
	{
		colours[row] = COLOUR_QUART_YELLOW;
	}
	ledmatrix_update_column(11, colours);
     66c:	be 01       	movw	r22, r28
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	8b e0       	ldi	r24, 0x0B	; 11
     674:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_column>
	ledmatrix_update_column(15, colours);
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	8f e0       	ldi	r24, 0x0F	; 15
     680:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_column>
}
     684:	28 96       	adiw	r28, 0x08	; 8
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <update_points>:


void update_points() {
	
	//clear terminal and reprint the game score with the points
	move_terminal_cursor(10, 14);
     696:	6e e0       	ldi	r22, 0x0E	; 14
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	8a e0       	ldi	r24, 0x0A	; 10
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
	clear_to_end_of_line();
     6a2:	0e 94 35 0a 	call	0x146a	; 0x146a <clear_to_end_of_line>

	// if x >= 10 and [-9, 0)
	if ((points >= 10) || (points < 0 && points >= -9)) {
     6a6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <points>
     6aa:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <points+0x1>
     6ae:	8a 30       	cpi	r24, 0x0A	; 10
     6b0:	91 05       	cpc	r25, r1
     6b2:	34 f4       	brge	.+12     	; 0x6c0 <update_points+0x2a>
     6b4:	9c 01       	movw	r18, r24
     6b6:	27 5f       	subi	r18, 0xF7	; 247
     6b8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ba:	29 30       	cpi	r18, 0x09	; 9
     6bc:	31 05       	cpc	r19, r1
     6be:	68 f4       	brcc	.+26     	; 0x6da <update_points+0x44>
		printf("Game Score:   %d", points);
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	8f e1       	ldi	r24, 0x1F	; 31
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	0e 94 3e 0b 	call	0x167c	; 0x167c <printf>
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	08 95       	ret
		
		//if x >= 100 and (-9, -99)
		} else if ((points >= 100) || (points < -9 && points > -99)) {
     6da:	84 36       	cpi	r24, 0x64	; 100
     6dc:	91 05       	cpc	r25, r1
     6de:	34 f4       	brge	.+12     	; 0x6ec <update_points+0x56>
     6e0:	9c 01       	movw	r18, r24
     6e2:	2e 59       	subi	r18, 0x9E	; 158
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255
     6e6:	29 35       	cpi	r18, 0x59	; 89
     6e8:	31 05       	cpc	r19, r1
     6ea:	68 f4       	brcc	.+26     	; 0x706 <update_points+0x70>
		printf("Game Score:  %d", points);
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	80 e3       	ldi	r24, 0x30	; 48
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	0e 94 3e 0b 	call	0x167c	; 0x167c <printf>
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	08 95       	ret
		
		//if x < -99
		} else if (points < -99) {
     706:	8d 39       	cpi	r24, 0x9D	; 157
     708:	2f ef       	ldi	r18, 0xFF	; 255
     70a:	92 07       	cpc	r25, r18
     70c:	6c f4       	brge	.+26     	; 0x728 <update_points+0x92>
		printf("Game Score: %d", points);
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	80 e4       	ldi	r24, 0x40	; 64
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0e 94 3e 0b 	call	0x167c	; 0x167c <printf>
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	08 95       	ret
		
		} else {
		printf("Game Score:    %d", points);
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	8f e4       	ldi	r24, 0x4F	; 79
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	9f 93       	push	r25
     732:	8f 93       	push	r24
     734:	0e 94 3e 0b 	call	0x167c	; 0x167c <printf>
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	08 95       	ret

00000742 <initialise_game>:

// Initialize the game by resetting the grid and beat
void initialise_game(void)
{
	// initialize the display we are using.
	default_grid();
     742:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <default_grid>
	beat = 0;
     746:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <beat+0x1>
     74a:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <beat>
	
	update_points();
     74e:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
     752:	08 95       	ret

00000754 <play_note>:
}


// Play a note in the given lane
void play_note(uint8_t lane)
{	
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	d8 2f       	mov	r29, r24

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     75c:	cb e0       	ldi	r28, 0x0B	; 11
     75e:	7d c0       	rjmp	.+250    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
	
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col; //this is the next position that the note will be in
     760:	8f e0       	ldi	r24, 0x0F	; 15
     762:	8c 1b       	sub	r24, r28
		uint8_t index = (future + beat) / 5;	//this is the note??
     764:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <beat>
     768:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <beat+0x1>
     76c:	48 0f       	add	r20, r24
     76e:	51 1d       	adc	r21, r1
     770:	9a 01       	movw	r18, r20
     772:	ad ec       	ldi	r26, 0xCD	; 205
     774:	bc ec       	ldi	r27, 0xCC	; 204
     776:	0e 94 cf 0a 	call	0x159e	; 0x159e <__umulhisi3>
     77a:	fc 01       	movw	r30, r24
     77c:	f6 95       	lsr	r31
     77e:	e7 95       	ror	r30
     780:	f6 95       	lsr	r31
     782:	e7 95       	ror	r30
		
		if ((future + beat) % 5) {
     784:	cf 01       	movw	r24, r30
     786:	88 0f       	add	r24, r24
     788:	99 1f       	adc	r25, r25
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	8e 0f       	add	r24, r30
     790:	9f 1f       	adc	r25, r31
     792:	48 17       	cp	r20, r24
     794:	59 07       	cpc	r21, r25
     796:	09 f0       	breq	.+2      	; 0x79a <play_note+0x46>
     798:	5f c0       	rjmp	.+190    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
			continue;
		}
		if (track[index] & (1<<lane))
     79a:	ff 27       	eor	r31, r31
     79c:	ef 59       	subi	r30, 0x9F	; 159
     79e:	fe 4f       	sbci	r31, 0xFE	; 254
     7a0:	80 81       	ld	r24, Z
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0d 2e       	mov	r0, r29
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <play_note+0x58>
     7a8:	95 95       	asr	r25
     7aa:	87 95       	ror	r24
     7ac:	0a 94       	dec	r0
     7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <play_note+0x54>
     7b0:	80 ff       	sbrs	r24, 0
     7b2:	47 c0       	rjmp	.+142    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		{
			
			if (green_check == lane) {
     7b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7b8:	d8 13       	cpse	r29, r24
     7ba:	0c c0       	rjmp	.+24     	; 0x7d4 <play_note+0x80>
				points--;
     7bc:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <points>
     7c0:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <points+0x1>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <points+0x1>
     7ca:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <points>
				update_points();
     7ce:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
				
				break;
     7d2:	46 c0       	rjmp	.+140    	; 0x860 <__DATA_REGION_LENGTH__+0x60>
			}
			
			green_check = lane;
     7d4:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			// if so, colour the two pixels green
			ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     7d8:	40 ef       	ldi	r20, 0xF0	; 240
     7da:	1d 2f       	mov	r17, r29
     7dc:	11 0f       	add	r17, r17
     7de:	61 2f       	mov	r22, r17
     7e0:	8c 2f       	mov	r24, r28
     7e2:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	61 0f       	add	r22, r17
     7ea:	40 ef       	ldi	r20, 0xF0	; 240
     7ec:	8c 2f       	mov	r24, r28
     7ee:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
			
			//if the note is in the two specified lanes then award the appropriate amount of points
			if (col == 11 || col == 15) {
     7f2:	cb 30       	cpi	r28, 0x0B	; 11
     7f4:	11 f0       	breq	.+4      	; 0x7fa <play_note+0xa6>
     7f6:	cf 30       	cpi	r28, 0x0F	; 15
     7f8:	51 f4       	brne	.+20     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
				points++;
     7fa:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <points>
     7fe:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <points+0x1>
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <points+0x1>
     808:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <points>
     80c:	23 c0       	rjmp	.+70     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
				
			} else if (col == 12 || col == 14) {
     80e:	cc 30       	cpi	r28, 0x0C	; 12
     810:	11 f0       	breq	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     812:	ce 30       	cpi	r28, 0x0E	; 14
     814:	51 f4       	brne	.+20     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
				points += 2;
     816:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <points>
     81a:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <points+0x1>
     81e:	02 96       	adiw	r24, 0x02	; 2
     820:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <points+0x1>
     824:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <points>
     828:	15 c0       	rjmp	.+42     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
				
			} else if (col == 13) {
     82a:	cd 30       	cpi	r28, 0x0D	; 13
     82c:	99 f4       	brne	.+38     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
				points += 3;
     82e:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <points>
     832:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <points+0x1>
     836:	03 96       	adiw	r24, 0x03	; 3
     838:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <points+0x1>
     83c:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <points>
     840:	09 c0       	rjmp	.+18     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
			
			}
			
		} else {
			points--;
     842:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <points>
     846:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <points+0x1>
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <points+0x1>
     850:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <points>
		
		}
			
		update_points();
     854:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>

// Play a note in the given lane
void play_note(uint8_t lane)
{	

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     858:	cf 5f       	subi	r28, 0xFF	; 255
     85a:	c0 31       	cpi	r28, 0x10	; 16
     85c:	08 f4       	brcc	.+2      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
     85e:	80 cf       	rjmp	.-256    	; 0x760 <play_note+0xc>
		}
			
		update_points();
		
		}	
}
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <advance_note>:
	

// Advance the notes one row down the display
void advance_note(void)
{
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     876:	10 e0       	ldi	r17, 0x00	; 0
     878:	e9 c0       	rjmp	.+466    	; 0xa4c <__stack+0x14d>
	{
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col;
     87a:	8f e0       	ldi	r24, 0x0F	; 15
     87c:	81 1b       	sub	r24, r17
		uint8_t index = (future + beat) / 5;
     87e:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <beat>
     882:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <beat+0x1>
     886:	af 01       	movw	r20, r30
     888:	48 0f       	add	r20, r24
     88a:	51 1d       	adc	r21, r1
     88c:	9a 01       	movw	r18, r20
     88e:	ad ec       	ldi	r26, 0xCD	; 205
     890:	bc ec       	ldi	r27, 0xCC	; 204
     892:	0e 94 cf 0a 	call	0x159e	; 0x159e <__umulhisi3>
     896:	ec 01       	movw	r28, r24
     898:	d6 95       	lsr	r29
     89a:	c7 95       	ror	r28
     89c:	d6 95       	lsr	r29
     89e:	c7 95       	ror	r28
     8a0:	0c 2f       	mov	r16, r28
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     8a2:	9f 01       	movw	r18, r30
     8a4:	21 5f       	subi	r18, 0xF1	; 241
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255
     8a8:	0e 94 cf 0a 	call	0x159e	; 0x159e <__umulhisi3>
     8ac:	96 95       	lsr	r25
     8ae:	87 95       	ror	r24
     8b0:	96 95       	lsr	r25
     8b2:	87 95       	ror	r24
		uint8_t ghost_index = ghost_start_index +1;
     8b4:	8f 5f       	subi	r24, 0xFF	; 255
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     8b6:	08 c0       	rjmp	.+16     	; 0x8c8 <advance_note+0x60>
			if (track[ghost_index] & 0x0F) {
     8b8:	e8 2f       	mov	r30, r24
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	ef 59       	subi	r30, 0x9F	; 159
     8be:	fe 4f       	sbci	r31, 0xFE	; 254
     8c0:	90 81       	ld	r25, Z
     8c2:	9f 70       	andi	r25, 0x0F	; 15
     8c4:	19 f4       	brne	.+6      	; 0x8cc <advance_note+0x64>
		uint8_t index = (future + beat) / 5;
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
		uint8_t ghost_index = ghost_start_index +1;
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     8c6:	8f 5f       	subi	r24, 0xFF	; 255
     8c8:	81 38       	cpi	r24, 0x81	; 129
     8ca:	b0 f3       	brcs	.-20     	; 0x8b8 <advance_note+0x50>
			if (track[ghost_index] & 0x0F) {
				break;
			}
		}
		uint8_t ghost_note = track[ghost_index];
     8cc:	e8 2f       	mov	r30, r24
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	ef 59       	subi	r30, 0x9F	; 159
     8d2:	fe 4f       	sbci	r31, 0xFE	; 254
     8d4:	f0 80       	ld	r15, Z
		
		if (index >= TRACK_LENGTH)
     8d6:	01 38       	cpi	r16, 0x81	; 129
     8d8:	20 f0       	brcs	.+8      	; 0x8e2 <advance_note+0x7a>
		{
			//Game Over
			game_over = 1;
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <game_over>
			break;
     8e0:	b8 c0       	rjmp	.+368    	; 0xa52 <__stack+0x153>
		}
		if ((future+beat) % 5)
     8e2:	9a 01       	movw	r18, r20
     8e4:	ad ec       	ldi	r26, 0xCD	; 205
     8e6:	bc ec       	ldi	r27, 0xCC	; 204
     8e8:	0e 94 cf 0a 	call	0x159e	; 0x159e <__umulhisi3>
     8ec:	96 95       	lsr	r25
     8ee:	87 95       	ror	r24
     8f0:	96 95       	lsr	r25
     8f2:	87 95       	ror	r24
     8f4:	9c 01       	movw	r18, r24
     8f6:	22 0f       	add	r18, r18
     8f8:	33 1f       	adc	r19, r19
     8fa:	22 0f       	add	r18, r18
     8fc:	33 1f       	adc	r19, r19
     8fe:	82 0f       	add	r24, r18
     900:	93 1f       	adc	r25, r19
     902:	48 17       	cp	r20, r24
     904:	59 07       	cpc	r21, r25
     906:	09 f0       	breq	.+2      	; 0x90a <__stack+0xb>
     908:	a0 c0       	rjmp	.+320    	; 0xa4a <__stack+0x14b>
     90a:	00 e0       	ldi	r16, 0x00	; 0
     90c:	9b c0       	rjmp	.+310    	; 0xa44 <__stack+0x145>
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
		{
			//check if the next note is in the appropriate lane
			if ((ghost_note == 0x01) & (lane == 0)) {
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	f9 12       	cpse	r15, r25
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	01 11       	cpse	r16, r1
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	89 23       	and	r24, r25
     91c:	71 f0       	breq	.+28     	; 0x93a <__stack+0x3b>
				ledmatrix_update_pixel(0, 2*lane, COLOUR_DARK_RED);
     91e:	41 e0       	ldi	r20, 0x01	; 1
     920:	e0 2e       	mov	r14, r16
     922:	ee 0c       	add	r14, r14
     924:	6e 2d       	mov	r22, r14
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, COLOUR_DARK_RED);
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	6e 0d       	add	r22, r14
     930:	41 e0       	ldi	r20, 0x01	; 1
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
     938:	47 c0       	rjmp	.+142    	; 0x9c8 <__stack+0xc9>
				
			} else if ((ghost_note == 0x02) & (lane == 1)) {
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	f8 12       	cpse	r15, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	01 30       	cpi	r16, 0x01	; 1
     946:	09 f0       	breq	.+2      	; 0x94a <__stack+0x4b>
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	89 23       	and	r24, r25
     94c:	71 f0       	breq	.+28     	; 0x96a <__stack+0x6b>
				ledmatrix_update_pixel(0, 2*lane, COLOUR_DARK_RED);
     94e:	41 e0       	ldi	r20, 0x01	; 1
     950:	e0 2e       	mov	r14, r16
     952:	ee 0c       	add	r14, r14
     954:	6e 2d       	mov	r22, r14
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, COLOUR_DARK_RED);
     95c:	61 e0       	ldi	r22, 0x01	; 1
     95e:	6e 0d       	add	r22, r14
     960:	41 e0       	ldi	r20, 0x01	; 1
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
     968:	2f c0       	rjmp	.+94     	; 0x9c8 <__stack+0xc9>
			
			} else if ((ghost_note == 0x04) & (lane == 2)) {
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	84 e0       	ldi	r24, 0x04	; 4
     96e:	f8 12       	cpse	r15, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	02 30       	cpi	r16, 0x02	; 2
     976:	09 f0       	breq	.+2      	; 0x97a <__stack+0x7b>
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	89 23       	and	r24, r25
     97c:	71 f0       	breq	.+28     	; 0x99a <__stack+0x9b>
				ledmatrix_update_pixel(0, 2*lane, COLOUR_DARK_RED);
     97e:	41 e0       	ldi	r20, 0x01	; 1
     980:	e0 2e       	mov	r14, r16
     982:	ee 0c       	add	r14, r14
     984:	6e 2d       	mov	r22, r14
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, COLOUR_DARK_RED);
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	6e 0d       	add	r22, r14
     990:	41 e0       	ldi	r20, 0x01	; 1
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
     998:	17 c0       	rjmp	.+46     	; 0x9c8 <__stack+0xc9>
			
			} else if ((ghost_note == 0x08) & (lane == 3)) {
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	88 e0       	ldi	r24, 0x08	; 8
     99e:	f8 12       	cpse	r15, r24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	03 30       	cpi	r16, 0x03	; 3
     9a6:	09 f0       	breq	.+2      	; 0x9aa <__stack+0xab>
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	89 23       	and	r24, r25
     9ac:	69 f0       	breq	.+26     	; 0x9c8 <__stack+0xc9>
				ledmatrix_update_pixel(0, 2*lane, COLOUR_DARK_RED);
     9ae:	41 e0       	ldi	r20, 0x01	; 1
     9b0:	e0 2e       	mov	r14, r16
     9b2:	ee 0c       	add	r14, r14
     9b4:	6e 2d       	mov	r22, r14
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, COLOUR_DARK_RED);
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	6e 0d       	add	r22, r14
     9c0:	41 e0       	ldi	r20, 0x01	; 1
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
			
			}
				
			if (track[index] & (1<<lane))
     9c8:	fe 01       	movw	r30, r28
     9ca:	ff 27       	eor	r31, r31
     9cc:	ef 59       	subi	r30, 0x9F	; 159
     9ce:	fe 4f       	sbci	r31, 0xFE	; 254
     9d0:	80 81       	ld	r24, Z
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	00 2e       	mov	r0, r16
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <__stack+0xdd>
     9d8:	95 95       	asr	r25
     9da:	87 95       	ror	r24
     9dc:	0a 94       	dec	r0
     9de:	e2 f7       	brpl	.-8      	; 0x9d8 <__stack+0xd9>
     9e0:	80 ff       	sbrs	r24, 0
     9e2:	2f c0       	rjmp	.+94     	; 0xa42 <__stack+0x143>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
     9e4:	1b 30       	cpi	r17, 0x0B	; 11
     9e6:	59 f0       	breq	.+22     	; 0x9fe <__stack+0xff>
     9e8:	1f 30       	cpi	r17, 0x0F	; 15
     9ea:	71 f0       	breq	.+28     	; 0xa08 <__stack+0x109>
				{
					colour = COLOUR_QUART_YELLOW;
				}
				else if (col==12 || col == 14)
     9ec:	1c 30       	cpi	r17, 0x0C	; 12
     9ee:	89 f0       	breq	.+34     	; 0xa12 <__stack+0x113>
     9f0:	1e 30       	cpi	r17, 0x0E	; 14
     9f2:	a1 f0       	breq	.+40     	; 0xa1c <__stack+0x11d>
				{
					colour = COLOUR_HALF_YELLOW;
				}
				else if (col==13)
     9f4:	1d 30       	cpi	r17, 0x0D	; 13
     9f6:	b9 f4       	brne	.+46     	; 0xa26 <__stack+0x127>
				{
					colour = COLOUR_YELLOW;
     9f8:	dd 24       	eor	r13, r13
     9fa:	da 94       	dec	r13
     9fc:	15 c0       	rjmp	.+42     	; 0xa28 <__stack+0x129>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
				{
					colour = COLOUR_QUART_YELLOW;
     9fe:	0f 2e       	mov	r0, r31
     a00:	f1 e1       	ldi	r31, 0x11	; 17
     a02:	df 2e       	mov	r13, r31
     a04:	f0 2d       	mov	r31, r0
     a06:	10 c0       	rjmp	.+32     	; 0xa28 <__stack+0x129>
     a08:	0f 2e       	mov	r0, r31
     a0a:	f1 e1       	ldi	r31, 0x11	; 17
     a0c:	df 2e       	mov	r13, r31
     a0e:	f0 2d       	mov	r31, r0
     a10:	0b c0       	rjmp	.+22     	; 0xa28 <__stack+0x129>
				}
				else if (col==12 || col == 14)
				{
					colour = COLOUR_HALF_YELLOW;
     a12:	0f 2e       	mov	r0, r31
     a14:	f5 e5       	ldi	r31, 0x55	; 85
     a16:	df 2e       	mov	r13, r31
     a18:	f0 2d       	mov	r31, r0
     a1a:	06 c0       	rjmp	.+12     	; 0xa28 <__stack+0x129>
     a1c:	0f 2e       	mov	r0, r31
     a1e:	f5 e5       	ldi	r31, 0x55	; 85
     a20:	df 2e       	mov	r13, r31
     a22:	f0 2d       	mov	r31, r0
     a24:	01 c0       	rjmp	.+2      	; 0xa28 <__stack+0x129>
				{
					colour = COLOUR_YELLOW;
				}
				else
				{
					colour = COLOUR_BLACK;
     a26:	d1 2c       	mov	r13, r1
				}
				ledmatrix_update_pixel(col, 2*lane, colour);
     a28:	4d 2d       	mov	r20, r13
     a2a:	e0 2e       	mov	r14, r16
     a2c:	ee 0c       	add	r14, r14
     a2e:	6e 2d       	mov	r22, r14
     a30:	81 2f       	mov	r24, r17
     a32:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 2*lane+1, colour);
     a36:	61 e0       	ldi	r22, 0x01	; 1
     a38:	6e 0d       	add	r22, r14
     a3a:	4d 2d       	mov	r20, r13
     a3c:	81 2f       	mov	r24, r17
     a3e:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
		}
		if ((future+beat) % 5)
		{
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
     a42:	0f 5f       	subi	r16, 0xFF	; 255
     a44:	04 30       	cpi	r16, 0x04	; 4
     a46:	08 f4       	brcc	.+2      	; 0xa4a <__stack+0x14b>
     a48:	62 cf       	rjmp	.-316    	; 0x90e <__stack+0xf>
// Advance the notes one row down the display
void advance_note(void)
{
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     a4a:	1f 5f       	subi	r17, 0xFF	; 255
     a4c:	10 31       	cpi	r17, 0x10	; 16
     a4e:	08 f4       	brcc	.+2      	; 0xa52 <__stack+0x153>
     a50:	14 cf       	rjmp	.-472    	; 0x87a <advance_note+0x12>
			}
		}
	}
	
	// increment the beat
	beat++;
     a52:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <beat>
     a56:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <beat+0x1>
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <beat+0x1>
     a60:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <beat>
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     a64:	c0 e0       	ldi	r28, 0x00	; 0
     a66:	ac c0       	rjmp	.+344    	; 0xbc0 <__stack+0x2c1>
	{
		// col counts from one end, future from the other
		uint8_t future = MATRIX_NUM_COLUMNS-1-col;
     a68:	8f e0       	ldi	r24, 0x0F	; 15
     a6a:	8c 1b       	sub	r24, r28
		// notes are only drawn every five columns
		if ((future+beat)%5)
     a6c:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <beat>
     a70:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <beat+0x1>
     a74:	af 01       	movw	r20, r30
     a76:	48 0f       	add	r20, r24
     a78:	51 1d       	adc	r21, r1
     a7a:	9a 01       	movw	r18, r20
     a7c:	ad ec       	ldi	r26, 0xCD	; 205
     a7e:	bc ec       	ldi	r27, 0xCC	; 204
     a80:	0e 94 cf 0a 	call	0x159e	; 0x159e <__umulhisi3>
     a84:	96 95       	lsr	r25
     a86:	87 95       	ror	r24
     a88:	96 95       	lsr	r25
     a8a:	87 95       	ror	r24
     a8c:	9c 01       	movw	r18, r24
     a8e:	22 0f       	add	r18, r18
     a90:	33 1f       	adc	r19, r19
     a92:	22 0f       	add	r18, r18
     a94:	33 1f       	adc	r19, r19
     a96:	82 0f       	add	r24, r18
     a98:	93 1f       	adc	r25, r19
     a9a:	48 17       	cp	r20, r24
     a9c:	59 07       	cpc	r21, r25
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <__stack+0x1a3>
     aa0:	8e c0       	rjmp	.+284    	; 0xbbe <__stack+0x2bf>
		{
			continue;
		}
		
		// index of which note in the track to play
		uint8_t index = (future+beat)/5;
     aa2:	9a 01       	movw	r18, r20
     aa4:	0e 94 cf 0a 	call	0x159e	; 0x159e <__umulhisi3>
     aa8:	ac 01       	movw	r20, r24
     aaa:	56 95       	lsr	r21
     aac:	47 95       	ror	r20
     aae:	56 95       	lsr	r21
     ab0:	47 95       	ror	r20
		
		uint8_t ghost_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     ab2:	9f 01       	movw	r18, r30
     ab4:	21 5f       	subi	r18, 0xF1	; 241
     ab6:	3f 4f       	sbci	r19, 0xFF	; 255
     ab8:	0e 94 cf 0a 	call	0x159e	; 0x159e <__umulhisi3>
     abc:	96 95       	lsr	r25
     abe:	87 95       	ror	r24
     ac0:	96 95       	lsr	r25
     ac2:	87 95       	ror	r24
		//next note in track that is coming
		uint8_t ghost_note = track[ghost_index];
     ac4:	fc 01       	movw	r30, r24
     ac6:	ff 27       	eor	r31, r31
     ac8:	ef 59       	subi	r30, 0x9F	; 159
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	e0 80       	ld	r14, Z
		
		// if the index is beyond the end of the track,
		// no note can be drawn
		if (index >= TRACK_LENGTH || (index + 1) >= TRACK_LENGTH)
     ace:	41 38       	cpi	r20, 0x81	; 129
     ad0:	08 f0       	brcs	.+2      	; 0xad4 <__stack+0x1d5>
     ad2:	75 c0       	rjmp	.+234    	; 0xbbe <__stack+0x2bf>
     ad4:	8a 01       	movw	r16, r20
     ad6:	11 27       	eor	r17, r17
     ad8:	c8 01       	movw	r24, r16
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	81 38       	cpi	r24, 0x81	; 129
     ade:	91 05       	cpc	r25, r1
     ae0:	0c f0       	brlt	.+2      	; 0xae4 <__stack+0x1e5>
     ae2:	6d c0       	rjmp	.+218    	; 0xbbe <__stack+0x2bf>
     ae4:	d0 e0       	ldi	r29, 0x00	; 0
     ae6:	68 c0       	rjmp	.+208    	; 0xbb8 <__stack+0x2b9>
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{									
				
			//check if there's a note in the specific path
			if (track[index] & (1<<lane)) {
     ae8:	f8 01       	movw	r30, r16
     aea:	ef 59       	subi	r30, 0x9F	; 159
     aec:	fe 4f       	sbci	r31, 0xFE	; 254
     aee:	80 81       	ld	r24, Z
     af0:	28 2f       	mov	r18, r24
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	0d 2e       	mov	r0, r29
     af6:	02 c0       	rjmp	.+4      	; 0xafc <__stack+0x1fd>
     af8:	35 95       	asr	r19
     afa:	27 95       	ror	r18
     afc:	0a 94       	dec	r0
     afe:	e2 f7       	brpl	.-8      	; 0xaf8 <__stack+0x1f9>
     b00:	20 ff       	sbrs	r18, 0
     b02:	59 c0       	rjmp	.+178    	; 0xbb6 <__stack+0x2b7>
				
				//check if theres a note in the led matrix section
				if ((green_check == lane) & ((col >= 11) & (col <= 15))) {
     b04:	21 e0       	ldi	r18, 0x01	; 1
     b06:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b0a:	9d 13       	cpse	r25, r29
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	31 e0       	ldi	r19, 0x01	; 1
     b10:	95 ef       	ldi	r25, 0xF5	; 245
     b12:	9c 0f       	add	r25, r28
     b14:	95 30       	cpi	r25, 0x05	; 5
     b16:	08 f0       	brcs	.+2      	; 0xb1a <__stack+0x21b>
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	22 23       	and	r18, r18
     b1c:	81 f0       	breq	.+32     	; 0xb3e <__stack+0x23f>
     b1e:	33 23       	and	r19, r19
     b20:	71 f0       	breq	.+28     	; 0xb3e <__stack+0x23f>
					//if true set pixels to green
					ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     b22:	40 ef       	ldi	r20, 0xF0	; 240
     b24:	fd 2e       	mov	r15, r29
     b26:	ff 0c       	add	r15, r15
     b28:	6f 2d       	mov	r22, r15
     b2a:	8c 2f       	mov	r24, r28
     b2c:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	6f 0d       	add	r22, r15
     b34:	40 ef       	ldi	r20, 0xF0	; 240
     b36:	8c 2f       	mov	r24, r28
     b38:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__stack+0x2ad>
				
				} else if (ghost_note != track[index]) {
     b3e:	e8 16       	cp	r14, r24
     b40:	d9 f0       	breq	.+54     	; 0xb78 <__stack+0x279>
					
					

					ledmatrix_update_pixel(col, 2*lane, COLOUR_RED);
     b42:	4f e0       	ldi	r20, 0x0F	; 15
     b44:	fd 2e       	mov	r15, r29
     b46:	ff 0c       	add	r15, r15
     b48:	6f 2d       	mov	r22, r15
     b4a:	8c 2f       	mov	r24, r28
     b4c:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_RED);
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	6f 0d       	add	r22, r15
     b54:	4f e0       	ldi	r20, 0x0F	; 15
     b56:	8c 2f       	mov	r24, r28
     b58:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
					
					//if note slides off screen and green_check isn't checked to a lane
					if (col == 15) {
     b5c:	cf 30       	cpi	r28, 0x0F	; 15
     b5e:	31 f5       	brne	.+76     	; 0xbac <__stack+0x2ad>
						points--;
     b60:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <points>
     b64:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <points+0x1>
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <points+0x1>
     b6e:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <points>
						update_points();						
     b72:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
     b76:	1a c0       	rjmp	.+52     	; 0xbac <__stack+0x2ad>
					}
					
				} else {
					ledmatrix_update_pixel(col, 2*lane, COLOUR_RED);
     b78:	4f e0       	ldi	r20, 0x0F	; 15
     b7a:	fd 2e       	mov	r15, r29
     b7c:	ff 0c       	add	r15, r15
     b7e:	6f 2d       	mov	r22, r15
     b80:	8c 2f       	mov	r24, r28
     b82:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_RED);	
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	6f 0d       	add	r22, r15
     b8a:	4f e0       	ldi	r20, 0x0F	; 15
     b8c:	8c 2f       	mov	r24, r28
     b8e:	0e 94 f7 05 	call	0xbee	; 0xbee <ledmatrix_update_pixel>
					
					//if note slides off screen and green_check isn't checked to a lane
					if (col == 15) {
     b92:	cf 30       	cpi	r28, 0x0F	; 15
     b94:	59 f4       	brne	.+22     	; 0xbac <__stack+0x2ad>
						points--;
     b96:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <points>
     b9a:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <points+0x1>
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <points+0x1>
     ba4:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <points>
						update_points();						
     ba8:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
					}
				} 
				
				//check if the current note goes off the screen
				if (col >= 15) {
     bac:	cf 30       	cpi	r28, 0x0F	; 15
     bae:	18 f0       	brcs	.+6      	; 0xbb6 <__stack+0x2b7>
					green_check = -1;
     bb0:	8f ef       	ldi	r24, 0xFF	; 255
     bb2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		{
			continue;
		}
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
     bb6:	df 5f       	subi	r29, 0xFF	; 255
     bb8:	d4 30       	cpi	r29, 0x04	; 4
     bba:	08 f4       	brcc	.+2      	; 0xbbe <__stack+0x2bf>
     bbc:	95 cf       	rjmp	.-214    	; 0xae8 <__stack+0x1e9>
	
	// increment the beat
	beat++;
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     bbe:	cf 5f       	subi	r28, 0xFF	; 255
     bc0:	c0 31       	cpi	r28, 0x10	; 16
     bc2:	08 f4       	brcc	.+2      	; 0xbc6 <__stack+0x2c7>
     bc4:	51 cf       	rjmp	.-350    	; 0xa68 <__stack+0x169>
				
								
			}
		}
	}
}
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	df 90       	pop	r13
     bd4:	08 95       	ret

00000bd6 <is_game_over>:

// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over(void)
{
	// Detect if the game is over i.e. if a player has won.
	if (game_over) {	
     bd6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <game_over>
     bda:	88 23       	and	r24, r24
     bdc:	19 f0       	breq	.+6      	; 0xbe4 <is_game_over+0xe>
		game_over = 0;
     bde:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <game_over>
		return 1;	
     be2:	81 e0       	ldi	r24, 0x01	; 1
	
	} else {
	return 0;
	
	}
     be4:	08 95       	ret

00000be6 <ledmatrix_setup>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     be6:	80 e8       	ldi	r24, 0x80	; 128
     be8:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <spi_setup_master>
     bec:	08 95       	ret

00000bee <ledmatrix_update_pixel>:
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	80 31       	cpi	r24, 0x10	; 16
     bf6:	b0 f4       	brcc	.+44     	; 0xc24 <ledmatrix_update_pixel+0x36>
     bf8:	68 30       	cpi	r22, 0x08	; 8
     bfa:	a0 f4       	brcc	.+40     	; 0xc24 <ledmatrix_update_pixel+0x36>
     bfc:	14 2f       	mov	r17, r20
     bfe:	c6 2f       	mov	r28, r22
     c00:	d8 2f       	mov	r29, r24
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	0e 94 15 0a 	call	0x142a	; 0x142a <spi_send_byte>
     c08:	6c 2f       	mov	r22, r28
     c0a:	67 70       	andi	r22, 0x07	; 7
     c0c:	80 e1       	ldi	r24, 0x10	; 16
     c0e:	68 9f       	mul	r22, r24
     c10:	90 01       	movw	r18, r0
     c12:	11 24       	eor	r1, r1
     c14:	8d 2f       	mov	r24, r29
     c16:	8f 70       	andi	r24, 0x0F	; 15
     c18:	82 2b       	or	r24, r18
     c1a:	0e 94 15 0a 	call	0x142a	; 0x142a <spi_send_byte>
     c1e:	81 2f       	mov	r24, r17
     c20:	0e 94 15 0a 	call	0x142a	; 0x142a <spi_send_byte>
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	08 95       	ret

00000c2c <ledmatrix_update_column>:
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	80 31       	cpi	r24, 0x10	; 16
     c34:	a0 f4       	brcc	.+40     	; 0xc5e <ledmatrix_update_column+0x32>
     c36:	8b 01       	movw	r16, r22
     c38:	c8 2f       	mov	r28, r24
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	0e 94 15 0a 	call	0x142a	; 0x142a <spi_send_byte>
     c40:	8c 2f       	mov	r24, r28
     c42:	8f 70       	andi	r24, 0x0F	; 15
     c44:	0e 94 15 0a 	call	0x142a	; 0x142a <spi_send_byte>
     c48:	c0 e0       	ldi	r28, 0x00	; 0
     c4a:	07 c0       	rjmp	.+14     	; 0xc5a <ledmatrix_update_column+0x2e>
     c4c:	f8 01       	movw	r30, r16
     c4e:	ec 0f       	add	r30, r28
     c50:	f1 1d       	adc	r31, r1
     c52:	80 81       	ld	r24, Z
     c54:	0e 94 15 0a 	call	0x142a	; 0x142a <spi_send_byte>
     c58:	cf 5f       	subi	r28, 0xFF	; 255
     c5a:	c8 30       	cpi	r28, 0x08	; 8
     c5c:	b8 f3       	brcs	.-18     	; 0xc4c <ledmatrix_update_column+0x20>
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	08 95       	ret

00000c66 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     c66:	8f e0       	ldi	r24, 0x0F	; 15
     c68:	0e 94 15 0a 	call	0x142a	; 0x142a <spi_send_byte>
     c6c:	08 95       	ret

00000c6e <initialise_hardware>:
	}
}

void initialise_hardware(void)
{
	ledmatrix_setup();
     c6e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <ledmatrix_setup>
	init_button_interrupts();
     c72:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	7b e4       	ldi	r23, 0x4B	; 75
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 01 09 	call	0x1202	; 0x1202 <init_serial_stdio>
	
	init_timer0();
     c84:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <init_timer0>
	init_timer1();
     c88:	0e 94 a8 0a 	call	0x1550	; 0x1550 <init_timer1>
	init_timer2();
     c8c:	0e 94 ad 0a 	call	0x155a	; 0x155a <init_timer2>
	
	// Turn on global interrupts
	sei();
     c90:	78 94       	sei
     c92:	08 95       	ret

00000c94 <start_screen>:
}

void start_screen(void)
{
     c94:	4f 92       	push	r4
     c96:	5f 92       	push	r5
     c98:	6f 92       	push	r6
     c9a:	7f 92       	push	r7
     c9c:	8f 92       	push	r8
     c9e:	9f 92       	push	r9
     ca0:	af 92       	push	r10
     ca2:	bf 92       	push	r11
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
	// Clear terminal screen and output a message
	clear_terminal();
     cb0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <clear_terminal>
	show_cursor();
     cb4:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <show_cursor>
	clear_terminal();
     cb8:	0e 94 2c 0a 	call	0x1458	; 0x1458 <clear_terminal>
	hide_cursor();
     cbc:	0e 94 4b 0a 	call	0x1496	; 0x1496 <hide_cursor>
	set_display_attribute(FG_WHITE);
     cc0:	85 e2       	ldi	r24, 0x25	; 37
     cc2:	0e 94 3e 0a 	call	0x147c	; 0x147c <set_display_attribute>
	move_terminal_cursor(10,4);
     cc6:	64 e0       	ldi	r22, 0x04	; 4
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	8a e0       	ldi	r24, 0x0A	; 10
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
	printf_P(PSTR("  ______   __     __  _______         __    __"));
     cd2:	81 e3       	ldi	r24, 0x31	; 49
     cd4:	93 e0       	ldi	r25, 0x03	; 3
     cd6:	9f 93       	push	r25
     cd8:	8f 93       	push	r24
     cda:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
	move_terminal_cursor(10,5);
     cde:	65 e0       	ldi	r22, 0x05	; 5
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	8a e0       	ldi	r24, 0x0A	; 10
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
	printf_P(PSTR(" /      \\ |  \\   |  \\|       \\       |  \\  |  \\"));
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	93 e0       	ldi	r25, 0x03	; 3
     cee:	9f 93       	push	r25
     cf0:	8f 93       	push	r24
     cf2:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
	move_terminal_cursor(10,6);
     cf6:	66 e0       	ldi	r22, 0x06	; 6
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	8a e0       	ldi	r24, 0x0A	; 10
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
	printf_P(PSTR("|  $$$$$$\\| $$   | $$| $$$$$$$\\      | $$  | $$  ______    ______    ______"));
     d02:	85 eb       	ldi	r24, 0xB5	; 181
     d04:	92 e0       	ldi	r25, 0x02	; 2
     d06:	9f 93       	push	r25
     d08:	8f 93       	push	r24
     d0a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
	move_terminal_cursor(10,7);
     d0e:	67 e0       	ldi	r22, 0x07	; 7
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	8a e0       	ldi	r24, 0x0A	; 10
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
	printf_P(PSTR("| $$__| $$| $$   | $$| $$__| $$      | $$__| $$ /      \\  /      \\  /      \\"));
     d1a:	88 e6       	ldi	r24, 0x68	; 104
     d1c:	92 e0       	ldi	r25, 0x02	; 2
     d1e:	9f 93       	push	r25
     d20:	8f 93       	push	r24
     d22:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
	move_terminal_cursor(10,8);
     d26:	68 e0       	ldi	r22, 0x08	; 8
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	8a e0       	ldi	r24, 0x0A	; 10
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
	printf_P(PSTR("| $$    $$ \\$$\\ /  $$| $$    $$      | $$    $$|  $$$$$$\\|  $$$$$$\\|  $$$$$$\\"));
     d32:	8a e1       	ldi	r24, 0x1A	; 26
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	9f 93       	push	r25
     d38:	8f 93       	push	r24
     d3a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
	move_terminal_cursor(10,9);
     d3e:	69 e0       	ldi	r22, 0x09	; 9
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	8a e0       	ldi	r24, 0x0A	; 10
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
	printf_P(PSTR("| $$$$$$$$  \\$$\\  $$ | $$$$$$$\\      | $$$$$$$$| $$    $$| $$   \\$$| $$  | $$"));
     d4a:	8c ec       	ldi	r24, 0xCC	; 204
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	9f 93       	push	r25
     d50:	8f 93       	push	r24
     d52:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
	move_terminal_cursor(10,10);
     d56:	6a e0       	ldi	r22, 0x0A	; 10
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	8a e0       	ldi	r24, 0x0A	; 10
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$   \\$$ $$  | $$  | $$      | $$  | $$| $$$$$$$$| $$      | $$__/ $$"));
     d62:	8e e7       	ldi	r24, 0x7E	; 126
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	9f 93       	push	r25
     d68:	8f 93       	push	r24
     d6a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
	move_terminal_cursor(10,11);
     d6e:	6b e0       	ldi	r22, 0x0B	; 11
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	8a e0       	ldi	r24, 0x0A	; 10
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$    \\$$$   | $$  | $$      | $$  | $$ \\$$     \\| $$       \\$$    $$"));
     d7a:	80 e3       	ldi	r24, 0x30	; 48
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	9f 93       	push	r25
     d80:	8f 93       	push	r24
     d82:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
	move_terminal_cursor(10,12);
     d86:	6c e0       	ldi	r22, 0x0C	; 12
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	8a e0       	ldi	r24, 0x0A	; 10
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
	printf_P(PSTR(" \\$$   \\$$     \\$     \\$$   \\$$       \\$$   \\$$  \\$$$$$$$ \\$$        \\$$$$$$"));
     d92:	83 ee       	ldi	r24, 0xE3	; 227
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	9f 93       	push	r25
     d98:	8f 93       	push	r24
     d9a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
	move_terminal_cursor(10,14);
     d9e:	6e e0       	ldi	r22, 0x0E	; 14
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	8a e0       	ldi	r24, 0x0A	; 10
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
	// change this to your name and student number; remove the chevrons <>
	printf_P(PSTR("CSSE2010/7201 A2 by  Cailin Delgado - 48027942"));
     daa:	84 eb       	ldi	r24, 0xB4	; 180
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	9f 93       	push	r25
     db0:	8f 93       	push	r24
     db2:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
     db6:	0e 94 a2 02 	call	0x544	; 0x544 <show_start_screen>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
     dba:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <get_current_time>
     dbe:	6b 01       	movw	r12, r22
     dc0:	7c 01       	movw	r14, r24
	
	uint8_t frame_number = 0;
	game_speed = 1000;
     dc2:	88 ee       	ldi	r24, 0xE8	; 232
     dc4:	93 e0       	ldi	r25, 0x03	; 3
     dc6:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <game_speed+0x1>
     dca:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <game_speed>
     dce:	8d b7       	in	r24, 0x3d	; 61
     dd0:	9e b7       	in	r25, 0x3e	; 62
     dd2:	44 96       	adiw	r24, 0x14	; 20
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	9e bf       	out	0x3e, r25	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	8d bf       	out	0x3d, r24	; 61
	show_start_screen();

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
	
	uint8_t frame_number = 0;
     dde:	d0 e0       	ldi	r29, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available())
     de0:	0e 94 48 09 	call	0x1290	; 0x1290 <serial_input_available>
     de4:	88 23       	and	r24, r24
     de6:	41 f0       	breq	.+16     	; 0xdf8 <start_screen+0x164>
		{
			serial_input = fgetc(stdin);
     de8:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <__iob>
     dec:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <__iob+0x1>
     df0:	0e 94 00 0b 	call	0x1600	; 0x1600 <fgetc>
     df4:	c8 2f       	mov	r28, r24
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <start_screen+0x166>
	{
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     df8:	cf ef       	ldi	r28, 0xFF	; 255
		if (serial_input_available())
		{
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S')
     dfa:	c3 37       	cpi	r28, 0x73	; 115
     dfc:	09 f4       	brne	.+2      	; 0xe00 <start_screen+0x16c>
     dfe:	73 c0       	rjmp	.+230    	; 0xee6 <start_screen+0x252>
     e00:	c3 35       	cpi	r28, 0x53	; 83
     e02:	09 f4       	brne	.+2      	; 0xe06 <start_screen+0x172>
     e04:	70 c0       	rjmp	.+224    	; 0xee6 <start_screen+0x252>
		{
			break;
		} 
		
		// Next check for any button presses
		int8_t btn = button_pushed();
     e06:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
		if (btn != NO_BUTTON_PUSHED)
     e0a:	8f 3f       	cpi	r24, 0xFF	; 255
     e0c:	09 f0       	breq	.+2      	; 0xe10 <start_screen+0x17c>
     e0e:	6b c0       	rjmp	.+214    	; 0xee6 <start_screen+0x252>
		{
			break;
			
		} else if (serial_input == 'm' || serial_input == 'M') {
     e10:	cd 36       	cpi	r28, 0x6D	; 109
     e12:	11 f0       	breq	.+4      	; 0xe18 <start_screen+0x184>
     e14:	cd 34       	cpi	r28, 0x4D	; 77
     e16:	49 f5       	brne	.+82     	; 0xe6a <start_screen+0x1d6>
			if (man_mode) {
     e18:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <man_mode>
     e1c:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <man_mode+0x1>
     e20:	89 2b       	or	r24, r25
     e22:	69 f0       	breq	.+26     	; 0xe3e <start_screen+0x1aa>
				man_mode = 0;
     e24:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <man_mode+0x1>
     e28:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <man_mode>
				
				//clear manual mode alert
				move_terminal_cursor(10, 16);
     e2c:	60 e1       	ldi	r22, 0x10	; 16
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	8a e0       	ldi	r24, 0x0A	; 10
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
				clear_to_end_of_line();
     e38:	0e 94 35 0a 	call	0x146a	; 0x146a <clear_to_end_of_line>
     e3c:	16 c0       	rjmp	.+44     	; 0xe6a <start_screen+0x1d6>
				
			} else {
				man_mode = 1;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <man_mode+0x1>
     e46:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <man_mode>
				
				//print to terminal that manual mode is on
				move_terminal_cursor(10, 16);
     e4a:	60 e1       	ldi	r22, 0x10	; 16
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	8a e0       	ldi	r24, 0x0A	; 10
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
				clear_to_end_of_line();
     e56:	0e 94 35 0a 	call	0x146a	; 0x146a <clear_to_end_of_line>
				printf("Manual Mode: ON");
     e5a:	82 ee       	ldi	r24, 0xE2	; 226
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	9f 93       	push	r25
     e60:	8f 93       	push	r24
     e62:	0e 94 3e 0b 	call	0x167c	; 0x167c <printf>
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
			}
		}

		if (!man_mode) {
     e6a:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <man_mode>
     e6e:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <man_mode+0x1>
     e72:	89 2b       	or	r24, r25
     e74:	09 f0       	breq	.+2      	; 0xe78 <start_screen+0x1e4>
     e76:	b4 cf       	rjmp	.-152    	; 0xde0 <start_screen+0x14c>
			// every 200 ms, update the animation
			current_time = get_current_time();
     e78:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <get_current_time>
     e7c:	4b 01       	movw	r8, r22
     e7e:	5c 01       	movw	r10, r24
			if (current_time - last_screen_update > game_speed/5)
     e80:	2b 01       	movw	r4, r22
     e82:	3c 01       	movw	r6, r24
     e84:	4c 18       	sub	r4, r12
     e86:	5d 08       	sbc	r5, r13
     e88:	6e 08       	sbc	r6, r14
     e8a:	7f 08       	sbc	r7, r15
     e8c:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <game_speed>
     e90:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <game_speed+0x1>
     e94:	ad ec       	ldi	r26, 0xCD	; 205
     e96:	bc ec       	ldi	r27, 0xCC	; 204
     e98:	0e 94 cf 0a 	call	0x159e	; 0x159e <__umulhisi3>
     e9c:	96 95       	lsr	r25
     e9e:	87 95       	ror	r24
     ea0:	96 95       	lsr	r25
     ea2:	87 95       	ror	r24
     ea4:	a0 e0       	ldi	r26, 0x00	; 0
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	84 15       	cp	r24, r4
     eaa:	95 05       	cpc	r25, r5
     eac:	a6 05       	cpc	r26, r6
     eae:	b7 05       	cpc	r27, r7
     eb0:	90 f4       	brcc	.+36     	; 0xed6 <start_screen+0x242>
			{
				update_start_screen(frame_number);
     eb2:	8d 2f       	mov	r24, r29
     eb4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
				frame_number = (frame_number + 1) % 32;
     eb8:	8d 2f       	mov	r24, r29
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	8f 71       	andi	r24, 0x1F	; 31
     ec0:	90 78       	andi	r25, 0x80	; 128
     ec2:	99 23       	and	r25, r25
     ec4:	24 f4       	brge	.+8      	; 0xece <start_screen+0x23a>
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	80 6e       	ori	r24, 0xE0	; 224
     eca:	9f 6f       	ori	r25, 0xFF	; 255
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	d8 2f       	mov	r29, r24
				last_screen_update = current_time;
     ed0:	75 01       	movw	r14, r10
     ed2:	64 01       	movw	r12, r8
     ed4:	85 cf       	rjmp	.-246    	; 0xde0 <start_screen+0x14c>
			} else {
				if (serial_input == 'n' || serial_input == 'N') {
     ed6:	ce 36       	cpi	r28, 0x6E	; 110
     ed8:	19 f0       	breq	.+6      	; 0xee0 <start_screen+0x24c>
     eda:	ce 34       	cpi	r28, 0x4E	; 78
     edc:	09 f0       	breq	.+2      	; 0xee0 <start_screen+0x24c>
     ede:	80 cf       	rjmp	.-256    	; 0xde0 <start_screen+0x14c>
					advance_note();
     ee0:	0e 94 34 04 	call	0x868	; 0x868 <advance_note>
     ee4:	7d cf       	rjmp	.-262    	; 0xde0 <start_screen+0x14c>
				}
			}
		}
	}
}
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	ff 90       	pop	r15
     eec:	ef 90       	pop	r14
     eee:	df 90       	pop	r13
     ef0:	cf 90       	pop	r12
     ef2:	bf 90       	pop	r11
     ef4:	af 90       	pop	r10
     ef6:	9f 90       	pop	r9
     ef8:	8f 90       	pop	r8
     efa:	7f 90       	pop	r7
     efc:	6f 90       	pop	r6
     efe:	5f 90       	pop	r5
     f00:	4f 90       	pop	r4
     f02:	08 95       	ret

00000f04 <new_game>:

void new_game(void)
{
	// Clear the serial terminal
	clear_terminal();
     f04:	0e 94 2c 0a 	call	0x1458	; 0x1458 <clear_terminal>
	
	//reset number of points player has
	points = 0;
     f08:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <points+0x1>
     f0c:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <points>
	
	// Initialize the game and display
	initialise_game();
     f10:	0e 94 a1 03 	call	0x742	; 0x742 <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     f14:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
	clear_serial_input_buffer();
     f18:	0e 94 4f 09 	call	0x129e	; 0x129e <clear_serial_input_buffer>
     f1c:	08 95       	ret

00000f1e <handle_game_over>:
	handle_game_over();
}

void handle_game_over()
{
	clear_terminal();
     f1e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <clear_terminal>
	move_terminal_cursor(10,14);
     f22:	6e e0       	ldi	r22, 0x0E	; 14
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	8a e0       	ldi	r24, 0x0A	; 10
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     f2e:	8a ea       	ldi	r24, 0xAA	; 170
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	9f 93       	push	r25
     f34:	8f 93       	push	r24
     f36:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
	move_terminal_cursor(10,15);
     f3a:	6f e0       	ldi	r22, 0x0F	; 15
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	8a e0       	ldi	r24, 0x0A	; 10
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
	printf("Game Score: %d\n", points);
     f46:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <points+0x1>
     f4a:	8f 93       	push	r24
     f4c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <points>
     f50:	8f 93       	push	r24
     f52:	82 ef       	ldi	r24, 0xF2	; 242
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	9f 93       	push	r25
     f58:	8f 93       	push	r24
     f5a:	0e 94 3e 0b 	call	0x167c	; 0x167c <printf>
	move_terminal_cursor(10, 16);
     f5e:	60 e1       	ldi	r22, 0x10	; 16
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	8a e0       	ldi	r24, 0x0A	; 10
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
     f6a:	8c e7       	ldi	r24, 0x7C	; 124
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	9f 93       	push	r25
     f70:	8f 93       	push	r24
     f72:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
	
	
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
     f76:	8d b7       	in	r24, 0x3d	; 61
     f78:	9e b7       	in	r25, 0x3e	; 62
     f7a:	08 96       	adiw	r24, 0x08	; 8
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	9e bf       	out	0x3e, r25	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	8d bf       	out	0x3d, r24	; 61
     f86:	10 c0       	rjmp	.+32     	; 0xfa8 <handle_game_over+0x8a>
	{
		char keyboard_input = -1;
		
		
		if (serial_input_available()) {
     f88:	0e 94 48 09 	call	0x1290	; 0x1290 <serial_input_available>
     f8c:	88 23       	and	r24, r24
     f8e:	39 f0       	breq	.+14     	; 0xf9e <handle_game_over+0x80>
			keyboard_input = fgetc(stdin);
     f90:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <__iob>
     f94:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <__iob+0x1>
     f98:	0e 94 00 0b 	call	0x1600	; 0x1600 <fgetc>
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <handle_game_over+0x82>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
	{
		char keyboard_input = -1;
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		//check if the user presses s
		if (keyboard_input == 's' || keyboard_input == 'S') {
     fa0:	83 37       	cpi	r24, 0x73	; 115
     fa2:	31 f0       	breq	.+12     	; 0xfb0 <handle_game_over+0x92>
     fa4:	83 35       	cpi	r24, 0x53	; 83
     fa6:	21 f0       	breq	.+8      	; 0xfb0 <handle_game_over+0x92>
	
	
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
     fa8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
     fac:	8f 3f       	cpi	r24, 0xFF	; 255
     fae:	61 f3       	breq	.-40     	; 0xf88 <handle_game_over+0x6a>
		if (keyboard_input == 's' || keyboard_input == 'S') {
			break;
		}
	}	
	
	start_screen();
     fb0:	0e 94 4a 06 	call	0xc94	; 0xc94 <start_screen>
     fb4:	08 95       	ret

00000fb6 <play_game>:
	(void)button_pushed();
	clear_serial_input_buffer();
}

void play_game(void)
{
     fb6:	8f 92       	push	r8
     fb8:	9f 92       	push	r9
     fba:	af 92       	push	r10
     fbc:	bf 92       	push	r11
     fbe:	cf 92       	push	r12
     fc0:	df 92       	push	r13
     fc2:	ef 92       	push	r14
     fc4:	ff 92       	push	r15
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
	
	uint32_t last_advance_time, current_time;
	int8_t btn; // The button pushed
	
	last_advance_time = get_current_time();
     fca:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <get_current_time>
     fce:	6b 01       	movw	r12, r22
     fd0:	7c 01       	movw	r14, r24
	
	// We play the game until it's over
	while (!is_game_over())
     fd2:	90 c0       	rjmp	.+288    	; 0x10f4 <play_game+0x13e>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
     fd4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
     fd8:	d8 2f       	mov	r29, r24
		
		char keyboard_input = -1;
		
		if (serial_input_available()) {
     fda:	0e 94 48 09 	call	0x1290	; 0x1290 <serial_input_available>
     fde:	88 23       	and	r24, r24
     fe0:	41 f0       	breq	.+16     	; 0xff2 <play_game+0x3c>
			keyboard_input = fgetc(stdin);
     fe2:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <__iob>
     fe6:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <__iob+0x1>
     fea:	0e 94 00 0b 	call	0x1600	; 0x1600 <fgetc>
     fee:	c8 2f       	mov	r28, r24
     ff0:	01 c0       	rjmp	.+2      	; 0xff4 <play_game+0x3e>
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
		
		char keyboard_input = -1;
     ff2:	cf ef       	ldi	r28, 0xFF	; 255
		
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		if ((btn == BUTTON0_PUSHED) || (keyboard_input == 'f' || keyboard_input == 'F')) {
     ff4:	dd 23       	and	r29, r29
     ff6:	21 f0       	breq	.+8      	; 0x1000 <play_game+0x4a>
     ff8:	c6 36       	cpi	r28, 0x66	; 102
     ffa:	11 f0       	breq	.+4      	; 0x1000 <play_game+0x4a>
     ffc:	c6 34       	cpi	r28, 0x46	; 70
     ffe:	21 f4       	brne	.+8      	; 0x1008 <play_game+0x52>
			// If button 0 play the lowest note (right lane)
			play_note(3);
    1000:	83 e0       	ldi	r24, 0x03	; 3
    1002:	0e 94 aa 03 	call	0x754	; 0x754 <play_note>
    1006:	1d c0       	rjmp	.+58     	; 0x1042 <play_game+0x8c>
		
		} else if ((btn == BUTTON1_PUSHED) || (keyboard_input == 'd' || keyboard_input == 'D')) {
    1008:	d1 30       	cpi	r29, 0x01	; 1
    100a:	21 f0       	breq	.+8      	; 0x1014 <play_game+0x5e>
    100c:	c4 36       	cpi	r28, 0x64	; 100
    100e:	11 f0       	breq	.+4      	; 0x1014 <play_game+0x5e>
    1010:	c4 34       	cpi	r28, 0x44	; 68
    1012:	21 f4       	brne	.+8      	; 0x101c <play_game+0x66>
			//If button 1 is pushed play the second lowest note
			play_note(2);		
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	0e 94 aa 03 	call	0x754	; 0x754 <play_note>
    101a:	13 c0       	rjmp	.+38     	; 0x1042 <play_game+0x8c>
		
		} else if ((btn == BUTTON2_PUSHED) || (keyboard_input == 's' || keyboard_input == 'S')) {
    101c:	d2 30       	cpi	r29, 0x02	; 2
    101e:	21 f0       	breq	.+8      	; 0x1028 <play_game+0x72>
    1020:	c3 37       	cpi	r28, 0x73	; 115
    1022:	11 f0       	breq	.+4      	; 0x1028 <play_game+0x72>
    1024:	c3 35       	cpi	r28, 0x53	; 83
    1026:	21 f4       	brne	.+8      	; 0x1030 <play_game+0x7a>
			//If button 2 is pushed play the second highest note
			play_note(1); 
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	0e 94 aa 03 	call	0x754	; 0x754 <play_note>
    102e:	09 c0       	rjmp	.+18     	; 0x1042 <play_game+0x8c>
			
		} else if ((btn == BUTTON3_PUSHED) || (keyboard_input == 'a' || keyboard_input == 'A')) {
    1030:	d3 30       	cpi	r29, 0x03	; 3
    1032:	21 f0       	breq	.+8      	; 0x103c <play_game+0x86>
    1034:	c1 36       	cpi	r28, 0x61	; 97
    1036:	11 f0       	breq	.+4      	; 0x103c <play_game+0x86>
    1038:	c1 34       	cpi	r28, 0x41	; 65
    103a:	19 f4       	brne	.+6      	; 0x1042 <play_game+0x8c>
			//If button 3 is pushed play the highest note
			play_note(0);
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	0e 94 aa 03 	call	0x754	; 0x754 <play_note>
			
		} 
		
		
		
		if (keyboard_input == 'm' || keyboard_input == 'M') {
    1042:	cd 36       	cpi	r28, 0x6D	; 109
    1044:	11 f0       	breq	.+4      	; 0x104a <play_game+0x94>
    1046:	cd 34       	cpi	r28, 0x4D	; 77
    1048:	49 f5       	brne	.+82     	; 0x109c <play_game+0xe6>
			if (man_mode) {
    104a:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <man_mode>
    104e:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <man_mode+0x1>
    1052:	89 2b       	or	r24, r25
    1054:	69 f0       	breq	.+26     	; 0x1070 <play_game+0xba>
				man_mode = 0;
    1056:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <man_mode+0x1>
    105a:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <man_mode>
				
				//clear manual mode alert
				move_terminal_cursor(10, 16);
    105e:	60 e1       	ldi	r22, 0x10	; 16
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	8a e0       	ldi	r24, 0x0A	; 10
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
				clear_to_end_of_line();
    106a:	0e 94 35 0a 	call	0x146a	; 0x146a <clear_to_end_of_line>
    106e:	16 c0       	rjmp	.+44     	; 0x109c <play_game+0xe6>
			} else {
				man_mode = 1;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <man_mode+0x1>
    1078:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <man_mode>
				
				//print to terminal that manual mode is on
				move_terminal_cursor(10, 16);
    107c:	60 e1       	ldi	r22, 0x10	; 16
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	8a e0       	ldi	r24, 0x0A	; 10
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 1b 0a 	call	0x1436	; 0x1436 <move_terminal_cursor>
				clear_to_end_of_line();
    1088:	0e 94 35 0a 	call	0x146a	; 0x146a <clear_to_end_of_line>
				printf("Manual Mode: ON");
    108c:	82 ee       	ldi	r24, 0xE2	; 226
    108e:	91 e0       	ldi	r25, 0x01	; 1
    1090:	9f 93       	push	r25
    1092:	8f 93       	push	r24
    1094:	0e 94 3e 0b 	call	0x167c	; 0x167c <printf>
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
			}
		}
		
		if (!man_mode) {
    109c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <man_mode>
    10a0:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <man_mode+0x1>
    10a4:	89 2b       	or	r24, r25
    10a6:	01 f5       	brne	.+64     	; 0x10e8 <play_game+0x132>
			current_time = get_current_time();
    10a8:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <get_current_time>
    10ac:	4b 01       	movw	r8, r22
    10ae:	5c 01       	movw	r10, r24
			if (current_time >= last_advance_time + game_speed/5)
    10b0:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <game_speed>
    10b4:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <game_speed+0x1>
    10b8:	ad ec       	ldi	r26, 0xCD	; 205
    10ba:	bc ec       	ldi	r27, 0xCC	; 204
    10bc:	0e 94 cf 0a 	call	0x159e	; 0x159e <__umulhisi3>
    10c0:	96 95       	lsr	r25
    10c2:	87 95       	ror	r24
    10c4:	96 95       	lsr	r25
    10c6:	87 95       	ror	r24
    10c8:	a7 01       	movw	r20, r14
    10ca:	96 01       	movw	r18, r12
    10cc:	28 0f       	add	r18, r24
    10ce:	39 1f       	adc	r19, r25
    10d0:	41 1d       	adc	r20, r1
    10d2:	51 1d       	adc	r21, r1
    10d4:	82 16       	cp	r8, r18
    10d6:	93 06       	cpc	r9, r19
    10d8:	a4 06       	cpc	r10, r20
    10da:	b5 06       	cpc	r11, r21
    10dc:	58 f0       	brcs	.+22     	; 0x10f4 <play_game+0x13e>
			{
				// 200ms (0.2 second) has passed since the last time we advance the
				// notes here, so update the advance the notes
				advance_note();
    10de:	0e 94 34 04 	call	0x868	; 0x868 <advance_note>
			
				// Update the most recent time the notes were advance
				last_advance_time = current_time;
    10e2:	75 01       	movw	r14, r10
    10e4:	64 01       	movw	r12, r8
    10e6:	06 c0       	rjmp	.+12     	; 0x10f4 <play_game+0x13e>
			}
		} else {
			if (keyboard_input == 'n' || keyboard_input == 'N') {
    10e8:	ce 36       	cpi	r28, 0x6E	; 110
    10ea:	11 f0       	breq	.+4      	; 0x10f0 <play_game+0x13a>
    10ec:	ce 34       	cpi	r28, 0x4E	; 78
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <play_game+0x13e>
				advance_note();
    10f0:	0e 94 34 04 	call	0x868	; 0x868 <advance_note>
	int8_t btn; // The button pushed
	
	last_advance_time = get_current_time();
	
	// We play the game until it's over
	while (!is_game_over())
    10f4:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <is_game_over>
    10f8:	88 23       	and	r24, r24
    10fa:	09 f4       	brne	.+2      	; 0x10fe <play_game+0x148>
    10fc:	6b cf       	rjmp	.-298    	; 0xfd4 <play_game+0x1e>
				advance_note();
			}
		}
	}
	// We get here if the game is over.
	handle_game_over();
    10fe:	0e 94 8f 07 	call	0xf1e	; 0xf1e <handle_game_over>
}
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	ff 90       	pop	r15
    1108:	ef 90       	pop	r14
    110a:	df 90       	pop	r13
    110c:	cf 90       	pop	r12
    110e:	bf 90       	pop	r11
    1110:	af 90       	pop	r10
    1112:	9f 90       	pop	r9
    1114:	8f 90       	pop	r8
    1116:	08 95       	ret

00001118 <main>:
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1118:	0e 94 37 06 	call	0xc6e	; 0xc6e <initialise_hardware>
	
	points = 0;
    111c:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <points+0x1>
    1120:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <points>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
    1124:	0e 94 4a 06 	call	0xc94	; 0xc94 <start_screen>
	
	// Loop forever and continuously play the game.
	while(1)
	{
		new_game();
    1128:	0e 94 82 07 	call	0xf04	; 0xf04 <new_game>
		play_game();
    112c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <play_game>
		handle_game_over();
    1130:	0e 94 8f 07 	call	0xf1e	; 0xf1e <handle_game_over>
    1134:	f9 cf       	rjmp	.-14     	; 0x1128 <main+0x10>

00001136 <uart_put_char>:
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream)
{
    1136:	cf 93       	push	r28
    1138:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n')
    113a:	8a 30       	cpi	r24, 0x0A	; 10
    113c:	19 f4       	brne	.+6      	; 0x1144 <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
    113e:	8d e0       	ldi	r24, 0x0D	; 13
    1140:	0e 94 9b 08 	call	0x1136	; 0x1136 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1144:	9f b7       	in	r25, 0x3f	; 63
    1146:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1148:	02 c0       	rjmp	.+4      	; 0x114e <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
    114a:	99 23       	and	r25, r25
    114c:	29 f1       	breq	.+74     	; 0x1198 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    114e:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <bytes_in_out_buffer>
    1152:	8f 3f       	cpi	r24, 0xFF	; 255
    1154:	d1 f3       	breq	.-12     	; 0x114a <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1156:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1158:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <out_insert_pos>
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	8e 0f       	add	r24, r30
    1160:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <out_insert_pos>
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	e8 5e       	subi	r30, 0xE8	; 232
    1168:	fd 4f       	sbci	r31, 0xFD	; 253
    116a:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    116c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <bytes_in_out_buffer>
    1170:	8f 5f       	subi	r24, 0xFF	; 255
    1172:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
    1176:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <out_insert_pos>
    117a:	8f 3f       	cpi	r24, 0xFF	; 255
    117c:	11 f4       	brne	.+4      	; 0x1182 <uart_put_char+0x4c>
	{
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    117e:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1182:	e1 ec       	ldi	r30, 0xC1	; 193
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	80 62       	ori	r24, 0x20	; 32
    118a:	80 83       	st	Z, r24
	if (interrupts_enabled)
    118c:	99 23       	and	r25, r25
    118e:	39 f0       	breq	.+14     	; 0x119e <uart_put_char+0x68>
	{
		sei();
    1190:	78 94       	sei
	}
	return 0;
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	05 c0       	rjmp	.+10     	; 0x11a2 <uart_put_char+0x6c>
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
}
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <uart_get_char>:

int uart_get_char(FILE* stream)
{
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0)
    11a6:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <bytes_in_input_buffer>
    11aa:	88 23       	and	r24, r24
    11ac:	e1 f3       	breq	.-8      	; 0x11a6 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    11ae:	2f b7       	in	r18, 0x3f	; 63
    11b0:	20 78       	andi	r18, 0x80	; 128
	cli();
    11b2:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
    11b4:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <input_insert_pos>
    11b8:	30 91 29 03 	lds	r19, 0x0329	; 0x800329 <bytes_in_input_buffer>
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	83 1b       	sub	r24, r19
    11c0:	91 09       	sbc	r25, r1
    11c2:	5a f4       	brpl	.+22     	; 0x11da <uart_get_char+0x34>
	{
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    11c4:	e0 91 17 03 	lds	r30, 0x0317	; 0x800317 <input_insert_pos>
    11c8:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <bytes_in_input_buffer>
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	e8 1b       	sub	r30, r24
    11d0:	f1 09       	sbc	r31, r1
    11d2:	e8 5d       	subi	r30, 0xD8	; 216
    11d4:	fc 4f       	sbci	r31, 0xFC	; 252
    11d6:	80 81       	ld	r24, Z
    11d8:	0a c0       	rjmp	.+20     	; 0x11ee <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    11da:	e0 91 17 03 	lds	r30, 0x0317	; 0x800317 <input_insert_pos>
    11de:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <bytes_in_input_buffer>
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	e8 1b       	sub	r30, r24
    11e6:	f1 09       	sbc	r31, r1
    11e8:	e8 5e       	subi	r30, 0xE8	; 232
    11ea:	fc 4f       	sbci	r31, 0xFC	; 252
    11ec:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    11ee:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <bytes_in_input_buffer>
    11f2:	91 50       	subi	r25, 0x01	; 1
    11f4:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <bytes_in_input_buffer>
	if (interrupts_enabled)
    11f8:	22 23       	and	r18, r18
    11fa:	09 f0       	breq	.+2      	; 0x11fe <uart_get_char+0x58>
	{
		sei();
    11fc:	78 94       	sei
	}	
	return c;
}
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	08 95       	ret

00001202 <init_serial_stdio>:
{
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1202:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1206:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <bytes_in_out_buffer>
	input_insert_pos = 0;
    120a:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <input_insert_pos>
	bytes_in_input_buffer = 0;
    120e:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <bytes_in_input_buffer>
	input_overrun = 0;
    1212:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1216:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	aa 1f       	adc	r26, r26
    1224:	bb 1f       	adc	r27, r27
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	aa 1f       	adc	r26, r26
    122c:	bb 1f       	adc	r27, r27
    122e:	9c 01       	movw	r18, r24
    1230:	ad 01       	movw	r20, r26
    1232:	22 0f       	add	r18, r18
    1234:	33 1f       	adc	r19, r19
    1236:	44 1f       	adc	r20, r20
    1238:	55 1f       	adc	r21, r21
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	72 e1       	ldi	r23, 0x12	; 18
    123e:	8a e7       	ldi	r24, 0x7A	; 122
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divmodsi4>
    1246:	ba 01       	movw	r22, r20
    1248:	a9 01       	movw	r20, r18
    124a:	4f 5f       	subi	r20, 0xFF	; 255
    124c:	5f 4f       	sbci	r21, 0xFF	; 255
    124e:	6f 4f       	sbci	r22, 0xFF	; 255
    1250:	7f 4f       	sbci	r23, 0xFF	; 255
    1252:	db 01       	movw	r26, r22
    1254:	ca 01       	movw	r24, r20
    1256:	1a f4       	brpl	.+6      	; 0x125e <init_serial_stdio+0x5c>
    1258:	01 96       	adiw	r24, 0x01	; 1
    125a:	a1 1d       	adc	r26, r1
    125c:	b1 1d       	adc	r27, r1
    125e:	b5 95       	asr	r27
    1260:	a7 95       	ror	r26
    1262:	97 95       	ror	r25
    1264:	87 95       	ror	r24
    1266:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1268:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    126c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    1270:	e1 ec       	ldi	r30, 0xC1	; 193
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	88 e1       	ldi	r24, 0x18	; 24
    1276:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
    1278:	80 81       	ld	r24, Z
    127a:	80 68       	ori	r24, 0x80	; 128
    127c:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    127e:	ea e2       	ldi	r30, 0x2A	; 42
    1280:	f3 e0       	ldi	r31, 0x03	; 3
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	93 83       	std	Z+3, r25	; 0x03
    1288:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    128a:	91 83       	std	Z+1, r25	; 0x01
    128c:	80 83       	st	Z, r24
    128e:	08 95       	ret

00001290 <serial_input_available>:
}

int8_t serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
    1290:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <bytes_in_input_buffer>
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	91 11       	cpse	r25, r1
    1298:	01 c0       	rjmp	.+2      	; 0x129c <serial_input_available+0xc>
    129a:	80 e0       	ldi	r24, 0x00	; 0
}
    129c:	08 95       	ret

0000129e <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    129e:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <input_insert_pos>
	bytes_in_input_buffer = 0;
    12a2:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <bytes_in_input_buffer>
    12a6:	08 95       	ret

000012a8 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    12a8:	1f 92       	push	r1
    12aa:	0f 92       	push	r0
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	0f 92       	push	r0
    12b0:	11 24       	eor	r1, r1
    12b2:	2f 93       	push	r18
    12b4:	8f 93       	push	r24
    12b6:	9f 93       	push	r25
    12b8:	ef 93       	push	r30
    12ba:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0)
    12bc:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <bytes_in_out_buffer>
    12c0:	88 23       	and	r24, r24
    12c2:	29 f1       	breq	.+74     	; 0x130e <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
    12c4:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <out_insert_pos>
    12c8:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <bytes_in_out_buffer>
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	82 1b       	sub	r24, r18
    12d0:	91 09       	sbc	r25, r1
    12d2:	5a f4       	brpl	.+22     	; 0x12ea <__vector_21+0x42>
		{
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    12d4:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <out_insert_pos>
    12d8:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <bytes_in_out_buffer>
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	e8 1b       	sub	r30, r24
    12e0:	f1 09       	sbc	r31, r1
    12e2:	e9 5e       	subi	r30, 0xE9	; 233
    12e4:	fc 4f       	sbci	r31, 0xFC	; 252
    12e6:	90 81       	ld	r25, Z
    12e8:	0a c0       	rjmp	.+20     	; 0x12fe <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    12ea:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <out_insert_pos>
    12ee:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <bytes_in_out_buffer>
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	e8 1b       	sub	r30, r24
    12f6:	f1 09       	sbc	r31, r1
    12f8:	e8 5e       	subi	r30, 0xE8	; 232
    12fa:	fd 4f       	sbci	r31, 0xFD	; 253
    12fc:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    12fe:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <bytes_in_out_buffer>
    1302:	81 50       	subi	r24, 0x01	; 1
    1304:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1308:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    130c:	05 c0       	rjmp	.+10     	; 0x1318 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
    130e:	e1 ec       	ldi	r30, 0xC1	; 193
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	8f 7d       	andi	r24, 0xDF	; 223
    1316:	80 83       	st	Z, r24
	}
}
    1318:	ff 91       	pop	r31
    131a:	ef 91       	pop	r30
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	2f 91       	pop	r18
    1322:	0f 90       	pop	r0
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	0f 90       	pop	r0
    1328:	1f 90       	pop	r1
    132a:	18 95       	reti

0000132c <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    132c:	1f 92       	push	r1
    132e:	0f 92       	push	r0
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	0f 92       	push	r0
    1334:	11 24       	eor	r1, r1
    1336:	2f 93       	push	r18
    1338:	3f 93       	push	r19
    133a:	4f 93       	push	r20
    133c:	5f 93       	push	r21
    133e:	6f 93       	push	r22
    1340:	7f 93       	push	r23
    1342:	8f 93       	push	r24
    1344:	9f 93       	push	r25
    1346:	af 93       	push	r26
    1348:	bf 93       	push	r27
    134a:	cf 93       	push	r28
    134c:	ef 93       	push	r30
    134e:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1350:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
    1354:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <do_echo>
    1358:	88 23       	and	r24, r24
    135a:	49 f0       	breq	.+18     	; 0x136e <__vector_20+0x42>
    135c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <bytes_in_out_buffer>
    1360:	8f 3f       	cpi	r24, 0xFF	; 255
    1362:	29 f0       	breq	.+10     	; 0x136e <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	8c 2f       	mov	r24, r28
    136a:	0e 94 9b 08 	call	0x1136	; 0x1136 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
    136e:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <bytes_in_input_buffer>
    1372:	80 31       	cpi	r24, 0x10	; 16
    1374:	20 f0       	brcs	.+8      	; 0x137e <__vector_20+0x52>
	{
		input_overrun = 1;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <input_overrun>
    137c:	18 c0       	rjmp	.+48     	; 0x13ae <__vector_20+0x82>
	} else
	{
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r')
    137e:	cd 30       	cpi	r28, 0x0D	; 13
    1380:	09 f4       	brne	.+2      	; 0x1384 <__vector_20+0x58>
		{
			c = '\n';
    1382:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1384:	e0 91 17 03 	lds	r30, 0x0317	; 0x800317 <input_insert_pos>
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	8e 0f       	add	r24, r30
    138c:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <input_insert_pos>
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	e8 5e       	subi	r30, 0xE8	; 232
    1394:	fc 4f       	sbci	r31, 0xFC	; 252
    1396:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1398:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <bytes_in_input_buffer>
    139c:	8f 5f       	subi	r24, 0xFF	; 255
    139e:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
    13a2:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <input_insert_pos>
    13a6:	80 31       	cpi	r24, 0x10	; 16
    13a8:	11 f4       	brne	.+4      	; 0x13ae <__vector_20+0x82>
		{
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    13aa:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <input_insert_pos>
		}
	}
}
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	cf 91       	pop	r28
    13b4:	bf 91       	pop	r27
    13b6:	af 91       	pop	r26
    13b8:	9f 91       	pop	r25
    13ba:	8f 91       	pop	r24
    13bc:	7f 91       	pop	r23
    13be:	6f 91       	pop	r22
    13c0:	5f 91       	pop	r21
    13c2:	4f 91       	pop	r20
    13c4:	3f 91       	pop	r19
    13c6:	2f 91       	pop	r18
    13c8:	0f 90       	pop	r0
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	0f 90       	pop	r0
    13ce:	1f 90       	pop	r1
    13d0:	18 95       	reti

000013d2 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider)
{
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    13d2:	94 b1       	in	r25, 0x04	; 4
    13d4:	90 6b       	ori	r25, 0xB0	; 176
    13d6:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
    13d8:	95 b1       	in	r25, 0x05	; 5
    13da:	90 61       	ori	r25, 0x10	; 16
    13dc:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    13de:	90 e5       	ldi	r25, 0x50	; 80
    13e0:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider)
    13e2:	88 30       	cpi	r24, 0x08	; 8
    13e4:	21 f0       	breq	.+8      	; 0x13ee <spi_setup_master+0x1c>
    13e6:	80 32       	cpi	r24, 0x20	; 32
    13e8:	11 f0       	breq	.+4      	; 0x13ee <spi_setup_master+0x1c>
    13ea:	82 30       	cpi	r24, 0x02	; 2
    13ec:	19 f4       	brne	.+6      	; 0x13f4 <spi_setup_master+0x22>
	{
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	9d bd       	out	0x2d, r25	; 45
			break;
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    13f4:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
    13f6:	80 32       	cpi	r24, 0x20	; 32
    13f8:	69 f0       	breq	.+26     	; 0x1414 <spi_setup_master+0x42>
    13fa:	28 f4       	brcc	.+10     	; 0x1406 <spi_setup_master+0x34>
    13fc:	88 30       	cpi	r24, 0x08	; 8
    13fe:	71 f0       	breq	.+28     	; 0x141c <spi_setup_master+0x4a>
    1400:	80 31       	cpi	r24, 0x10	; 16
    1402:	61 f0       	breq	.+24     	; 0x141c <spi_setup_master+0x4a>
    1404:	0e c0       	rjmp	.+28     	; 0x1422 <spi_setup_master+0x50>
    1406:	80 34       	cpi	r24, 0x40	; 64
    1408:	29 f0       	breq	.+10     	; 0x1414 <spi_setup_master+0x42>
    140a:	80 38       	cpi	r24, 0x80	; 128
    140c:	51 f4       	brne	.+20     	; 0x1422 <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
    140e:	8c b5       	in	r24, 0x2c	; 44
    1410:	81 60       	ori	r24, 0x01	; 1
    1412:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
    1414:	8c b5       	in	r24, 0x2c	; 44
    1416:	82 60       	ori	r24, 0x02	; 2
    1418:	8c bd       	out	0x2c, r24	; 44
			break;
    141a:	03 c0       	rjmp	.+6      	; 0x1422 <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
    141c:	8c b5       	in	r24, 0x2c	; 44
    141e:	81 60       	ori	r24, 0x01	; 1
    1420:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
    1422:	85 b1       	in	r24, 0x05	; 5
    1424:	8f 7e       	andi	r24, 0xEF	; 239
    1426:	85 b9       	out	0x05, r24	; 5
    1428:	08 95       	ret

0000142a <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    142a:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    142c:	0d b4       	in	r0, 0x2d	; 45
    142e:	07 fe       	sbrs	r0, 7
    1430:	fd cf       	rjmp	.-6      	; 0x142c <spi_send_byte+0x2>
	{
		; // wait
	}
	return SPDR0;
    1432:	8e b5       	in	r24, 0x2e	; 46
}
    1434:	08 95       	ret

00001436 <move_terminal_cursor>:
}

void reverse_video(void)
{
	printf_P(PSTR("\x1b[7m"));
}
    1436:	9f 93       	push	r25
    1438:	8f 93       	push	r24
    143a:	7f 93       	push	r23
    143c:	6f 93       	push	r22
    143e:	8d e7       	ldi	r24, 0x7D	; 125
    1440:	93 e0       	ldi	r25, 0x03	; 3
    1442:	9f 93       	push	r25
    1444:	8f 93       	push	r24
    1446:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	08 95       	ret

00001458 <clear_terminal>:

void clear_terminal(void)
{
	printf_P(PSTR("\x1b[2J"));
    1458:	88 e7       	ldi	r24, 0x78	; 120
    145a:	93 e0       	ldi	r25, 0x03	; 3
    145c:	9f 93       	push	r25
    145e:	8f 93       	push	r24
    1460:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
}
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	08 95       	ret

0000146a <clear_to_end_of_line>:

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
    146a:	84 e7       	ldi	r24, 0x74	; 116
    146c:	93 e0       	ldi	r25, 0x03	; 3
    146e:	9f 93       	push	r25
    1470:	8f 93       	push	r24
    1472:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	08 95       	ret

0000147c <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    147c:	1f 92       	push	r1
    147e:	8f 93       	push	r24
    1480:	8e e6       	ldi	r24, 0x6E	; 110
    1482:	93 e0       	ldi	r25, 0x03	; 3
    1484:	9f 93       	push	r25
    1486:	8f 93       	push	r24
    1488:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
}
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	08 95       	ret

00001496 <hide_cursor>:

void hide_cursor()
{
	printf_P(PSTR("\x1b[?25l"));
    1496:	87 e6       	ldi	r24, 0x67	; 103
    1498:	93 e0       	ldi	r25, 0x03	; 3
    149a:	9f 93       	push	r25
    149c:	8f 93       	push	r24
    149e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
}
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	08 95       	ret

000014a8 <show_cursor>:

void show_cursor()
{
	printf_P(PSTR("\x1b[?25h"));
    14a8:	80 e6       	ldi	r24, 0x60	; 96
    14aa:	93 e0       	ldi	r25, 0x03	; 3
    14ac:	9f 93       	push	r25
    14ae:	8f 93       	push	r24
    14b0:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <printf_P>
}
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	08 95       	ret

000014ba <init_timer0>:
void init_timer0(void)
{
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
    14ba:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <clock_ticks_ms>
    14be:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <clock_ticks_ms+0x1>
    14c2:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <clock_ticks_ms+0x2>
    14c6:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    14ca:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    14cc:	8c e7       	ldi	r24, 0x7C	; 124
    14ce:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
    14d0:	92 e0       	ldi	r25, 0x02	; 2
    14d2:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    14d4:	83 e0       	ldi	r24, 0x03	; 3
    14d6:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
    14d8:	ee e6       	ldi	r30, 0x6E	; 110
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	82 60       	ori	r24, 0x02	; 2
    14e0:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
    14e2:	95 bb       	out	0x15, r25	; 21
    14e4:	08 95       	ret

000014e6 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    14e6:	8f b7       	in	r24, 0x3f	; 63
    14e8:	28 2f       	mov	r18, r24
    14ea:	20 78       	andi	r18, 0x80	; 128
	cli();
    14ec:	f8 94       	cli
	return_value = clock_ticks_ms;
    14ee:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <clock_ticks_ms>
    14f2:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <clock_ticks_ms+0x1>
    14f6:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <clock_ticks_ms+0x2>
    14fa:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    14fe:	22 23       	and	r18, r18
    1500:	09 f0       	breq	.+2      	; 0x1504 <get_current_time+0x1e>
	{
		sei();
    1502:	78 94       	sei
	}
	return return_value;
}
    1504:	08 95       	ret

00001506 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
    1506:	1f 92       	push	r1
    1508:	0f 92       	push	r0
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	0f 92       	push	r0
    150e:	11 24       	eor	r1, r1
    1510:	8f 93       	push	r24
    1512:	9f 93       	push	r25
    1514:	af 93       	push	r26
    1516:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
    1518:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <clock_ticks_ms>
    151c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <clock_ticks_ms+0x1>
    1520:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <clock_ticks_ms+0x2>
    1524:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <clock_ticks_ms+0x3>
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	a1 1d       	adc	r26, r1
    152c:	b1 1d       	adc	r27, r1
    152e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <clock_ticks_ms>
    1532:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <clock_ticks_ms+0x1>
    1536:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <clock_ticks_ms+0x2>
    153a:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <clock_ticks_ms+0x3>
}
    153e:	bf 91       	pop	r27
    1540:	af 91       	pop	r26
    1542:	9f 91       	pop	r25
    1544:	8f 91       	pop	r24
    1546:	0f 90       	pop	r0
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	0f 90       	pop	r0
    154c:	1f 90       	pop	r1
    154e:	18 95       	reti

00001550 <init_timer1>:

/* Set up timer 1
 */
void init_timer1(void)
{
	TCNT1 = 0;
    1550:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1554:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1558:	08 95       	ret

0000155a <init_timer2>:

/* Set up timer 2
 */
void init_timer2(void)
{
	TCNT2 = 0;
    155a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    155e:	08 95       	ret

00001560 <__divmodsi4>:
    1560:	05 2e       	mov	r0, r21
    1562:	97 fb       	bst	r25, 7
    1564:	1e f4       	brtc	.+6      	; 0x156c <__divmodsi4+0xc>
    1566:	00 94       	com	r0
    1568:	0e 94 c7 0a 	call	0x158e	; 0x158e <__negsi2>
    156c:	57 fd       	sbrc	r21, 7
    156e:	07 d0       	rcall	.+14     	; 0x157e <__divmodsi4_neg2>
    1570:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__udivmodsi4>
    1574:	07 fc       	sbrc	r0, 7
    1576:	03 d0       	rcall	.+6      	; 0x157e <__divmodsi4_neg2>
    1578:	4e f4       	brtc	.+18     	; 0x158c <__divmodsi4_exit>
    157a:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__negsi2>

0000157e <__divmodsi4_neg2>:
    157e:	50 95       	com	r21
    1580:	40 95       	com	r20
    1582:	30 95       	com	r19
    1584:	21 95       	neg	r18
    1586:	3f 4f       	sbci	r19, 0xFF	; 255
    1588:	4f 4f       	sbci	r20, 0xFF	; 255
    158a:	5f 4f       	sbci	r21, 0xFF	; 255

0000158c <__divmodsi4_exit>:
    158c:	08 95       	ret

0000158e <__negsi2>:
    158e:	90 95       	com	r25
    1590:	80 95       	com	r24
    1592:	70 95       	com	r23
    1594:	61 95       	neg	r22
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	8f 4f       	sbci	r24, 0xFF	; 255
    159a:	9f 4f       	sbci	r25, 0xFF	; 255
    159c:	08 95       	ret

0000159e <__umulhisi3>:
    159e:	a2 9f       	mul	r26, r18
    15a0:	b0 01       	movw	r22, r0
    15a2:	b3 9f       	mul	r27, r19
    15a4:	c0 01       	movw	r24, r0
    15a6:	a3 9f       	mul	r26, r19
    15a8:	70 0d       	add	r23, r0
    15aa:	81 1d       	adc	r24, r1
    15ac:	11 24       	eor	r1, r1
    15ae:	91 1d       	adc	r25, r1
    15b0:	b2 9f       	mul	r27, r18
    15b2:	70 0d       	add	r23, r0
    15b4:	81 1d       	adc	r24, r1
    15b6:	11 24       	eor	r1, r1
    15b8:	91 1d       	adc	r25, r1
    15ba:	08 95       	ret

000015bc <__udivmodsi4>:
    15bc:	a1 e2       	ldi	r26, 0x21	; 33
    15be:	1a 2e       	mov	r1, r26
    15c0:	aa 1b       	sub	r26, r26
    15c2:	bb 1b       	sub	r27, r27
    15c4:	fd 01       	movw	r30, r26
    15c6:	0d c0       	rjmp	.+26     	; 0x15e2 <__udivmodsi4_ep>

000015c8 <__udivmodsi4_loop>:
    15c8:	aa 1f       	adc	r26, r26
    15ca:	bb 1f       	adc	r27, r27
    15cc:	ee 1f       	adc	r30, r30
    15ce:	ff 1f       	adc	r31, r31
    15d0:	a2 17       	cp	r26, r18
    15d2:	b3 07       	cpc	r27, r19
    15d4:	e4 07       	cpc	r30, r20
    15d6:	f5 07       	cpc	r31, r21
    15d8:	20 f0       	brcs	.+8      	; 0x15e2 <__udivmodsi4_ep>
    15da:	a2 1b       	sub	r26, r18
    15dc:	b3 0b       	sbc	r27, r19
    15de:	e4 0b       	sbc	r30, r20
    15e0:	f5 0b       	sbc	r31, r21

000015e2 <__udivmodsi4_ep>:
    15e2:	66 1f       	adc	r22, r22
    15e4:	77 1f       	adc	r23, r23
    15e6:	88 1f       	adc	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	1a 94       	dec	r1
    15ec:	69 f7       	brne	.-38     	; 0x15c8 <__udivmodsi4_loop>
    15ee:	60 95       	com	r22
    15f0:	70 95       	com	r23
    15f2:	80 95       	com	r24
    15f4:	90 95       	com	r25
    15f6:	9b 01       	movw	r18, r22
    15f8:	ac 01       	movw	r20, r24
    15fa:	bd 01       	movw	r22, r26
    15fc:	cf 01       	movw	r24, r30
    15fe:	08 95       	ret

00001600 <fgetc>:
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	ec 01       	movw	r28, r24
    1606:	2b 81       	ldd	r18, Y+3	; 0x03
    1608:	20 ff       	sbrs	r18, 0
    160a:	33 c0       	rjmp	.+102    	; 0x1672 <fgetc+0x72>
    160c:	26 ff       	sbrs	r18, 6
    160e:	0a c0       	rjmp	.+20     	; 0x1624 <fgetc+0x24>
    1610:	2f 7b       	andi	r18, 0xBF	; 191
    1612:	2b 83       	std	Y+3, r18	; 0x03
    1614:	8e 81       	ldd	r24, Y+6	; 0x06
    1616:	9f 81       	ldd	r25, Y+7	; 0x07
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	9f 83       	std	Y+7, r25	; 0x07
    161c:	8e 83       	std	Y+6, r24	; 0x06
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	29 c0       	rjmp	.+82     	; 0x1676 <fgetc+0x76>
    1624:	22 ff       	sbrs	r18, 2
    1626:	0f c0       	rjmp	.+30     	; 0x1646 <fgetc+0x46>
    1628:	e8 81       	ld	r30, Y
    162a:	f9 81       	ldd	r31, Y+1	; 0x01
    162c:	80 81       	ld	r24, Z
    162e:	08 2e       	mov	r0, r24
    1630:	00 0c       	add	r0, r0
    1632:	99 0b       	sbc	r25, r25
    1634:	00 97       	sbiw	r24, 0x00	; 0
    1636:	19 f4       	brne	.+6      	; 0x163e <fgetc+0x3e>
    1638:	20 62       	ori	r18, 0x20	; 32
    163a:	2b 83       	std	Y+3, r18	; 0x03
    163c:	1a c0       	rjmp	.+52     	; 0x1672 <fgetc+0x72>
    163e:	31 96       	adiw	r30, 0x01	; 1
    1640:	f9 83       	std	Y+1, r31	; 0x01
    1642:	e8 83       	st	Y, r30
    1644:	0e c0       	rjmp	.+28     	; 0x1662 <fgetc+0x62>
    1646:	ea 85       	ldd	r30, Y+10	; 0x0a
    1648:	fb 85       	ldd	r31, Y+11	; 0x0b
    164a:	09 95       	icall
    164c:	97 ff       	sbrs	r25, 7
    164e:	09 c0       	rjmp	.+18     	; 0x1662 <fgetc+0x62>
    1650:	2b 81       	ldd	r18, Y+3	; 0x03
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	11 f0       	breq	.+4      	; 0x165a <fgetc+0x5a>
    1656:	80 e2       	ldi	r24, 0x20	; 32
    1658:	01 c0       	rjmp	.+2      	; 0x165c <fgetc+0x5c>
    165a:	80 e1       	ldi	r24, 0x10	; 16
    165c:	82 2b       	or	r24, r18
    165e:	8b 83       	std	Y+3, r24	; 0x03
    1660:	08 c0       	rjmp	.+16     	; 0x1672 <fgetc+0x72>
    1662:	2e 81       	ldd	r18, Y+6	; 0x06
    1664:	3f 81       	ldd	r19, Y+7	; 0x07
    1666:	2f 5f       	subi	r18, 0xFF	; 255
    1668:	3f 4f       	sbci	r19, 0xFF	; 255
    166a:	3f 83       	std	Y+7, r19	; 0x07
    166c:	2e 83       	std	Y+6, r18	; 0x06
    166e:	99 27       	eor	r25, r25
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <fgetc+0x76>
    1672:	8f ef       	ldi	r24, 0xFF	; 255
    1674:	9f ef       	ldi	r25, 0xFF	; 255
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	08 95       	ret

0000167c <printf>:
    167c:	a0 e0       	ldi	r26, 0x00	; 0
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e4 e4       	ldi	r30, 0x44	; 68
    1682:	fb e0       	ldi	r31, 0x0B	; 11
    1684:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__prologue_saves__+0x20>
    1688:	ae 01       	movw	r20, r28
    168a:	4b 5f       	subi	r20, 0xFB	; 251
    168c:	5f 4f       	sbci	r21, 0xFF	; 255
    168e:	fa 01       	movw	r30, r20
    1690:	61 91       	ld	r22, Z+
    1692:	71 91       	ld	r23, Z+
    1694:	af 01       	movw	r20, r30
    1696:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <__iob+0x2>
    169a:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <__iob+0x3>
    169e:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <vfprintf>
    16a2:	e2 e0       	ldi	r30, 0x02	; 2
    16a4:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__epilogue_restores__+0x20>

000016a8 <printf_P>:
    16a8:	a0 e0       	ldi	r26, 0x00	; 0
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	ea e5       	ldi	r30, 0x5A	; 90
    16ae:	fb e0       	ldi	r31, 0x0B	; 11
    16b0:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__prologue_saves__+0x1c>
    16b4:	ae 01       	movw	r20, r28
    16b6:	49 5f       	subi	r20, 0xF9	; 249
    16b8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ba:	da 01       	movw	r26, r20
    16bc:	6d 91       	ld	r22, X+
    16be:	7d 91       	ld	r23, X+
    16c0:	ad 01       	movw	r20, r26
    16c2:	0a e2       	ldi	r16, 0x2A	; 42
    16c4:	13 e0       	ldi	r17, 0x03	; 3
    16c6:	f8 01       	movw	r30, r16
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	93 81       	ldd	r25, Z+3	; 0x03
    16cc:	dc 01       	movw	r26, r24
    16ce:	13 96       	adiw	r26, 0x03	; 3
    16d0:	2c 91       	ld	r18, X
    16d2:	13 97       	sbiw	r26, 0x03	; 3
    16d4:	28 60       	ori	r18, 0x08	; 8
    16d6:	13 96       	adiw	r26, 0x03	; 3
    16d8:	2c 93       	st	X, r18
    16da:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <vfprintf>
    16de:	d8 01       	movw	r26, r16
    16e0:	12 96       	adiw	r26, 0x02	; 2
    16e2:	ed 91       	ld	r30, X+
    16e4:	fc 91       	ld	r31, X
    16e6:	13 97       	sbiw	r26, 0x03	; 3
    16e8:	23 81       	ldd	r18, Z+3	; 0x03
    16ea:	27 7f       	andi	r18, 0xF7	; 247
    16ec:	23 83       	std	Z+3, r18	; 0x03
    16ee:	e4 e0       	ldi	r30, 0x04	; 4
    16f0:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <__epilogue_restores__+0x1c>

000016f4 <vfprintf>:
    16f4:	ab e0       	ldi	r26, 0x0B	; 11
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e0 e8       	ldi	r30, 0x80	; 128
    16fa:	fb e0       	ldi	r31, 0x0B	; 11
    16fc:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__prologue_saves__>
    1700:	6c 01       	movw	r12, r24
    1702:	7b 01       	movw	r14, r22
    1704:	8a 01       	movw	r16, r20
    1706:	fc 01       	movw	r30, r24
    1708:	17 82       	std	Z+7, r1	; 0x07
    170a:	16 82       	std	Z+6, r1	; 0x06
    170c:	83 81       	ldd	r24, Z+3	; 0x03
    170e:	81 ff       	sbrs	r24, 1
    1710:	cc c1       	rjmp	.+920    	; 0x1aaa <vfprintf+0x3b6>
    1712:	ce 01       	movw	r24, r28
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	3c 01       	movw	r6, r24
    1718:	f6 01       	movw	r30, r12
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	f7 01       	movw	r30, r14
    171e:	93 fd       	sbrc	r25, 3
    1720:	85 91       	lpm	r24, Z+
    1722:	93 ff       	sbrs	r25, 3
    1724:	81 91       	ld	r24, Z+
    1726:	7f 01       	movw	r14, r30
    1728:	88 23       	and	r24, r24
    172a:	09 f4       	brne	.+2      	; 0x172e <vfprintf+0x3a>
    172c:	ba c1       	rjmp	.+884    	; 0x1aa2 <vfprintf+0x3ae>
    172e:	85 32       	cpi	r24, 0x25	; 37
    1730:	39 f4       	brne	.+14     	; 0x1740 <vfprintf+0x4c>
    1732:	93 fd       	sbrc	r25, 3
    1734:	85 91       	lpm	r24, Z+
    1736:	93 ff       	sbrs	r25, 3
    1738:	81 91       	ld	r24, Z+
    173a:	7f 01       	movw	r14, r30
    173c:	85 32       	cpi	r24, 0x25	; 37
    173e:	29 f4       	brne	.+10     	; 0x174a <vfprintf+0x56>
    1740:	b6 01       	movw	r22, r12
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <fputc>
    1748:	e7 cf       	rjmp	.-50     	; 0x1718 <vfprintf+0x24>
    174a:	91 2c       	mov	r9, r1
    174c:	21 2c       	mov	r2, r1
    174e:	31 2c       	mov	r3, r1
    1750:	ff e1       	ldi	r31, 0x1F	; 31
    1752:	f3 15       	cp	r31, r3
    1754:	d8 f0       	brcs	.+54     	; 0x178c <vfprintf+0x98>
    1756:	8b 32       	cpi	r24, 0x2B	; 43
    1758:	79 f0       	breq	.+30     	; 0x1778 <vfprintf+0x84>
    175a:	38 f4       	brcc	.+14     	; 0x176a <vfprintf+0x76>
    175c:	80 32       	cpi	r24, 0x20	; 32
    175e:	79 f0       	breq	.+30     	; 0x177e <vfprintf+0x8a>
    1760:	83 32       	cpi	r24, 0x23	; 35
    1762:	a1 f4       	brne	.+40     	; 0x178c <vfprintf+0x98>
    1764:	23 2d       	mov	r18, r3
    1766:	20 61       	ori	r18, 0x10	; 16
    1768:	1d c0       	rjmp	.+58     	; 0x17a4 <vfprintf+0xb0>
    176a:	8d 32       	cpi	r24, 0x2D	; 45
    176c:	61 f0       	breq	.+24     	; 0x1786 <vfprintf+0x92>
    176e:	80 33       	cpi	r24, 0x30	; 48
    1770:	69 f4       	brne	.+26     	; 0x178c <vfprintf+0x98>
    1772:	23 2d       	mov	r18, r3
    1774:	21 60       	ori	r18, 0x01	; 1
    1776:	16 c0       	rjmp	.+44     	; 0x17a4 <vfprintf+0xb0>
    1778:	83 2d       	mov	r24, r3
    177a:	82 60       	ori	r24, 0x02	; 2
    177c:	38 2e       	mov	r3, r24
    177e:	e3 2d       	mov	r30, r3
    1780:	e4 60       	ori	r30, 0x04	; 4
    1782:	3e 2e       	mov	r3, r30
    1784:	2a c0       	rjmp	.+84     	; 0x17da <vfprintf+0xe6>
    1786:	f3 2d       	mov	r31, r3
    1788:	f8 60       	ori	r31, 0x08	; 8
    178a:	1d c0       	rjmp	.+58     	; 0x17c6 <vfprintf+0xd2>
    178c:	37 fc       	sbrc	r3, 7
    178e:	2d c0       	rjmp	.+90     	; 0x17ea <vfprintf+0xf6>
    1790:	20 ed       	ldi	r18, 0xD0	; 208
    1792:	28 0f       	add	r18, r24
    1794:	2a 30       	cpi	r18, 0x0A	; 10
    1796:	40 f0       	brcs	.+16     	; 0x17a8 <vfprintf+0xb4>
    1798:	8e 32       	cpi	r24, 0x2E	; 46
    179a:	b9 f4       	brne	.+46     	; 0x17ca <vfprintf+0xd6>
    179c:	36 fc       	sbrc	r3, 6
    179e:	81 c1       	rjmp	.+770    	; 0x1aa2 <vfprintf+0x3ae>
    17a0:	23 2d       	mov	r18, r3
    17a2:	20 64       	ori	r18, 0x40	; 64
    17a4:	32 2e       	mov	r3, r18
    17a6:	19 c0       	rjmp	.+50     	; 0x17da <vfprintf+0xe6>
    17a8:	36 fe       	sbrs	r3, 6
    17aa:	06 c0       	rjmp	.+12     	; 0x17b8 <vfprintf+0xc4>
    17ac:	8a e0       	ldi	r24, 0x0A	; 10
    17ae:	98 9e       	mul	r9, r24
    17b0:	20 0d       	add	r18, r0
    17b2:	11 24       	eor	r1, r1
    17b4:	92 2e       	mov	r9, r18
    17b6:	11 c0       	rjmp	.+34     	; 0x17da <vfprintf+0xe6>
    17b8:	ea e0       	ldi	r30, 0x0A	; 10
    17ba:	2e 9e       	mul	r2, r30
    17bc:	20 0d       	add	r18, r0
    17be:	11 24       	eor	r1, r1
    17c0:	22 2e       	mov	r2, r18
    17c2:	f3 2d       	mov	r31, r3
    17c4:	f0 62       	ori	r31, 0x20	; 32
    17c6:	3f 2e       	mov	r3, r31
    17c8:	08 c0       	rjmp	.+16     	; 0x17da <vfprintf+0xe6>
    17ca:	8c 36       	cpi	r24, 0x6C	; 108
    17cc:	21 f4       	brne	.+8      	; 0x17d6 <vfprintf+0xe2>
    17ce:	83 2d       	mov	r24, r3
    17d0:	80 68       	ori	r24, 0x80	; 128
    17d2:	38 2e       	mov	r3, r24
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <vfprintf+0xe6>
    17d6:	88 36       	cpi	r24, 0x68	; 104
    17d8:	41 f4       	brne	.+16     	; 0x17ea <vfprintf+0xf6>
    17da:	f7 01       	movw	r30, r14
    17dc:	93 fd       	sbrc	r25, 3
    17de:	85 91       	lpm	r24, Z+
    17e0:	93 ff       	sbrs	r25, 3
    17e2:	81 91       	ld	r24, Z+
    17e4:	7f 01       	movw	r14, r30
    17e6:	81 11       	cpse	r24, r1
    17e8:	b3 cf       	rjmp	.-154    	; 0x1750 <vfprintf+0x5c>
    17ea:	98 2f       	mov	r25, r24
    17ec:	9f 7d       	andi	r25, 0xDF	; 223
    17ee:	95 54       	subi	r25, 0x45	; 69
    17f0:	93 30       	cpi	r25, 0x03	; 3
    17f2:	28 f4       	brcc	.+10     	; 0x17fe <vfprintf+0x10a>
    17f4:	0c 5f       	subi	r16, 0xFC	; 252
    17f6:	1f 4f       	sbci	r17, 0xFF	; 255
    17f8:	9f e3       	ldi	r25, 0x3F	; 63
    17fa:	99 83       	std	Y+1, r25	; 0x01
    17fc:	0d c0       	rjmp	.+26     	; 0x1818 <vfprintf+0x124>
    17fe:	83 36       	cpi	r24, 0x63	; 99
    1800:	31 f0       	breq	.+12     	; 0x180e <vfprintf+0x11a>
    1802:	83 37       	cpi	r24, 0x73	; 115
    1804:	71 f0       	breq	.+28     	; 0x1822 <vfprintf+0x12e>
    1806:	83 35       	cpi	r24, 0x53	; 83
    1808:	09 f0       	breq	.+2      	; 0x180c <vfprintf+0x118>
    180a:	59 c0       	rjmp	.+178    	; 0x18be <vfprintf+0x1ca>
    180c:	21 c0       	rjmp	.+66     	; 0x1850 <vfprintf+0x15c>
    180e:	f8 01       	movw	r30, r16
    1810:	80 81       	ld	r24, Z
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	0e 5f       	subi	r16, 0xFE	; 254
    1816:	1f 4f       	sbci	r17, 0xFF	; 255
    1818:	88 24       	eor	r8, r8
    181a:	83 94       	inc	r8
    181c:	91 2c       	mov	r9, r1
    181e:	53 01       	movw	r10, r6
    1820:	13 c0       	rjmp	.+38     	; 0x1848 <vfprintf+0x154>
    1822:	28 01       	movw	r4, r16
    1824:	f2 e0       	ldi	r31, 0x02	; 2
    1826:	4f 0e       	add	r4, r31
    1828:	51 1c       	adc	r5, r1
    182a:	f8 01       	movw	r30, r16
    182c:	a0 80       	ld	r10, Z
    182e:	b1 80       	ldd	r11, Z+1	; 0x01
    1830:	36 fe       	sbrs	r3, 6
    1832:	03 c0       	rjmp	.+6      	; 0x183a <vfprintf+0x146>
    1834:	69 2d       	mov	r22, r9
    1836:	70 e0       	ldi	r23, 0x00	; 0
    1838:	02 c0       	rjmp	.+4      	; 0x183e <vfprintf+0x14a>
    183a:	6f ef       	ldi	r22, 0xFF	; 255
    183c:	7f ef       	ldi	r23, 0xFF	; 255
    183e:	c5 01       	movw	r24, r10
    1840:	0e 94 66 0d 	call	0x1acc	; 0x1acc <strnlen>
    1844:	4c 01       	movw	r8, r24
    1846:	82 01       	movw	r16, r4
    1848:	f3 2d       	mov	r31, r3
    184a:	ff 77       	andi	r31, 0x7F	; 127
    184c:	3f 2e       	mov	r3, r31
    184e:	16 c0       	rjmp	.+44     	; 0x187c <vfprintf+0x188>
    1850:	28 01       	movw	r4, r16
    1852:	22 e0       	ldi	r18, 0x02	; 2
    1854:	42 0e       	add	r4, r18
    1856:	51 1c       	adc	r5, r1
    1858:	f8 01       	movw	r30, r16
    185a:	a0 80       	ld	r10, Z
    185c:	b1 80       	ldd	r11, Z+1	; 0x01
    185e:	36 fe       	sbrs	r3, 6
    1860:	03 c0       	rjmp	.+6      	; 0x1868 <vfprintf+0x174>
    1862:	69 2d       	mov	r22, r9
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	02 c0       	rjmp	.+4      	; 0x186c <vfprintf+0x178>
    1868:	6f ef       	ldi	r22, 0xFF	; 255
    186a:	7f ef       	ldi	r23, 0xFF	; 255
    186c:	c5 01       	movw	r24, r10
    186e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <strnlen_P>
    1872:	4c 01       	movw	r8, r24
    1874:	f3 2d       	mov	r31, r3
    1876:	f0 68       	ori	r31, 0x80	; 128
    1878:	3f 2e       	mov	r3, r31
    187a:	82 01       	movw	r16, r4
    187c:	33 fc       	sbrc	r3, 3
    187e:	1b c0       	rjmp	.+54     	; 0x18b6 <vfprintf+0x1c2>
    1880:	82 2d       	mov	r24, r2
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	88 16       	cp	r8, r24
    1886:	99 06       	cpc	r9, r25
    1888:	b0 f4       	brcc	.+44     	; 0x18b6 <vfprintf+0x1c2>
    188a:	b6 01       	movw	r22, r12
    188c:	80 e2       	ldi	r24, 0x20	; 32
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <fputc>
    1894:	2a 94       	dec	r2
    1896:	f4 cf       	rjmp	.-24     	; 0x1880 <vfprintf+0x18c>
    1898:	f5 01       	movw	r30, r10
    189a:	37 fc       	sbrc	r3, 7
    189c:	85 91       	lpm	r24, Z+
    189e:	37 fe       	sbrs	r3, 7
    18a0:	81 91       	ld	r24, Z+
    18a2:	5f 01       	movw	r10, r30
    18a4:	b6 01       	movw	r22, r12
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <fputc>
    18ac:	21 10       	cpse	r2, r1
    18ae:	2a 94       	dec	r2
    18b0:	21 e0       	ldi	r18, 0x01	; 1
    18b2:	82 1a       	sub	r8, r18
    18b4:	91 08       	sbc	r9, r1
    18b6:	81 14       	cp	r8, r1
    18b8:	91 04       	cpc	r9, r1
    18ba:	71 f7       	brne	.-36     	; 0x1898 <vfprintf+0x1a4>
    18bc:	e8 c0       	rjmp	.+464    	; 0x1a8e <vfprintf+0x39a>
    18be:	84 36       	cpi	r24, 0x64	; 100
    18c0:	11 f0       	breq	.+4      	; 0x18c6 <vfprintf+0x1d2>
    18c2:	89 36       	cpi	r24, 0x69	; 105
    18c4:	41 f5       	brne	.+80     	; 0x1916 <vfprintf+0x222>
    18c6:	f8 01       	movw	r30, r16
    18c8:	37 fe       	sbrs	r3, 7
    18ca:	07 c0       	rjmp	.+14     	; 0x18da <vfprintf+0x1e6>
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	93 81       	ldd	r25, Z+3	; 0x03
    18d4:	0c 5f       	subi	r16, 0xFC	; 252
    18d6:	1f 4f       	sbci	r17, 0xFF	; 255
    18d8:	08 c0       	rjmp	.+16     	; 0x18ea <vfprintf+0x1f6>
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	07 2e       	mov	r0, r23
    18e0:	00 0c       	add	r0, r0
    18e2:	88 0b       	sbc	r24, r24
    18e4:	99 0b       	sbc	r25, r25
    18e6:	0e 5f       	subi	r16, 0xFE	; 254
    18e8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ea:	f3 2d       	mov	r31, r3
    18ec:	ff 76       	andi	r31, 0x6F	; 111
    18ee:	3f 2e       	mov	r3, r31
    18f0:	97 ff       	sbrs	r25, 7
    18f2:	09 c0       	rjmp	.+18     	; 0x1906 <vfprintf+0x212>
    18f4:	90 95       	com	r25
    18f6:	80 95       	com	r24
    18f8:	70 95       	com	r23
    18fa:	61 95       	neg	r22
    18fc:	7f 4f       	sbci	r23, 0xFF	; 255
    18fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1900:	9f 4f       	sbci	r25, 0xFF	; 255
    1902:	f0 68       	ori	r31, 0x80	; 128
    1904:	3f 2e       	mov	r3, r31
    1906:	2a e0       	ldi	r18, 0x0A	; 10
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	a3 01       	movw	r20, r6
    190c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__ultoa_invert>
    1910:	88 2e       	mov	r8, r24
    1912:	86 18       	sub	r8, r6
    1914:	45 c0       	rjmp	.+138    	; 0x19a0 <vfprintf+0x2ac>
    1916:	85 37       	cpi	r24, 0x75	; 117
    1918:	31 f4       	brne	.+12     	; 0x1926 <vfprintf+0x232>
    191a:	23 2d       	mov	r18, r3
    191c:	2f 7e       	andi	r18, 0xEF	; 239
    191e:	b2 2e       	mov	r11, r18
    1920:	2a e0       	ldi	r18, 0x0A	; 10
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	25 c0       	rjmp	.+74     	; 0x1970 <vfprintf+0x27c>
    1926:	93 2d       	mov	r25, r3
    1928:	99 7f       	andi	r25, 0xF9	; 249
    192a:	b9 2e       	mov	r11, r25
    192c:	8f 36       	cpi	r24, 0x6F	; 111
    192e:	c1 f0       	breq	.+48     	; 0x1960 <vfprintf+0x26c>
    1930:	18 f4       	brcc	.+6      	; 0x1938 <vfprintf+0x244>
    1932:	88 35       	cpi	r24, 0x58	; 88
    1934:	79 f0       	breq	.+30     	; 0x1954 <vfprintf+0x260>
    1936:	b5 c0       	rjmp	.+362    	; 0x1aa2 <vfprintf+0x3ae>
    1938:	80 37       	cpi	r24, 0x70	; 112
    193a:	19 f0       	breq	.+6      	; 0x1942 <vfprintf+0x24e>
    193c:	88 37       	cpi	r24, 0x78	; 120
    193e:	21 f0       	breq	.+8      	; 0x1948 <vfprintf+0x254>
    1940:	b0 c0       	rjmp	.+352    	; 0x1aa2 <vfprintf+0x3ae>
    1942:	e9 2f       	mov	r30, r25
    1944:	e0 61       	ori	r30, 0x10	; 16
    1946:	be 2e       	mov	r11, r30
    1948:	b4 fe       	sbrs	r11, 4
    194a:	0d c0       	rjmp	.+26     	; 0x1966 <vfprintf+0x272>
    194c:	fb 2d       	mov	r31, r11
    194e:	f4 60       	ori	r31, 0x04	; 4
    1950:	bf 2e       	mov	r11, r31
    1952:	09 c0       	rjmp	.+18     	; 0x1966 <vfprintf+0x272>
    1954:	34 fe       	sbrs	r3, 4
    1956:	0a c0       	rjmp	.+20     	; 0x196c <vfprintf+0x278>
    1958:	29 2f       	mov	r18, r25
    195a:	26 60       	ori	r18, 0x06	; 6
    195c:	b2 2e       	mov	r11, r18
    195e:	06 c0       	rjmp	.+12     	; 0x196c <vfprintf+0x278>
    1960:	28 e0       	ldi	r18, 0x08	; 8
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	05 c0       	rjmp	.+10     	; 0x1970 <vfprintf+0x27c>
    1966:	20 e1       	ldi	r18, 0x10	; 16
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <vfprintf+0x27c>
    196c:	20 e1       	ldi	r18, 0x10	; 16
    196e:	32 e0       	ldi	r19, 0x02	; 2
    1970:	f8 01       	movw	r30, r16
    1972:	b7 fe       	sbrs	r11, 7
    1974:	07 c0       	rjmp	.+14     	; 0x1984 <vfprintf+0x290>
    1976:	60 81       	ld	r22, Z
    1978:	71 81       	ldd	r23, Z+1	; 0x01
    197a:	82 81       	ldd	r24, Z+2	; 0x02
    197c:	93 81       	ldd	r25, Z+3	; 0x03
    197e:	0c 5f       	subi	r16, 0xFC	; 252
    1980:	1f 4f       	sbci	r17, 0xFF	; 255
    1982:	06 c0       	rjmp	.+12     	; 0x1990 <vfprintf+0x29c>
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 5f       	subi	r16, 0xFE	; 254
    198e:	1f 4f       	sbci	r17, 0xFF	; 255
    1990:	a3 01       	movw	r20, r6
    1992:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__ultoa_invert>
    1996:	88 2e       	mov	r8, r24
    1998:	86 18       	sub	r8, r6
    199a:	fb 2d       	mov	r31, r11
    199c:	ff 77       	andi	r31, 0x7F	; 127
    199e:	3f 2e       	mov	r3, r31
    19a0:	36 fe       	sbrs	r3, 6
    19a2:	0d c0       	rjmp	.+26     	; 0x19be <vfprintf+0x2ca>
    19a4:	23 2d       	mov	r18, r3
    19a6:	2e 7f       	andi	r18, 0xFE	; 254
    19a8:	a2 2e       	mov	r10, r18
    19aa:	89 14       	cp	r8, r9
    19ac:	58 f4       	brcc	.+22     	; 0x19c4 <vfprintf+0x2d0>
    19ae:	34 fe       	sbrs	r3, 4
    19b0:	0b c0       	rjmp	.+22     	; 0x19c8 <vfprintf+0x2d4>
    19b2:	32 fc       	sbrc	r3, 2
    19b4:	09 c0       	rjmp	.+18     	; 0x19c8 <vfprintf+0x2d4>
    19b6:	83 2d       	mov	r24, r3
    19b8:	8e 7e       	andi	r24, 0xEE	; 238
    19ba:	a8 2e       	mov	r10, r24
    19bc:	05 c0       	rjmp	.+10     	; 0x19c8 <vfprintf+0x2d4>
    19be:	b8 2c       	mov	r11, r8
    19c0:	a3 2c       	mov	r10, r3
    19c2:	03 c0       	rjmp	.+6      	; 0x19ca <vfprintf+0x2d6>
    19c4:	b8 2c       	mov	r11, r8
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <vfprintf+0x2d6>
    19c8:	b9 2c       	mov	r11, r9
    19ca:	a4 fe       	sbrs	r10, 4
    19cc:	0f c0       	rjmp	.+30     	; 0x19ec <vfprintf+0x2f8>
    19ce:	fe 01       	movw	r30, r28
    19d0:	e8 0d       	add	r30, r8
    19d2:	f1 1d       	adc	r31, r1
    19d4:	80 81       	ld	r24, Z
    19d6:	80 33       	cpi	r24, 0x30	; 48
    19d8:	21 f4       	brne	.+8      	; 0x19e2 <vfprintf+0x2ee>
    19da:	9a 2d       	mov	r25, r10
    19dc:	99 7e       	andi	r25, 0xE9	; 233
    19de:	a9 2e       	mov	r10, r25
    19e0:	09 c0       	rjmp	.+18     	; 0x19f4 <vfprintf+0x300>
    19e2:	a2 fe       	sbrs	r10, 2
    19e4:	06 c0       	rjmp	.+12     	; 0x19f2 <vfprintf+0x2fe>
    19e6:	b3 94       	inc	r11
    19e8:	b3 94       	inc	r11
    19ea:	04 c0       	rjmp	.+8      	; 0x19f4 <vfprintf+0x300>
    19ec:	8a 2d       	mov	r24, r10
    19ee:	86 78       	andi	r24, 0x86	; 134
    19f0:	09 f0       	breq	.+2      	; 0x19f4 <vfprintf+0x300>
    19f2:	b3 94       	inc	r11
    19f4:	a3 fc       	sbrc	r10, 3
    19f6:	11 c0       	rjmp	.+34     	; 0x1a1a <vfprintf+0x326>
    19f8:	a0 fe       	sbrs	r10, 0
    19fa:	06 c0       	rjmp	.+12     	; 0x1a08 <vfprintf+0x314>
    19fc:	b2 14       	cp	r11, r2
    19fe:	88 f4       	brcc	.+34     	; 0x1a22 <vfprintf+0x32e>
    1a00:	28 0c       	add	r2, r8
    1a02:	92 2c       	mov	r9, r2
    1a04:	9b 18       	sub	r9, r11
    1a06:	0e c0       	rjmp	.+28     	; 0x1a24 <vfprintf+0x330>
    1a08:	b2 14       	cp	r11, r2
    1a0a:	60 f4       	brcc	.+24     	; 0x1a24 <vfprintf+0x330>
    1a0c:	b6 01       	movw	r22, r12
    1a0e:	80 e2       	ldi	r24, 0x20	; 32
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <fputc>
    1a16:	b3 94       	inc	r11
    1a18:	f7 cf       	rjmp	.-18     	; 0x1a08 <vfprintf+0x314>
    1a1a:	b2 14       	cp	r11, r2
    1a1c:	18 f4       	brcc	.+6      	; 0x1a24 <vfprintf+0x330>
    1a1e:	2b 18       	sub	r2, r11
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <vfprintf+0x332>
    1a22:	98 2c       	mov	r9, r8
    1a24:	21 2c       	mov	r2, r1
    1a26:	a4 fe       	sbrs	r10, 4
    1a28:	10 c0       	rjmp	.+32     	; 0x1a4a <vfprintf+0x356>
    1a2a:	b6 01       	movw	r22, r12
    1a2c:	80 e3       	ldi	r24, 0x30	; 48
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <fputc>
    1a34:	a2 fe       	sbrs	r10, 2
    1a36:	17 c0       	rjmp	.+46     	; 0x1a66 <vfprintf+0x372>
    1a38:	a1 fc       	sbrc	r10, 1
    1a3a:	03 c0       	rjmp	.+6      	; 0x1a42 <vfprintf+0x34e>
    1a3c:	88 e7       	ldi	r24, 0x78	; 120
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <vfprintf+0x352>
    1a42:	88 e5       	ldi	r24, 0x58	; 88
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	b6 01       	movw	r22, r12
    1a48:	0c c0       	rjmp	.+24     	; 0x1a62 <vfprintf+0x36e>
    1a4a:	8a 2d       	mov	r24, r10
    1a4c:	86 78       	andi	r24, 0x86	; 134
    1a4e:	59 f0       	breq	.+22     	; 0x1a66 <vfprintf+0x372>
    1a50:	a1 fe       	sbrs	r10, 1
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <vfprintf+0x364>
    1a54:	8b e2       	ldi	r24, 0x2B	; 43
    1a56:	01 c0       	rjmp	.+2      	; 0x1a5a <vfprintf+0x366>
    1a58:	80 e2       	ldi	r24, 0x20	; 32
    1a5a:	a7 fc       	sbrc	r10, 7
    1a5c:	8d e2       	ldi	r24, 0x2D	; 45
    1a5e:	b6 01       	movw	r22, r12
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <fputc>
    1a66:	89 14       	cp	r8, r9
    1a68:	38 f4       	brcc	.+14     	; 0x1a78 <vfprintf+0x384>
    1a6a:	b6 01       	movw	r22, r12
    1a6c:	80 e3       	ldi	r24, 0x30	; 48
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <fputc>
    1a74:	9a 94       	dec	r9
    1a76:	f7 cf       	rjmp	.-18     	; 0x1a66 <vfprintf+0x372>
    1a78:	8a 94       	dec	r8
    1a7a:	f3 01       	movw	r30, r6
    1a7c:	e8 0d       	add	r30, r8
    1a7e:	f1 1d       	adc	r31, r1
    1a80:	80 81       	ld	r24, Z
    1a82:	b6 01       	movw	r22, r12
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <fputc>
    1a8a:	81 10       	cpse	r8, r1
    1a8c:	f5 cf       	rjmp	.-22     	; 0x1a78 <vfprintf+0x384>
    1a8e:	22 20       	and	r2, r2
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <vfprintf+0x3a0>
    1a92:	42 ce       	rjmp	.-892    	; 0x1718 <vfprintf+0x24>
    1a94:	b6 01       	movw	r22, r12
    1a96:	80 e2       	ldi	r24, 0x20	; 32
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <fputc>
    1a9e:	2a 94       	dec	r2
    1aa0:	f6 cf       	rjmp	.-20     	; 0x1a8e <vfprintf+0x39a>
    1aa2:	f6 01       	movw	r30, r12
    1aa4:	86 81       	ldd	r24, Z+6	; 0x06
    1aa6:	97 81       	ldd	r25, Z+7	; 0x07
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <vfprintf+0x3ba>
    1aaa:	8f ef       	ldi	r24, 0xFF	; 255
    1aac:	9f ef       	ldi	r25, 0xFF	; 255
    1aae:	2b 96       	adiw	r28, 0x0b	; 11
    1ab0:	e2 e1       	ldi	r30, 0x12	; 18
    1ab2:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__epilogue_restores__>

00001ab6 <strnlen_P>:
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	05 90       	lpm	r0, Z+
    1aba:	61 50       	subi	r22, 0x01	; 1
    1abc:	70 40       	sbci	r23, 0x00	; 0
    1abe:	01 10       	cpse	r0, r1
    1ac0:	d8 f7       	brcc	.-10     	; 0x1ab8 <strnlen_P+0x2>
    1ac2:	80 95       	com	r24
    1ac4:	90 95       	com	r25
    1ac6:	8e 0f       	add	r24, r30
    1ac8:	9f 1f       	adc	r25, r31
    1aca:	08 95       	ret

00001acc <strnlen>:
    1acc:	fc 01       	movw	r30, r24
    1ace:	61 50       	subi	r22, 0x01	; 1
    1ad0:	70 40       	sbci	r23, 0x00	; 0
    1ad2:	01 90       	ld	r0, Z+
    1ad4:	01 10       	cpse	r0, r1
    1ad6:	d8 f7       	brcc	.-10     	; 0x1ace <strnlen+0x2>
    1ad8:	80 95       	com	r24
    1ada:	90 95       	com	r25
    1adc:	8e 0f       	add	r24, r30
    1ade:	9f 1f       	adc	r25, r31
    1ae0:	08 95       	ret

00001ae2 <fputc>:
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	fb 01       	movw	r30, r22
    1aec:	23 81       	ldd	r18, Z+3	; 0x03
    1aee:	21 fd       	sbrc	r18, 1
    1af0:	03 c0       	rjmp	.+6      	; 0x1af8 <fputc+0x16>
    1af2:	8f ef       	ldi	r24, 0xFF	; 255
    1af4:	9f ef       	ldi	r25, 0xFF	; 255
    1af6:	2c c0       	rjmp	.+88     	; 0x1b50 <fputc+0x6e>
    1af8:	22 ff       	sbrs	r18, 2
    1afa:	16 c0       	rjmp	.+44     	; 0x1b28 <fputc+0x46>
    1afc:	46 81       	ldd	r20, Z+6	; 0x06
    1afe:	57 81       	ldd	r21, Z+7	; 0x07
    1b00:	24 81       	ldd	r18, Z+4	; 0x04
    1b02:	35 81       	ldd	r19, Z+5	; 0x05
    1b04:	42 17       	cp	r20, r18
    1b06:	53 07       	cpc	r21, r19
    1b08:	44 f4       	brge	.+16     	; 0x1b1a <fputc+0x38>
    1b0a:	a0 81       	ld	r26, Z
    1b0c:	b1 81       	ldd	r27, Z+1	; 0x01
    1b0e:	9d 01       	movw	r18, r26
    1b10:	2f 5f       	subi	r18, 0xFF	; 255
    1b12:	3f 4f       	sbci	r19, 0xFF	; 255
    1b14:	31 83       	std	Z+1, r19	; 0x01
    1b16:	20 83       	st	Z, r18
    1b18:	8c 93       	st	X, r24
    1b1a:	26 81       	ldd	r18, Z+6	; 0x06
    1b1c:	37 81       	ldd	r19, Z+7	; 0x07
    1b1e:	2f 5f       	subi	r18, 0xFF	; 255
    1b20:	3f 4f       	sbci	r19, 0xFF	; 255
    1b22:	37 83       	std	Z+7, r19	; 0x07
    1b24:	26 83       	std	Z+6, r18	; 0x06
    1b26:	14 c0       	rjmp	.+40     	; 0x1b50 <fputc+0x6e>
    1b28:	8b 01       	movw	r16, r22
    1b2a:	ec 01       	movw	r28, r24
    1b2c:	fb 01       	movw	r30, r22
    1b2e:	00 84       	ldd	r0, Z+8	; 0x08
    1b30:	f1 85       	ldd	r31, Z+9	; 0x09
    1b32:	e0 2d       	mov	r30, r0
    1b34:	09 95       	icall
    1b36:	89 2b       	or	r24, r25
    1b38:	e1 f6       	brne	.-72     	; 0x1af2 <fputc+0x10>
    1b3a:	d8 01       	movw	r26, r16
    1b3c:	16 96       	adiw	r26, 0x06	; 6
    1b3e:	8d 91       	ld	r24, X+
    1b40:	9c 91       	ld	r25, X
    1b42:	17 97       	sbiw	r26, 0x07	; 7
    1b44:	01 96       	adiw	r24, 0x01	; 1
    1b46:	17 96       	adiw	r26, 0x07	; 7
    1b48:	9c 93       	st	X, r25
    1b4a:	8e 93       	st	-X, r24
    1b4c:	16 97       	sbiw	r26, 0x06	; 6
    1b4e:	ce 01       	movw	r24, r28
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	1f 91       	pop	r17
    1b56:	0f 91       	pop	r16
    1b58:	08 95       	ret

00001b5a <__ultoa_invert>:
    1b5a:	fa 01       	movw	r30, r20
    1b5c:	aa 27       	eor	r26, r26
    1b5e:	28 30       	cpi	r18, 0x08	; 8
    1b60:	51 f1       	breq	.+84     	; 0x1bb6 <__ultoa_invert+0x5c>
    1b62:	20 31       	cpi	r18, 0x10	; 16
    1b64:	81 f1       	breq	.+96     	; 0x1bc6 <__ultoa_invert+0x6c>
    1b66:	e8 94       	clt
    1b68:	6f 93       	push	r22
    1b6a:	6e 7f       	andi	r22, 0xFE	; 254
    1b6c:	6e 5f       	subi	r22, 0xFE	; 254
    1b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b70:	8f 4f       	sbci	r24, 0xFF	; 255
    1b72:	9f 4f       	sbci	r25, 0xFF	; 255
    1b74:	af 4f       	sbci	r26, 0xFF	; 255
    1b76:	b1 e0       	ldi	r27, 0x01	; 1
    1b78:	3e d0       	rcall	.+124    	; 0x1bf6 <__ultoa_invert+0x9c>
    1b7a:	b4 e0       	ldi	r27, 0x04	; 4
    1b7c:	3c d0       	rcall	.+120    	; 0x1bf6 <__ultoa_invert+0x9c>
    1b7e:	67 0f       	add	r22, r23
    1b80:	78 1f       	adc	r23, r24
    1b82:	89 1f       	adc	r24, r25
    1b84:	9a 1f       	adc	r25, r26
    1b86:	a1 1d       	adc	r26, r1
    1b88:	68 0f       	add	r22, r24
    1b8a:	79 1f       	adc	r23, r25
    1b8c:	8a 1f       	adc	r24, r26
    1b8e:	91 1d       	adc	r25, r1
    1b90:	a1 1d       	adc	r26, r1
    1b92:	6a 0f       	add	r22, r26
    1b94:	71 1d       	adc	r23, r1
    1b96:	81 1d       	adc	r24, r1
    1b98:	91 1d       	adc	r25, r1
    1b9a:	a1 1d       	adc	r26, r1
    1b9c:	20 d0       	rcall	.+64     	; 0x1bde <__ultoa_invert+0x84>
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <__ultoa_invert+0x48>
    1ba0:	68 94       	set
    1ba2:	3f 91       	pop	r19
    1ba4:	2a e0       	ldi	r18, 0x0A	; 10
    1ba6:	26 9f       	mul	r18, r22
    1ba8:	11 24       	eor	r1, r1
    1baa:	30 19       	sub	r19, r0
    1bac:	30 5d       	subi	r19, 0xD0	; 208
    1bae:	31 93       	st	Z+, r19
    1bb0:	de f6       	brtc	.-74     	; 0x1b68 <__ultoa_invert+0xe>
    1bb2:	cf 01       	movw	r24, r30
    1bb4:	08 95       	ret
    1bb6:	46 2f       	mov	r20, r22
    1bb8:	47 70       	andi	r20, 0x07	; 7
    1bba:	40 5d       	subi	r20, 0xD0	; 208
    1bbc:	41 93       	st	Z+, r20
    1bbe:	b3 e0       	ldi	r27, 0x03	; 3
    1bc0:	0f d0       	rcall	.+30     	; 0x1be0 <__ultoa_invert+0x86>
    1bc2:	c9 f7       	brne	.-14     	; 0x1bb6 <__ultoa_invert+0x5c>
    1bc4:	f6 cf       	rjmp	.-20     	; 0x1bb2 <__ultoa_invert+0x58>
    1bc6:	46 2f       	mov	r20, r22
    1bc8:	4f 70       	andi	r20, 0x0F	; 15
    1bca:	40 5d       	subi	r20, 0xD0	; 208
    1bcc:	4a 33       	cpi	r20, 0x3A	; 58
    1bce:	18 f0       	brcs	.+6      	; 0x1bd6 <__ultoa_invert+0x7c>
    1bd0:	49 5d       	subi	r20, 0xD9	; 217
    1bd2:	31 fd       	sbrc	r19, 1
    1bd4:	40 52       	subi	r20, 0x20	; 32
    1bd6:	41 93       	st	Z+, r20
    1bd8:	02 d0       	rcall	.+4      	; 0x1bde <__ultoa_invert+0x84>
    1bda:	a9 f7       	brne	.-22     	; 0x1bc6 <__ultoa_invert+0x6c>
    1bdc:	ea cf       	rjmp	.-44     	; 0x1bb2 <__ultoa_invert+0x58>
    1bde:	b4 e0       	ldi	r27, 0x04	; 4
    1be0:	a6 95       	lsr	r26
    1be2:	97 95       	ror	r25
    1be4:	87 95       	ror	r24
    1be6:	77 95       	ror	r23
    1be8:	67 95       	ror	r22
    1bea:	ba 95       	dec	r27
    1bec:	c9 f7       	brne	.-14     	; 0x1be0 <__ultoa_invert+0x86>
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	61 05       	cpc	r22, r1
    1bf2:	71 05       	cpc	r23, r1
    1bf4:	08 95       	ret
    1bf6:	9b 01       	movw	r18, r22
    1bf8:	ac 01       	movw	r20, r24
    1bfa:	0a 2e       	mov	r0, r26
    1bfc:	06 94       	lsr	r0
    1bfe:	57 95       	ror	r21
    1c00:	47 95       	ror	r20
    1c02:	37 95       	ror	r19
    1c04:	27 95       	ror	r18
    1c06:	ba 95       	dec	r27
    1c08:	c9 f7       	brne	.-14     	; 0x1bfc <__ultoa_invert+0xa2>
    1c0a:	62 0f       	add	r22, r18
    1c0c:	73 1f       	adc	r23, r19
    1c0e:	84 1f       	adc	r24, r20
    1c10:	95 1f       	adc	r25, r21
    1c12:	a0 1d       	adc	r26, r0
    1c14:	08 95       	ret

00001c16 <__prologue_saves__>:
    1c16:	2f 92       	push	r2
    1c18:	3f 92       	push	r3
    1c1a:	4f 92       	push	r4
    1c1c:	5f 92       	push	r5
    1c1e:	6f 92       	push	r6
    1c20:	7f 92       	push	r7
    1c22:	8f 92       	push	r8
    1c24:	9f 92       	push	r9
    1c26:	af 92       	push	r10
    1c28:	bf 92       	push	r11
    1c2a:	cf 92       	push	r12
    1c2c:	df 92       	push	r13
    1c2e:	ef 92       	push	r14
    1c30:	ff 92       	push	r15
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	ca 1b       	sub	r28, r26
    1c40:	db 0b       	sbc	r29, r27
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	09 94       	ijmp

00001c4e <__epilogue_restores__>:
    1c4e:	2a 88       	ldd	r2, Y+18	; 0x12
    1c50:	39 88       	ldd	r3, Y+17	; 0x11
    1c52:	48 88       	ldd	r4, Y+16	; 0x10
    1c54:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c56:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c58:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c60:	b9 84       	ldd	r11, Y+9	; 0x09
    1c62:	c8 84       	ldd	r12, Y+8	; 0x08
    1c64:	df 80       	ldd	r13, Y+7	; 0x07
    1c66:	ee 80       	ldd	r14, Y+6	; 0x06
    1c68:	fd 80       	ldd	r15, Y+5	; 0x05
    1c6a:	0c 81       	ldd	r16, Y+4	; 0x04
    1c6c:	1b 81       	ldd	r17, Y+3	; 0x03
    1c6e:	aa 81       	ldd	r26, Y+2	; 0x02
    1c70:	b9 81       	ldd	r27, Y+1	; 0x01
    1c72:	ce 0f       	add	r28, r30
    1c74:	d1 1d       	adc	r29, r1
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	ed 01       	movw	r28, r26
    1c82:	08 95       	ret

00001c84 <_exit>:
    1c84:	f8 94       	cli

00001c86 <__stop_program>:
    1c86:	ff cf       	rjmp	.-2      	; 0x1c86 <__stop_program>
