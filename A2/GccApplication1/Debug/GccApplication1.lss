
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003dc  00800100  00002ef0  00002f84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ef0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000140  008004dc  008004dc  00003360  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003360  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000033bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  000033fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003dba  00000000  00000000  0000371c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001315  00000000  00000000  000074d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000235c  00000000  00000000  000087eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009f8  00000000  00000000  0000ab48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d23  00000000  00000000  0000b540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025d0  00000000  00000000  0000c263  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000e833  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__ctors_end>
       4:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       8:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      10:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      14:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_5>
      18:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      1c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      20:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      24:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__vector_9>
      28:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      2c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      30:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      34:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      38:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      3c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      40:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__vector_16>
      44:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      48:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      4c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      50:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__vector_20>
      54:	0c 94 11 10 	jmp	0x2022	; 0x2022 <__vector_21>
      58:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      5c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      60:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      64:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      68:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      6c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      70:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      74:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      78:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2344>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2281>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 20 43 61 69 6c 69 6e 20 44 65 6c 67      by  Cailin Delg
      d4:	61 64 6f 20 2d 20 34 38 30 32 37 39 34 32 00        ado - 48027942.

000000e3 <__c.2279>:
      e3:	20 5c 24 24 20 20 20 5c 24 24 20 20 20 20 20 5c      \$$   \$$     \
      f3:	24 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20     $     \$$   \$$ 
     103:	20 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20           \$$   \$$ 
     113:	20 5c 24 24 24 24 24 24 24 20 5c 24 24 20 20 20      \$$$$$$$ \$$   
     123:	20 20 20 20 20 5c 24 24 24 24 24 24 00                   \$$$$$$.

00000130 <__c.2277>:
     130:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 5c 24     | $$  | $$    \$
     140:	24 24 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20     $$   | $$  | $$ 
     150:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     160:	5c 24 24 20 20 20 20 20 5c 7c 20 24 24 20 20 20     \$$     \| $$   
     170:	20 20 20 20 5c 24 24 20 20 20 20 24 24 00               \$$    $$.

0000017e <__c.2275>:
     17e:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 5c 24 24     | $$  | $$   \$$
     18e:	20 24 24 20 20 7c 20 24 24 20 20 7c 20 24 24 20      $$  | $$  | $$ 
     19e:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 7c          | $$  | $$|
     1ae:	20 24 24 24 24 24 24 24 24 7c 20 24 24 20 20 20      $$$$$$$$| $$   
     1be:	20 20 20 7c 20 24 24 5f 5f 2f 20 24 24 00              | $$__/ $$.

000001cc <__c.2273>:
     1cc:	7c 20 24 24 24 24 24 24 24 24 20 20 5c 24 24 5c     | $$$$$$$$  \$$\
     1dc:	20 20 24 24 20 7c 20 24 24 24 24 24 24 24 5c 20       $$ | $$$$$$$\ 
     1ec:	20 20 20 20 20 7c 20 24 24 24 24 24 24 24 24 7c          | $$$$$$$$|
     1fc:	20 24 24 20 20 20 20 24 24 7c 20 24 24 20 20 20      $$    $$| $$   
     20c:	5c 24 24 7c 20 24 24 20 20 7c 20 24 24 00           \$$| $$  | $$.

0000021a <__c.2271>:
     21a:	7c 20 24 24 20 20 20 20 24 24 20 5c 24 24 5c 20     | $$    $$ \$$\ 
     22a:	2f 20 20 24 24 7c 20 24 24 20 20 20 20 24 24 20     /  $$| $$    $$ 
     23a:	20 20 20 20 20 7c 20 24 24 20 20 20 20 24 24 7c          | $$    $$|
     24a:	20 20 24 24 24 24 24 24 5c 7c 20 20 24 24 24 24       $$$$$$\|  $$$$
     25a:	24 24 5c 7c 20 20 24 24 24 24 24 24 5c 00           $$\|  $$$$$$\.

00000268 <__c.2269>:
     268:	7c 20 24 24 5f 5f 7c 20 24 24 7c 20 24 24 20 20     | $$__| $$| $$  
     278:	20 7c 20 24 24 7c 20 24 24 5f 5f 7c 20 24 24 20      | $$| $$__| $$ 
     288:	20 20 20 20 20 7c 20 24 24 5f 5f 7c 20 24 24 20          | $$__| $$ 
     298:	2f 20 20 20 20 20 20 5c 20 20 2f 20 20 20 20 20     /      \  /     
     2a8:	20 5c 20 20 2f 20 20 20 20 20 20 5c 00               \  /      \.

000002b5 <__c.2267>:
     2b5:	7c 20 20 24 24 24 24 24 24 5c 7c 20 24 24 20 20     |  $$$$$$\| $$  
     2c5:	20 7c 20 24 24 7c 20 24 24 24 24 24 24 24 5c 20      | $$| $$$$$$$\ 
     2d5:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     2e5:	20 5f 5f 5f 5f 5f 5f 20 20 20 20 5f 5f 5f 5f 5f      ______    _____
     2f5:	5f 20 20 20 20 5f 5f 5f 5f 5f 5f 00                 _    ______.

00000301 <__c.2265>:
     301:	20 2f 20 20 20 20 20 20 5c 20 7c 20 20 5c 20 20      /      \ |  \  
     311:	20 7c 20 20 5c 7c 20 20 20 20 20 20 20 5c 20 20      |  \|       \  
     321:	20 20 20 20 20 7c 20 20 5c 20 20 7c 20 20 5c 00          |  \  |  \.

00000331 <__c.2263>:
     331:	20 20 5f 5f 5f 5f 5f 5f 20 20 20 5f 5f 20 20 20       ______   __   
     341:	20 20 5f 5f 20 20 5f 5f 5f 5f 5f 5f 5f 20 20 20       __  _______   
     351:	20 20 20 20 20 20 5f 5f 20 20 20 20 5f 5f 00              __    __.

00000360 <__c.2058>:
     360:	1b 5b 3f 32 35 68 00                                .[?25h.

00000367 <__c.2054>:
     367:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000036e <__c.2050>:
     36e:	1b 5b 25 64 6d 00                                   .[%dm.

00000374 <__c.2045>:
     374:	1b 5b 4b 00                                         .[K.

00000378 <__c.2040>:
     378:	1b 5b 32 4a 00                                      .[2J.

0000037d <__c.2025>:
     37d:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000386 <__ctors_end>:
     386:	11 24       	eor	r1, r1
     388:	1f be       	out	0x3f, r1	; 63
     38a:	cf ef       	ldi	r28, 0xFF	; 255
     38c:	d8 e0       	ldi	r29, 0x08	; 8
     38e:	de bf       	out	0x3e, r29	; 62
     390:	cd bf       	out	0x3d, r28	; 61

00000392 <__do_copy_data>:
     392:	14 e0       	ldi	r17, 0x04	; 4
     394:	a0 e0       	ldi	r26, 0x00	; 0
     396:	b1 e0       	ldi	r27, 0x01	; 1
     398:	e0 ef       	ldi	r30, 0xF0	; 240
     39a:	fe e2       	ldi	r31, 0x2E	; 46
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__do_copy_data+0x10>
     39e:	05 90       	lpm	r0, Z+
     3a0:	0d 92       	st	X+, r0
     3a2:	ac 3d       	cpi	r26, 0xDC	; 220
     3a4:	b1 07       	cpc	r27, r17
     3a6:	d9 f7       	brne	.-10     	; 0x39e <__do_copy_data+0xc>

000003a8 <__do_clear_bss>:
     3a8:	26 e0       	ldi	r18, 0x06	; 6
     3aa:	ac ed       	ldi	r26, 0xDC	; 220
     3ac:	b4 e0       	ldi	r27, 0x04	; 4
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
     3b2:	ac 31       	cpi	r26, 0x1C	; 28
     3b4:	b2 07       	cpc	r27, r18
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>
     3b8:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <main>
     3bc:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <_exit>

000003c0 <__bad_interrupt>:
     3c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c4 <init_button_interrupts>:
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void)
{
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     3c4:	e8 e6       	ldi	r30, 0x68	; 104
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	82 60       	ori	r24, 0x02	; 2
     3cc:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     3ce:	8b b3       	in	r24, 0x1b	; 27
     3d0:	82 60       	ori	r24, 0x02	; 2
     3d2:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     3d4:	ec e6       	ldi	r30, 0x6C	; 108
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	8f 60       	ori	r24, 0x0F	; 15
     3dc:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     3de:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <__data_end>
     3e2:	08 95       	ret

000003e4 <button_pushed>:

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0)
     3e4:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <__data_end>
     3e8:	18 16       	cp	r1, r24
     3ea:	14 f5       	brge	.+68     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     3ec:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3f0:	6f b7       	in	r22, 0x3f	; 63
		cli();
     3f2:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	09 c0       	rjmp	.+18     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		{
			button_queue[i - 1] = button_queue[i];
     3f8:	f9 01       	movw	r30, r18
     3fa:	e3 52       	subi	r30, 0x23	; 35
     3fc:	fb 4f       	sbci	r31, 0xFB	; 251
     3fe:	40 81       	ld	r20, Z
     400:	f9 01       	movw	r30, r18
     402:	e4 52       	subi	r30, 0x24	; 36
     404:	fb 4f       	sbci	r31, 0xFB	; 251
     406:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     408:	9f 5f       	subi	r25, 0xFF	; 255
     40a:	29 2f       	mov	r18, r25
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 91 dc 04 	lds	r20, 0x04DC	; 0x8004dc <__data_end>
     412:	04 2e       	mov	r0, r20
     414:	00 0c       	add	r0, r0
     416:	55 0b       	sbc	r21, r21
     418:	24 17       	cp	r18, r20
     41a:	35 07       	cpc	r19, r21
     41c:	6c f3       	brlt	.-38     	; 0x3f8 <button_pushed+0x14>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     41e:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <__data_end>
     422:	91 50       	subi	r25, 0x01	; 1
     424:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <__data_end>
		
		if (interrupts_were_enabled)
     428:	66 23       	and	r22, r22
     42a:	1c f4       	brge	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		{
			// Turn them back on again
			sei();
     42c:	78 94       	sei
     42e:	08 95       	ret
	queue_length = 0;
}

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     430:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     432:	08 95       	ret

00000434 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect)
{
     434:	1f 92       	push	r1
     436:	0f 92       	push	r0
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     44c:	43 b1       	in	r20, 0x03	; 3
     44e:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	26 c0       	rjmp	.+76     	; 0x4a0 <__vector_5+0x6c>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     454:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <__data_end>
     458:	94 30       	cpi	r25, 0x04	; 4
     45a:	0c f5       	brge	.+66     	; 0x49e <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     45c:	24 2f       	mov	r18, r20
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	08 2e       	mov	r0, r24
     462:	02 c0       	rjmp	.+4      	; 0x468 <__vector_5+0x34>
     464:	35 95       	asr	r19
     466:	27 95       	ror	r18
     468:	0a 94       	dec	r0
     46a:	e2 f7       	brpl	.-8      	; 0x464 <__vector_5+0x30>
     46c:	20 ff       	sbrs	r18, 0
     46e:	17 c0       	rjmp	.+46     	; 0x49e <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin)))
     470:	20 91 e1 04 	lds	r18, 0x04E1	; 0x8004e1 <last_button_state>
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	08 2e       	mov	r0, r24
     478:	02 c0       	rjmp	.+4      	; 0x47e <__vector_5+0x4a>
     47a:	35 95       	asr	r19
     47c:	27 95       	ror	r18
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <__vector_5+0x46>
     482:	20 fd       	sbrc	r18, 0
     484:	0c c0       	rjmp	.+24     	; 0x49e <__vector_5+0x6a>
				{
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     486:	e0 91 dc 04 	lds	r30, 0x04DC	; 0x8004dc <__data_end>
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	9e 0f       	add	r25, r30
     48e:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <__data_end>
     492:	0e 2e       	mov	r0, r30
     494:	00 0c       	add	r0, r0
     496:	ff 0b       	sbc	r31, r31
     498:	e3 52       	subi	r30, 0x23	; 35
     49a:	fb 4f       	sbci	r31, 0xFB	; 251
     49c:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	c0 f2       	brcs	.-80     	; 0x454 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     4a4:	40 93 e1 04 	sts	0x04E1, r20	; 0x8004e1 <last_button_state>
}
     4a8:	ff 91       	pop	r31
     4aa:	ef 91       	pop	r30
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <update_start_screen>:

// Update dynamic start screen based on the frame number (0-31)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	18 2f       	mov	r17, r24
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     4c8:	d4 e0       	ldi	r29, 0x04	; 4
     4ca:	36 c0       	rjmp	.+108    	; 0x538 <update_start_screen+0x78>
	{
		for (uint8_t col = 11; col < 16; col++)
		{
			colour = col == 14 ? COLOUR_YELLOW : COLOUR_BLACK;
     4cc:	ce 30       	cpi	r28, 0x0E	; 14
     4ce:	11 f4       	brne	.+4      	; 0x4d4 <update_start_screen+0x14>
     4d0:	4f ef       	ldi	r20, 0xFF	; 255
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <update_start_screen+0x16>
     4d4:	40 e0       	ldi	r20, 0x00	; 0
			if (((32+col-frame_number) & ((1<<(row-2))-1)) == (1<<(row-3))-1)
     4d6:	2c 2f       	mov	r18, r28
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	20 5e       	subi	r18, 0xE0	; 224
     4dc:	3f 4f       	sbci	r19, 0xFF	; 255
     4de:	21 1b       	sub	r18, r17
     4e0:	31 09       	sbc	r19, r1
     4e2:	ed 2f       	mov	r30, r29
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	bf 01       	movw	r22, r30
     4e8:	62 50       	subi	r22, 0x02	; 2
     4ea:	71 09       	sbc	r23, r1
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	dc 01       	movw	r26, r24
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <update_start_screen+0x38>
     4f4:	aa 0f       	add	r26, r26
     4f6:	bb 1f       	adc	r27, r27
     4f8:	6a 95       	dec	r22
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <update_start_screen+0x34>
     4fc:	bd 01       	movw	r22, r26
     4fe:	61 50       	subi	r22, 0x01	; 1
     500:	71 09       	sbc	r23, r1
     502:	26 23       	and	r18, r22
     504:	37 23       	and	r19, r23
     506:	33 97       	sbiw	r30, 0x03	; 3
     508:	02 c0       	rjmp	.+4      	; 0x50e <update_start_screen+0x4e>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	ea 95       	dec	r30
     510:	e2 f7       	brpl	.-8      	; 0x50a <update_start_screen+0x4a>
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	28 17       	cp	r18, r24
     516:	39 07       	cpc	r19, r25
     518:	29 f4       	brne	.+10     	; 0x524 <update_start_screen+0x64>
			{
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
     51a:	ce 30       	cpi	r28, 0x0E	; 14
     51c:	10 f4       	brcc	.+4      	; 0x522 <update_start_screen+0x62>
     51e:	4f e0       	ldi	r20, 0x0F	; 15
     520:	01 c0       	rjmp	.+2      	; 0x524 <update_start_screen+0x64>
     522:	40 ef       	ldi	r20, 0xF0	; 240
			}
			ledmatrix_update_pixel(col, row, colour);
     524:	6d 2f       	mov	r22, r29
     526:	8c 2f       	mov	r24, r28
     528:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
	{
		for (uint8_t col = 11; col < 16; col++)
     52c:	cf 5f       	subi	r28, 0xFF	; 255
     52e:	01 c0       	rjmp	.+2      	; 0x532 <update_start_screen+0x72>
     530:	cb e0       	ldi	r28, 0x0B	; 11
     532:	c0 31       	cpi	r28, 0x10	; 16
     534:	58 f2       	brcs	.-106    	; 0x4cc <update_start_screen+0xc>
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     536:	df 5f       	subi	r29, 0xFF	; 255
     538:	d8 30       	cpi	r29, 0x08	; 8
     53a:	d0 f3       	brcs	.-12     	; 0x530 <update_start_screen+0x70>
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
			}
			ledmatrix_update_pixel(col, row, colour);
		}
	}
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	08 95       	ret

00000544 <show_start_screen>:
// Stored as a 5 x 3 grid pattern going from Left-to-Right, Top-to-Bottom
// Padded with a leading zero so that it fits into a 16-bit value


void show_start_screen(void)
{
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	28 97       	sbiw	r28, 0x08	; 8
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     55a:	0e 94 b3 07 	call	0xf66	; 0xf66 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	31 c0       	rjmp	.+98     	; 0x5c4 <show_start_screen+0x80>
	{
		col_data = pong_display[col];
     562:	e1 2f       	mov	r30, r17
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	e6 5e       	subi	r30, 0xE6	; 230
     568:	fe 4f       	sbci	r31, 0xFE	; 254
     56a:	90 81       	ld	r25, Z
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	21 c0       	rjmp	.+66     	; 0x5b2 <show_start_screen+0x6e>
		{
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data>>row & 1)
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	49 2f       	mov	r20, r25
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	08 2e       	mov	r0, r24
     57a:	02 c0       	rjmp	.+4      	; 0x580 <show_start_screen+0x3c>
     57c:	55 95       	asr	r21
     57e:	47 95       	ror	r20
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <show_start_screen+0x38>
     584:	40 ff       	sbrs	r20, 0
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <show_start_screen+0x5e>
			{
				column_colour_data[row] = (row < 4 ? COLOUR_RED : COLOUR_GREEN);
     588:	84 30       	cpi	r24, 0x04	; 4
     58a:	10 f4       	brcc	.+4      	; 0x590 <show_start_screen+0x4c>
     58c:	4f e0       	ldi	r20, 0x0F	; 15
     58e:	01 c0       	rjmp	.+2      	; 0x592 <show_start_screen+0x4e>
     590:	40 ef       	ldi	r20, 0xF0	; 240
     592:	e1 e0       	ldi	r30, 0x01	; 1
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	ec 0f       	add	r30, r28
     598:	fd 1f       	adc	r31, r29
     59a:	e2 0f       	add	r30, r18
     59c:	f3 1f       	adc	r31, r19
     59e:	40 83       	st	Z, r20
     5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <show_start_screen+0x6c>
			}
			else
			{
				column_colour_data[row] = 0;
     5a2:	e1 e0       	ldi	r30, 0x01	; 1
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	ec 0f       	add	r30, r28
     5a8:	fd 1f       	adc	r31, r29
     5aa:	e2 0f       	add	r30, r18
     5ac:	f3 1f       	adc	r31, r19
     5ae:	10 82       	st	Z, r1
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
	{
		col_data = pong_display[col];
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	88 30       	cpi	r24, 0x08	; 8
     5b4:	e8 f2       	brcs	.-70     	; 0x570 <show_start_screen+0x2c>
			else
			{
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
     5b6:	be 01       	movw	r22, r28
     5b8:	6f 5f       	subi	r22, 0xFF	; 255
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	81 2f       	mov	r24, r17
     5be:	0e 94 96 07 	call	0xf2c	; 0xf2c <ledmatrix_update_column>
{
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     5c2:	1f 5f       	subi	r17, 0xFF	; 255
     5c4:	10 31       	cpi	r17, 0x10	; 16
     5c6:	68 f2       	brcs	.-102    	; 0x562 <show_start_screen+0x1e>
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
	}
	update_start_screen(0);
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
}
     5ce:	28 96       	adiw	r28, 0x08	; 8
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	08 95       	ret

000005e2 <default_grid>:
}

// Initialize the display for the board, this creates the display
// for an empty board.
void default_grid(void)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	28 97       	sbiw	r28, 0x08	; 8
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_clear();
     5f6:	0e 94 b3 07 	call	0xf66	; 0xf66 <ledmatrix_clear>
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <default_grid+0x2e>
	{
		colours[row] = COLOUR_YELLOW;
     5fe:	e1 e0       	ldi	r30, 0x01	; 1
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	e8 0f       	add	r30, r24
     608:	f1 1d       	adc	r31, r1
     60a:	9f ef       	ldi	r25, 0xFF	; 255
     60c:	90 83       	st	Z, r25
void default_grid(void)
{
	ledmatrix_clear();
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     60e:	8f 5f       	subi	r24, 0xFF	; 255
     610:	88 30       	cpi	r24, 0x08	; 8
     612:	a8 f3       	brcs	.-22     	; 0x5fe <default_grid+0x1c>
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
     614:	be 01       	movw	r22, r28
     616:	6f 5f       	subi	r22, 0xFF	; 255
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	8d e0       	ldi	r24, 0x0D	; 13
     61c:	0e 94 96 07 	call	0xf2c	; 0xf2c <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	09 c0       	rjmp	.+18     	; 0x636 <default_grid+0x54>
	{
		colours[row] = COLOUR_HALF_YELLOW;
     624:	e1 e0       	ldi	r30, 0x01	; 1
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ec 0f       	add	r30, r28
     62a:	fd 1f       	adc	r31, r29
     62c:	e8 0f       	add	r30, r24
     62e:	f1 1d       	adc	r31, r1
     630:	95 e5       	ldi	r25, 0x55	; 85
     632:	90 83       	st	Z, r25
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	88 30       	cpi	r24, 0x08	; 8
     638:	a8 f3       	brcs	.-22     	; 0x624 <default_grid+0x42>
	{
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
     63a:	be 01       	movw	r22, r28
     63c:	6f 5f       	subi	r22, 0xFF	; 255
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	8c e0       	ldi	r24, 0x0C	; 12
     642:	0e 94 96 07 	call	0xf2c	; 0xf2c <ledmatrix_update_column>
	ledmatrix_update_column(14, colours);
     646:	be 01       	movw	r22, r28
     648:	6f 5f       	subi	r22, 0xFF	; 255
     64a:	7f 4f       	sbci	r23, 0xFF	; 255
     64c:	8e e0       	ldi	r24, 0x0E	; 14
     64e:	0e 94 96 07 	call	0xf2c	; 0xf2c <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	09 c0       	rjmp	.+18     	; 0x668 <default_grid+0x86>
	{
		colours[row] = COLOUR_QUART_YELLOW;
     656:	e1 e0       	ldi	r30, 0x01	; 1
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	e8 0f       	add	r30, r24
     660:	f1 1d       	adc	r31, r1
     662:	91 e1       	ldi	r25, 0x11	; 17
     664:	90 83       	st	Z, r25
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
	ledmatrix_update_column(14, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	88 30       	cpi	r24, 0x08	; 8
     66a:	a8 f3       	brcs	.-22     	; 0x656 <default_grid+0x74>
	{
		colours[row] = COLOUR_QUART_YELLOW;
	}
	ledmatrix_update_column(11, colours);
     66c:	be 01       	movw	r22, r28
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	8b e0       	ldi	r24, 0x0B	; 11
     674:	0e 94 96 07 	call	0xf2c	; 0xf2c <ledmatrix_update_column>
	ledmatrix_update_column(15, colours);
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	8f e0       	ldi	r24, 0x0F	; 15
     680:	0e 94 96 07 	call	0xf2c	; 0xf2c <ledmatrix_update_column>
}
     684:	28 96       	adiw	r28, 0x08	; 8
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <update_points>:
uint8_t game_over = 0;

//updates the points in the terminal
void update_points() {
	//clear terminal line and reprint the game score with the points
	move_terminal_cursor(10, 13);
     696:	6d e0       	ldi	r22, 0x0D	; 13
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	8a e0       	ldi	r24, 0x0A	; 10
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	clear_to_end_of_line();
     6a2:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <clear_to_end_of_line>

	// if x >= 10 and [-9, 0)
	if ((points >= 10) || (points < 0 && points >= -9)) {
     6a6:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     6aa:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     6ae:	8a 30       	cpi	r24, 0x0A	; 10
     6b0:	91 05       	cpc	r25, r1
     6b2:	34 f4       	brge	.+12     	; 0x6c0 <update_points+0x2a>
     6b4:	9c 01       	movw	r18, r24
     6b6:	27 5f       	subi	r18, 0xF7	; 247
     6b8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ba:	29 30       	cpi	r18, 0x09	; 9
     6bc:	31 05       	cpc	r19, r1
     6be:	68 f4       	brcc	.+26     	; 0x6da <update_points+0x44>
		printf("Game Score:   %d", points);
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	8a e2       	ldi	r24, 0x2A	; 42
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	08 95       	ret
		
		//if x >= 100 and (-9, -99)
	} else if ((points >= 100) || (points < -9 && points > -99)) {
     6da:	84 36       	cpi	r24, 0x64	; 100
     6dc:	91 05       	cpc	r25, r1
     6de:	34 f4       	brge	.+12     	; 0x6ec <update_points+0x56>
     6e0:	9c 01       	movw	r18, r24
     6e2:	2e 59       	subi	r18, 0x9E	; 158
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255
     6e6:	29 35       	cpi	r18, 0x59	; 89
     6e8:	31 05       	cpc	r19, r1
     6ea:	68 f4       	brcc	.+26     	; 0x706 <update_points+0x70>
		printf("Game Score:  %d", points);
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	8b e3       	ldi	r24, 0x3B	; 59
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	08 95       	ret
		
		//if x < -99
	} else if (points < -99) {
     706:	8d 39       	cpi	r24, 0x9D	; 157
     708:	2f ef       	ldi	r18, 0xFF	; 255
     70a:	92 07       	cpc	r25, r18
     70c:	6c f4       	brge	.+26     	; 0x728 <update_points+0x92>
		printf("Game Score: %d", points);
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	8b e4       	ldi	r24, 0x4B	; 75
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	08 95       	ret
		
	} else {
		printf("Game Score:    %d", points);
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	8a e5       	ldi	r24, 0x5A	; 90
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	9f 93       	push	r25
     732:	8f 93       	push	r24
     734:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	08 95       	ret

00000742 <update_combo>:
}

//updates the combo points in the terminal
void update_combo() {
	//Clear terminal line and reprint the combo count
	move_terminal_cursor(10, 14);
     742:	6e e0       	ldi	r22, 0x0E	; 14
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	8a e0       	ldi	r24, 0x0A	; 10
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	clear_to_end_of_line();
     74e:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <clear_to_end_of_line>
	
	//adjusts the combo count padding so it matches points
	if (combo_count >= 10) {
     752:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <combo_count>
     756:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <combo_count+0x1>
     75a:	8a 30       	cpi	r24, 0x0A	; 10
     75c:	91 05       	cpc	r25, r1
     75e:	6c f0       	brlt	.+26     	; 0x77a <update_combo+0x38>
		printf("Combo Count:  %d", combo_count);
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	8c e6       	ldi	r24, 0x6C	; 108
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	9f 93       	push	r25
     76a:	8f 93       	push	r24
     76c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0c c0       	rjmp	.+24     	; 0x792 <update_combo+0x50>
		
	} else {
		printf("Combo Count:   %d", combo_count);
     77a:	9f 93       	push	r25
     77c:	8f 93       	push	r24
     77e:	8d e7       	ldi	r24, 0x7D	; 125
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	9f 93       	push	r25
     784:	8f 93       	push	r24
     786:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
	}
	
	//update combo check accordingly
	if (combo_count >= 3) {
     792:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <combo_count>
     796:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <combo_count+0x1>
     79a:	03 97       	sbiw	r24, 0x03	; 3
     79c:	3c f0       	brlt	.+14     	; 0x7ac <update_combo+0x6a>
		combo_check = 1;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <combo_check+0x1>
     7a6:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <combo_check>
     7aa:	08 95       	ret
	} else {
		combo_check = 0;
     7ac:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <combo_check+0x1>
     7b0:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <combo_check>
     7b4:	08 95       	ret

000007b6 <sound_note>:
}

//play the note sound
void sound_note(int lane, int col) {
	
	if (lane == -1 && col == -1) {
     7b6:	8f 3f       	cpi	r24, 0xFF	; 255
     7b8:	2f ef       	ldi	r18, 0xFF	; 255
     7ba:	92 07       	cpc	r25, r18
     7bc:	59 f4       	brne	.+22     	; 0x7d4 <sound_note+0x1e>
     7be:	6f 3f       	cpi	r22, 0xFF	; 255
     7c0:	2f ef       	ldi	r18, 0xFF	; 255
     7c2:	72 07       	cpc	r23, r18
     7c4:	39 f4       	brne	.+14     	; 0x7d4 <sound_note+0x1e>
		//turn off buzzer
		disable_piezzo = 1;
     7c6:	21 e0       	ldi	r18, 0x01	; 1
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	30 93 f1 04 	sts	0x04F1, r19	; 0x8004f1 <disable_piezzo+0x1>
     7ce:	20 93 f0 04 	sts	0x04F0, r18	; 0x8004f0 <disable_piezzo>
     7d2:	04 c0       	rjmp	.+8      	; 0x7dc <sound_note+0x26>
	} else {
		disable_piezzo = 0;
     7d4:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <disable_piezzo+0x1>
     7d8:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <disable_piezzo>
	}
	
	//set frequency appropriately
	if (lane == 3) {
     7dc:	83 30       	cpi	r24, 0x03	; 3
     7de:	91 05       	cpc	r25, r1
     7e0:	39 f4       	brne	.+14     	; 0x7f0 <sound_note+0x3a>
		freq = 784;
     7e2:	80 e1       	ldi	r24, 0x10	; 16
     7e4:	93 e0       	ldi	r25, 0x03	; 3
     7e6:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <freq+0x1>
     7ea:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <freq>
     7ee:	1c c0       	rjmp	.+56     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		
	} else if (lane == 2) {
     7f0:	82 30       	cpi	r24, 0x02	; 2
     7f2:	91 05       	cpc	r25, r1
     7f4:	39 f4       	brne	.+14     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
		freq = 698;
     7f6:	8a eb       	ldi	r24, 0xBA	; 186
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <freq+0x1>
     7fe:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <freq>
     802:	12 c0       	rjmp	.+36     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		
	} else if (lane == 1) {
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	91 05       	cpc	r25, r1
     808:	39 f4       	brne	.+14     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
		freq = 622;
     80a:	8e e6       	ldi	r24, 0x6E	; 110
     80c:	92 e0       	ldi	r25, 0x02	; 2
     80e:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <freq+0x1>
     812:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <freq>
     816:	08 c0       	rjmp	.+16     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		
	} else if (!lane) {
     818:	89 2b       	or	r24, r25
     81a:	31 f4       	brne	.+12     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		freq = 523;
     81c:	8b e0       	ldi	r24, 0x0B	; 11
     81e:	92 e0       	ldi	r25, 0x02	; 2
     820:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <freq+0x1>
     824:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <freq>
	}

	//set duty cycle appropriately
	if (col == 11) {
     828:	6b 30       	cpi	r22, 0x0B	; 11
     82a:	71 05       	cpc	r23, r1
     82c:	69 f4       	brne	.+26     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		duty_cycle = 2;
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	a0 e0       	ldi	r26, 0x00	; 0
     834:	b0 e4       	ldi	r27, 0x40	; 64
     836:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <duty_cycle>
     83a:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <duty_cycle+0x1>
     83e:	a0 93 fc 04 	sts	0x04FC, r26	; 0x8004fc <duty_cycle+0x2>
     842:	b0 93 fd 04 	sts	0x04FD, r27	; 0x8004fd <duty_cycle+0x3>
     846:	3f c0       	rjmp	.+126    	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
		
	} else if (col == 12) {
     848:	6c 30       	cpi	r22, 0x0C	; 12
     84a:	71 05       	cpc	r23, r1
     84c:	69 f4       	brne	.+26     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
		duty_cycle = 10;
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	a0 e2       	ldi	r26, 0x20	; 32
     854:	b1 e4       	ldi	r27, 0x41	; 65
     856:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <duty_cycle>
     85a:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <duty_cycle+0x1>
     85e:	a0 93 fc 04 	sts	0x04FC, r26	; 0x8004fc <duty_cycle+0x2>
     862:	b0 93 fd 04 	sts	0x04FD, r27	; 0x8004fd <duty_cycle+0x3>
     866:	2f c0       	rjmp	.+94     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
		
	} else if (col == 13) {
     868:	6d 30       	cpi	r22, 0x0D	; 13
     86a:	71 05       	cpc	r23, r1
     86c:	69 f4       	brne	.+26     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
		duty_cycle = 50;
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	a8 e4       	ldi	r26, 0x48	; 72
     874:	b2 e4       	ldi	r27, 0x42	; 66
     876:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <duty_cycle>
     87a:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <duty_cycle+0x1>
     87e:	a0 93 fc 04 	sts	0x04FC, r26	; 0x8004fc <duty_cycle+0x2>
     882:	b0 93 fd 04 	sts	0x04FD, r27	; 0x8004fd <duty_cycle+0x3>
     886:	1f c0       	rjmp	.+62     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
		
	} else if (col == 14) {
     888:	6e 30       	cpi	r22, 0x0E	; 14
     88a:	71 05       	cpc	r23, r1
     88c:	69 f4       	brne	.+26     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
		duty_cycle = 90;
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	a4 eb       	ldi	r26, 0xB4	; 180
     894:	b2 e4       	ldi	r27, 0x42	; 66
     896:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <duty_cycle>
     89a:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <duty_cycle+0x1>
     89e:	a0 93 fc 04 	sts	0x04FC, r26	; 0x8004fc <duty_cycle+0x2>
     8a2:	b0 93 fd 04 	sts	0x04FD, r27	; 0x8004fd <duty_cycle+0x3>
     8a6:	0f c0       	rjmp	.+30     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
		
	} else if (col == 15) {
     8a8:	6f 30       	cpi	r22, 0x0F	; 15
     8aa:	71 05       	cpc	r23, r1
     8ac:	61 f4       	brne	.+24     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
		duty_cycle = 98;
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	a4 ec       	ldi	r26, 0xC4	; 196
     8b4:	b2 e4       	ldi	r27, 0x42	; 66
     8b6:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <duty_cycle>
     8ba:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <duty_cycle+0x1>
     8be:	a0 93 fc 04 	sts	0x04FC, r26	; 0x8004fc <duty_cycle+0x2>
     8c2:	b0 93 fd 04 	sts	0x04FD, r27	; 0x8004fd <duty_cycle+0x3>
		
	}
	
	note_sound();
     8c6:	0e 94 84 11 	call	0x2308	; 0x2308 <note_sound>
     8ca:	08 95       	ret

000008cc <initialise_game>:

// Initialize the game by resetting the grid and beat
void initialise_game(void)
{
	// initialize the display we are using.
	default_grid();
     8cc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <default_grid>
	
	beat = 0;
     8d0:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <beat+0x1>
     8d4:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <beat>
	game_over = 0;
     8d8:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <game_over>
	advance_count = 0;
     8dc:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <advance_count+0x1>
     8e0:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <advance_count>
	
	update_points();
     8e4:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
	update_combo();
     8e8:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
     8ec:	08 95       	ret

000008ee <play_note>:
}

// Play a note in the given lane
void play_note(uint8_t lane)
{	
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	d8 2f       	mov	r29, r24

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     8fa:	cb e0       	ldi	r28, 0x0B	; 11
     8fc:	bb c0       	rjmp	.+374    	; 0xa74 <__stack+0x175>
	
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col; //this is the next position that the note will be in
     8fe:	8f e0       	ldi	r24, 0x0F	; 15
     900:	8c 1b       	sub	r24, r28
		uint8_t index = (future + beat) / 5; 
     902:	40 91 fe 04 	lds	r20, 0x04FE	; 0x8004fe <beat>
     906:	50 91 ff 04 	lds	r21, 0x04FF	; 0x8004ff <beat+0x1>
     90a:	48 0f       	add	r20, r24
     90c:	51 1d       	adc	r21, r1
     90e:	9a 01       	movw	r18, r20
     910:	ad ec       	ldi	r26, 0xCD	; 205
     912:	bc ec       	ldi	r27, 0xCC	; 204
     914:	0e 94 11 14 	call	0x2822	; 0x2822 <__umulhisi3>
     918:	fc 01       	movw	r30, r24
     91a:	f6 95       	lsr	r31
     91c:	e7 95       	ror	r30
     91e:	f6 95       	lsr	r31
     920:	e7 95       	ror	r30
		
		if ((future + beat) % 5) {
     922:	cf 01       	movw	r24, r30
     924:	88 0f       	add	r24, r24
     926:	99 1f       	adc	r25, r25
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	8e 0f       	add	r24, r30
     92e:	9f 1f       	adc	r25, r31
     930:	48 17       	cp	r20, r24
     932:	59 07       	cpc	r21, r25
     934:	09 f0       	breq	.+2      	; 0x938 <__stack+0x39>
     936:	9d c0       	rjmp	.+314    	; 0xa72 <__stack+0x173>
			continue;
		}
		if (track[index] & (1<<lane))
     938:	ff 27       	eor	r31, r31
     93a:	e1 57       	subi	r30, 0x71	; 113
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	80 81       	ld	r24, Z
     940:	ed 2e       	mov	r14, r29
     942:	f1 2c       	mov	r15, r1
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0d 2e       	mov	r0, r29
     948:	02 c0       	rjmp	.+4      	; 0x94e <__stack+0x4f>
     94a:	95 95       	asr	r25
     94c:	87 95       	ror	r24
     94e:	0a 94       	dec	r0
     950:	e2 f7       	brpl	.-8      	; 0x94a <__stack+0x4b>
     952:	80 ff       	sbrs	r24, 0
     954:	7d c0       	rjmp	.+250    	; 0xa50 <__stack+0x151>
		{	
			if (green_check == lane) {
     956:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     95a:	d8 13       	cpse	r29, r24
     95c:	12 c0       	rjmp	.+36     	; 0x982 <__stack+0x83>
				points--;
     95e:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     962:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     96c:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
				update_points();
     970:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
				
				combo_count = 0;
     974:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <combo_count+0x1>
     978:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <combo_count>
				update_combo();
     97c:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
				
				break;
     980:	7c c0       	rjmp	.+248    	; 0xa7a <__stack+0x17b>
			}
			
			green_check = lane;
     982:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			// if so, colour the two pixels green
			ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     986:	40 ef       	ldi	r20, 0xF0	; 240
     988:	1d 2f       	mov	r17, r29
     98a:	11 0f       	add	r17, r17
     98c:	61 2f       	mov	r22, r17
     98e:	8c 2f       	mov	r24, r28
     990:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     994:	61 e0       	ldi	r22, 0x01	; 1
     996:	61 0f       	add	r22, r17
     998:	40 ef       	ldi	r20, 0xF0	; 240
     99a:	8c 2f       	mov	r24, r28
     99c:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			
			//if the note is in the two specified lanes then award the appropriate amount of points
			if (col == 11 || col == 15) {
     9a0:	cb 30       	cpi	r28, 0x0B	; 11
     9a2:	11 f0       	breq	.+4      	; 0x9a8 <__stack+0xa9>
     9a4:	cf 30       	cpi	r28, 0x0F	; 15
     9a6:	99 f4       	brne	.+38     	; 0x9ce <__stack+0xcf>
				points++;
     9a8:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     9ac:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     9b0:	01 96       	adiw	r24, 0x01	; 1
     9b2:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     9b6:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
				combo_count = 0;
     9ba:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <combo_count+0x1>
     9be:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <combo_count>
				sound_note(lane, col);
     9c2:	6c 2f       	mov	r22, r28
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	c7 01       	movw	r24, r14
     9c8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
     9cc:	4e c0       	rjmp	.+156    	; 0xa6a <__stack+0x16b>
				
			} else if (col == 12 || col == 14) {
     9ce:	cc 30       	cpi	r28, 0x0C	; 12
     9d0:	11 f0       	breq	.+4      	; 0x9d6 <__stack+0xd7>
     9d2:	ce 30       	cpi	r28, 0x0E	; 14
     9d4:	99 f4       	brne	.+38     	; 0x9fc <__stack+0xfd>
				points += 2;
     9d6:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     9da:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     9de:	02 96       	adiw	r24, 0x02	; 2
     9e0:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     9e4:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
				combo_count = 0;
     9e8:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <combo_count+0x1>
     9ec:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <combo_count>
				sound_note(lane, col);
     9f0:	6c 2f       	mov	r22, r28
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	c7 01       	movw	r24, r14
     9f6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
     9fa:	37 c0       	rjmp	.+110    	; 0xa6a <__stack+0x16b>
				
			} else if (col == 13) {
     9fc:	cd 30       	cpi	r28, 0x0D	; 13
     9fe:	a9 f5       	brne	.+106    	; 0xa6a <__stack+0x16b>
				combo_count++;
     a00:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <combo_count>
     a04:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <combo_count+0x1>
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	90 93 f7 04 	sts	0x04F7, r25	; 0x8004f7 <combo_count+0x1>
     a0e:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <combo_count>
				sound_note(lane, col);
     a12:	6c 2f       	mov	r22, r28
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	c7 01       	movw	r24, r14
     a18:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
				
				if (combo_count > 3) {
     a1c:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <combo_count>
     a20:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <combo_count+0x1>
     a24:	04 97       	sbiw	r24, 0x04	; 4
     a26:	54 f0       	brlt	.+20     	; 0xa3c <__stack+0x13d>
					points += 4;
     a28:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     a2c:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     a30:	04 96       	adiw	r24, 0x04	; 4
     a32:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     a36:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
     a3a:	17 c0       	rjmp	.+46     	; 0xa6a <__stack+0x16b>
				} else {
					points += 3;
     a3c:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     a40:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     a44:	03 96       	adiw	r24, 0x03	; 3
     a46:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     a4a:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
     a4e:	0d c0       	rjmp	.+26     	; 0xa6a <__stack+0x16b>
					
				}
			}
			
		} else {
			points--;
     a50:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     a54:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     a5e:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
			combo_count = 0;
     a62:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <combo_count+0x1>
     a66:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <combo_count>
		
		}
			
		update_points();
     a6a:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
		update_combo();
     a6e:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>

// Play a note in the given lane
void play_note(uint8_t lane)
{	

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     a72:	cf 5f       	subi	r28, 0xFF	; 255
     a74:	c0 31       	cpi	r28, 0x10	; 16
     a76:	08 f4       	brcc	.+2      	; 0xa7a <__stack+0x17b>
     a78:	42 cf       	rjmp	.-380    	; 0x8fe <play_note+0x10>
		}
			
		update_points();
		update_combo();
		}	
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	08 95       	ret

00000a86 <advance_note>:
	

// Advance the notes one row down the display
void advance_note(void)
{
     a86:	9f 92       	push	r9
     a88:	af 92       	push	r10
     a8a:	bf 92       	push	r11
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	PixelColour color = COLOUR_RED;
	
	if (combo_check) {
     a9c:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <combo_check>
     aa0:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <combo_check+0x1>
     aa4:	89 2b       	or	r24, r25
     aa6:	39 f4       	brne	.+14     	; 0xab6 <advance_note+0x30>
// Advance the notes one row down the display
void advance_note(void)
{
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	PixelColour color = COLOUR_RED;
     aa8:	0f 2e       	mov	r0, r31
     aaa:	ff e0       	ldi	r31, 0x0F	; 15
     aac:	ff 2e       	mov	r15, r31
     aae:	f0 2d       	mov	r31, r0

// Advance the notes one row down the display
void advance_note(void)
{
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
     ab0:	ee 24       	eor	r14, r14
     ab2:	e3 94       	inc	r14
     ab4:	08 c0       	rjmp	.+16     	; 0xac6 <advance_note+0x40>
	PixelColour color = COLOUR_RED;
	
	if (combo_check) {
		dark_colour = COLOUR_DARK_ORANGE;
		color = COLOUR_ORANGE;
     ab6:	0f 2e       	mov	r0, r31
     ab8:	fc e3       	ldi	r31, 0x3C	; 60
     aba:	ff 2e       	mov	r15, r31
     abc:	f0 2d       	mov	r31, r0
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	PixelColour color = COLOUR_RED;
	
	if (combo_check) {
		dark_colour = COLOUR_DARK_ORANGE;
     abe:	0f 2e       	mov	r0, r31
     ac0:	fc e1       	ldi	r31, 0x1C	; 28
     ac2:	ef 2e       	mov	r14, r31
     ac4:	f0 2d       	mov	r31, r0
		color = COLOUR_ORANGE;
	}
	
	if (advance_count >= 5) {
     ac6:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <advance_count>
     aca:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <advance_count+0x1>
     ace:	05 97       	sbiw	r24, 0x05	; 5
     ad0:	54 f0       	brlt	.+20     	; 0xae6 <advance_note+0x60>
		sound_note(-1, -1);
     ad2:	6f ef       	ldi	r22, 0xFF	; 255
     ad4:	7f ef       	ldi	r23, 0xFF	; 255
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	9f ef       	ldi	r25, 0xFF	; 255
     ada:	0e 94 db 03 	call	0x7b6	; 0x7b6 <sound_note>
		advance_count = 0;
     ade:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <advance_count+0x1>
     ae2:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <advance_count>
	}
	
	advance_count++;
     ae6:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <advance_count>
     aea:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <advance_count+0x1>
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	90 93 f5 04 	sts	0x04F5, r25	; 0x8004f5 <advance_count+0x1>
     af4:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <advance_count>
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     af8:	10 e0       	ldi	r17, 0x00	; 0
     afa:	ee c0       	rjmp	.+476    	; 0xcd8 <advance_note+0x252>
	{
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col;
     afc:	8f e0       	ldi	r24, 0x0F	; 15
     afe:	81 1b       	sub	r24, r17
		uint8_t index = (future + beat) / 5;
     b00:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <beat>
     b04:	f0 91 ff 04 	lds	r31, 0x04FF	; 0x8004ff <beat+0x1>
     b08:	af 01       	movw	r20, r30
     b0a:	48 0f       	add	r20, r24
     b0c:	51 1d       	adc	r21, r1
     b0e:	9a 01       	movw	r18, r20
     b10:	ad ec       	ldi	r26, 0xCD	; 205
     b12:	bc ec       	ldi	r27, 0xCC	; 204
     b14:	0e 94 11 14 	call	0x2822	; 0x2822 <__umulhisi3>
     b18:	ec 01       	movw	r28, r24
     b1a:	d6 95       	lsr	r29
     b1c:	c7 95       	ror	r28
     b1e:	d6 95       	lsr	r29
     b20:	c7 95       	ror	r28
     b22:	0c 2f       	mov	r16, r28
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     b24:	9f 01       	movw	r18, r30
     b26:	21 5f       	subi	r18, 0xF1	; 241
     b28:	3f 4f       	sbci	r19, 0xFF	; 255
     b2a:	0e 94 11 14 	call	0x2822	; 0x2822 <__umulhisi3>
     b2e:	96 95       	lsr	r25
     b30:	87 95       	ror	r24
     b32:	96 95       	lsr	r25
     b34:	87 95       	ror	r24
		uint8_t ghost_index = ghost_start_index +1;
     b36:	8f 5f       	subi	r24, 0xFF	; 255
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     b38:	08 c0       	rjmp	.+16     	; 0xb4a <advance_note+0xc4>
			if (track[ghost_index] & 0x0F) {
     b3a:	e8 2f       	mov	r30, r24
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	e1 57       	subi	r30, 0x71	; 113
     b40:	fe 4f       	sbci	r31, 0xFE	; 254
     b42:	90 81       	ld	r25, Z
     b44:	9f 70       	andi	r25, 0x0F	; 15
     b46:	19 f4       	brne	.+6      	; 0xb4e <advance_note+0xc8>
		uint8_t index = (future + beat) / 5;
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
		uint8_t ghost_index = ghost_start_index +1;
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     b48:	8f 5f       	subi	r24, 0xFF	; 255
     b4a:	81 38       	cpi	r24, 0x81	; 129
     b4c:	b0 f3       	brcs	.-20     	; 0xb3a <advance_note+0xb4>
			if (track[ghost_index] & 0x0F) {
				break;
			}
		}
		uint8_t ghost_note = track[ghost_index];
     b4e:	e8 2f       	mov	r30, r24
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	e1 57       	subi	r30, 0x71	; 113
     b54:	fe 4f       	sbci	r31, 0xFE	; 254
     b56:	d0 80       	ld	r13, Z
		
		if (index >= TRACK_LENGTH)
     b58:	01 38       	cpi	r16, 0x81	; 129
     b5a:	20 f0       	brcs	.+8      	; 0xb64 <advance_note+0xde>
		{
			//Game Over
			game_over = 1;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <game_over>
			break;
     b62:	bd c0       	rjmp	.+378    	; 0xcde <advance_note+0x258>
		}
		if ((future+beat) % 5)
     b64:	9a 01       	movw	r18, r20
     b66:	ad ec       	ldi	r26, 0xCD	; 205
     b68:	bc ec       	ldi	r27, 0xCC	; 204
     b6a:	0e 94 11 14 	call	0x2822	; 0x2822 <__umulhisi3>
     b6e:	96 95       	lsr	r25
     b70:	87 95       	ror	r24
     b72:	96 95       	lsr	r25
     b74:	87 95       	ror	r24
     b76:	9c 01       	movw	r18, r24
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	22 0f       	add	r18, r18
     b7e:	33 1f       	adc	r19, r19
     b80:	82 0f       	add	r24, r18
     b82:	93 1f       	adc	r25, r19
     b84:	48 17       	cp	r20, r24
     b86:	59 07       	cpc	r21, r25
     b88:	09 f0       	breq	.+2      	; 0xb8c <advance_note+0x106>
     b8a:	a5 c0       	rjmp	.+330    	; 0xcd6 <advance_note+0x250>
     b8c:	00 e0       	ldi	r16, 0x00	; 0
     b8e:	9b c0       	rjmp	.+310    	; 0xcc6 <advance_note+0x240>
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
		{
			//check if the next note is in the appropriate lane
			if ((ghost_note == 0x01) & (lane == 0)) {
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	d9 12       	cpse	r13, r25
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	01 11       	cpse	r16, r1
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	89 23       	and	r24, r25
     b9e:	71 f0       	breq	.+28     	; 0xbbc <advance_note+0x136>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     ba0:	4e 2d       	mov	r20, r14
     ba2:	c0 2e       	mov	r12, r16
     ba4:	cc 0c       	add	r12, r12
     ba6:	6c 2d       	mov	r22, r12
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	6c 0d       	add	r22, r12
     bb2:	4e 2d       	mov	r20, r14
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
     bba:	47 c0       	rjmp	.+142    	; 0xc4a <advance_note+0x1c4>
				
			} else if ((ghost_note == 0x02) & (lane == 1)) {
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	82 e0       	ldi	r24, 0x02	; 2
     bc0:	d8 12       	cpse	r13, r24
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	01 30       	cpi	r16, 0x01	; 1
     bc8:	09 f0       	breq	.+2      	; 0xbcc <advance_note+0x146>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	89 23       	and	r24, r25
     bce:	71 f0       	breq	.+28     	; 0xbec <advance_note+0x166>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     bd0:	4e 2d       	mov	r20, r14
     bd2:	c0 2e       	mov	r12, r16
     bd4:	cc 0c       	add	r12, r12
     bd6:	6c 2d       	mov	r22, r12
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	6c 0d       	add	r22, r12
     be2:	4e 2d       	mov	r20, r14
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
     bea:	2f c0       	rjmp	.+94     	; 0xc4a <advance_note+0x1c4>
			
			} else if ((ghost_note == 0x04) & (lane == 2)) {
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	84 e0       	ldi	r24, 0x04	; 4
     bf0:	d8 12       	cpse	r13, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	02 30       	cpi	r16, 0x02	; 2
     bf8:	09 f0       	breq	.+2      	; 0xbfc <advance_note+0x176>
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	89 23       	and	r24, r25
     bfe:	71 f0       	breq	.+28     	; 0xc1c <advance_note+0x196>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     c00:	4e 2d       	mov	r20, r14
     c02:	c0 2e       	mov	r12, r16
     c04:	cc 0c       	add	r12, r12
     c06:	6c 2d       	mov	r22, r12
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	6c 0d       	add	r22, r12
     c12:	4e 2d       	mov	r20, r14
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
     c1a:	17 c0       	rjmp	.+46     	; 0xc4a <advance_note+0x1c4>
			
			} else if ((ghost_note == 0x08) & (lane == 3)) {
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	88 e0       	ldi	r24, 0x08	; 8
     c20:	d8 12       	cpse	r13, r24
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	03 30       	cpi	r16, 0x03	; 3
     c28:	09 f0       	breq	.+2      	; 0xc2c <advance_note+0x1a6>
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	89 23       	and	r24, r25
     c2e:	69 f0       	breq	.+26     	; 0xc4a <advance_note+0x1c4>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     c30:	4e 2d       	mov	r20, r14
     c32:	c0 2e       	mov	r12, r16
     c34:	cc 0c       	add	r12, r12
     c36:	6c 2d       	mov	r22, r12
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	6c 0d       	add	r22, r12
     c42:	4e 2d       	mov	r20, r14
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			
			}
				
			if (track[index] & (1<<lane))
     c4a:	fe 01       	movw	r30, r28
     c4c:	ff 27       	eor	r31, r31
     c4e:	e1 57       	subi	r30, 0x71	; 113
     c50:	fe 4f       	sbci	r31, 0xFE	; 254
     c52:	80 81       	ld	r24, Z
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	00 2e       	mov	r0, r16
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <advance_note+0x1d8>
     c5a:	95 95       	asr	r25
     c5c:	87 95       	ror	r24
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <advance_note+0x1d4>
     c62:	80 ff       	sbrs	r24, 0
     c64:	2f c0       	rjmp	.+94     	; 0xcc4 <advance_note+0x23e>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
     c66:	1b 30       	cpi	r17, 0x0B	; 11
     c68:	59 f0       	breq	.+22     	; 0xc80 <advance_note+0x1fa>
     c6a:	1f 30       	cpi	r17, 0x0F	; 15
     c6c:	71 f0       	breq	.+28     	; 0xc8a <advance_note+0x204>
				{
					colour = COLOUR_QUART_YELLOW;
				}
				else if (col==12 || col == 14)
     c6e:	1c 30       	cpi	r17, 0x0C	; 12
     c70:	89 f0       	breq	.+34     	; 0xc94 <advance_note+0x20e>
     c72:	1e 30       	cpi	r17, 0x0E	; 14
     c74:	a1 f0       	breq	.+40     	; 0xc9e <advance_note+0x218>
				{
					colour = COLOUR_HALF_YELLOW;
				}
				else if (col==13)
     c76:	1d 30       	cpi	r17, 0x0D	; 13
     c78:	b9 f4       	brne	.+46     	; 0xca8 <advance_note+0x222>
				{
					colour = COLOUR_YELLOW;
     c7a:	bb 24       	eor	r11, r11
     c7c:	ba 94       	dec	r11
     c7e:	15 c0       	rjmp	.+42     	; 0xcaa <advance_note+0x224>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
				{
					colour = COLOUR_QUART_YELLOW;
     c80:	0f 2e       	mov	r0, r31
     c82:	f1 e1       	ldi	r31, 0x11	; 17
     c84:	bf 2e       	mov	r11, r31
     c86:	f0 2d       	mov	r31, r0
     c88:	10 c0       	rjmp	.+32     	; 0xcaa <advance_note+0x224>
     c8a:	0f 2e       	mov	r0, r31
     c8c:	f1 e1       	ldi	r31, 0x11	; 17
     c8e:	bf 2e       	mov	r11, r31
     c90:	f0 2d       	mov	r31, r0
     c92:	0b c0       	rjmp	.+22     	; 0xcaa <advance_note+0x224>
				}
				else if (col==12 || col == 14)
				{
					colour = COLOUR_HALF_YELLOW;
     c94:	0f 2e       	mov	r0, r31
     c96:	f5 e5       	ldi	r31, 0x55	; 85
     c98:	bf 2e       	mov	r11, r31
     c9a:	f0 2d       	mov	r31, r0
     c9c:	06 c0       	rjmp	.+12     	; 0xcaa <advance_note+0x224>
     c9e:	0f 2e       	mov	r0, r31
     ca0:	f5 e5       	ldi	r31, 0x55	; 85
     ca2:	bf 2e       	mov	r11, r31
     ca4:	f0 2d       	mov	r31, r0
     ca6:	01 c0       	rjmp	.+2      	; 0xcaa <advance_note+0x224>
				{
					colour = COLOUR_YELLOW;
				}
				else
				{
					colour = COLOUR_BLACK;
     ca8:	b1 2c       	mov	r11, r1
				}
				ledmatrix_update_pixel(col, 2*lane, colour);
     caa:	4b 2d       	mov	r20, r11
     cac:	c0 2e       	mov	r12, r16
     cae:	cc 0c       	add	r12, r12
     cb0:	6c 2d       	mov	r22, r12
     cb2:	81 2f       	mov	r24, r17
     cb4:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 2*lane+1, colour);
     cb8:	61 e0       	ldi	r22, 0x01	; 1
     cba:	6c 0d       	add	r22, r12
     cbc:	4b 2d       	mov	r20, r11
     cbe:	81 2f       	mov	r24, r17
     cc0:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
		}
		if ((future+beat) % 5)
		{
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
     cc4:	0f 5f       	subi	r16, 0xFF	; 255
     cc6:	04 30       	cpi	r16, 0x04	; 4
     cc8:	08 f4       	brcc	.+2      	; 0xccc <advance_note+0x246>
     cca:	62 cf       	rjmp	.-316    	; 0xb90 <advance_note+0x10a>
				ledmatrix_update_pixel(col, 2*lane, colour);
				ledmatrix_update_pixel(col, 2*lane+1, colour);
			}
		}
		//check if the current note goes off the screen
		if (col >= 15) {
     ccc:	1f 30       	cpi	r17, 0x0F	; 15
     cce:	18 f0       	brcs	.+6      	; 0xcd6 <advance_note+0x250>
			green_check = -1;
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
     cd2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	advance_count++;
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     cd6:	1f 5f       	subi	r17, 0xFF	; 255
     cd8:	10 31       	cpi	r17, 0x10	; 16
     cda:	08 f4       	brcc	.+2      	; 0xcde <advance_note+0x258>
     cdc:	0f cf       	rjmp	.-482    	; 0xafc <advance_note+0x76>
			green_check = -1;
		}
	}
	
	// increment the beat
	beat++;
     cde:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <beat>
     ce2:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <beat+0x1>
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <beat+0x1>
     cec:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <beat>
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     cf0:	c0 e0       	ldi	r28, 0x00	; 0
     cf2:	e2 c0       	rjmp	.+452    	; 0xeb8 <advance_note+0x432>
	{
		// col counts from one end, future from the other
		uint8_t future = MATRIX_NUM_COLUMNS-1-col;
     cf4:	8f e0       	ldi	r24, 0x0F	; 15
     cf6:	8c 1b       	sub	r24, r28
		// notes are only drawn every five columns
		if ((future+beat)%5)
     cf8:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <beat>
     cfc:	f0 91 ff 04 	lds	r31, 0x04FF	; 0x8004ff <beat+0x1>
     d00:	af 01       	movw	r20, r30
     d02:	48 0f       	add	r20, r24
     d04:	51 1d       	adc	r21, r1
     d06:	9a 01       	movw	r18, r20
     d08:	ad ec       	ldi	r26, 0xCD	; 205
     d0a:	bc ec       	ldi	r27, 0xCC	; 204
     d0c:	0e 94 11 14 	call	0x2822	; 0x2822 <__umulhisi3>
     d10:	96 95       	lsr	r25
     d12:	87 95       	ror	r24
     d14:	96 95       	lsr	r25
     d16:	87 95       	ror	r24
     d18:	9c 01       	movw	r18, r24
     d1a:	22 0f       	add	r18, r18
     d1c:	33 1f       	adc	r19, r19
     d1e:	22 0f       	add	r18, r18
     d20:	33 1f       	adc	r19, r19
     d22:	82 0f       	add	r24, r18
     d24:	93 1f       	adc	r25, r19
     d26:	48 17       	cp	r20, r24
     d28:	59 07       	cpc	r21, r25
     d2a:	09 f0       	breq	.+2      	; 0xd2e <advance_note+0x2a8>
     d2c:	c4 c0       	rjmp	.+392    	; 0xeb6 <advance_note+0x430>
		{
			continue;
		}
		
		// index of which note in the track to play
		uint8_t index = (future+beat)/5;
     d2e:	9a 01       	movw	r18, r20
     d30:	0e 94 11 14 	call	0x2822	; 0x2822 <__umulhisi3>
     d34:	8c 01       	movw	r16, r24
     d36:	16 95       	lsr	r17
     d38:	07 95       	ror	r16
     d3a:	16 95       	lsr	r17
     d3c:	07 95       	ror	r16
		
		uint8_t ghost_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     d3e:	9f 01       	movw	r18, r30
     d40:	21 5f       	subi	r18, 0xF1	; 241
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	0e 94 11 14 	call	0x2822	; 0x2822 <__umulhisi3>
     d48:	96 95       	lsr	r25
     d4a:	87 95       	ror	r24
     d4c:	96 95       	lsr	r25
     d4e:	87 95       	ror	r24
		//next note in track that is coming
		uint8_t ghost_note = track[ghost_index];
     d50:	fc 01       	movw	r30, r24
     d52:	ff 27       	eor	r31, r31
     d54:	e1 57       	subi	r30, 0x71	; 113
     d56:	fe 4f       	sbci	r31, 0xFE	; 254
     d58:	e0 80       	ld	r14, Z
		
		int long_check = 0;
		
		// if the index is beyond the end of the track,
		// no note can be drawn
		if (index >= TRACK_LENGTH || (index + 1) >= TRACK_LENGTH)
     d5a:	01 38       	cpi	r16, 0x81	; 129
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <advance_note+0x2da>
     d5e:	ab c0       	rjmp	.+342    	; 0xeb6 <advance_note+0x430>
     d60:	11 27       	eor	r17, r17
     d62:	58 01       	movw	r10, r16
     d64:	8f ef       	ldi	r24, 0xFF	; 255
     d66:	a8 1a       	sub	r10, r24
     d68:	b8 0a       	sbc	r11, r24
     d6a:	81 e8       	ldi	r24, 0x81	; 129
     d6c:	a8 16       	cp	r10, r24
     d6e:	b1 04       	cpc	r11, r1
     d70:	0c f0       	brlt	.+2      	; 0xd74 <advance_note+0x2ee>
     d72:	a1 c0       	rjmp	.+322    	; 0xeb6 <advance_note+0x430>
     d74:	d0 e0       	ldi	r29, 0x00	; 0
     d76:	c1 2c       	mov	r12, r1
     d78:	d1 2c       	mov	r13, r1
     d7a:	9a c0       	rjmp	.+308    	; 0xeb0 <advance_note+0x42a>
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{									
			
			uint8_t current_note = track[index];
     d7c:	f8 01       	movw	r30, r16
     d7e:	e1 57       	subi	r30, 0x71	; 113
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	80 81       	ld	r24, Z
			
			//check if at the start of a long note
			if (current_note == current_note>>4) {
     d84:	98 2f       	mov	r25, r24
     d86:	92 95       	swap	r25
     d88:	9f 70       	andi	r25, 0x0F	; 15
     d8a:	89 17       	cp	r24, r25
     d8c:	d1 f0       	breq	.+52     	; 0xdc2 <advance_note+0x33c>
				long_check = 1;
			
			//check if in the middle of long note
			} else if ((long_check) && (track[index + 1] == current_note)) {
     d8e:	c1 14       	cp	r12, r1
     d90:	d1 04       	cpc	r13, r1
     d92:	39 f0       	breq	.+14     	; 0xda2 <advance_note+0x31c>
     d94:	f5 01       	movw	r30, r10
     d96:	e1 57       	subi	r30, 0x71	; 113
     d98:	fe 4f       	sbci	r31, 0xFE	; 254
     d9a:	20 81       	ld	r18, Z
     d9c:	82 17       	cp	r24, r18
     d9e:	09 f4       	brne	.+2      	; 0xda2 <advance_note+0x31c>
     da0:	86 c0       	rjmp	.+268    	; 0xeae <advance_note+0x428>
				continue; 
			//check if at the end of long note
			} else if ((long_check) && (track[index + 1] != track[index - 1])) {
     da2:	c1 14       	cp	r12, r1
     da4:	d1 04       	cpc	r13, r1
     da6:	81 f0       	breq	.+32     	; 0xdc8 <advance_note+0x342>
     da8:	f5 01       	movw	r30, r10
     daa:	e1 57       	subi	r30, 0x71	; 113
     dac:	fe 4f       	sbci	r31, 0xFE	; 254
     dae:	30 81       	ld	r19, Z
     db0:	f8 01       	movw	r30, r16
     db2:	e2 57       	subi	r30, 0x72	; 114
     db4:	fe 4f       	sbci	r31, 0xFE	; 254
     db6:	20 81       	ld	r18, Z
     db8:	32 13       	cpse	r19, r18
     dba:	79 c0       	rjmp	.+242    	; 0xeae <advance_note+0x428>
				continue;
			
			//else outside long note.
			} else {
				long_check = 0;
     dbc:	c1 2c       	mov	r12, r1
     dbe:	d1 2c       	mov	r13, r1
     dc0:	03 c0       	rjmp	.+6      	; 0xdc8 <advance_note+0x342>
			
			uint8_t current_note = track[index];
			
			//check if at the start of a long note
			if (current_note == current_note>>4) {
				long_check = 1;
     dc2:	cc 24       	eor	r12, r12
     dc4:	c3 94       	inc	r12
     dc6:	d1 2c       	mov	r13, r1
			} else {
				long_check = 0;
				
			}
			
			if (long_check) {
     dc8:	c1 14       	cp	r12, r1
     dca:	d1 04       	cpc	r13, r1
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <advance_note+0x34a>
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{									
			
			uint8_t current_note = track[index];
     dce:	98 2f       	mov	r25, r24
			if (long_check) {
				current_note = current_note>>4;
			}
			
			//check if there's a note in the specific path
			if (current_note & (1<<lane)) {
     dd0:	29 2f       	mov	r18, r25
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	0d 2e       	mov	r0, r29
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <advance_note+0x356>
     dd8:	35 95       	asr	r19
     dda:	27 95       	ror	r18
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <advance_note+0x352>
     de0:	20 ff       	sbrs	r18, 0
     de2:	65 c0       	rjmp	.+202    	; 0xeae <advance_note+0x428>
				
				//check if theres a note in the led matrix section
				if ((green_check == lane) && ((col >= 11) && (col <= 15))) {
     de4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     de8:	d8 13       	cpse	r29, r24
     dea:	12 c0       	rjmp	.+36     	; 0xe10 <advance_note+0x38a>
     dec:	85 ef       	ldi	r24, 0xF5	; 245
     dee:	8c 0f       	add	r24, r28
     df0:	85 30       	cpi	r24, 0x05	; 5
     df2:	70 f4       	brcc	.+28     	; 0xe10 <advance_note+0x38a>
					//if true set pixels to green
					ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     df4:	40 ef       	ldi	r20, 0xF0	; 240
     df6:	9d 2e       	mov	r9, r29
     df8:	99 0c       	add	r9, r9
     dfa:	69 2d       	mov	r22, r9
     dfc:	8c 2f       	mov	r24, r28
     dfe:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	69 0d       	add	r22, r9
     e06:	40 ef       	ldi	r20, 0xF0	; 240
     e08:	8c 2f       	mov	r24, r28
     e0a:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
     e0e:	4f c0       	rjmp	.+158    	; 0xeae <advance_note+0x428>
				
				} else if (ghost_note != current_note) {					
     e10:	9e 15       	cp	r25, r14
     e12:	39 f1       	breq	.+78     	; 0xe62 <advance_note+0x3dc>
					ledmatrix_update_pixel(col, 2*lane, color);
     e14:	4f 2d       	mov	r20, r15
     e16:	9d 2e       	mov	r9, r29
     e18:	99 0c       	add	r9, r9
     e1a:	69 2d       	mov	r22, r9
     e1c:	8c 2f       	mov	r24, r28
     e1e:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, color);
     e22:	61 e0       	ldi	r22, 0x01	; 1
     e24:	69 0d       	add	r22, r9
     e26:	4f 2d       	mov	r20, r15
     e28:	8c 2f       	mov	r24, r28
     e2a:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
					
					//if note slides off screen and green_check isn't checked to a lane
					if (col == 15) {
     e2e:	cf 30       	cpi	r28, 0x0F	; 15
     e30:	f1 f5       	brne	.+124    	; 0xeae <advance_note+0x428>
						points--;
     e32:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     e36:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     e40:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
						update_points();		
     e44:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
						
						if (combo_count != 0) {
     e48:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <combo_count>
     e4c:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <combo_count+0x1>
     e50:	89 2b       	or	r24, r25
     e52:	69 f1       	breq	.+90     	; 0xeae <advance_note+0x428>
							combo_count = 0;
     e54:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <combo_count+0x1>
     e58:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <combo_count>
							update_combo();				
     e5c:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
     e60:	26 c0       	rjmp	.+76     	; 0xeae <advance_note+0x428>
						}
					}
					
				} else {
					ledmatrix_update_pixel(col, 2*lane, color);
     e62:	4f 2d       	mov	r20, r15
     e64:	9d 2e       	mov	r9, r29
     e66:	99 0c       	add	r9, r9
     e68:	69 2d       	mov	r22, r9
     e6a:	8c 2f       	mov	r24, r28
     e6c:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, color);	
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	69 0d       	add	r22, r9
     e74:	4f 2d       	mov	r20, r15
     e76:	8c 2f       	mov	r24, r28
     e78:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
					
					//if note slides off screen and green_check isn't checked to a lane
					if (col == 15) {
     e7c:	cf 30       	cpi	r28, 0x0F	; 15
     e7e:	b9 f4       	brne	.+46     	; 0xeae <advance_note+0x428>
						points--;
     e80:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
     e84:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <points+0x1>
     e8e:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <points>
						update_points();		
     e92:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
						
						if (combo_count != 0) {
     e96:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <combo_count>
     e9a:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <combo_count+0x1>
     e9e:	89 2b       	or	r24, r25
     ea0:	31 f0       	breq	.+12     	; 0xeae <advance_note+0x428>
							combo_count = 0;
     ea2:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <combo_count+0x1>
     ea6:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <combo_count>
							update_combo();
     eaa:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
		{
			continue;
		}
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
     eae:	df 5f       	subi	r29, 0xFF	; 255
     eb0:	d4 30       	cpi	r29, 0x04	; 4
     eb2:	08 f4       	brcc	.+2      	; 0xeb6 <advance_note+0x430>
     eb4:	63 cf       	rjmp	.-314    	; 0xd7c <advance_note+0x2f6>
	
	// increment the beat
	beat++;
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     eb6:	cf 5f       	subi	r28, 0xFF	; 255
     eb8:	c0 31       	cpi	r28, 0x10	; 16
     eba:	08 f4       	brcc	.+2      	; 0xebe <advance_note+0x438>
     ebc:	1b cf       	rjmp	.-458    	; 0xcf4 <advance_note+0x26e>
				
			}
		}
		
	}
}
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	ff 90       	pop	r15
     ec8:	ef 90       	pop	r14
     eca:	df 90       	pop	r13
     ecc:	cf 90       	pop	r12
     ece:	bf 90       	pop	r11
     ed0:	af 90       	pop	r10
     ed2:	9f 90       	pop	r9
     ed4:	08 95       	ret

00000ed6 <is_game_over>:

// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over(void)
{
	// Detect if the game is over i.e. if a player has won.
	if (game_over) {	
     ed6:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <game_over>
     eda:	88 23       	and	r24, r24
     edc:	19 f0       	breq	.+6      	; 0xee4 <is_game_over+0xe>
		game_over = 0; //reset game over check
     ede:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <game_over>
		return 1;	
     ee2:	81 e0       	ldi	r24, 0x01	; 1
	
	} else {
	return 0;
	
	}
     ee4:	08 95       	ret

00000ee6 <ledmatrix_setup>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     ee6:	80 e8       	ldi	r24, 0x80	; 128
     ee8:	0e 94 a6 10 	call	0x214c	; 0x214c <spi_setup_master>
     eec:	08 95       	ret

00000eee <ledmatrix_update_pixel>:
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	80 31       	cpi	r24, 0x10	; 16
     ef6:	b0 f4       	brcc	.+44     	; 0xf24 <ledmatrix_update_pixel+0x36>
     ef8:	68 30       	cpi	r22, 0x08	; 8
     efa:	a0 f4       	brcc	.+40     	; 0xf24 <ledmatrix_update_pixel+0x36>
     efc:	14 2f       	mov	r17, r20
     efe:	c6 2f       	mov	r28, r22
     f00:	d8 2f       	mov	r29, r24
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <spi_send_byte>
     f08:	6c 2f       	mov	r22, r28
     f0a:	67 70       	andi	r22, 0x07	; 7
     f0c:	80 e1       	ldi	r24, 0x10	; 16
     f0e:	68 9f       	mul	r22, r24
     f10:	90 01       	movw	r18, r0
     f12:	11 24       	eor	r1, r1
     f14:	8d 2f       	mov	r24, r29
     f16:	8f 70       	andi	r24, 0x0F	; 15
     f18:	82 2b       	or	r24, r18
     f1a:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <spi_send_byte>
     f1e:	81 2f       	mov	r24, r17
     f20:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <spi_send_byte>
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	08 95       	ret

00000f2c <ledmatrix_update_column>:
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	80 31       	cpi	r24, 0x10	; 16
     f34:	a0 f4       	brcc	.+40     	; 0xf5e <ledmatrix_update_column+0x32>
     f36:	8b 01       	movw	r16, r22
     f38:	c8 2f       	mov	r28, r24
     f3a:	83 e0       	ldi	r24, 0x03	; 3
     f3c:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <spi_send_byte>
     f40:	8c 2f       	mov	r24, r28
     f42:	8f 70       	andi	r24, 0x0F	; 15
     f44:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <spi_send_byte>
     f48:	c0 e0       	ldi	r28, 0x00	; 0
     f4a:	07 c0       	rjmp	.+14     	; 0xf5a <ledmatrix_update_column+0x2e>
     f4c:	f8 01       	movw	r30, r16
     f4e:	ec 0f       	add	r30, r28
     f50:	f1 1d       	adc	r31, r1
     f52:	80 81       	ld	r24, Z
     f54:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <spi_send_byte>
     f58:	cf 5f       	subi	r28, 0xFF	; 255
     f5a:	c8 30       	cpi	r28, 0x08	; 8
     f5c:	b8 f3       	brcs	.-18     	; 0xf4c <ledmatrix_update_column+0x20>
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	08 95       	ret

00000f66 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     f66:	8f e0       	ldi	r24, 0x0F	; 15
     f68:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <spi_send_byte>
     f6c:	08 95       	ret

00000f6e <initialise_hardware>:
	}
}

void initialise_hardware(void)
{
	ledmatrix_setup();
     f6e:	0e 94 73 07 	call	0xee6	; 0xee6 <ledmatrix_setup>
	init_button_interrupts();
     f72:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <init_button_interrupts>
	
	//Make all bits of port C and the upper 5 bits of port D to be output bits
	DDRC = 0xFF; //0xFF => 0b11111111
     f76:	8f ef       	ldi	r24, 0xFF	; 255
     f78:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFC; //0xFC => 0b11111100	
     f7a:	8c ef       	ldi	r24, 0xFC	; 252
     f7c:	8a b9       	out	0x0a, r24	; 10
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     f7e:	40 e0       	ldi	r20, 0x00	; 0
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	7b e4       	ldi	r23, 0x4B	; 75
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <init_serial_stdio>
	
	init_timer0();
     f8c:	0e 94 1a 11 	call	0x2234	; 0x2234 <init_timer0>
	init_timer1();
     f90:	0e 94 65 11 	call	0x22ca	; 0x22ca <init_timer1>
	init_timer2();
     f94:	0e 94 ee 11 	call	0x23dc	; 0x23dc <init_timer2>
	
	// Turn on global interrupts
	sei();
     f98:	78 94       	sei
     f9a:	08 95       	ret

00000f9c <start_screen>:
}

void start_screen(void)
{
     f9c:	4f 92       	push	r4
     f9e:	5f 92       	push	r5
     fa0:	6f 92       	push	r6
     fa2:	7f 92       	push	r7
     fa4:	8f 92       	push	r8
     fa6:	9f 92       	push	r9
     fa8:	af 92       	push	r10
     faa:	bf 92       	push	r11
     fac:	cf 92       	push	r12
     fae:	df 92       	push	r13
     fb0:	ef 92       	push	r14
     fb2:	ff 92       	push	r15
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
	// Clear terminal screen and output a message
	clear_terminal();
     fb8:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <clear_terminal>
	show_cursor();
     fbc:	0e 94 11 11 	call	0x2222	; 0x2222 <show_cursor>
	clear_terminal();
     fc0:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <clear_terminal>
	hide_cursor();
     fc4:	0e 94 08 11 	call	0x2210	; 0x2210 <hide_cursor>
	set_display_attribute(FG_WHITE);
     fc8:	85 e2       	ldi	r24, 0x25	; 37
     fca:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <set_display_attribute>
	move_terminal_cursor(10,4);
     fce:	64 e0       	ldi	r22, 0x04	; 4
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	8a e0       	ldi	r24, 0x0A	; 10
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	printf_P(PSTR("  ______   __     __  _______         __    __"));
     fda:	81 e3       	ldi	r24, 0x31	; 49
     fdc:	93 e0       	ldi	r25, 0x03	; 3
     fde:	9f 93       	push	r25
     fe0:	8f 93       	push	r24
     fe2:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
	move_terminal_cursor(10,5);
     fe6:	65 e0       	ldi	r22, 0x05	; 5
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	8a e0       	ldi	r24, 0x0A	; 10
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	printf_P(PSTR(" /      \\ |  \\   |  \\|       \\       |  \\  |  \\"));
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	93 e0       	ldi	r25, 0x03	; 3
     ff6:	9f 93       	push	r25
     ff8:	8f 93       	push	r24
     ffa:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
	move_terminal_cursor(10,6);
     ffe:	66 e0       	ldi	r22, 0x06	; 6
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	8a e0       	ldi	r24, 0x0A	; 10
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	printf_P(PSTR("|  $$$$$$\\| $$   | $$| $$$$$$$\\      | $$  | $$  ______    ______    ______"));
    100a:	85 eb       	ldi	r24, 0xB5	; 181
    100c:	92 e0       	ldi	r25, 0x02	; 2
    100e:	9f 93       	push	r25
    1010:	8f 93       	push	r24
    1012:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
	move_terminal_cursor(10,7);
    1016:	67 e0       	ldi	r22, 0x07	; 7
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	8a e0       	ldi	r24, 0x0A	; 10
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	printf_P(PSTR("| $$__| $$| $$   | $$| $$__| $$      | $$__| $$ /      \\  /      \\  /      \\"));
    1022:	88 e6       	ldi	r24, 0x68	; 104
    1024:	92 e0       	ldi	r25, 0x02	; 2
    1026:	9f 93       	push	r25
    1028:	8f 93       	push	r24
    102a:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
	move_terminal_cursor(10,8);
    102e:	68 e0       	ldi	r22, 0x08	; 8
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	8a e0       	ldi	r24, 0x0A	; 10
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	printf_P(PSTR("| $$    $$ \\$$\\ /  $$| $$    $$      | $$    $$|  $$$$$$\\|  $$$$$$\\|  $$$$$$\\"));
    103a:	8a e1       	ldi	r24, 0x1A	; 26
    103c:	92 e0       	ldi	r25, 0x02	; 2
    103e:	9f 93       	push	r25
    1040:	8f 93       	push	r24
    1042:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
	move_terminal_cursor(10,9);
    1046:	69 e0       	ldi	r22, 0x09	; 9
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	8a e0       	ldi	r24, 0x0A	; 10
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	printf_P(PSTR("| $$$$$$$$  \\$$\\  $$ | $$$$$$$\\      | $$$$$$$$| $$    $$| $$   \\$$| $$  | $$"));
    1052:	8c ec       	ldi	r24, 0xCC	; 204
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	9f 93       	push	r25
    1058:	8f 93       	push	r24
    105a:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
	move_terminal_cursor(10,10);
    105e:	6a e0       	ldi	r22, 0x0A	; 10
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	8a e0       	ldi	r24, 0x0A	; 10
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$   \\$$ $$  | $$  | $$      | $$  | $$| $$$$$$$$| $$      | $$__/ $$"));
    106a:	8e e7       	ldi	r24, 0x7E	; 126
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	9f 93       	push	r25
    1070:	8f 93       	push	r24
    1072:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
	move_terminal_cursor(10,11);
    1076:	6b e0       	ldi	r22, 0x0B	; 11
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	8a e0       	ldi	r24, 0x0A	; 10
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$    \\$$$   | $$  | $$      | $$  | $$ \\$$     \\| $$       \\$$    $$"));
    1082:	80 e3       	ldi	r24, 0x30	; 48
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	9f 93       	push	r25
    1088:	8f 93       	push	r24
    108a:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
	move_terminal_cursor(10,12);
    108e:	6c e0       	ldi	r22, 0x0C	; 12
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	8a e0       	ldi	r24, 0x0A	; 10
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	printf_P(PSTR(" \\$$   \\$$     \\$     \\$$   \\$$       \\$$   \\$$  \\$$$$$$$ \\$$        \\$$$$$$"));
    109a:	83 ee       	ldi	r24, 0xE3	; 227
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	9f 93       	push	r25
    10a0:	8f 93       	push	r24
    10a2:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
	move_terminal_cursor(10,14);
    10a6:	6e e0       	ldi	r22, 0x0E	; 14
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	8a e0       	ldi	r24, 0x0A	; 10
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	// change this to your name and student number; remove the chevrons <>
	printf_P(PSTR("CSSE2010/7201 A2 by  Cailin Delgado - 48027942"));
    10b2:	84 eb       	ldi	r24, 0xB4	; 180
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	9f 93       	push	r25
    10b8:	8f 93       	push	r24
    10ba:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
    10be:	0e 94 a2 02 	call	0x544	; 0x544 <show_start_screen>
	
	//Display current track
	move_terminal_cursor(10, 15);
    10c2:	6f e0       	ldi	r22, 0x0F	; 15
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	8a e0       	ldi	r24, 0x0A	; 10
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	printf("Track: Through Fire & Flames");															//do %s and add a new track title at the end.
    10ce:	80 e1       	ldi	r24, 0x10	; 16
    10d0:	92 e0       	ldi	r25, 0x02	; 2
    10d2:	9f 93       	push	r25
    10d4:	8f 93       	push	r24
    10d6:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
    10da:	0e 94 30 11 	call	0x2260	; 0x2260 <get_current_time>
    10de:	6b 01       	movw	r12, r22
    10e0:	7c 01       	movw	r14, r24
	
	uint8_t frame_number = 0;
	game_speed = 1000;
    10e2:	88 ee       	ldi	r24, 0xE8	; 232
    10e4:	93 e0       	ldi	r25, 0x03	; 3
    10e6:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <game_speed+0x1>
    10ea:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <game_speed>
	
	
	move_terminal_cursor(10, 17);
    10ee:	61 e1       	ldi	r22, 0x11	; 17
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	8a e0       	ldi	r24, 0x0A	; 10
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	clear_to_end_of_line();
    10fa:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <clear_to_end_of_line>
	//update game speed in terminal appropriately
	if (game_speed == 1000) {
    10fe:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <game_speed>
    1102:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <game_speed+0x1>
    1106:	2d b7       	in	r18, 0x3d	; 61
    1108:	3e b7       	in	r19, 0x3e	; 62
    110a:	2a 5e       	subi	r18, 0xEA	; 234
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	3e bf       	out	0x3e, r19	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	2d bf       	out	0x3d, r18	; 61
    1118:	88 3e       	cpi	r24, 0xE8	; 232
    111a:	33 e0       	ldi	r19, 0x03	; 3
    111c:	93 07       	cpc	r25, r19
    111e:	69 f4       	brne	.+26     	; 0x113a <start_screen+0x19e>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    1120:	9f 93       	push	r25
    1122:	8f 93       	push	r24
    1124:	8d e2       	ldi	r24, 0x2D	; 45
    1126:	92 e0       	ldi	r25, 0x02	; 2
    1128:	9f 93       	push	r25
    112a:	8f 93       	push	r24
    112c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	20 c0       	rjmp	.+64     	; 0x117a <start_screen+0x1de>
		
	} else if (game_speed == 500) {
    113a:	84 3f       	cpi	r24, 0xF4	; 244
    113c:	21 e0       	ldi	r18, 0x01	; 1
    113e:	92 07       	cpc	r25, r18
    1140:	69 f4       	brne	.+26     	; 0x115c <start_screen+0x1c0>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1142:	9f 93       	push	r25
    1144:	8f 93       	push	r24
    1146:	83 e5       	ldi	r24, 0x53	; 83
    1148:	92 e0       	ldi	r25, 0x02	; 2
    114a:	9f 93       	push	r25
    114c:	8f 93       	push	r24
    114e:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f c0       	rjmp	.+30     	; 0x117a <start_screen+0x1de>
		
	} else if (game_speed == 250) {
    115c:	8a 3f       	cpi	r24, 0xFA	; 250
    115e:	91 05       	cpc	r25, r1
    1160:	61 f4       	brne	.+24     	; 0x117a <start_screen+0x1de>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1162:	9f 93       	push	r25
    1164:	8f 93       	push	r24
    1166:	87 e7       	ldi	r24, 0x77	; 119
    1168:	92 e0       	ldi	r25, 0x02	; 2
    116a:	9f 93       	push	r25
    116c:	8f 93       	push	r24
    116e:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
	// Turn on global interrupts
	sei();
}

void start_screen(void)
{
    117a:	d0 e0       	ldi	r29, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available())
    117c:	0e 94 05 10 	call	0x200a	; 0x200a <serial_input_available>
    1180:	88 23       	and	r24, r24
    1182:	41 f0       	breq	.+16     	; 0x1194 <start_screen+0x1f8>
		{
			serial_input = fgetc(stdin);
    1184:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <__iob>
    1188:	90 91 17 06 	lds	r25, 0x0617	; 0x800617 <__iob+0x1>
    118c:	0e 94 34 14 	call	0x2868	; 0x2868 <fgetc>
    1190:	c8 2f       	mov	r28, r24
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <start_screen+0x1fa>
	{
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
    1194:	cf ef       	ldi	r28, 0xFF	; 255
		if (serial_input_available())
		{
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S')
    1196:	c3 37       	cpi	r28, 0x73	; 115
    1198:	09 f4       	brne	.+2      	; 0x119c <start_screen+0x200>
    119a:	c6 c0       	rjmp	.+396    	; 0x1328 <start_screen+0x38c>
    119c:	c3 35       	cpi	r28, 0x53	; 83
    119e:	09 f4       	brne	.+2      	; 0x11a2 <start_screen+0x206>
    11a0:	c3 c0       	rjmp	.+390    	; 0x1328 <start_screen+0x38c>
			break;
		} 
		
		
		//display the game speed to the terminal
		if (serial_input == '1') {
    11a2:	c1 33       	cpi	r28, 0x31	; 49
    11a4:	f9 f4       	brne	.+62     	; 0x11e4 <start_screen+0x248>
			game_speed = 1000; //set game speed to 1000ms
    11a6:	88 ee       	ldi	r24, 0xE8	; 232
    11a8:	93 e0       	ldi	r25, 0x03	; 3
    11aa:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <game_speed+0x1>
    11ae:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <game_speed>
			
			move_terminal_cursor(10, 17);
    11b2:	61 e1       	ldi	r22, 0x11	; 17
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	8a e0       	ldi	r24, 0x0A	; 10
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
			clear_to_end_of_line();
    11be:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <clear_to_end_of_line>
			printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    11c2:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <game_speed+0x1>
    11c6:	8f 93       	push	r24
    11c8:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <game_speed>
    11cc:	8f 93       	push	r24
    11ce:	8d e2       	ldi	r24, 0x2D	; 45
    11d0:	92 e0       	ldi	r25, 0x02	; 2
    11d2:	9f 93       	push	r25
    11d4:	8f 93       	push	r24
    11d6:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	41 c0       	rjmp	.+130    	; 0x1266 <start_screen+0x2ca>
			
		} else if (serial_input == '2') {
    11e4:	c2 33       	cpi	r28, 0x32	; 50
    11e6:	f9 f4       	brne	.+62     	; 0x1226 <start_screen+0x28a>
			game_speed = 500; //set game speed to 500ms
    11e8:	84 ef       	ldi	r24, 0xF4	; 244
    11ea:	91 e0       	ldi	r25, 0x01	; 1
    11ec:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <game_speed+0x1>
    11f0:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <game_speed>
			
			move_terminal_cursor(10, 17);
    11f4:	61 e1       	ldi	r22, 0x11	; 17
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	8a e0       	ldi	r24, 0x0A	; 10
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
			clear_to_end_of_line();
    1200:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <clear_to_end_of_line>
			printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1204:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <game_speed+0x1>
    1208:	8f 93       	push	r24
    120a:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <game_speed>
    120e:	8f 93       	push	r24
    1210:	83 e5       	ldi	r24, 0x53	; 83
    1212:	92 e0       	ldi	r25, 0x02	; 2
    1214:	9f 93       	push	r25
    1216:	8f 93       	push	r24
    1218:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	20 c0       	rjmp	.+64     	; 0x1266 <start_screen+0x2ca>
			
		} else if (serial_input == '3') {
    1226:	c3 33       	cpi	r28, 0x33	; 51
    1228:	f1 f4       	brne	.+60     	; 0x1266 <start_screen+0x2ca>
			game_speed = 250; //set game speed to 250ms
    122a:	8a ef       	ldi	r24, 0xFA	; 250
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <game_speed+0x1>
    1232:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <game_speed>
			
			move_terminal_cursor(10, 17);
    1236:	61 e1       	ldi	r22, 0x11	; 17
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	8a e0       	ldi	r24, 0x0A	; 10
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
			clear_to_end_of_line();
    1242:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <clear_to_end_of_line>
			printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1246:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <game_speed+0x1>
    124a:	8f 93       	push	r24
    124c:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <game_speed>
    1250:	8f 93       	push	r24
    1252:	87 e7       	ldi	r24, 0x77	; 119
    1254:	92 e0       	ldi	r25, 0x02	; 2
    1256:	9f 93       	push	r25
    1258:	8f 93       	push	r24
    125a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
		}
		
		
		// Next check for any button presses
		int8_t btn = button_pushed();
    1266:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
		if (btn != NO_BUTTON_PUSHED)
    126a:	8f 3f       	cpi	r24, 0xFF	; 255
    126c:	09 f0       	breq	.+2      	; 0x1270 <start_screen+0x2d4>
    126e:	5c c0       	rjmp	.+184    	; 0x1328 <start_screen+0x38c>
		{
			break;
			
		} else if (serial_input == 'm' || serial_input == 'M') {
    1270:	cd 36       	cpi	r28, 0x6D	; 109
    1272:	11 f0       	breq	.+4      	; 0x1278 <start_screen+0x2dc>
    1274:	cd 34       	cpi	r28, 0x4D	; 77
    1276:	09 f5       	brne	.+66     	; 0x12ba <start_screen+0x31e>
			//clear manual mode alert
			move_terminal_cursor(10, 16);
    1278:	60 e1       	ldi	r22, 0x10	; 16
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	8a e0       	ldi	r24, 0x0A	; 10
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
			clear_to_end_of_line();
    1284:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <clear_to_end_of_line>
			
			if (man_mode) {
    1288:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <man_mode>
    128c:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <man_mode+0x1>
    1290:	89 2b       	or	r24, r25
    1292:	29 f0       	breq	.+10     	; 0x129e <start_screen+0x302>
				man_mode = 0;  // toggle manual mode checker
    1294:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <man_mode+0x1>
    1298:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <man_mode>
    129c:	0e c0       	rjmp	.+28     	; 0x12ba <start_screen+0x31e>
				
			} else {
				man_mode = 1; //toggle manual mode checker				
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <man_mode+0x1>
    12a6:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <man_mode>
				//print to terminal that manual mode is on
				printf("Manual Mode: ON");
    12aa:	8e e9       	ldi	r24, 0x9E	; 158
    12ac:	92 e0       	ldi	r25, 0x02	; 2
    12ae:	9f 93       	push	r25
    12b0:	8f 93       	push	r24
    12b2:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
			}
		} 		

		if (!man_mode) {
    12ba:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <man_mode>
    12be:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <man_mode+0x1>
    12c2:	89 2b       	or	r24, r25
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <start_screen+0x32c>
    12c6:	5a cf       	rjmp	.-332    	; 0x117c <start_screen+0x1e0>
			// every 200 ms, update the animation
			current_time = get_current_time();
    12c8:	0e 94 30 11 	call	0x2260	; 0x2260 <get_current_time>
    12cc:	4b 01       	movw	r8, r22
    12ce:	5c 01       	movw	r10, r24
			if (current_time - last_screen_update > game_speed/5)
    12d0:	2b 01       	movw	r4, r22
    12d2:	3c 01       	movw	r6, r24
    12d4:	4c 18       	sub	r4, r12
    12d6:	5d 08       	sbc	r5, r13
    12d8:	6e 08       	sbc	r6, r14
    12da:	7f 08       	sbc	r7, r15
    12dc:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <game_speed>
    12e0:	30 91 01 05 	lds	r19, 0x0501	; 0x800501 <game_speed+0x1>
    12e4:	ad ec       	ldi	r26, 0xCD	; 205
    12e6:	bc ec       	ldi	r27, 0xCC	; 204
    12e8:	0e 94 11 14 	call	0x2822	; 0x2822 <__umulhisi3>
    12ec:	96 95       	lsr	r25
    12ee:	87 95       	ror	r24
    12f0:	96 95       	lsr	r25
    12f2:	87 95       	ror	r24
    12f4:	a0 e0       	ldi	r26, 0x00	; 0
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	84 15       	cp	r24, r4
    12fa:	95 05       	cpc	r25, r5
    12fc:	a6 05       	cpc	r26, r6
    12fe:	b7 05       	cpc	r27, r7
    1300:	08 f0       	brcs	.+2      	; 0x1304 <start_screen+0x368>
    1302:	3c cf       	rjmp	.-392    	; 0x117c <start_screen+0x1e0>
			{
				update_start_screen(frame_number);
    1304:	8d 2f       	mov	r24, r29
    1306:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
				frame_number = (frame_number + 1) % 32;
    130a:	8d 2f       	mov	r24, r29
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	8f 71       	andi	r24, 0x1F	; 31
    1312:	90 78       	andi	r25, 0x80	; 128
    1314:	99 23       	and	r25, r25
    1316:	24 f4       	brge	.+8      	; 0x1320 <start_screen+0x384>
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	80 6e       	ori	r24, 0xE0	; 224
    131c:	9f 6f       	ori	r25, 0xFF	; 255
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	d8 2f       	mov	r29, r24
				last_screen_update = current_time;
    1322:	75 01       	movw	r14, r10
    1324:	64 01       	movw	r12, r8
    1326:	2a cf       	rjmp	.-428    	; 0x117c <start_screen+0x1e0>
			} 
		}
	}
}
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	ff 90       	pop	r15
    132e:	ef 90       	pop	r14
    1330:	df 90       	pop	r13
    1332:	cf 90       	pop	r12
    1334:	bf 90       	pop	r11
    1336:	af 90       	pop	r10
    1338:	9f 90       	pop	r9
    133a:	8f 90       	pop	r8
    133c:	7f 90       	pop	r7
    133e:	6f 90       	pop	r6
    1340:	5f 90       	pop	r5
    1342:	4f 90       	pop	r4
    1344:	08 95       	ret

00001346 <display_countdown>:

void display_countdown(int countdown) {
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	ec 01       	movw	r28, r24
	
	//clear display
	ledmatrix_clear();
    134c:	0e 94 b3 07 	call	0xf66	; 0xf66 <ledmatrix_clear>
	
	switch (countdown) {
    1350:	c2 30       	cpi	r28, 0x02	; 2
    1352:	d1 05       	cpc	r29, r1
    1354:	a9 f1       	breq	.+106    	; 0x13c0 <display_countdown+0x7a>
    1356:	1c f4       	brge	.+6      	; 0x135e <display_countdown+0x18>
    1358:	21 97       	sbiw	r28, 0x01	; 1
    135a:	71 f1       	breq	.+92     	; 0x13b8 <display_countdown+0x72>
    135c:	74 c1       	rjmp	.+744    	; 0x1646 <display_countdown+0x300>
    135e:	c3 30       	cpi	r28, 0x03	; 3
    1360:	d1 05       	cpc	r29, r1
    1362:	09 f4       	brne	.+2      	; 0x1366 <display_countdown+0x20>
    1364:	f3 c0       	rjmp	.+486    	; 0x154c <display_countdown+0x206>
    1366:	24 97       	sbiw	r28, 0x04	; 4
    1368:	09 f4       	brne	.+2      	; 0x136c <display_countdown+0x26>
    136a:	f5 c0       	rjmp	.+490    	; 0x1556 <display_countdown+0x210>
    136c:	6c c1       	rjmp	.+728    	; 0x1646 <display_countdown+0x300>
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
				ledmatrix_update_pixel(col, 3, COLOUR_YELLOW);
    136e:	4f ef       	ldi	r20, 0xFF	; 255
    1370:	63 e0       	ldi	r22, 0x03	; 3
    1372:	8c 2f       	mov	r24, r28
    1374:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 4, COLOUR_YELLOW);
    1378:	4f ef       	ldi	r20, 0xFF	; 255
    137a:	64 e0       	ldi	r22, 0x04	; 4
    137c:	8c 2f       	mov	r24, r28
    137e:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
				
				if (col == 5) {
    1382:	c5 30       	cpi	r28, 0x05	; 5
    1384:	59 f4       	brne	.+22     	; 0x139c <display_countdown+0x56>
					ledmatrix_update_pixel(col, 2, COLOUR_YELLOW);
    1386:	4f ef       	ldi	r20, 0xFF	; 255
    1388:	62 e0       	ldi	r22, 0x02	; 2
    138a:	8c 2f       	mov	r24, r28
    138c:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_YELLOW);
    1390:	4f ef       	ldi	r20, 0xFF	; 255
    1392:	64 e0       	ldi	r22, 0x04	; 4
    1394:	8c 2f       	mov	r24, r28
    1396:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
    139a:	0c c0       	rjmp	.+24     	; 0x13b4 <display_countdown+0x6e>
					
					} else if (col == 10) {
    139c:	ca 30       	cpi	r28, 0x0A	; 10
    139e:	51 f4       	brne	.+20     	; 0x13b4 <display_countdown+0x6e>
					ledmatrix_update_pixel(col, 2, COLOUR_YELLOW);
    13a0:	4f ef       	ldi	r20, 0xFF	; 255
    13a2:	62 e0       	ldi	r22, 0x02	; 2
    13a4:	8c 2f       	mov	r24, r28
    13a6:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_YELLOW);
    13aa:	4f ef       	ldi	r20, 0xFF	; 255
    13ac:	65 e0       	ldi	r22, 0x05	; 5
    13ae:	8c 2f       	mov	r24, r28
    13b0:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
    13b4:	cf 5f       	subi	r28, 0xFF	; 255
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <display_countdown+0x74>
void display_countdown(int countdown) {
	
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
    13b8:	c4 e0       	ldi	r28, 0x04	; 4
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
    13ba:	cb 30       	cpi	r28, 0x0B	; 11
    13bc:	c0 f2       	brcs	.-80     	; 0x136e <display_countdown+0x28>
    13be:	43 c1       	rjmp	.+646    	; 0x1646 <display_countdown+0x300>
				}
			}
			break;
			
		case 2:  //Then draw the 2
			ledmatrix_update_pixel(4, 2, COLOUR_RED);
    13c0:	4f e0       	ldi	r20, 0x0F	; 15
    13c2:	62 e0       	ldi	r22, 0x02	; 2
    13c4:	84 e0       	ldi	r24, 0x04	; 4
    13c6:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 3, COLOUR_RED);
    13ca:	4f e0       	ldi	r20, 0x0F	; 15
    13cc:	63 e0       	ldi	r22, 0x03	; 3
    13ce:	84 e0       	ldi	r24, 0x04	; 4
    13d0:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 4, COLOUR_RED);
    13d4:	4f e0       	ldi	r20, 0x0F	; 15
    13d6:	64 e0       	ldi	r22, 0x04	; 4
    13d8:	84 e0       	ldi	r24, 0x04	; 4
    13da:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 5, COLOUR_RED);
    13de:	4f e0       	ldi	r20, 0x0F	; 15
    13e0:	65 e0       	ldi	r22, 0x05	; 5
    13e2:	84 e0       	ldi	r24, 0x04	; 4
    13e4:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(5, 1, COLOUR_RED);
    13e8:	4f e0       	ldi	r20, 0x0F	; 15
    13ea:	61 e0       	ldi	r22, 0x01	; 1
    13ec:	85 e0       	ldi	r24, 0x05	; 5
    13ee:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 2, COLOUR_RED);
    13f2:	4f e0       	ldi	r20, 0x0F	; 15
    13f4:	62 e0       	ldi	r22, 0x02	; 2
    13f6:	85 e0       	ldi	r24, 0x05	; 5
    13f8:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 5, COLOUR_RED);
    13fc:	4f e0       	ldi	r20, 0x0F	; 15
    13fe:	65 e0       	ldi	r22, 0x05	; 5
    1400:	85 e0       	ldi	r24, 0x05	; 5
    1402:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 6, COLOUR_RED);
    1406:	4f e0       	ldi	r20, 0x0F	; 15
    1408:	66 e0       	ldi	r22, 0x06	; 6
    140a:	85 e0       	ldi	r24, 0x05	; 5
    140c:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(6, 5, COLOUR_RED);
    1410:	4f e0       	ldi	r20, 0x0F	; 15
    1412:	65 e0       	ldi	r22, 0x05	; 5
    1414:	86 e0       	ldi	r24, 0x06	; 6
    1416:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 6, COLOUR_RED);
    141a:	4f e0       	ldi	r20, 0x0F	; 15
    141c:	66 e0       	ldi	r22, 0x06	; 6
    141e:	86 e0       	ldi	r24, 0x06	; 6
    1420:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(7, 5, COLOUR_RED);
    1424:	4f e0       	ldi	r20, 0x0F	; 15
    1426:	65 e0       	ldi	r22, 0x05	; 5
    1428:	87 e0       	ldi	r24, 0x07	; 7
    142a:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 6, COLOUR_RED);
    142e:	4f e0       	ldi	r20, 0x0F	; 15
    1430:	66 e0       	ldi	r22, 0x06	; 6
    1432:	87 e0       	ldi	r24, 0x07	; 7
    1434:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(8, 2, COLOUR_RED);
    1438:	4f e0       	ldi	r20, 0x0F	; 15
    143a:	62 e0       	ldi	r22, 0x02	; 2
    143c:	88 e0       	ldi	r24, 0x08	; 8
    143e:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 3, COLOUR_RED);
    1442:	4f e0       	ldi	r20, 0x0F	; 15
    1444:	63 e0       	ldi	r22, 0x03	; 3
    1446:	88 e0       	ldi	r24, 0x08	; 8
    1448:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 4, COLOUR_RED);
    144c:	4f e0       	ldi	r20, 0x0F	; 15
    144e:	64 e0       	ldi	r22, 0x04	; 4
    1450:	88 e0       	ldi	r24, 0x08	; 8
    1452:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(9, 1, COLOUR_RED);
    1456:	4f e0       	ldi	r20, 0x0F	; 15
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	89 e0       	ldi	r24, 0x09	; 9
    145c:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 2, COLOUR_RED);
    1460:	4f e0       	ldi	r20, 0x0F	; 15
    1462:	62 e0       	ldi	r22, 0x02	; 2
    1464:	89 e0       	ldi	r24, 0x09	; 9
    1466:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(10, 1, COLOUR_RED);
    146a:	4f e0       	ldi	r20, 0x0F	; 15
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	8a e0       	ldi	r24, 0x0A	; 10
    1470:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 2, COLOUR_RED);
    1474:	4f e0       	ldi	r20, 0x0F	; 15
    1476:	62 e0       	ldi	r22, 0x02	; 2
    1478:	8a e0       	ldi	r24, 0x0A	; 10
    147a:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 3, COLOUR_RED);
    147e:	4f e0       	ldi	r20, 0x0F	; 15
    1480:	63 e0       	ldi	r22, 0x03	; 3
    1482:	8a e0       	ldi	r24, 0x0A	; 10
    1484:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 4, COLOUR_RED);
    1488:	4f e0       	ldi	r20, 0x0F	; 15
    148a:	64 e0       	ldi	r22, 0x04	; 4
    148c:	8a e0       	ldi	r24, 0x0A	; 10
    148e:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
    1492:	4f e0       	ldi	r20, 0x0F	; 15
    1494:	65 e0       	ldi	r22, 0x05	; 5
    1496:	8a e0       	ldi	r24, 0x0A	; 10
    1498:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
    149c:	4f e0       	ldi	r20, 0x0F	; 15
    149e:	66 e0       	ldi	r22, 0x06	; 6
    14a0:	8a e0       	ldi	r24, 0x0A	; 10
    14a2:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			break;
    14a6:	cf c0       	rjmp	.+414    	; 0x1646 <display_countdown+0x300>
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
				if (col == 4 || col == 10) {
    14a8:	c4 30       	cpi	r28, 0x04	; 4
    14aa:	11 f0       	breq	.+4      	; 0x14b0 <display_countdown+0x16a>
    14ac:	ca 30       	cpi	r28, 0x0A	; 10
    14ae:	a9 f4       	brne	.+42     	; 0x14da <display_countdown+0x194>
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    14b0:	4f e0       	ldi	r20, 0x0F	; 15
    14b2:	62 e0       	ldi	r22, 0x02	; 2
    14b4:	8c 2f       	mov	r24, r28
    14b6:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 3, COLOUR_RED);
    14ba:	4f e0       	ldi	r20, 0x0F	; 15
    14bc:	63 e0       	ldi	r22, 0x03	; 3
    14be:	8c 2f       	mov	r24, r28
    14c0:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_RED);
    14c4:	4f e0       	ldi	r20, 0x0F	; 15
    14c6:	64 e0       	ldi	r22, 0x04	; 4
    14c8:	8c 2f       	mov	r24, r28
    14ca:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_RED);
    14ce:	4f e0       	ldi	r20, 0x0F	; 15
    14d0:	65 e0       	ldi	r22, 0x05	; 5
    14d2:	8c 2f       	mov	r24, r28
    14d4:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
    14d8:	37 c0       	rjmp	.+110    	; 0x1548 <display_countdown+0x202>
					
					} else if (col == 5 || col == 9) {
    14da:	c5 30       	cpi	r28, 0x05	; 5
    14dc:	11 f0       	breq	.+4      	; 0x14e2 <display_countdown+0x19c>
    14de:	c9 30       	cpi	r28, 0x09	; 9
    14e0:	a9 f4       	brne	.+42     	; 0x150c <display_countdown+0x1c6>
					ledmatrix_update_pixel(col, 1, COLOUR_RED);
    14e2:	4f e0       	ldi	r20, 0x0F	; 15
    14e4:	61 e0       	ldi	r22, 0x01	; 1
    14e6:	8c 2f       	mov	r24, r28
    14e8:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    14ec:	4f e0       	ldi	r20, 0x0F	; 15
    14ee:	62 e0       	ldi	r22, 0x02	; 2
    14f0:	8c 2f       	mov	r24, r28
    14f2:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_RED);
    14f6:	4f e0       	ldi	r20, 0x0F	; 15
    14f8:	65 e0       	ldi	r22, 0x05	; 5
    14fa:	8c 2f       	mov	r24, r28
    14fc:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 6, COLOUR_RED);
    1500:	4f e0       	ldi	r20, 0x0F	; 15
    1502:	66 e0       	ldi	r22, 0x06	; 6
    1504:	8c 2f       	mov	r24, r28
    1506:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
    150a:	1e c0       	rjmp	.+60     	; 0x1548 <display_countdown+0x202>
					
					} else if (col == 6 || col == 8) {
    150c:	c6 30       	cpi	r28, 0x06	; 6
    150e:	11 f0       	breq	.+4      	; 0x1514 <display_countdown+0x1ce>
    1510:	c8 30       	cpi	r28, 0x08	; 8
    1512:	59 f4       	brne	.+22     	; 0x152a <display_countdown+0x1e4>
					ledmatrix_update_pixel(col, 5, COLOUR_RED);
    1514:	4f e0       	ldi	r20, 0x0F	; 15
    1516:	65 e0       	ldi	r22, 0x05	; 5
    1518:	8c 2f       	mov	r24, r28
    151a:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 6, COLOUR_RED);
    151e:	4f e0       	ldi	r20, 0x0F	; 15
    1520:	66 e0       	ldi	r22, 0x06	; 6
    1522:	8c 2f       	mov	r24, r28
    1524:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
    1528:	0f c0       	rjmp	.+30     	; 0x1548 <display_countdown+0x202>
					
					} else {
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    152a:	4f e0       	ldi	r20, 0x0F	; 15
    152c:	62 e0       	ldi	r22, 0x02	; 2
    152e:	8c 2f       	mov	r24, r28
    1530:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 3, COLOUR_RED);
    1534:	4f e0       	ldi	r20, 0x0F	; 15
    1536:	63 e0       	ldi	r22, 0x03	; 3
    1538:	8c 2f       	mov	r24, r28
    153a:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_RED);
    153e:	4f e0       	ldi	r20, 0x0F	; 15
    1540:	64 e0       	ldi	r22, 0x04	; 4
    1542:	8c 2f       	mov	r24, r28
    1544:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
			break;
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
    1548:	cf 5f       	subi	r28, 0xFF	; 255
    154a:	01 c0       	rjmp	.+2      	; 0x154e <display_countdown+0x208>
void display_countdown(int countdown) {
	
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
    154c:	c4 e0       	ldi	r28, 0x04	; 4
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
			break;
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
    154e:	cb 30       	cpi	r28, 0x0B	; 11
    1550:	08 f4       	brcc	.+2      	; 0x1554 <display_countdown+0x20e>
    1552:	aa cf       	rjmp	.-172    	; 0x14a8 <display_countdown+0x162>
    1554:	78 c0       	rjmp	.+240    	; 0x1646 <display_countdown+0x300>
				}
			}
			break;
		
		case 4: //Then draw the Go
			ledmatrix_update_pixel(5, 1, COLOUR_GREEN);
    1556:	40 ef       	ldi	r20, 0xF0	; 240
    1558:	61 e0       	ldi	r22, 0x01	; 1
    155a:	85 e0       	ldi	r24, 0x05	; 5
    155c:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 2, COLOUR_GREEN);
    1560:	40 ef       	ldi	r20, 0xF0	; 240
    1562:	62 e0       	ldi	r22, 0x02	; 2
    1564:	85 e0       	ldi	r24, 0x05	; 5
    1566:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 3, COLOUR_GREEN);
    156a:	40 ef       	ldi	r20, 0xF0	; 240
    156c:	63 e0       	ldi	r22, 0x03	; 3
    156e:	85 e0       	ldi	r24, 0x05	; 5
    1570:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 5, COLOUR_GREEN);
    1574:	40 ef       	ldi	r20, 0xF0	; 240
    1576:	65 e0       	ldi	r22, 0x05	; 5
    1578:	85 e0       	ldi	r24, 0x05	; 5
    157a:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 6, COLOUR_GREEN);
    157e:	40 ef       	ldi	r20, 0xF0	; 240
    1580:	66 e0       	ldi	r22, 0x06	; 6
    1582:	85 e0       	ldi	r24, 0x05	; 5
    1584:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 7, COLOUR_GREEN);
    1588:	40 ef       	ldi	r20, 0xF0	; 240
    158a:	67 e0       	ldi	r22, 0x07	; 7
    158c:	85 e0       	ldi	r24, 0x05	; 5
    158e:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(6, 0, COLOUR_GREEN);
    1592:	40 ef       	ldi	r20, 0xF0	; 240
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	86 e0       	ldi	r24, 0x06	; 6
    1598:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 5, COLOUR_GREEN);
    159c:	40 ef       	ldi	r20, 0xF0	; 240
    159e:	65 e0       	ldi	r22, 0x05	; 5
    15a0:	86 e0       	ldi	r24, 0x06	; 6
    15a2:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 7, COLOUR_GREEN);
    15a6:	40 ef       	ldi	r20, 0xF0	; 240
    15a8:	67 e0       	ldi	r22, 0x07	; 7
    15aa:	86 e0       	ldi	r24, 0x06	; 6
    15ac:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(7, 0, COLOUR_GREEN);
    15b0:	40 ef       	ldi	r20, 0xF0	; 240
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	87 e0       	ldi	r24, 0x07	; 7
    15b6:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 2, COLOUR_GREEN);
    15ba:	40 ef       	ldi	r20, 0xF0	; 240
    15bc:	62 e0       	ldi	r22, 0x02	; 2
    15be:	87 e0       	ldi	r24, 0x07	; 7
    15c0:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 3, COLOUR_GREEN);
    15c4:	40 ef       	ldi	r20, 0xF0	; 240
    15c6:	63 e0       	ldi	r22, 0x03	; 3
    15c8:	87 e0       	ldi	r24, 0x07	; 7
    15ca:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 5, COLOUR_GREEN);
    15ce:	40 ef       	ldi	r20, 0xF0	; 240
    15d0:	65 e0       	ldi	r22, 0x05	; 5
    15d2:	87 e0       	ldi	r24, 0x07	; 7
    15d4:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 7, COLOUR_GREEN);
    15d8:	40 ef       	ldi	r20, 0xF0	; 240
    15da:	67 e0       	ldi	r22, 0x07	; 7
    15dc:	87 e0       	ldi	r24, 0x07	; 7
    15de:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(8, 0, COLOUR_GREEN);
    15e2:	40 ef       	ldi	r20, 0xF0	; 240
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	88 e0       	ldi	r24, 0x08	; 8
    15e8:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 3, COLOUR_GREEN);
    15ec:	40 ef       	ldi	r20, 0xF0	; 240
    15ee:	63 e0       	ldi	r22, 0x03	; 3
    15f0:	88 e0       	ldi	r24, 0x08	; 8
    15f2:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 5, COLOUR_GREEN);
    15f6:	40 ef       	ldi	r20, 0xF0	; 240
    15f8:	65 e0       	ldi	r22, 0x05	; 5
    15fa:	88 e0       	ldi	r24, 0x08	; 8
    15fc:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 7, COLOUR_GREEN);
    1600:	40 ef       	ldi	r20, 0xF0	; 240
    1602:	67 e0       	ldi	r22, 0x07	; 7
    1604:	88 e0       	ldi	r24, 0x08	; 8
    1606:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(9, 1, COLOUR_GREEN);
    160a:	40 ef       	ldi	r20, 0xF0	; 240
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	89 e0       	ldi	r24, 0x09	; 9
    1610:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 2, COLOUR_GREEN);
    1614:	40 ef       	ldi	r20, 0xF0	; 240
    1616:	62 e0       	ldi	r22, 0x02	; 2
    1618:	89 e0       	ldi	r24, 0x09	; 9
    161a:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 3, COLOUR_GREEN);
    161e:	40 ef       	ldi	r20, 0xF0	; 240
    1620:	63 e0       	ldi	r22, 0x03	; 3
    1622:	85 e0       	ldi	r24, 0x05	; 5
    1624:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 5, COLOUR_GREEN);
    1628:	40 ef       	ldi	r20, 0xF0	; 240
    162a:	65 e0       	ldi	r22, 0x05	; 5
    162c:	89 e0       	ldi	r24, 0x09	; 9
    162e:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 6, COLOUR_GREEN);
    1632:	40 ef       	ldi	r20, 0xF0	; 240
    1634:	66 e0       	ldi	r22, 0x06	; 6
    1636:	89 e0       	ldi	r24, 0x09	; 9
    1638:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 7, COLOUR_GREEN);
    163c:	40 ef       	ldi	r20, 0xF0	; 240
    163e:	67 e0       	ldi	r22, 0x07	; 7
    1640:	89 e0       	ldi	r24, 0x09	; 9
    1642:	0e 94 77 07 	call	0xeee	; 0xeee <ledmatrix_update_pixel>
		
		default:
			break;
	}
	
}
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	08 95       	ret

0000164c <game_countdown>:

void game_countdown() {
    164c:	8f 92       	push	r8
    164e:	9f 92       	push	r9
    1650:	af 92       	push	r10
    1652:	bf 92       	push	r11
    1654:	cf 92       	push	r12
    1656:	df 92       	push	r13
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
	
	uint32_t current_time = get_current_time();
    165c:	0e 94 30 11 	call	0x2260	; 0x2260 <get_current_time>
    1660:	4b 01       	movw	r8, r22
    1662:	5c 01       	movw	r10, r24
	uint32_t last_recorded_time = current_time;

	display_countdown(3); // display 1
    1664:	83 e0       	ldi	r24, 0x03	; 3
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 a3 09 	call	0x1346	; 0x1346 <display_countdown>
	
	while (1) {
		//update current time
		current_time = get_current_time();
    166c:	0e 94 30 11 	call	0x2260	; 0x2260 <get_current_time>
    1670:	6b 01       	movw	r12, r22
    1672:	7c 01       	movw	r14, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    1674:	ab 01       	movw	r20, r22
    1676:	bc 01       	movw	r22, r24
    1678:	48 19       	sub	r20, r8
    167a:	59 09       	sbc	r21, r9
    167c:	6a 09       	sbc	r22, r10
    167e:	7b 09       	sbc	r23, r11
    1680:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <game_speed>
    1684:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <game_speed+0x1>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	a0 e0       	ldi	r26, 0x00	; 0
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	48 17       	cp	r20, r24
    1692:	59 07       	cpc	r21, r25
    1694:	6a 07       	cpc	r22, r26
    1696:	7b 07       	cpc	r23, r27
    1698:	48 f3       	brcs	.-46     	; 0x166c <game_countdown+0x20>
			display_countdown(2); //display 2
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 a3 09 	call	0x1346	; 0x1346 <display_countdown>
		}
	}
	
	while (1) {
		//update current time
		current_time = get_current_time();
    16a2:	0e 94 30 11 	call	0x2260	; 0x2260 <get_current_time>
    16a6:	4b 01       	movw	r8, r22
    16a8:	5c 01       	movw	r10, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    16aa:	ab 01       	movw	r20, r22
    16ac:	bc 01       	movw	r22, r24
    16ae:	4c 19       	sub	r20, r12
    16b0:	5d 09       	sbc	r21, r13
    16b2:	6e 09       	sbc	r22, r14
    16b4:	7f 09       	sbc	r23, r15
    16b6:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <game_speed>
    16ba:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <game_speed+0x1>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	a0 e0       	ldi	r26, 0x00	; 0
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	48 17       	cp	r20, r24
    16c8:	59 07       	cpc	r21, r25
    16ca:	6a 07       	cpc	r22, r26
    16cc:	7b 07       	cpc	r23, r27
    16ce:	48 f3       	brcs	.-46     	; 0x16a2 <game_countdown+0x56>
			display_countdown(1); //display 3
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	0e 94 a3 09 	call	0x1346	; 0x1346 <display_countdown>
		}
	}
	
	while (1) {
		//update current time
		current_time = get_current_time();
    16d8:	0e 94 30 11 	call	0x2260	; 0x2260 <get_current_time>
    16dc:	6b 01       	movw	r12, r22
    16de:	7c 01       	movw	r14, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    16e0:	ab 01       	movw	r20, r22
    16e2:	bc 01       	movw	r22, r24
    16e4:	48 19       	sub	r20, r8
    16e6:	59 09       	sbc	r21, r9
    16e8:	6a 09       	sbc	r22, r10
    16ea:	7b 09       	sbc	r23, r11
    16ec:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <game_speed>
    16f0:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <game_speed+0x1>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	a0 e0       	ldi	r26, 0x00	; 0
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	48 17       	cp	r20, r24
    16fe:	59 07       	cpc	r21, r25
    1700:	6a 07       	cpc	r22, r26
    1702:	7b 07       	cpc	r23, r27
    1704:	48 f3       	brcs	.-46     	; 0x16d8 <game_countdown+0x8c>
			display_countdown(4); //display go
    1706:	84 e0       	ldi	r24, 0x04	; 4
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 a3 09 	call	0x1346	; 0x1346 <display_countdown>
	}
	
																														//turn into a loop
	while (1) {
		//update current time
		current_time = get_current_time();
    170e:	0e 94 30 11 	call	0x2260	; 0x2260 <get_current_time>
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    1712:	ab 01       	movw	r20, r22
    1714:	bc 01       	movw	r22, r24
    1716:	4c 19       	sub	r20, r12
    1718:	5d 09       	sbc	r21, r13
    171a:	6e 09       	sbc	r22, r14
    171c:	7f 09       	sbc	r23, r15
    171e:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <game_speed>
    1722:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <game_speed+0x1>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	a0 e0       	ldi	r26, 0x00	; 0
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	48 17       	cp	r20, r24
    1730:	59 07       	cpc	r21, r25
    1732:	6a 07       	cpc	r22, r26
    1734:	7b 07       	cpc	r23, r27
    1736:	58 f3       	brcs	.-42     	; 0x170e <game_countdown+0xc2>
			break;
		}
	}
}
    1738:	ff 90       	pop	r15
    173a:	ef 90       	pop	r14
    173c:	df 90       	pop	r13
    173e:	cf 90       	pop	r12
    1740:	bf 90       	pop	r11
    1742:	af 90       	pop	r10
    1744:	9f 90       	pop	r9
    1746:	8f 90       	pop	r8
    1748:	08 95       	ret

0000174a <ssd_display>:

void ssd_display() {
	//SSD section  //maybe put into the interrupt section
	//change displayed digit,
	int left_digit = points;
    174a:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
    174e:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <points+0x1>
	int right_digit = 0;
	
	if (!((points < 10) && (points >= 0))) {
    1752:	8a 30       	cpi	r24, 0x0A	; 10
    1754:	91 05       	cpc	r25, r1
    1756:	08 f4       	brcc	.+2      	; 0x175a <ssd_display+0x10>
    1758:	61 c0       	rjmp	.+194    	; 0x181c <ssd_display+0xd2>
		if ((points > 9) && (points < 100)) {
    175a:	9c 01       	movw	r18, r24
    175c:	2a 50       	subi	r18, 0x0A	; 10
    175e:	31 09       	sbc	r19, r1
    1760:	2a 35       	cpi	r18, 0x5A	; 90
    1762:	31 05       	cpc	r19, r1
    1764:	28 f4       	brcc	.+10     	; 0x1770 <ssd_display+0x26>
			left_digit = points	/ 10; // tens column
			right_digit = points % 10; //ones column
    1766:	6a e0       	ldi	r22, 0x0A	; 10
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	0e 94 bc 13 	call	0x2778	; 0x2778 <__divmodhi4>
    176e:	2a c0       	rjmp	.+84     	; 0x17c4 <ssd_display+0x7a>
		
		} else if ((points >= 100)) {
    1770:	84 36       	cpi	r24, 0x64	; 100
    1772:	91 05       	cpc	r25, r1
    1774:	7c f0       	brlt	.+30     	; 0x1794 <ssd_display+0x4a>
			left_digit = points /10 % 10; //tens column
    1776:	2a e0       	ldi	r18, 0x0A	; 10
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	b9 01       	movw	r22, r18
    177c:	0e 94 bc 13 	call	0x2778	; 0x2778 <__divmodhi4>
    1780:	e8 2f       	mov	r30, r24
    1782:	49 2f       	mov	r20, r25
    1784:	cb 01       	movw	r24, r22
    1786:	b9 01       	movw	r22, r18
    1788:	0e 94 bc 13 	call	0x2778	; 0x2778 <__divmodhi4>
    178c:	bc 01       	movw	r22, r24
			right_digit = points % 10;
    178e:	8e 2f       	mov	r24, r30
    1790:	94 2f       	mov	r25, r20
    1792:	18 c0       	rjmp	.+48     	; 0x17c4 <ssd_display+0x7a>
			
		} else if ((points < 0) && (points > -10)) {
    1794:	9c 01       	movw	r18, r24
    1796:	27 5f       	subi	r18, 0xF7	; 247
    1798:	3f 4f       	sbci	r19, 0xFF	; 255
    179a:	29 30       	cpi	r18, 0x09	; 9
    179c:	31 05       	cpc	r19, r1
    179e:	30 f4       	brcc	.+12     	; 0x17ac <ssd_display+0x62>
			right_digit = -1 * points;
    17a0:	91 95       	neg	r25
    17a2:	81 95       	neg	r24
    17a4:	91 09       	sbc	r25, r1
			left_digit = 10;
    17a6:	6a e0       	ldi	r22, 0x0A	; 10
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	0c c0       	rjmp	.+24     	; 0x17c4 <ssd_display+0x7a>
	
		} else if (points <= -10) {
    17ac:	87 3f       	cpi	r24, 0xF7	; 247
    17ae:	2f ef       	ldi	r18, 0xFF	; 255
    17b0:	92 07       	cpc	r25, r18
    17b2:	24 f0       	brlt	.+8      	; 0x17bc <ssd_display+0x72>
}

void ssd_display() {
	//SSD section  //maybe put into the interrupt section
	//change displayed digit,
	int left_digit = points;
    17b4:	bc 01       	movw	r22, r24
	int right_digit = 0;
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	04 c0       	rjmp	.+8      	; 0x17c4 <ssd_display+0x7a>
			right_digit = -1 * points;
			left_digit = 10;
	
		} else if (points <= -10) {
			//SSD displays "--"
			right_digit = 10;
    17bc:	8a e0       	ldi	r24, 0x0A	; 10
    17be:	90 e0       	ldi	r25, 0x00	; 0
			left_digit = 10;
    17c0:	6a e0       	ldi	r22, 0x0A	; 10
    17c2:	70 e0       	ldi	r23, 0x00	; 0
		}
	
		if (seven_seg_cc) { //is seven_seg_cc, then ssd displays to the left
    17c4:	20 91 e3 04 	lds	r18, 0x04E3	; 0x8004e3 <seven_seg_cc>
    17c8:	30 91 e4 04 	lds	r19, 0x04E4	; 0x8004e4 <seven_seg_cc+0x1>
    17cc:	23 2b       	or	r18, r19
    17ce:	99 f0       	breq	.+38     	; 0x17f6 <ssd_display+0xac>
			PORTD = PORTD | (1<<2);	
    17d0:	8b b1       	in	r24, 0x0b	; 11
    17d2:	84 60       	ori	r24, 0x04	; 4
    17d4:	8b b9       	out	0x0b, r24	; 11
			PORTC = seven_seg_data[left_digit];
    17d6:	fb 01       	movw	r30, r22
    17d8:	ef 5f       	subi	r30, 0xFF	; 255
    17da:	fe 4f       	sbci	r31, 0xFE	; 254
    17dc:	80 81       	ld	r24, Z
    17de:	88 b9       	out	0x08, r24	; 8
		
			seven_seg_cc ^= 1;
    17e0:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <seven_seg_cc>
    17e4:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <seven_seg_cc+0x1>
    17e8:	21 e0       	ldi	r18, 0x01	; 1
    17ea:	82 27       	eor	r24, r18
    17ec:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <seven_seg_cc+0x1>
    17f0:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <seven_seg_cc>
    17f4:	08 95       	ret
		
		} else {
			PORTD = PORTD & 0b11111011;				//Display Right digit
    17f6:	2b b1       	in	r18, 0x0b	; 11
    17f8:	2b 7f       	andi	r18, 0xFB	; 251
    17fa:	2b b9       	out	0x0b, r18	; 11
			PORTC = seven_seg_data[right_digit];
    17fc:	fc 01       	movw	r30, r24
    17fe:	ef 5f       	subi	r30, 0xFF	; 255
    1800:	fe 4f       	sbci	r31, 0xFE	; 254
    1802:	80 81       	ld	r24, Z
    1804:	88 b9       	out	0x08, r24	; 8
			
			seven_seg_cc ^= 1;
    1806:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <seven_seg_cc>
    180a:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <seven_seg_cc+0x1>
    180e:	21 e0       	ldi	r18, 0x01	; 1
    1810:	82 27       	eor	r24, r18
    1812:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <seven_seg_cc+0x1>
    1816:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <seven_seg_cc>
    181a:	08 95       	ret
		}
		
	} else {
		if (seven_seg_cc) {
    181c:	20 91 e3 04 	lds	r18, 0x04E3	; 0x8004e3 <seven_seg_cc>
    1820:	30 91 e4 04 	lds	r19, 0x04E4	; 0x8004e4 <seven_seg_cc+0x1>
    1824:	23 2b       	or	r18, r19
    1826:	31 f0       	breq	.+12     	; 0x1834 <ssd_display+0xea>
			PORTC = seven_seg_data[left_digit];
    1828:	fc 01       	movw	r30, r24
    182a:	ef 5f       	subi	r30, 0xFF	; 255
    182c:	fe 4f       	sbci	r31, 0xFE	; 254
    182e:	80 81       	ld	r24, Z
    1830:	88 b9       	out	0x08, r24	; 8
    1832:	08 95       	ret
		} else {
			seven_seg_cc ^= 1;
    1834:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <seven_seg_cc>
    1838:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <seven_seg_cc+0x1>
    183c:	21 e0       	ldi	r18, 0x01	; 1
    183e:	82 27       	eor	r24, r18
    1840:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <seven_seg_cc+0x1>
    1844:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <seven_seg_cc>
    1848:	08 95       	ret

0000184a <new_game>:
}

void new_game(void)
{
	// Clear the serial terminal
	clear_terminal();
    184a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <clear_terminal>
	
	//reset number of points player has
	points = 0;
    184e:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <points+0x1>
    1852:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <points>
	combo_count = 0;
    1856:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <combo_count+0x1>
    185a:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <combo_count>
	
	//Start Game Countdown
	game_countdown();
    185e:	0e 94 26 0b 	call	0x164c	; 0x164c <game_countdown>
		
	// Initialize the game and display
	initialise_game();
    1862:	0e 94 66 04 	call	0x8cc	; 0x8cc <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    1866:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
	clear_serial_input_buffer();
    186a:	0e 94 0c 10 	call	0x2018	; 0x2018 <clear_serial_input_buffer>
    186e:	08 95       	ret

00001870 <play_game>:
}

void play_game(void)
{
    1870:	4f 92       	push	r4
    1872:	5f 92       	push	r5
    1874:	6f 92       	push	r6
    1876:	7f 92       	push	r7
    1878:	8f 92       	push	r8
    187a:	9f 92       	push	r9
    187c:	af 92       	push	r10
    187e:	bf 92       	push	r11
    1880:	cf 92       	push	r12
    1882:	df 92       	push	r13
    1884:	ef 92       	push	r14
    1886:	ff 92       	push	r15
    1888:	0f 93       	push	r16
    188a:	1f 93       	push	r17
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	00 d0       	rcall	.+0      	; 0x1892 <play_game+0x22>
    1892:	00 d0       	rcall	.+0      	; 0x1894 <play_game+0x24>
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
	
	int8_t btn; // The button pushed
	
	int combo_line = 0;
	
	last_advance_time = get_current_time();
    1898:	0e 94 30 11 	call	0x2260	; 0x2260 <get_current_time>
    189c:	2b 01       	movw	r4, r22
    189e:	3c 01       	movw	r6, r24
	
	//Display current track
	move_terminal_cursor(10, 15);
    18a0:	6f e0       	ldi	r22, 0x0F	; 15
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	8a e0       	ldi	r24, 0x0A	; 10
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	printf("Track: Through Fire & Flames");													//do %s and add a new track title at the end.
    18ac:	80 e1       	ldi	r24, 0x10	; 16
    18ae:	92 e0       	ldi	r25, 0x02	; 2
    18b0:	9f 93       	push	r25
    18b2:	8f 93       	push	r24
    18b4:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
	
	move_terminal_cursor(10, 18);
    18b8:	62 e1       	ldi	r22, 0x12	; 18
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	8a e0       	ldi	r24, 0x0A	; 10
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	clear_to_end_of_line();
    18c4:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <clear_to_end_of_line>
	//update terminal line appropriately
	if (game_speed == 1000) {
    18c8:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <game_speed>
    18cc:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <game_speed+0x1>
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	88 3e       	cpi	r24, 0xE8	; 232
    18d6:	23 e0       	ldi	r18, 0x03	; 3
    18d8:	92 07       	cpc	r25, r18
    18da:	69 f4       	brne	.+26     	; 0x18f6 <play_game+0x86>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    18dc:	9f 93       	push	r25
    18de:	8f 93       	push	r24
    18e0:	8d e2       	ldi	r24, 0x2D	; 45
    18e2:	92 e0       	ldi	r25, 0x02	; 2
    18e4:	9f 93       	push	r25
    18e6:	8f 93       	push	r24
    18e8:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	20 c0       	rjmp	.+64     	; 0x1936 <play_game+0xc6>
		
	} else if (game_speed == 500) {
    18f6:	84 3f       	cpi	r24, 0xF4	; 244
    18f8:	31 e0       	ldi	r19, 0x01	; 1
    18fa:	93 07       	cpc	r25, r19
    18fc:	69 f4       	brne	.+26     	; 0x1918 <play_game+0xa8>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    18fe:	9f 93       	push	r25
    1900:	8f 93       	push	r24
    1902:	83 e5       	ldi	r24, 0x53	; 83
    1904:	92 e0       	ldi	r25, 0x02	; 2
    1906:	9f 93       	push	r25
    1908:	8f 93       	push	r24
    190a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f c0       	rjmp	.+30     	; 0x1936 <play_game+0xc6>
		
	} else if (game_speed == 250) {
    1918:	8a 3f       	cpi	r24, 0xFA	; 250
    191a:	91 05       	cpc	r25, r1
    191c:	61 f4       	brne	.+24     	; 0x1936 <play_game+0xc6>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    191e:	9f 93       	push	r25
    1920:	8f 93       	push	r24
    1922:	87 e7       	ldi	r24, 0x77	; 119
    1924:	92 e0       	ldi	r25, 0x02	; 2
    1926:	9f 93       	push	r25
    1928:	8f 93       	push	r24
    192a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
		if (!man_mode & !paused) {
			current_time = get_current_time();
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
			{
				pause_time = 0;
    1936:	00 e0       	ldi	r16, 0x00	; 0
    1938:	10 e0       	ldi	r17, 0x00	; 0
    193a:	81 2c       	mov	r8, r1
    193c:	91 2c       	mov	r9, r1
    193e:	54 01       	movw	r10, r8
    1940:	f6 c1       	rjmp	.+1004   	; 0x1d2e <play_game+0x4be>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
    1942:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    1946:	89 83       	std	Y+1, r24	; 0x01
		
		char keyboard_input = -1;
		
		if (serial_input_available()) {
    1948:	0e 94 05 10 	call	0x200a	; 0x200a <serial_input_available>
    194c:	88 23       	and	r24, r24
    194e:	41 f0       	breq	.+16     	; 0x1960 <play_game+0xf0>
			keyboard_input = fgetc(stdin);
    1950:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <__iob>
    1954:	90 91 17 06 	lds	r25, 0x0617	; 0x800617 <__iob+0x1>
    1958:	0e 94 34 14 	call	0x2868	; 0x2868 <fgetc>
    195c:	f8 2e       	mov	r15, r24
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <play_game+0xf4>
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
		
		char keyboard_input = -1;
    1960:	ff 24       	eor	r15, r15
    1962:	fa 94       	dec	r15
		
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		if (!paused) {
    1964:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <paused>
    1968:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <paused+0x1>
    196c:	89 2b       	or	r24, r25
    196e:	99 f5       	brne	.+102    	; 0x19d6 <play_game+0x166>
			if ((btn == BUTTON0_PUSHED) || (keyboard_input == 'f' || keyboard_input == 'F')) {
    1970:	49 81       	ldd	r20, Y+1	; 0x01
    1972:	44 23       	and	r20, r20
    1974:	31 f0       	breq	.+12     	; 0x1982 <play_game+0x112>
    1976:	56 e6       	ldi	r21, 0x66	; 102
    1978:	f5 16       	cp	r15, r21
    197a:	19 f0       	breq	.+6      	; 0x1982 <play_game+0x112>
    197c:	86 e4       	ldi	r24, 0x46	; 70
    197e:	f8 12       	cpse	r15, r24
    1980:	04 c0       	rjmp	.+8      	; 0x198a <play_game+0x11a>
				// If button 0 play the lowest note (right lane)
				play_note(3);
    1982:	83 e0       	ldi	r24, 0x03	; 3
    1984:	0e 94 77 04 	call	0x8ee	; 0x8ee <play_note>
    1988:	26 c0       	rjmp	.+76     	; 0x19d6 <play_game+0x166>
		
			} else if ((btn == BUTTON1_PUSHED) || (keyboard_input == 'd' || keyboard_input == 'D')) {
    198a:	99 81       	ldd	r25, Y+1	; 0x01
    198c:	91 30       	cpi	r25, 0x01	; 1
    198e:	31 f0       	breq	.+12     	; 0x199c <play_game+0x12c>
    1990:	24 e6       	ldi	r18, 0x64	; 100
    1992:	f2 16       	cp	r15, r18
    1994:	19 f0       	breq	.+6      	; 0x199c <play_game+0x12c>
    1996:	34 e4       	ldi	r19, 0x44	; 68
    1998:	f3 12       	cpse	r15, r19
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <play_game+0x134>
				//If button 1 is pushed play the second lowest note
				play_note(2);		
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	0e 94 77 04 	call	0x8ee	; 0x8ee <play_note>
    19a2:	19 c0       	rjmp	.+50     	; 0x19d6 <play_game+0x166>
		
			} else if ((btn == BUTTON2_PUSHED) || (keyboard_input == 's' || keyboard_input == 'S')) {
    19a4:	49 81       	ldd	r20, Y+1	; 0x01
    19a6:	42 30       	cpi	r20, 0x02	; 2
    19a8:	31 f0       	breq	.+12     	; 0x19b6 <play_game+0x146>
    19aa:	53 e7       	ldi	r21, 0x73	; 115
    19ac:	f5 16       	cp	r15, r21
    19ae:	19 f0       	breq	.+6      	; 0x19b6 <play_game+0x146>
    19b0:	83 e5       	ldi	r24, 0x53	; 83
    19b2:	f8 12       	cpse	r15, r24
    19b4:	04 c0       	rjmp	.+8      	; 0x19be <play_game+0x14e>
				//If button 2 is pushed play the second highest note
				play_note(1); 
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	0e 94 77 04 	call	0x8ee	; 0x8ee <play_note>
    19bc:	0c c0       	rjmp	.+24     	; 0x19d6 <play_game+0x166>
				
			} else if ((btn == BUTTON3_PUSHED) || (keyboard_input == 'a' || keyboard_input == 'A')) {
    19be:	99 81       	ldd	r25, Y+1	; 0x01
    19c0:	93 30       	cpi	r25, 0x03	; 3
    19c2:	31 f0       	breq	.+12     	; 0x19d0 <play_game+0x160>
    19c4:	21 e6       	ldi	r18, 0x61	; 97
    19c6:	f2 16       	cp	r15, r18
    19c8:	19 f0       	breq	.+6      	; 0x19d0 <play_game+0x160>
    19ca:	31 e4       	ldi	r19, 0x41	; 65
    19cc:	f3 12       	cpse	r15, r19
    19ce:	03 c0       	rjmp	.+6      	; 0x19d6 <play_game+0x166>
				//If button 3 is pushed play the highest note
				play_note(0);
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	0e 94 77 04 	call	0x8ee	; 0x8ee <play_note>
			
			} 
		}
		
		if (keyboard_input == 'm' || keyboard_input == 'M') {
    19d6:	4d e6       	ldi	r20, 0x6D	; 109
    19d8:	f4 16       	cp	r15, r20
    19da:	19 f0       	breq	.+6      	; 0x19e2 <play_game+0x172>
    19dc:	5d e4       	ldi	r21, 0x4D	; 77
    19de:	f5 12       	cpse	r15, r21
    19e0:	27 c0       	rjmp	.+78     	; 0x1a30 <play_game+0x1c0>
			//check to see if the game is currently paused
			if (!paused) {
    19e2:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <paused>
    19e6:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <paused+0x1>
    19ea:	89 2b       	or	r24, r25
    19ec:	09 f5       	brne	.+66     	; 0x1a30 <play_game+0x1c0>
				//clear manual mode alert
				move_terminal_cursor(10, 16);
    19ee:	60 e1       	ldi	r22, 0x10	; 16
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	8a e0       	ldi	r24, 0x0A	; 10
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
				clear_to_end_of_line();
    19fa:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <clear_to_end_of_line>
				if (man_mode) {
    19fe:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <man_mode>
    1a02:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <man_mode+0x1>
    1a06:	89 2b       	or	r24, r25
    1a08:	29 f0       	breq	.+10     	; 0x1a14 <play_game+0x1a4>
					man_mode = 0;
    1a0a:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <man_mode+0x1>
    1a0e:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <man_mode>
    1a12:	0e c0       	rjmp	.+28     	; 0x1a30 <play_game+0x1c0>
		
				} else {
					man_mode = 1;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <man_mode+0x1>
    1a1c:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <man_mode>
					
					//print to terminal that manual mode is on
					printf("Manual Mode: ON");
    1a20:	8e e9       	ldi	r24, 0x9E	; 158
    1a22:	92 e0       	ldi	r25, 0x02	; 2
    1a24:	9f 93       	push	r25
    1a26:	8f 93       	push	r24
    1a28:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
				}
			}	
		}
		
		if (keyboard_input == 'p' || keyboard_input == 'P') {
    1a30:	80 e7       	ldi	r24, 0x70	; 112
    1a32:	f8 16       	cp	r15, r24
    1a34:	19 f0       	breq	.+6      	; 0x1a3c <play_game+0x1cc>
    1a36:	90 e5       	ldi	r25, 0x50	; 80
    1a38:	f9 12       	cpse	r15, r25
    1a3a:	3b c0       	rjmp	.+118    	; 0x1ab2 <play_game+0x242>
			//clear pause line in terminal
			move_terminal_cursor(10, 17);
    1a3c:	61 e1       	ldi	r22, 0x11	; 17
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	8a e0       	ldi	r24, 0x0A	; 10
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
			clear_to_end_of_line();
    1a48:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <clear_to_end_of_line>
			if (paused) {
    1a4c:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <paused>
    1a50:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <paused+0x1>
    1a54:	89 2b       	or	r24, r25
    1a56:	71 f0       	breq	.+28     	; 0x1a74 <play_game+0x204>
				paused = 0;
    1a58:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <paused+0x1>
    1a5c:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <paused>
				PORTD = PORTD & 0b11110111;
    1a60:	8b b1       	in	r24, 0x0b	; 11
    1a62:	87 7f       	andi	r24, 0xF7	; 247
    1a64:	8b b9       	out	0x0b, r24	; 11
				
				//un-pause sound
				pause_control(paused);
    1a66:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <paused>
    1a6a:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <paused+0x1>
    1a6e:	0e 94 da 11 	call	0x23b4	; 0x23b4 <pause_control>
    1a72:	1f c0       	rjmp	.+62     	; 0x1ab2 <play_game+0x242>
			
			} else {
				paused = 1;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <paused+0x1>
    1a7c:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <paused>
				pause_time = get_current_time() - last_advance_time; 
    1a80:	0e 94 30 11 	call	0x2260	; 0x2260 <get_current_time>
    1a84:	4b 01       	movw	r8, r22
    1a86:	5c 01       	movw	r10, r24
    1a88:	84 18       	sub	r8, r4
    1a8a:	95 08       	sbc	r9, r5
    1a8c:	a6 08       	sbc	r10, r6
    1a8e:	b7 08       	sbc	r11, r7
					
				PORTD = PORTD | (1<<3); //essentially just PORTD | 0b00001000
    1a90:	8b b1       	in	r24, 0x0b	; 11
    1a92:	88 60       	ori	r24, 0x08	; 8
    1a94:	8b b9       	out	0x0b, r24	; 11
									
				//pause the sound
				pause_control(paused);
    1a96:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <paused>
    1a9a:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <paused+0x1>
    1a9e:	0e 94 da 11 	call	0x23b4	; 0x23b4 <pause_control>
					
				//tell user that game is currently paused
				printf("Game Paused");
    1aa2:	8e ea       	ldi	r24, 0xAE	; 174
    1aa4:	92 e0       	ldi	r25, 0x02	; 2
    1aa6:	9f 93       	push	r25
    1aa8:	8f 93       	push	r24
    1aaa:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
			}
				
		}
		
		//Combo IO board LED's
		if (combo_count == 0) {
    1ab2:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <combo_count>
    1ab6:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <combo_count+0x1>
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	21 f4       	brne	.+8      	; 0x1ac6 <play_game+0x256>
			//set portD outputs to the I/O boards LED matrix to be 0
			PORTD = PORTD & 0b00011111;
    1abe:	8b b1       	in	r24, 0x0b	; 11
    1ac0:	8f 71       	andi	r24, 0x1F	; 31
    1ac2:	8b b9       	out	0x0b, r24	; 11
    1ac4:	13 c0       	rjmp	.+38     	; 0x1aec <play_game+0x27c>

		} else if (combo_count == 1) {
    1ac6:	81 30       	cpi	r24, 0x01	; 1
    1ac8:	91 05       	cpc	r25, r1
    1aca:	21 f4       	brne	.+8      	; 0x1ad4 <play_game+0x264>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<5); 
    1acc:	8b b1       	in	r24, 0x0b	; 11
    1ace:	80 62       	ori	r24, 0x20	; 32
    1ad0:	8b b9       	out	0x0b, r24	; 11
    1ad2:	0c c0       	rjmp	.+24     	; 0x1aec <play_game+0x27c>
			
		} else if (combo_count == 2) {
    1ad4:	82 30       	cpi	r24, 0x02	; 2
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	21 f4       	brne	.+8      	; 0x1ae2 <play_game+0x272>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<6);
    1ada:	8b b1       	in	r24, 0x0b	; 11
    1adc:	80 64       	ori	r24, 0x40	; 64
    1ade:	8b b9       	out	0x0b, r24	; 11
    1ae0:	05 c0       	rjmp	.+10     	; 0x1aec <play_game+0x27c>
			
		} else if (combo_count >= 3) {
    1ae2:	03 97       	sbiw	r24, 0x03	; 3
    1ae4:	1c f0       	brlt	.+6      	; 0x1aec <play_game+0x27c>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<7);
    1ae6:	8b b1       	in	r24, 0x0b	; 11
    1ae8:	80 68       	ori	r24, 0x80	; 128
    1aea:	8b b9       	out	0x0b, r24	; 11
		}
		
		//Combo display
		if ((combo_check) && (combo_line == 0)) {
    1aec:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <combo_check>
    1af0:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <combo_check+0x1>
    1af4:	89 2b       	or	r24, r25
    1af6:	a1 f0       	breq	.+40     	; 0x1b20 <play_game+0x2b0>
    1af8:	01 15       	cp	r16, r1
    1afa:	11 05       	cpc	r17, r1
    1afc:	89 f4       	brne	.+34     	; 0x1b20 <play_game+0x2b0>
			move_terminal_cursor(10, 3);
    1afe:	63 e0       	ldi	r22, 0x03	; 3
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	8a e0       	ldi	r24, 0x0A	; 10
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
			printf("  ______                           __                  __");
    1b0a:	8a eb       	ldi	r24, 0xBA	; 186
    1b0c:	92 e0       	ldi	r25, 0x02	; 2
    1b0e:	9f 93       	push	r25
    1b10:	8f 93       	push	r24
    1b12:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
			
			combo_line++; //increment combo line so in next loop the next line is printed of ascii art
    1b16:	0f 5f       	subi	r16, 0xFF	; 255
    1b18:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	9f c0       	rjmp	.+318    	; 0x1c5e <play_game+0x3ee>
		} else if (combo_line == 1) {
    1b20:	01 30       	cpi	r16, 0x01	; 1
    1b22:	11 05       	cpc	r17, r1
    1b24:	89 f4       	brne	.+34     	; 0x1b48 <play_game+0x2d8>
			move_terminal_cursor(10,4);
    1b26:	64 e0       	ldi	r22, 0x04	; 4
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	8a e0       	ldi	r24, 0x0A	; 10
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
			printf(" /      \\                         |  \\                |  \\");
    1b32:	84 ef       	ldi	r24, 0xF4	; 244
    1b34:	92 e0       	ldi	r25, 0x02	; 2
    1b36:	9f 93       	push	r25
    1b38:	8f 93       	push	r24
    1b3a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
			
			combo_line++;
    1b3e:	0f 5f       	subi	r16, 0xFF	; 255
    1b40:	1f 4f       	sbci	r17, 0xFF	; 255
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	8b c0       	rjmp	.+278    	; 0x1c5e <play_game+0x3ee>
		} else if (combo_line == 2) {
    1b48:	02 30       	cpi	r16, 0x02	; 2
    1b4a:	11 05       	cpc	r17, r1
    1b4c:	89 f4       	brne	.+34     	; 0x1b70 <play_game+0x300>
			move_terminal_cursor(10,5);
    1b4e:	65 e0       	ldi	r22, 0x05	; 5
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	8a e0       	ldi	r24, 0x0A	; 10
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
			printf("|  $$$$$$\\  ______   ______ ____  | $$____    ______  | $$");
    1b5a:	8f e2       	ldi	r24, 0x2F	; 47
    1b5c:	93 e0       	ldi	r25, 0x03	; 3
    1b5e:	9f 93       	push	r25
    1b60:	8f 93       	push	r24
    1b62:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
			
			combo_line++;
    1b66:	0f 5f       	subi	r16, 0xFF	; 255
    1b68:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	77 c0       	rjmp	.+238    	; 0x1c5e <play_game+0x3ee>
		} else if (combo_line == 3) {
    1b70:	03 30       	cpi	r16, 0x03	; 3
    1b72:	11 05       	cpc	r17, r1
    1b74:	89 f4       	brne	.+34     	; 0x1b98 <play_game+0x328>
			move_terminal_cursor(10,6);
    1b76:	66 e0       	ldi	r22, 0x06	; 6
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	8a e0       	ldi	r24, 0x0A	; 10
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
			printf("| $$   \\$$ /      \\ |      \\    \\ | $$    \\  /      \\ | $$");
    1b82:	8a e6       	ldi	r24, 0x6A	; 106
    1b84:	93 e0       	ldi	r25, 0x03	; 3
    1b86:	9f 93       	push	r25
    1b88:	8f 93       	push	r24
    1b8a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
			
			combo_line++;
    1b8e:	0f 5f       	subi	r16, 0xFF	; 255
    1b90:	1f 4f       	sbci	r17, 0xFF	; 255
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	63 c0       	rjmp	.+198    	; 0x1c5e <play_game+0x3ee>
		} else if (combo_line == 4) {
    1b98:	04 30       	cpi	r16, 0x04	; 4
    1b9a:	11 05       	cpc	r17, r1
    1b9c:	89 f4       	brne	.+34     	; 0x1bc0 <play_game+0x350>
			move_terminal_cursor(10,7);
    1b9e:	67 e0       	ldi	r22, 0x07	; 7
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	8a e0       	ldi	r24, 0x0A	; 10
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
			printf("| $$      |  $$$$$$\\| $$$$$$\\$$$$\\| $$$$$$$\\|  $$$$$$\\| $$");
    1baa:	85 ea       	ldi	r24, 0xA5	; 165
    1bac:	93 e0       	ldi	r25, 0x03	; 3
    1bae:	9f 93       	push	r25
    1bb0:	8f 93       	push	r24
    1bb2:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
			
			combo_line++;
    1bb6:	0f 5f       	subi	r16, 0xFF	; 255
    1bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	4f c0       	rjmp	.+158    	; 0x1c5e <play_game+0x3ee>
		}  else if (combo_line == 5) {
    1bc0:	05 30       	cpi	r16, 0x05	; 5
    1bc2:	11 05       	cpc	r17, r1
    1bc4:	89 f4       	brne	.+34     	; 0x1be8 <play_game+0x378>
			move_terminal_cursor(10,8);
    1bc6:	68 e0       	ldi	r22, 0x08	; 8
    1bc8:	70 e0       	ldi	r23, 0x00	; 0
    1bca:	8a e0       	ldi	r24, 0x0A	; 10
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
			printf("| $$   __ | $$  | $$| $$ | $$ | $$| $$  | $$| $$  | $$ \\$$");
    1bd2:	80 ee       	ldi	r24, 0xE0	; 224
    1bd4:	93 e0       	ldi	r25, 0x03	; 3
    1bd6:	9f 93       	push	r25
    1bd8:	8f 93       	push	r24
    1bda:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
			
			combo_line++;
    1bde:	0f 5f       	subi	r16, 0xFF	; 255
    1be0:	1f 4f       	sbci	r17, 0xFF	; 255
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	3b c0       	rjmp	.+118    	; 0x1c5e <play_game+0x3ee>
		} else if (combo_line == 6) {
    1be8:	06 30       	cpi	r16, 0x06	; 6
    1bea:	11 05       	cpc	r17, r1
    1bec:	89 f4       	brne	.+34     	; 0x1c10 <play_game+0x3a0>
			move_terminal_cursor(10,9);
    1bee:	69 e0       	ldi	r22, 0x09	; 9
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	8a e0       	ldi	r24, 0x0A	; 10
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
			printf("| $$__/  \\| $$__/ $$| $$ | $$ | $$| $$__/ $$| $$__/ $$ __");
    1bfa:	8b e1       	ldi	r24, 0x1B	; 27
    1bfc:	94 e0       	ldi	r25, 0x04	; 4
    1bfe:	9f 93       	push	r25
    1c00:	8f 93       	push	r24
    1c02:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
			
			combo_line++;
    1c06:	0f 5f       	subi	r16, 0xFF	; 255
    1c08:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	27 c0       	rjmp	.+78     	; 0x1c5e <play_game+0x3ee>
		} else if (combo_line == 7) {
    1c10:	07 30       	cpi	r16, 0x07	; 7
    1c12:	11 05       	cpc	r17, r1
    1c14:	89 f4       	brne	.+34     	; 0x1c38 <play_game+0x3c8>
			move_terminal_cursor(10,10);
    1c16:	6a e0       	ldi	r22, 0x0A	; 10
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	8a e0       	ldi	r24, 0x0A	; 10
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
			printf(" \\$$    $$ \\$$    $$| $$ | $$ | $$| $$    $$ \\$$    $$|  \\");
    1c22:	85 e5       	ldi	r24, 0x55	; 85
    1c24:	94 e0       	ldi	r25, 0x04	; 4
    1c26:	9f 93       	push	r25
    1c28:	8f 93       	push	r24
    1c2a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
			
			combo_line++;
    1c2e:	0f 5f       	subi	r16, 0xFF	; 255
    1c30:	1f 4f       	sbci	r17, 0xFF	; 255
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	13 c0       	rjmp	.+38     	; 0x1c5e <play_game+0x3ee>
		} else if (combo_line == 8) {
    1c38:	08 30       	cpi	r16, 0x08	; 8
    1c3a:	11 05       	cpc	r17, r1
    1c3c:	81 f4       	brne	.+32     	; 0x1c5e <play_game+0x3ee>
			move_terminal_cursor(10,11);
    1c3e:	6b e0       	ldi	r22, 0x0B	; 11
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	8a e0       	ldi	r24, 0x0A	; 10
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
			printf("  \\$$$$$$   \\$$$$$$  \\$$  \\$$  \\$$ \\$$$$$$$   \\$$$$$$  \\$$");
    1c4a:	80 e9       	ldi	r24, 0x90	; 144
    1c4c:	94 e0       	ldi	r25, 0x04	; 4
    1c4e:	9f 93       	push	r25
    1c50:	8f 93       	push	r24
    1c52:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
			
			combo_line = 0;
    1c5a:	00 e0       	ldi	r16, 0x00	; 0
    1c5c:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		if (!combo_check) {
    1c5e:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <combo_check>
    1c62:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <combo_check+0x1>
    1c66:	89 2b       	or	r24, r25
    1c68:	81 f0       	breq	.+32     	; 0x1c8a <play_game+0x41a>
    1c6a:	17 c0       	rjmp	.+46     	; 0x1c9a <play_game+0x42a>
			for (int term_line = 3; term_line < 12; term_line++) {
				move_terminal_cursor(10, term_line);
    1c6c:	69 81       	ldd	r22, Y+1	; 0x01
    1c6e:	7a 81       	ldd	r23, Y+2	; 0x02
    1c70:	8a e0       	ldi	r24, 0x0A	; 10
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
				clear_to_end_of_line();
    1c78:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <clear_to_end_of_line>
			
			combo_line = 0;
		}
		
		if (!combo_check) {
			for (int term_line = 3; term_line < 12; term_line++) {
    1c7c:	29 81       	ldd	r18, Y+1	; 0x01
    1c7e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c80:	2f 5f       	subi	r18, 0xFF	; 255
    1c82:	3f 4f       	sbci	r19, 0xFF	; 255
    1c84:	3a 83       	std	Y+2, r19	; 0x02
    1c86:	29 83       	std	Y+1, r18	; 0x01
    1c88:	04 c0       	rjmp	.+8      	; 0x1c92 <play_game+0x422>
    1c8a:	43 e0       	ldi	r20, 0x03	; 3
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	5a 83       	std	Y+2, r21	; 0x02
    1c90:	49 83       	std	Y+1, r20	; 0x01
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	9a 81       	ldd	r25, Y+2	; 0x02
    1c96:	0c 97       	sbiw	r24, 0x0c	; 12
    1c98:	4c f3       	brlt	.-46     	; 0x1c6c <play_game+0x3fc>
				
			}
		}
		

		if (!man_mode & !paused) {
    1c9a:	20 91 e7 04 	lds	r18, 0x04E7	; 0x8004e7 <man_mode>
    1c9e:	30 91 e8 04 	lds	r19, 0x04E8	; 0x8004e8 <man_mode+0x1>
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	40 91 e5 04 	lds	r20, 0x04E5	; 0x8004e5 <paused>
    1ca8:	50 91 e6 04 	lds	r21, 0x04E6	; 0x8004e6 <paused+0x1>
    1cac:	45 2b       	or	r20, r21
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <play_game+0x442>
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	21 15       	cp	r18, r1
    1cb6:	31 05       	cpc	r19, r1
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <play_game+0x44c>
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	89 23       	and	r24, r25
    1cbe:	69 f1       	breq	.+90     	; 0x1d1a <play_game+0x4aa>
			current_time = get_current_time();
    1cc0:	0e 94 30 11 	call	0x2260	; 0x2260 <get_current_time>
    1cc4:	69 83       	std	Y+1, r22	; 0x01
    1cc6:	7a 83       	std	Y+2, r23	; 0x02
    1cc8:	8b 83       	std	Y+3, r24	; 0x03
    1cca:	9c 83       	std	Y+4, r25	; 0x04
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
    1ccc:	6b 01       	movw	r12, r22
    1cce:	7c 01       	movw	r14, r24
    1cd0:	c8 18       	sub	r12, r8
    1cd2:	d9 08       	sbc	r13, r9
    1cd4:	ea 08       	sbc	r14, r10
    1cd6:	fb 08       	sbc	r15, r11
    1cd8:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <game_speed>
    1cdc:	30 91 01 05 	lds	r19, 0x0501	; 0x800501 <game_speed+0x1>
    1ce0:	ad ec       	ldi	r26, 0xCD	; 205
    1ce2:	bc ec       	ldi	r27, 0xCC	; 204
    1ce4:	0e 94 11 14 	call	0x2822	; 0x2822 <__umulhisi3>
    1ce8:	96 95       	lsr	r25
    1cea:	87 95       	ror	r24
    1cec:	96 95       	lsr	r25
    1cee:	87 95       	ror	r24
    1cf0:	a3 01       	movw	r20, r6
    1cf2:	92 01       	movw	r18, r4
    1cf4:	28 0f       	add	r18, r24
    1cf6:	39 1f       	adc	r19, r25
    1cf8:	41 1d       	adc	r20, r1
    1cfa:	51 1d       	adc	r21, r1
    1cfc:	c2 16       	cp	r12, r18
    1cfe:	d3 06       	cpc	r13, r19
    1d00:	e4 06       	cpc	r14, r20
    1d02:	f5 06       	cpc	r15, r21
    1d04:	a0 f0       	brcs	.+40     	; 0x1d2e <play_game+0x4be>
			{
				pause_time = 0;
				// 200ms (0.2 second) has passed since the last time we advance the
				// notes here, so update the advance the notes
				advance_note();
    1d06:	0e 94 43 05 	call	0xa86	; 0xa86 <advance_note>
				
				// Update the most recent time the notes were advanced
				last_advance_time = current_time;
    1d0a:	49 80       	ldd	r4, Y+1	; 0x01
    1d0c:	5a 80       	ldd	r5, Y+2	; 0x02
    1d0e:	6b 80       	ldd	r6, Y+3	; 0x03
    1d10:	7c 80       	ldd	r7, Y+4	; 0x04
		if (!man_mode & !paused) {
			current_time = get_current_time();
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
			{
				pause_time = 0;
    1d12:	81 2c       	mov	r8, r1
    1d14:	91 2c       	mov	r9, r1
    1d16:	54 01       	movw	r10, r8
    1d18:	0a c0       	rjmp	.+20     	; 0x1d2e <play_game+0x4be>
				
				// Update the most recent time the notes were advanced
				last_advance_time = current_time;
			}
			
		} else if (man_mode) {
    1d1a:	23 2b       	or	r18, r19
    1d1c:	41 f0       	breq	.+16     	; 0x1d2e <play_game+0x4be>
			if (keyboard_input == 'n' || keyboard_input == 'N') {
    1d1e:	3e e6       	ldi	r19, 0x6E	; 110
    1d20:	f3 16       	cp	r15, r19
    1d22:	19 f0       	breq	.+6      	; 0x1d2a <play_game+0x4ba>
    1d24:	4e e4       	ldi	r20, 0x4E	; 78
    1d26:	f4 12       	cpse	r15, r20
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <play_game+0x4be>
				advance_note();
    1d2a:	0e 94 43 05 	call	0xa86	; 0xa86 <advance_note>
	} else if (game_speed == 250) {
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
	}
	
	// We play the game until it's over
	while (!is_game_over())
    1d2e:	0e 94 6b 07 	call	0xed6	; 0xed6 <is_game_over>
    1d32:	88 23       	and	r24, r24
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <play_game+0x4c8>
    1d36:	05 ce       	rjmp	.-1014   	; 0x1942 <play_game+0xd2>
				advance_note();
				
			}
		}
	}
}
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	1f 91       	pop	r17
    1d46:	0f 91       	pop	r16
    1d48:	ff 90       	pop	r15
    1d4a:	ef 90       	pop	r14
    1d4c:	df 90       	pop	r13
    1d4e:	cf 90       	pop	r12
    1d50:	bf 90       	pop	r11
    1d52:	af 90       	pop	r10
    1d54:	9f 90       	pop	r9
    1d56:	8f 90       	pop	r8
    1d58:	7f 90       	pop	r7
    1d5a:	6f 90       	pop	r6
    1d5c:	5f 90       	pop	r5
    1d5e:	4f 90       	pop	r4
    1d60:	08 95       	ret

00001d62 <handle_game_over>:

void handle_game_over()
{
	clear_terminal();
    1d62:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <clear_terminal>
	move_terminal_cursor(10,13);
    1d66:	6d e0       	ldi	r22, 0x0D	; 13
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	8a e0       	ldi	r24, 0x0A	; 10
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    1d72:	8a ea       	ldi	r24, 0xAA	; 170
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	9f 93       	push	r25
    1d78:	8f 93       	push	r24
    1d7a:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
	move_terminal_cursor(10,14);
    1d7e:	6e e0       	ldi	r22, 0x0E	; 14
    1d80:	70 e0       	ldi	r23, 0x00	; 0
    1d82:	8a e0       	ldi	r24, 0x0A	; 10
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	printf("Final Score: %d\n", points);
    1d8a:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <points+0x1>
    1d8e:	8f 93       	push	r24
    1d90:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <points>
    1d94:	8f 93       	push	r24
    1d96:	8b ec       	ldi	r24, 0xCB	; 203
    1d98:	94 e0       	ldi	r25, 0x04	; 4
    1d9a:	9f 93       	push	r25
    1d9c:	8f 93       	push	r24
    1d9e:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
	//Display current track
	move_terminal_cursor(10, 15);
    1da2:	6f e0       	ldi	r22, 0x0F	; 15
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	8a e0       	ldi	r24, 0x0A	; 10
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	printf("Track: Through Fire & Flames");														//do %s and add a new track title at the end.
    1dae:	80 e1       	ldi	r24, 0x10	; 16
    1db0:	92 e0       	ldi	r25, 0x02	; 2
    1db2:	9f 93       	push	r25
    1db4:	8f 93       	push	r24
    1db6:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
	move_terminal_cursor(10, 16);
    1dba:	60 e1       	ldi	r22, 0x10	; 16
    1dbc:	70 e0       	ldi	r23, 0x00	; 0
    1dbe:	8a e0       	ldi	r24, 0x0A	; 10
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	clear_to_end_of_line();
    1dc6:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <clear_to_end_of_line>
	//display game sped
	if (game_speed == 1000) {
    1dca:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <game_speed>
    1dce:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <game_speed+0x1>
    1dd2:	2d b7       	in	r18, 0x3d	; 61
    1dd4:	3e b7       	in	r19, 0x3e	; 62
    1dd6:	28 5f       	subi	r18, 0xF8	; 248
    1dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	3e bf       	out	0x3e, r19	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	2d bf       	out	0x3d, r18	; 61
    1de4:	88 3e       	cpi	r24, 0xE8	; 232
    1de6:	33 e0       	ldi	r19, 0x03	; 3
    1de8:	93 07       	cpc	r25, r19
    1dea:	69 f4       	brne	.+26     	; 0x1e06 <handle_game_over+0xa4>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    1dec:	9f 93       	push	r25
    1dee:	8f 93       	push	r24
    1df0:	8d e2       	ldi	r24, 0x2D	; 45
    1df2:	92 e0       	ldi	r25, 0x02	; 2
    1df4:	9f 93       	push	r25
    1df6:	8f 93       	push	r24
    1df8:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	20 c0       	rjmp	.+64     	; 0x1e46 <handle_game_over+0xe4>
		
		} else if (game_speed == 500) {
    1e06:	84 3f       	cpi	r24, 0xF4	; 244
    1e08:	21 e0       	ldi	r18, 0x01	; 1
    1e0a:	92 07       	cpc	r25, r18
    1e0c:	69 f4       	brne	.+26     	; 0x1e28 <handle_game_over+0xc6>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1e0e:	9f 93       	push	r25
    1e10:	8f 93       	push	r24
    1e12:	83 e5       	ldi	r24, 0x53	; 83
    1e14:	92 e0       	ldi	r25, 0x02	; 2
    1e16:	9f 93       	push	r25
    1e18:	8f 93       	push	r24
    1e1a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	0f c0       	rjmp	.+30     	; 0x1e46 <handle_game_over+0xe4>
		
		} else if (game_speed == 250) {
    1e28:	8a 3f       	cpi	r24, 0xFA	; 250
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	61 f4       	brne	.+24     	; 0x1e46 <handle_game_over+0xe4>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1e2e:	9f 93       	push	r25
    1e30:	8f 93       	push	r24
    1e32:	87 e7       	ldi	r24, 0x77	; 119
    1e34:	92 e0       	ldi	r25, 0x02	; 2
    1e36:	9f 93       	push	r25
    1e38:	8f 93       	push	r24
    1e3a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <printf>
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
	}
	
	move_terminal_cursor(10, 17);
    1e46:	61 e1       	ldi	r22, 0x11	; 17
    1e48:	70 e0       	ldi	r23, 0x00	; 0
    1e4a:	8a e0       	ldi	r24, 0x0A	; 10
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
    1e52:	8c e7       	ldi	r24, 0x7C	; 124
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9f 93       	push	r25
    1e58:	8f 93       	push	r24
    1e5a:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	10 c0       	rjmp	.+32     	; 0x1e84 <handle_game_over+0x122>
	{
		char keyboard_input = -1;
				
		if (serial_input_available()) {
    1e64:	0e 94 05 10 	call	0x200a	; 0x200a <serial_input_available>
    1e68:	88 23       	and	r24, r24
    1e6a:	39 f0       	breq	.+14     	; 0x1e7a <handle_game_over+0x118>
			keyboard_input = fgetc(stdin);
    1e6c:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <__iob>
    1e70:	90 91 17 06 	lds	r25, 0x0617	; 0x800617 <__iob+0x1>
    1e74:	0e 94 34 14 	call	0x2868	; 0x2868 <fgetc>
    1e78:	01 c0       	rjmp	.+2      	; 0x1e7c <handle_game_over+0x11a>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
	{
		char keyboard_input = -1;
    1e7a:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		//check if the user presses s
		if (keyboard_input == 's' || keyboard_input == 'S') {
    1e7c:	83 37       	cpi	r24, 0x73	; 115
    1e7e:	31 f0       	breq	.+12     	; 0x1e8c <handle_game_over+0x12a>
    1e80:	83 35       	cpi	r24, 0x53	; 83
    1e82:	21 f0       	breq	.+8      	; 0x1e8c <handle_game_over+0x12a>
	move_terminal_cursor(10, 17);
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    1e84:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    1e88:	8f 3f       	cpi	r24, 0xFF	; 255
    1e8a:	61 f3       	breq	.-40     	; 0x1e64 <handle_game_over+0x102>
		if (keyboard_input == 's' || keyboard_input == 'S') {
			break;
		}
	}	
	
	start_screen();
    1e8c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <start_screen>
    1e90:	08 95       	ret

00001e92 <main>:
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1e92:	0e 94 b7 07 	call	0xf6e	; 0xf6e <initialise_hardware>
	
	points = 0;
    1e96:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <points+0x1>
    1e9a:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <points>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
    1e9e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <start_screen>
	
	// Loop forever and continuously play the game.
	while(1)
	{
		new_game();
    1ea2:	0e 94 25 0c 	call	0x184a	; 0x184a <new_game>
		play_game();
    1ea6:	0e 94 38 0c 	call	0x1870	; 0x1870 <play_game>
		handle_game_over();
    1eaa:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <handle_game_over>
    1eae:	f9 cf       	rjmp	.-14     	; 0x1ea2 <main+0x10>

00001eb0 <uart_put_char>:
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream)
{
    1eb0:	cf 93       	push	r28
    1eb2:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n')
    1eb4:	8a 30       	cpi	r24, 0x0A	; 10
    1eb6:	19 f4       	brne	.+6      	; 0x1ebe <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
    1eb8:	8d e0       	ldi	r24, 0x0D	; 13
    1eba:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1ebe:	9f b7       	in	r25, 0x3f	; 63
    1ec0:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
    1ec4:	99 23       	and	r25, r25
    1ec6:	29 f1       	breq	.+74     	; 0x1f12 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1ec8:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <bytes_in_out_buffer>
    1ecc:	8f 3f       	cpi	r24, 0xFF	; 255
    1ece:	d1 f3       	breq	.-12     	; 0x1ec4 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1ed0:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1ed2:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <out_insert_pos>
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	8e 0f       	add	r24, r30
    1eda:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <out_insert_pos>
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	ec 5f       	subi	r30, 0xFC	; 252
    1ee2:	fa 4f       	sbci	r31, 0xFA	; 250
    1ee4:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1ee6:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <bytes_in_out_buffer>
    1eea:	8f 5f       	subi	r24, 0xFF	; 255
    1eec:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
    1ef0:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <out_insert_pos>
    1ef4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ef6:	11 f4       	brne	.+4      	; 0x1efc <uart_put_char+0x4c>
	{
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1ef8:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1efc:	e1 ec       	ldi	r30, 0xC1	; 193
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	80 62       	ori	r24, 0x20	; 32
    1f04:	80 83       	st	Z, r24
	if (interrupts_enabled)
    1f06:	99 23       	and	r25, r25
    1f08:	39 f0       	breq	.+14     	; 0x1f18 <uart_put_char+0x68>
	{
		sei();
    1f0a:	78 94       	sei
	}
	return 0;
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	05 c0       	rjmp	.+10     	; 0x1f1c <uart_put_char+0x6c>
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
}
    1f1c:	cf 91       	pop	r28
    1f1e:	08 95       	ret

00001f20 <uart_get_char>:

int uart_get_char(FILE* stream)
{
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0)
    1f20:	80 91 15 06 	lds	r24, 0x0615	; 0x800615 <bytes_in_input_buffer>
    1f24:	88 23       	and	r24, r24
    1f26:	e1 f3       	breq	.-8      	; 0x1f20 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1f28:	2f b7       	in	r18, 0x3f	; 63
    1f2a:	20 78       	andi	r18, 0x80	; 128
	cli();
    1f2c:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
    1f2e:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <input_insert_pos>
    1f32:	30 91 15 06 	lds	r19, 0x0615	; 0x800615 <bytes_in_input_buffer>
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	83 1b       	sub	r24, r19
    1f3a:	91 09       	sbc	r25, r1
    1f3c:	5a f4       	brpl	.+22     	; 0x1f54 <uart_get_char+0x34>
	{
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1f3e:	e0 91 03 06 	lds	r30, 0x0603	; 0x800603 <input_insert_pos>
    1f42:	80 91 15 06 	lds	r24, 0x0615	; 0x800615 <bytes_in_input_buffer>
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	e8 1b       	sub	r30, r24
    1f4a:	f1 09       	sbc	r31, r1
    1f4c:	ec 5e       	subi	r30, 0xEC	; 236
    1f4e:	f9 4f       	sbci	r31, 0xF9	; 249
    1f50:	80 81       	ld	r24, Z
    1f52:	0a c0       	rjmp	.+20     	; 0x1f68 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1f54:	e0 91 03 06 	lds	r30, 0x0603	; 0x800603 <input_insert_pos>
    1f58:	80 91 15 06 	lds	r24, 0x0615	; 0x800615 <bytes_in_input_buffer>
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	e8 1b       	sub	r30, r24
    1f60:	f1 09       	sbc	r31, r1
    1f62:	ec 5f       	subi	r30, 0xFC	; 252
    1f64:	f9 4f       	sbci	r31, 0xF9	; 249
    1f66:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1f68:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <bytes_in_input_buffer>
    1f6c:	91 50       	subi	r25, 0x01	; 1
    1f6e:	90 93 15 06 	sts	0x0615, r25	; 0x800615 <bytes_in_input_buffer>
	if (interrupts_enabled)
    1f72:	22 23       	and	r18, r18
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <uart_get_char+0x58>
	{
		sei();
    1f76:	78 94       	sei
	}	
	return c;
}
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	08 95       	ret

00001f7c <init_serial_stdio>:
{
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1f7c:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1f80:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1f84:	10 92 03 06 	sts	0x0603, r1	; 0x800603 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1f88:	10 92 15 06 	sts	0x0615, r1	; 0x800615 <bytes_in_input_buffer>
	input_overrun = 0;
    1f8c:	10 92 14 06 	sts	0x0614, r1	; 0x800614 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1f90:	40 93 e9 04 	sts	0x04E9, r20	; 0x8004e9 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	aa 1f       	adc	r26, r26
    1f9e:	bb 1f       	adc	r27, r27
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	aa 1f       	adc	r26, r26
    1fa6:	bb 1f       	adc	r27, r27
    1fa8:	9c 01       	movw	r18, r24
    1faa:	ad 01       	movw	r20, r26
    1fac:	22 0f       	add	r18, r18
    1fae:	33 1f       	adc	r19, r19
    1fb0:	44 1f       	adc	r20, r20
    1fb2:	55 1f       	adc	r21, r21
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	72 e1       	ldi	r23, 0x12	; 18
    1fb8:	8a e7       	ldi	r24, 0x7A	; 122
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__divmodsi4>
    1fc0:	ba 01       	movw	r22, r20
    1fc2:	a9 01       	movw	r20, r18
    1fc4:	4f 5f       	subi	r20, 0xFF	; 255
    1fc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc8:	6f 4f       	sbci	r22, 0xFF	; 255
    1fca:	7f 4f       	sbci	r23, 0xFF	; 255
    1fcc:	db 01       	movw	r26, r22
    1fce:	ca 01       	movw	r24, r20
    1fd0:	1a f4       	brpl	.+6      	; 0x1fd8 <init_serial_stdio+0x5c>
    1fd2:	01 96       	adiw	r24, 0x01	; 1
    1fd4:	a1 1d       	adc	r26, r1
    1fd6:	b1 1d       	adc	r27, r1
    1fd8:	b5 95       	asr	r27
    1fda:	a7 95       	ror	r26
    1fdc:	97 95       	ror	r25
    1fde:	87 95       	ror	r24
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1fe2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1fe6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    1fea:	e1 ec       	ldi	r30, 0xC1	; 193
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	88 e1       	ldi	r24, 0x18	; 24
    1ff0:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
    1ff2:	80 81       	ld	r24, Z
    1ff4:	80 68       	ori	r24, 0x80	; 128
    1ff6:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1ff8:	e6 e1       	ldi	r30, 0x16	; 22
    1ffa:	f6 e0       	ldi	r31, 0x06	; 6
    1ffc:	8c e0       	ldi	r24, 0x0C	; 12
    1ffe:	91 e0       	ldi	r25, 0x01	; 1
    2000:	93 83       	std	Z+3, r25	; 0x03
    2002:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	80 83       	st	Z, r24
    2008:	08 95       	ret

0000200a <serial_input_available>:
}

int8_t serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
    200a:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <bytes_in_input_buffer>
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	91 11       	cpse	r25, r1
    2012:	01 c0       	rjmp	.+2      	; 0x2016 <serial_input_available+0xc>
    2014:	80 e0       	ldi	r24, 0x00	; 0
}
    2016:	08 95       	ret

00002018 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    2018:	10 92 03 06 	sts	0x0603, r1	; 0x800603 <input_insert_pos>
	bytes_in_input_buffer = 0;
    201c:	10 92 15 06 	sts	0x0615, r1	; 0x800615 <bytes_in_input_buffer>
    2020:	08 95       	ret

00002022 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    2022:	1f 92       	push	r1
    2024:	0f 92       	push	r0
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	0f 92       	push	r0
    202a:	11 24       	eor	r1, r1
    202c:	2f 93       	push	r18
    202e:	8f 93       	push	r24
    2030:	9f 93       	push	r25
    2032:	ef 93       	push	r30
    2034:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0)
    2036:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <bytes_in_out_buffer>
    203a:	88 23       	and	r24, r24
    203c:	29 f1       	breq	.+74     	; 0x2088 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
    203e:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <out_insert_pos>
    2042:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <bytes_in_out_buffer>
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	82 1b       	sub	r24, r18
    204a:	91 09       	sbc	r25, r1
    204c:	5a f4       	brpl	.+22     	; 0x2064 <__vector_21+0x42>
		{
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    204e:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <out_insert_pos>
    2052:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <bytes_in_out_buffer>
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	e8 1b       	sub	r30, r24
    205a:	f1 09       	sbc	r31, r1
    205c:	ed 5f       	subi	r30, 0xFD	; 253
    205e:	f9 4f       	sbci	r31, 0xF9	; 249
    2060:	90 81       	ld	r25, Z
    2062:	0a c0       	rjmp	.+20     	; 0x2078 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    2064:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <out_insert_pos>
    2068:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <bytes_in_out_buffer>
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	e8 1b       	sub	r30, r24
    2070:	f1 09       	sbc	r31, r1
    2072:	ec 5f       	subi	r30, 0xFC	; 252
    2074:	fa 4f       	sbci	r31, 0xFA	; 250
    2076:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    2078:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <bytes_in_out_buffer>
    207c:	81 50       	subi	r24, 0x01	; 1
    207e:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    2082:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2086:	05 c0       	rjmp	.+10     	; 0x2092 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
    2088:	e1 ec       	ldi	r30, 0xC1	; 193
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	8f 7d       	andi	r24, 0xDF	; 223
    2090:	80 83       	st	Z, r24
	}
}
    2092:	ff 91       	pop	r31
    2094:	ef 91       	pop	r30
    2096:	9f 91       	pop	r25
    2098:	8f 91       	pop	r24
    209a:	2f 91       	pop	r18
    209c:	0f 90       	pop	r0
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	0f 90       	pop	r0
    20a2:	1f 90       	pop	r1
    20a4:	18 95       	reti

000020a6 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    20a6:	1f 92       	push	r1
    20a8:	0f 92       	push	r0
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	0f 92       	push	r0
    20ae:	11 24       	eor	r1, r1
    20b0:	2f 93       	push	r18
    20b2:	3f 93       	push	r19
    20b4:	4f 93       	push	r20
    20b6:	5f 93       	push	r21
    20b8:	6f 93       	push	r22
    20ba:	7f 93       	push	r23
    20bc:	8f 93       	push	r24
    20be:	9f 93       	push	r25
    20c0:	af 93       	push	r26
    20c2:	bf 93       	push	r27
    20c4:	cf 93       	push	r28
    20c6:	ef 93       	push	r30
    20c8:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    20ca:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
    20ce:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <do_echo>
    20d2:	88 23       	and	r24, r24
    20d4:	49 f0       	breq	.+18     	; 0x20e8 <__vector_20+0x42>
    20d6:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <bytes_in_out_buffer>
    20da:	8f 3f       	cpi	r24, 0xFF	; 255
    20dc:	29 f0       	breq	.+10     	; 0x20e8 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	8c 2f       	mov	r24, r28
    20e4:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
    20e8:	80 91 15 06 	lds	r24, 0x0615	; 0x800615 <bytes_in_input_buffer>
    20ec:	80 31       	cpi	r24, 0x10	; 16
    20ee:	20 f0       	brcs	.+8      	; 0x20f8 <__vector_20+0x52>
	{
		input_overrun = 1;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <input_overrun>
    20f6:	18 c0       	rjmp	.+48     	; 0x2128 <__vector_20+0x82>
	} else
	{
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r')
    20f8:	cd 30       	cpi	r28, 0x0D	; 13
    20fa:	09 f4       	brne	.+2      	; 0x20fe <__vector_20+0x58>
		{
			c = '\n';
    20fc:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    20fe:	e0 91 03 06 	lds	r30, 0x0603	; 0x800603 <input_insert_pos>
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	8e 0f       	add	r24, r30
    2106:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <input_insert_pos>
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	ec 5f       	subi	r30, 0xFC	; 252
    210e:	f9 4f       	sbci	r31, 0xF9	; 249
    2110:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    2112:	80 91 15 06 	lds	r24, 0x0615	; 0x800615 <bytes_in_input_buffer>
    2116:	8f 5f       	subi	r24, 0xFF	; 255
    2118:	80 93 15 06 	sts	0x0615, r24	; 0x800615 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
    211c:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <input_insert_pos>
    2120:	80 31       	cpi	r24, 0x10	; 16
    2122:	11 f4       	brne	.+4      	; 0x2128 <__vector_20+0x82>
		{
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    2124:	10 92 03 06 	sts	0x0603, r1	; 0x800603 <input_insert_pos>
		}
	}
}
    2128:	ff 91       	pop	r31
    212a:	ef 91       	pop	r30
    212c:	cf 91       	pop	r28
    212e:	bf 91       	pop	r27
    2130:	af 91       	pop	r26
    2132:	9f 91       	pop	r25
    2134:	8f 91       	pop	r24
    2136:	7f 91       	pop	r23
    2138:	6f 91       	pop	r22
    213a:	5f 91       	pop	r21
    213c:	4f 91       	pop	r20
    213e:	3f 91       	pop	r19
    2140:	2f 91       	pop	r18
    2142:	0f 90       	pop	r0
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	0f 90       	pop	r0
    2148:	1f 90       	pop	r1
    214a:	18 95       	reti

0000214c <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider)
{
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    214c:	94 b1       	in	r25, 0x04	; 4
    214e:	90 6b       	ori	r25, 0xB0	; 176
    2150:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
    2152:	95 b1       	in	r25, 0x05	; 5
    2154:	90 61       	ori	r25, 0x10	; 16
    2156:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    2158:	90 e5       	ldi	r25, 0x50	; 80
    215a:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider)
    215c:	88 30       	cpi	r24, 0x08	; 8
    215e:	21 f0       	breq	.+8      	; 0x2168 <spi_setup_master+0x1c>
    2160:	80 32       	cpi	r24, 0x20	; 32
    2162:	11 f0       	breq	.+4      	; 0x2168 <spi_setup_master+0x1c>
    2164:	82 30       	cpi	r24, 0x02	; 2
    2166:	19 f4       	brne	.+6      	; 0x216e <spi_setup_master+0x22>
	{
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
    2168:	91 e0       	ldi	r25, 0x01	; 1
    216a:	9d bd       	out	0x2d, r25	; 45
			break;
    216c:	01 c0       	rjmp	.+2      	; 0x2170 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    216e:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
    2170:	80 32       	cpi	r24, 0x20	; 32
    2172:	69 f0       	breq	.+26     	; 0x218e <spi_setup_master+0x42>
    2174:	28 f4       	brcc	.+10     	; 0x2180 <spi_setup_master+0x34>
    2176:	88 30       	cpi	r24, 0x08	; 8
    2178:	71 f0       	breq	.+28     	; 0x2196 <spi_setup_master+0x4a>
    217a:	80 31       	cpi	r24, 0x10	; 16
    217c:	61 f0       	breq	.+24     	; 0x2196 <spi_setup_master+0x4a>
    217e:	0e c0       	rjmp	.+28     	; 0x219c <spi_setup_master+0x50>
    2180:	80 34       	cpi	r24, 0x40	; 64
    2182:	29 f0       	breq	.+10     	; 0x218e <spi_setup_master+0x42>
    2184:	80 38       	cpi	r24, 0x80	; 128
    2186:	51 f4       	brne	.+20     	; 0x219c <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
    2188:	8c b5       	in	r24, 0x2c	; 44
    218a:	81 60       	ori	r24, 0x01	; 1
    218c:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
    218e:	8c b5       	in	r24, 0x2c	; 44
    2190:	82 60       	ori	r24, 0x02	; 2
    2192:	8c bd       	out	0x2c, r24	; 44
			break;
    2194:	03 c0       	rjmp	.+6      	; 0x219c <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
    2196:	8c b5       	in	r24, 0x2c	; 44
    2198:	81 60       	ori	r24, 0x01	; 1
    219a:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
    219c:	85 b1       	in	r24, 0x05	; 5
    219e:	8f 7e       	andi	r24, 0xEF	; 239
    21a0:	85 b9       	out	0x05, r24	; 5
    21a2:	08 95       	ret

000021a4 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    21a4:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    21a6:	0d b4       	in	r0, 0x2d	; 45
    21a8:	07 fe       	sbrs	r0, 7
    21aa:	fd cf       	rjmp	.-6      	; 0x21a6 <spi_send_byte+0x2>
	{
		; // wait
	}
	return SPDR0;
    21ac:	8e b5       	in	r24, 0x2e	; 46
}
    21ae:	08 95       	ret

000021b0 <move_terminal_cursor>:
}

void reverse_video(void)
{
	printf_P(PSTR("\x1b[7m"));
}
    21b0:	9f 93       	push	r25
    21b2:	8f 93       	push	r24
    21b4:	7f 93       	push	r23
    21b6:	6f 93       	push	r22
    21b8:	8d e7       	ldi	r24, 0x7D	; 125
    21ba:	93 e0       	ldi	r25, 0x03	; 3
    21bc:	9f 93       	push	r25
    21be:	8f 93       	push	r24
    21c0:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	08 95       	ret

000021d2 <clear_terminal>:

void clear_terminal(void)
{
	printf_P(PSTR("\x1b[2J"));
    21d2:	88 e7       	ldi	r24, 0x78	; 120
    21d4:	93 e0       	ldi	r25, 0x03	; 3
    21d6:	9f 93       	push	r25
    21d8:	8f 93       	push	r24
    21da:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
}
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	08 95       	ret

000021e4 <clear_to_end_of_line>:

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
    21e4:	84 e7       	ldi	r24, 0x74	; 116
    21e6:	93 e0       	ldi	r25, 0x03	; 3
    21e8:	9f 93       	push	r25
    21ea:	8f 93       	push	r24
    21ec:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
}
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	08 95       	ret

000021f6 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    21f6:	1f 92       	push	r1
    21f8:	8f 93       	push	r24
    21fa:	8e e6       	ldi	r24, 0x6E	; 110
    21fc:	93 e0       	ldi	r25, 0x03	; 3
    21fe:	9f 93       	push	r25
    2200:	8f 93       	push	r24
    2202:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	08 95       	ret

00002210 <hide_cursor>:

void hide_cursor()
{
	printf_P(PSTR("\x1b[?25l"));
    2210:	87 e6       	ldi	r24, 0x67	; 103
    2212:	93 e0       	ldi	r25, 0x03	; 3
    2214:	9f 93       	push	r25
    2216:	8f 93       	push	r24
    2218:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
}
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	08 95       	ret

00002222 <show_cursor>:

void show_cursor()
{
	printf_P(PSTR("\x1b[?25h"));
    2222:	80 e6       	ldi	r24, 0x60	; 96
    2224:	93 e0       	ldi	r25, 0x03	; 3
    2226:	9f 93       	push	r25
    2228:	8f 93       	push	r24
    222a:	0e 94 88 14 	call	0x2910	; 0x2910 <printf_P>
}
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	08 95       	ret

00002234 <init_timer0>:
void init_timer0(void)
{
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
    2234:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <clock_ticks_ms>
    2238:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <clock_ticks_ms+0x1>
    223c:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <clock_ticks_ms+0x2>
    2240:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    2244:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    2246:	8c e7       	ldi	r24, 0x7C	; 124
    2248:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
    224a:	92 e0       	ldi	r25, 0x02	; 2
    224c:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    224e:	83 e0       	ldi	r24, 0x03	; 3
    2250:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
    2252:	ee e6       	ldi	r30, 0x6E	; 110
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	82 60       	ori	r24, 0x02	; 2
    225a:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
    225c:	95 bb       	out	0x15, r25	; 21
    225e:	08 95       	ret

00002260 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    2260:	8f b7       	in	r24, 0x3f	; 63
    2262:	28 2f       	mov	r18, r24
    2264:	20 78       	andi	r18, 0x80	; 128
	cli();
    2266:	f8 94       	cli
	return_value = clock_ticks_ms;
    2268:	60 91 ea 04 	lds	r22, 0x04EA	; 0x8004ea <clock_ticks_ms>
    226c:	70 91 eb 04 	lds	r23, 0x04EB	; 0x8004eb <clock_ticks_ms+0x1>
    2270:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <clock_ticks_ms+0x2>
    2274:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    2278:	22 23       	and	r18, r18
    227a:	09 f0       	breq	.+2      	; 0x227e <get_current_time+0x1e>
	{
		sei();
    227c:	78 94       	sei
	}
	return return_value;
}
    227e:	08 95       	ret

00002280 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
    2280:	1f 92       	push	r1
    2282:	0f 92       	push	r0
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	0f 92       	push	r0
    2288:	11 24       	eor	r1, r1
    228a:	8f 93       	push	r24
    228c:	9f 93       	push	r25
    228e:	af 93       	push	r26
    2290:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
    2292:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <clock_ticks_ms>
    2296:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <clock_ticks_ms+0x1>
    229a:	a0 91 ec 04 	lds	r26, 0x04EC	; 0x8004ec <clock_ticks_ms+0x2>
    229e:	b0 91 ed 04 	lds	r27, 0x04ED	; 0x8004ed <clock_ticks_ms+0x3>
    22a2:	01 96       	adiw	r24, 0x01	; 1
    22a4:	a1 1d       	adc	r26, r1
    22a6:	b1 1d       	adc	r27, r1
    22a8:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <clock_ticks_ms>
    22ac:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <clock_ticks_ms+0x1>
    22b0:	a0 93 ec 04 	sts	0x04EC, r26	; 0x8004ec <clock_ticks_ms+0x2>
    22b4:	b0 93 ed 04 	sts	0x04ED, r27	; 0x8004ed <clock_ticks_ms+0x3>
}
    22b8:	bf 91       	pop	r27
    22ba:	af 91       	pop	r26
    22bc:	9f 91       	pop	r25
    22be:	8f 91       	pop	r24
    22c0:	0f 90       	pop	r0
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	0f 90       	pop	r0
    22c6:	1f 90       	pop	r1
    22c8:	18 95       	reti

000022ca <init_timer1>:
 */


void init_timer1(void)
{
	freq = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <freq+0x1>
    22d2:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <freq>
	duty_cycle = 0;
    22d6:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <duty_cycle>
    22da:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <duty_cycle+0x1>
    22de:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <duty_cycle+0x2>
    22e2:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <duty_cycle+0x3>
	
	uint16_t clockperiod = (1000000UL / freq);
	uint16_t pulsewidth = (duty_cycle * clockperiod)/100;
	
	// Set the maximum count value for timer/counter 1 to be one less than the clockperiod
	OCR1A = clockperiod - 1;
    22e6:	8f e3       	ldi	r24, 0x3F	; 63
    22e8:	92 e4       	ldi	r25, 0x42	; 66
    22ea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    22ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// Set the count compare value based on the pulse width. The value will be 1 less
	// than the pulse width - unless the pulse width is 0.
	if(pulsewidth == 0) {
		OCR1B = 0;
    22f2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    22f6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	//set up timer 1 for;
	//Fast PWM, counting from 0 to the value in OCR1A
	//before reseting to 0. Count at 1MHz (CLK/8).
	//Configure output OC1B to be CTC non-inverting mode.
	TCCR1A = (1 << COM1B1) | (1 << WGM10) | (1 <<WGM11);
    22fa:	83 e2       	ldi	r24, 0x23	; 35
    22fc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << CS11) | (1 << WGM12) |(1 << WGM13);
    2300:	8a e1       	ldi	r24, 0x1A	; 26
    2302:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    2306:	08 95       	ret

00002308 <note_sound>:
	
}

void note_sound() {
    2308:	cf 92       	push	r12
    230a:	df 92       	push	r13
    230c:	ef 92       	push	r14
    230e:	ff 92       	push	r15
	
	if (!disable_piezzo) { //if you dont want to turn off the piezzo do the following
    2310:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <disable_piezzo>
    2314:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <disable_piezzo+0x1>
    2318:	89 2b       	or	r24, r25
    231a:	c9 f5       	brne	.+114    	; 0x238e <note_sound+0x86>
		//turn on PORTd4 and set DDRD4 to be output
		DDRD |= 0b00010000;
    231c:	8a b1       	in	r24, 0x0a	; 10
    231e:	80 61       	ori	r24, 0x10	; 16
    2320:	8a b9       	out	0x0a, r24	; 10
		PORTD |= 0b00010000;
    2322:	8b b1       	in	r24, 0x0b	; 11
    2324:	80 61       	ori	r24, 0x10	; 16
    2326:	8b b9       	out	0x0b, r24	; 11
		
		uint16_t clockperiod = (1000000UL / freq);
    2328:	20 91 f2 04 	lds	r18, 0x04F2	; 0x8004f2 <freq>
    232c:	30 91 f3 04 	lds	r19, 0x04F3	; 0x8004f3 <freq+0x1>
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	50 e0       	ldi	r21, 0x00	; 0
    2334:	60 e4       	ldi	r22, 0x40	; 64
    2336:	72 e4       	ldi	r23, 0x42	; 66
    2338:	8f e0       	ldi	r24, 0x0F	; 15
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodsi4>
    2340:	69 01       	movw	r12, r18
    2342:	7a 01       	movw	r14, r20
		uint16_t pulsewidth = (duty_cycle * clockperiod)/100;
    2344:	b9 01       	movw	r22, r18
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	0e 94 c1 12 	call	0x2582	; 0x2582 <__floatunsisf>
    234e:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <duty_cycle>
    2352:	30 91 fb 04 	lds	r19, 0x04FB	; 0x8004fb <duty_cycle+0x1>
    2356:	40 91 fc 04 	lds	r20, 0x04FC	; 0x8004fc <duty_cycle+0x2>
    235a:	50 91 fd 04 	lds	r21, 0x04FD	; 0x8004fd <duty_cycle+0x3>
    235e:	0e 94 4f 13 	call	0x269e	; 0x269e <__mulsf3>
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	48 ec       	ldi	r20, 0xC8	; 200
    2368:	52 e4       	ldi	r21, 0x42	; 66
    236a:	0e 94 20 12 	call	0x2440	; 0x2440 <__divsf3>
    236e:	0e 94 92 12 	call	0x2524	; 0x2524 <__fixunssfsi>
	
		OCR1A = clockperiod - 1;
    2372:	21 e0       	ldi	r18, 0x01	; 1
    2374:	c2 1a       	sub	r12, r18
    2376:	d1 08       	sbc	r13, r1
    2378:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    237c:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = pulsewidth - 1;
    2380:	61 50       	subi	r22, 0x01	; 1
    2382:	71 09       	sbc	r23, r1
    2384:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2388:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    238c:	0e c0       	rjmp	.+28     	; 0x23aa <note_sound+0xa2>
		
	} else { //if you want to turn off the piezzo do the following
		//set bot checks to be 0
		OCR1A = 0;
    238e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2392:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = 0;
    2396:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    239a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		
		//make DDRD4 to be input and PORTD4 to be off
		DDRD &= ~(1<<4);	//inverse of 1<<4
    239e:	8a b1       	in	r24, 0x0a	; 10
    23a0:	8f 7e       	andi	r24, 0xEF	; 239
    23a2:	8a b9       	out	0x0a, r24	; 10
		PORTD &= 0b11101111;
    23a4:	8b b1       	in	r24, 0x0b	; 11
    23a6:	8f 7e       	andi	r24, 0xEF	; 239
    23a8:	8b b9       	out	0x0b, r24	; 11
			
	}
}
    23aa:	ff 90       	pop	r15
    23ac:	ef 90       	pop	r14
    23ae:	df 90       	pop	r13
    23b0:	cf 90       	pop	r12
    23b2:	08 95       	ret

000023b4 <pause_control>:

void pause_control(int is_paused) {
	if (is_paused) {
    23b4:	89 2b       	or	r24, r25
    23b6:	79 f0       	breq	.+30     	; 0x23d6 <pause_control+0x22>
		OCR1A = 0;
    23b8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    23bc:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = 0;
    23c0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    23c4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		
		DDRD &= ~(1<<4);	//inverse of 1<<4
    23c8:	8a b1       	in	r24, 0x0a	; 10
    23ca:	8f 7e       	andi	r24, 0xEF	; 239
    23cc:	8a b9       	out	0x0a, r24	; 10
		PORTD &= 0b11101111;
    23ce:	8b b1       	in	r24, 0x0b	; 11
    23d0:	8f 7e       	andi	r24, 0xEF	; 239
    23d2:	8b b9       	out	0x0b, r24	; 11
    23d4:	08 95       	ret
		
	} else {
		note_sound();
    23d6:	0e 94 84 11 	call	0x2308	; 0x2308 <note_sound>
    23da:	08 95       	ret

000023dc <init_timer2>:
void init_timer2(void)
{
	
	//TCNT2 = 0;
	//set up so that there is an interrupt every 10ms (100 times per second)
	OCR2A = 77; //clock divided by 1024 - count for 10000 cycles
    23dc:	8d e4       	ldi	r24, 0x4D	; 77
    23de:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = 0; //CTC mode
    23e2:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1<<WGM22) | (1<<CS22) | (1<<CS20); // Divide clock by 1024(PRE) 
    23e6:	8d e0       	ldi	r24, 0x0D	; 13
    23e8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	//enable interrupt on timer on output compare match
	TIMSK2 = (1<<OCIE2A);
    23ec:	82 e0       	ldi	r24, 0x02	; 2
    23ee:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	
	//Ensure interrupt flag is cleared
	TIFR2 = (1<<OCF2A);
    23f2:	87 bb       	out	0x17, r24	; 23
	
	// Turn on global interrupts
	sei();
    23f4:	78 94       	sei
    23f6:	08 95       	ret

000023f8 <__vector_9>:
}

ISR(TIMER2_COMPA_vect) {
    23f8:	1f 92       	push	r1
    23fa:	0f 92       	push	r0
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	0f 92       	push	r0
    2400:	11 24       	eor	r1, r1
    2402:	2f 93       	push	r18
    2404:	3f 93       	push	r19
    2406:	4f 93       	push	r20
    2408:	5f 93       	push	r21
    240a:	6f 93       	push	r22
    240c:	7f 93       	push	r23
    240e:	8f 93       	push	r24
    2410:	9f 93       	push	r25
    2412:	af 93       	push	r26
    2414:	bf 93       	push	r27
    2416:	ef 93       	push	r30
    2418:	ff 93       	push	r31
	ssd_display();
    241a:	0e 94 a5 0b 	call	0x174a	; 0x174a <ssd_display>
}
    241e:	ff 91       	pop	r31
    2420:	ef 91       	pop	r30
    2422:	bf 91       	pop	r27
    2424:	af 91       	pop	r26
    2426:	9f 91       	pop	r25
    2428:	8f 91       	pop	r24
    242a:	7f 91       	pop	r23
    242c:	6f 91       	pop	r22
    242e:	5f 91       	pop	r21
    2430:	4f 91       	pop	r20
    2432:	3f 91       	pop	r19
    2434:	2f 91       	pop	r18
    2436:	0f 90       	pop	r0
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	0f 90       	pop	r0
    243c:	1f 90       	pop	r1
    243e:	18 95       	reti

00002440 <__divsf3>:
    2440:	0e 94 34 12 	call	0x2468	; 0x2468 <__divsf3x>
    2444:	0c 94 15 13 	jmp	0x262a	; 0x262a <__fp_round>
    2448:	0e 94 0e 13 	call	0x261c	; 0x261c <__fp_pscB>
    244c:	58 f0       	brcs	.+22     	; 0x2464 <__divsf3+0x24>
    244e:	0e 94 07 13 	call	0x260e	; 0x260e <__fp_pscA>
    2452:	40 f0       	brcs	.+16     	; 0x2464 <__divsf3+0x24>
    2454:	29 f4       	brne	.+10     	; 0x2460 <__divsf3+0x20>
    2456:	5f 3f       	cpi	r21, 0xFF	; 255
    2458:	29 f0       	breq	.+10     	; 0x2464 <__divsf3+0x24>
    245a:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__fp_inf>
    245e:	51 11       	cpse	r21, r1
    2460:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__fp_szero>
    2464:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__fp_nan>

00002468 <__divsf3x>:
    2468:	0e 94 26 13 	call	0x264c	; 0x264c <__fp_split3>
    246c:	68 f3       	brcs	.-38     	; 0x2448 <__divsf3+0x8>

0000246e <__divsf3_pse>:
    246e:	99 23       	and	r25, r25
    2470:	b1 f3       	breq	.-20     	; 0x245e <__divsf3+0x1e>
    2472:	55 23       	and	r21, r21
    2474:	91 f3       	breq	.-28     	; 0x245a <__divsf3+0x1a>
    2476:	95 1b       	sub	r25, r21
    2478:	55 0b       	sbc	r21, r21
    247a:	bb 27       	eor	r27, r27
    247c:	aa 27       	eor	r26, r26
    247e:	62 17       	cp	r22, r18
    2480:	73 07       	cpc	r23, r19
    2482:	84 07       	cpc	r24, r20
    2484:	38 f0       	brcs	.+14     	; 0x2494 <__divsf3_pse+0x26>
    2486:	9f 5f       	subi	r25, 0xFF	; 255
    2488:	5f 4f       	sbci	r21, 0xFF	; 255
    248a:	22 0f       	add	r18, r18
    248c:	33 1f       	adc	r19, r19
    248e:	44 1f       	adc	r20, r20
    2490:	aa 1f       	adc	r26, r26
    2492:	a9 f3       	breq	.-22     	; 0x247e <__divsf3_pse+0x10>
    2494:	35 d0       	rcall	.+106    	; 0x2500 <__divsf3_pse+0x92>
    2496:	0e 2e       	mov	r0, r30
    2498:	3a f0       	brmi	.+14     	; 0x24a8 <__divsf3_pse+0x3a>
    249a:	e0 e8       	ldi	r30, 0x80	; 128
    249c:	32 d0       	rcall	.+100    	; 0x2502 <__divsf3_pse+0x94>
    249e:	91 50       	subi	r25, 0x01	; 1
    24a0:	50 40       	sbci	r21, 0x00	; 0
    24a2:	e6 95       	lsr	r30
    24a4:	00 1c       	adc	r0, r0
    24a6:	ca f7       	brpl	.-14     	; 0x249a <__divsf3_pse+0x2c>
    24a8:	2b d0       	rcall	.+86     	; 0x2500 <__divsf3_pse+0x92>
    24aa:	fe 2f       	mov	r31, r30
    24ac:	29 d0       	rcall	.+82     	; 0x2500 <__divsf3_pse+0x92>
    24ae:	66 0f       	add	r22, r22
    24b0:	77 1f       	adc	r23, r23
    24b2:	88 1f       	adc	r24, r24
    24b4:	bb 1f       	adc	r27, r27
    24b6:	26 17       	cp	r18, r22
    24b8:	37 07       	cpc	r19, r23
    24ba:	48 07       	cpc	r20, r24
    24bc:	ab 07       	cpc	r26, r27
    24be:	b0 e8       	ldi	r27, 0x80	; 128
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <__divsf3_pse+0x56>
    24c2:	bb 0b       	sbc	r27, r27
    24c4:	80 2d       	mov	r24, r0
    24c6:	bf 01       	movw	r22, r30
    24c8:	ff 27       	eor	r31, r31
    24ca:	93 58       	subi	r25, 0x83	; 131
    24cc:	5f 4f       	sbci	r21, 0xFF	; 255
    24ce:	3a f0       	brmi	.+14     	; 0x24de <__divsf3_pse+0x70>
    24d0:	9e 3f       	cpi	r25, 0xFE	; 254
    24d2:	51 05       	cpc	r21, r1
    24d4:	78 f0       	brcs	.+30     	; 0x24f4 <__divsf3_pse+0x86>
    24d6:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__fp_inf>
    24da:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__fp_szero>
    24de:	5f 3f       	cpi	r21, 0xFF	; 255
    24e0:	e4 f3       	brlt	.-8      	; 0x24da <__divsf3_pse+0x6c>
    24e2:	98 3e       	cpi	r25, 0xE8	; 232
    24e4:	d4 f3       	brlt	.-12     	; 0x24da <__divsf3_pse+0x6c>
    24e6:	86 95       	lsr	r24
    24e8:	77 95       	ror	r23
    24ea:	67 95       	ror	r22
    24ec:	b7 95       	ror	r27
    24ee:	f7 95       	ror	r31
    24f0:	9f 5f       	subi	r25, 0xFF	; 255
    24f2:	c9 f7       	brne	.-14     	; 0x24e6 <__divsf3_pse+0x78>
    24f4:	88 0f       	add	r24, r24
    24f6:	91 1d       	adc	r25, r1
    24f8:	96 95       	lsr	r25
    24fa:	87 95       	ror	r24
    24fc:	97 f9       	bld	r25, 7
    24fe:	08 95       	ret
    2500:	e1 e0       	ldi	r30, 0x01	; 1
    2502:	66 0f       	add	r22, r22
    2504:	77 1f       	adc	r23, r23
    2506:	88 1f       	adc	r24, r24
    2508:	bb 1f       	adc	r27, r27
    250a:	62 17       	cp	r22, r18
    250c:	73 07       	cpc	r23, r19
    250e:	84 07       	cpc	r24, r20
    2510:	ba 07       	cpc	r27, r26
    2512:	20 f0       	brcs	.+8      	; 0x251c <__divsf3_pse+0xae>
    2514:	62 1b       	sub	r22, r18
    2516:	73 0b       	sbc	r23, r19
    2518:	84 0b       	sbc	r24, r20
    251a:	ba 0b       	sbc	r27, r26
    251c:	ee 1f       	adc	r30, r30
    251e:	88 f7       	brcc	.-30     	; 0x2502 <__divsf3_pse+0x94>
    2520:	e0 95       	com	r30
    2522:	08 95       	ret

00002524 <__fixunssfsi>:
    2524:	0e 94 2e 13 	call	0x265c	; 0x265c <__fp_splitA>
    2528:	88 f0       	brcs	.+34     	; 0x254c <__fixunssfsi+0x28>
    252a:	9f 57       	subi	r25, 0x7F	; 127
    252c:	98 f0       	brcs	.+38     	; 0x2554 <__fixunssfsi+0x30>
    252e:	b9 2f       	mov	r27, r25
    2530:	99 27       	eor	r25, r25
    2532:	b7 51       	subi	r27, 0x17	; 23
    2534:	b0 f0       	brcs	.+44     	; 0x2562 <__fixunssfsi+0x3e>
    2536:	e1 f0       	breq	.+56     	; 0x2570 <__fixunssfsi+0x4c>
    2538:	66 0f       	add	r22, r22
    253a:	77 1f       	adc	r23, r23
    253c:	88 1f       	adc	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	1a f0       	brmi	.+6      	; 0x2548 <__fixunssfsi+0x24>
    2542:	ba 95       	dec	r27
    2544:	c9 f7       	brne	.-14     	; 0x2538 <__fixunssfsi+0x14>
    2546:	14 c0       	rjmp	.+40     	; 0x2570 <__fixunssfsi+0x4c>
    2548:	b1 30       	cpi	r27, 0x01	; 1
    254a:	91 f0       	breq	.+36     	; 0x2570 <__fixunssfsi+0x4c>
    254c:	0e 94 48 13 	call	0x2690	; 0x2690 <__fp_zero>
    2550:	b1 e0       	ldi	r27, 0x01	; 1
    2552:	08 95       	ret
    2554:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__fp_zero>
    2558:	67 2f       	mov	r22, r23
    255a:	78 2f       	mov	r23, r24
    255c:	88 27       	eor	r24, r24
    255e:	b8 5f       	subi	r27, 0xF8	; 248
    2560:	39 f0       	breq	.+14     	; 0x2570 <__fixunssfsi+0x4c>
    2562:	b9 3f       	cpi	r27, 0xF9	; 249
    2564:	cc f3       	brlt	.-14     	; 0x2558 <__fixunssfsi+0x34>
    2566:	86 95       	lsr	r24
    2568:	77 95       	ror	r23
    256a:	67 95       	ror	r22
    256c:	b3 95       	inc	r27
    256e:	d9 f7       	brne	.-10     	; 0x2566 <__fixunssfsi+0x42>
    2570:	3e f4       	brtc	.+14     	; 0x2580 <__fixunssfsi+0x5c>
    2572:	90 95       	com	r25
    2574:	80 95       	com	r24
    2576:	70 95       	com	r23
    2578:	61 95       	neg	r22
    257a:	7f 4f       	sbci	r23, 0xFF	; 255
    257c:	8f 4f       	sbci	r24, 0xFF	; 255
    257e:	9f 4f       	sbci	r25, 0xFF	; 255
    2580:	08 95       	ret

00002582 <__floatunsisf>:
    2582:	e8 94       	clt
    2584:	09 c0       	rjmp	.+18     	; 0x2598 <__floatsisf+0x12>

00002586 <__floatsisf>:
    2586:	97 fb       	bst	r25, 7
    2588:	3e f4       	brtc	.+14     	; 0x2598 <__floatsisf+0x12>
    258a:	90 95       	com	r25
    258c:	80 95       	com	r24
    258e:	70 95       	com	r23
    2590:	61 95       	neg	r22
    2592:	7f 4f       	sbci	r23, 0xFF	; 255
    2594:	8f 4f       	sbci	r24, 0xFF	; 255
    2596:	9f 4f       	sbci	r25, 0xFF	; 255
    2598:	99 23       	and	r25, r25
    259a:	a9 f0       	breq	.+42     	; 0x25c6 <__floatsisf+0x40>
    259c:	f9 2f       	mov	r31, r25
    259e:	96 e9       	ldi	r25, 0x96	; 150
    25a0:	bb 27       	eor	r27, r27
    25a2:	93 95       	inc	r25
    25a4:	f6 95       	lsr	r31
    25a6:	87 95       	ror	r24
    25a8:	77 95       	ror	r23
    25aa:	67 95       	ror	r22
    25ac:	b7 95       	ror	r27
    25ae:	f1 11       	cpse	r31, r1
    25b0:	f8 cf       	rjmp	.-16     	; 0x25a2 <__floatsisf+0x1c>
    25b2:	fa f4       	brpl	.+62     	; 0x25f2 <__floatsisf+0x6c>
    25b4:	bb 0f       	add	r27, r27
    25b6:	11 f4       	brne	.+4      	; 0x25bc <__floatsisf+0x36>
    25b8:	60 ff       	sbrs	r22, 0
    25ba:	1b c0       	rjmp	.+54     	; 0x25f2 <__floatsisf+0x6c>
    25bc:	6f 5f       	subi	r22, 0xFF	; 255
    25be:	7f 4f       	sbci	r23, 0xFF	; 255
    25c0:	8f 4f       	sbci	r24, 0xFF	; 255
    25c2:	9f 4f       	sbci	r25, 0xFF	; 255
    25c4:	16 c0       	rjmp	.+44     	; 0x25f2 <__floatsisf+0x6c>
    25c6:	88 23       	and	r24, r24
    25c8:	11 f0       	breq	.+4      	; 0x25ce <__floatsisf+0x48>
    25ca:	96 e9       	ldi	r25, 0x96	; 150
    25cc:	11 c0       	rjmp	.+34     	; 0x25f0 <__floatsisf+0x6a>
    25ce:	77 23       	and	r23, r23
    25d0:	21 f0       	breq	.+8      	; 0x25da <__floatsisf+0x54>
    25d2:	9e e8       	ldi	r25, 0x8E	; 142
    25d4:	87 2f       	mov	r24, r23
    25d6:	76 2f       	mov	r23, r22
    25d8:	05 c0       	rjmp	.+10     	; 0x25e4 <__floatsisf+0x5e>
    25da:	66 23       	and	r22, r22
    25dc:	71 f0       	breq	.+28     	; 0x25fa <__floatsisf+0x74>
    25de:	96 e8       	ldi	r25, 0x86	; 134
    25e0:	86 2f       	mov	r24, r22
    25e2:	70 e0       	ldi	r23, 0x00	; 0
    25e4:	60 e0       	ldi	r22, 0x00	; 0
    25e6:	2a f0       	brmi	.+10     	; 0x25f2 <__floatsisf+0x6c>
    25e8:	9a 95       	dec	r25
    25ea:	66 0f       	add	r22, r22
    25ec:	77 1f       	adc	r23, r23
    25ee:	88 1f       	adc	r24, r24
    25f0:	da f7       	brpl	.-10     	; 0x25e8 <__floatsisf+0x62>
    25f2:	88 0f       	add	r24, r24
    25f4:	96 95       	lsr	r25
    25f6:	87 95       	ror	r24
    25f8:	97 f9       	bld	r25, 7
    25fa:	08 95       	ret

000025fc <__fp_inf>:
    25fc:	97 f9       	bld	r25, 7
    25fe:	9f 67       	ori	r25, 0x7F	; 127
    2600:	80 e8       	ldi	r24, 0x80	; 128
    2602:	70 e0       	ldi	r23, 0x00	; 0
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	08 95       	ret

00002608 <__fp_nan>:
    2608:	9f ef       	ldi	r25, 0xFF	; 255
    260a:	80 ec       	ldi	r24, 0xC0	; 192
    260c:	08 95       	ret

0000260e <__fp_pscA>:
    260e:	00 24       	eor	r0, r0
    2610:	0a 94       	dec	r0
    2612:	16 16       	cp	r1, r22
    2614:	17 06       	cpc	r1, r23
    2616:	18 06       	cpc	r1, r24
    2618:	09 06       	cpc	r0, r25
    261a:	08 95       	ret

0000261c <__fp_pscB>:
    261c:	00 24       	eor	r0, r0
    261e:	0a 94       	dec	r0
    2620:	12 16       	cp	r1, r18
    2622:	13 06       	cpc	r1, r19
    2624:	14 06       	cpc	r1, r20
    2626:	05 06       	cpc	r0, r21
    2628:	08 95       	ret

0000262a <__fp_round>:
    262a:	09 2e       	mov	r0, r25
    262c:	03 94       	inc	r0
    262e:	00 0c       	add	r0, r0
    2630:	11 f4       	brne	.+4      	; 0x2636 <__fp_round+0xc>
    2632:	88 23       	and	r24, r24
    2634:	52 f0       	brmi	.+20     	; 0x264a <__fp_round+0x20>
    2636:	bb 0f       	add	r27, r27
    2638:	40 f4       	brcc	.+16     	; 0x264a <__fp_round+0x20>
    263a:	bf 2b       	or	r27, r31
    263c:	11 f4       	brne	.+4      	; 0x2642 <__fp_round+0x18>
    263e:	60 ff       	sbrs	r22, 0
    2640:	04 c0       	rjmp	.+8      	; 0x264a <__fp_round+0x20>
    2642:	6f 5f       	subi	r22, 0xFF	; 255
    2644:	7f 4f       	sbci	r23, 0xFF	; 255
    2646:	8f 4f       	sbci	r24, 0xFF	; 255
    2648:	9f 4f       	sbci	r25, 0xFF	; 255
    264a:	08 95       	ret

0000264c <__fp_split3>:
    264c:	57 fd       	sbrc	r21, 7
    264e:	90 58       	subi	r25, 0x80	; 128
    2650:	44 0f       	add	r20, r20
    2652:	55 1f       	adc	r21, r21
    2654:	59 f0       	breq	.+22     	; 0x266c <__fp_splitA+0x10>
    2656:	5f 3f       	cpi	r21, 0xFF	; 255
    2658:	71 f0       	breq	.+28     	; 0x2676 <__fp_splitA+0x1a>
    265a:	47 95       	ror	r20

0000265c <__fp_splitA>:
    265c:	88 0f       	add	r24, r24
    265e:	97 fb       	bst	r25, 7
    2660:	99 1f       	adc	r25, r25
    2662:	61 f0       	breq	.+24     	; 0x267c <__fp_splitA+0x20>
    2664:	9f 3f       	cpi	r25, 0xFF	; 255
    2666:	79 f0       	breq	.+30     	; 0x2686 <__fp_splitA+0x2a>
    2668:	87 95       	ror	r24
    266a:	08 95       	ret
    266c:	12 16       	cp	r1, r18
    266e:	13 06       	cpc	r1, r19
    2670:	14 06       	cpc	r1, r20
    2672:	55 1f       	adc	r21, r21
    2674:	f2 cf       	rjmp	.-28     	; 0x265a <__fp_split3+0xe>
    2676:	46 95       	lsr	r20
    2678:	f1 df       	rcall	.-30     	; 0x265c <__fp_splitA>
    267a:	08 c0       	rjmp	.+16     	; 0x268c <__fp_splitA+0x30>
    267c:	16 16       	cp	r1, r22
    267e:	17 06       	cpc	r1, r23
    2680:	18 06       	cpc	r1, r24
    2682:	99 1f       	adc	r25, r25
    2684:	f1 cf       	rjmp	.-30     	; 0x2668 <__fp_splitA+0xc>
    2686:	86 95       	lsr	r24
    2688:	71 05       	cpc	r23, r1
    268a:	61 05       	cpc	r22, r1
    268c:	08 94       	sec
    268e:	08 95       	ret

00002690 <__fp_zero>:
    2690:	e8 94       	clt

00002692 <__fp_szero>:
    2692:	bb 27       	eor	r27, r27
    2694:	66 27       	eor	r22, r22
    2696:	77 27       	eor	r23, r23
    2698:	cb 01       	movw	r24, r22
    269a:	97 f9       	bld	r25, 7
    269c:	08 95       	ret

0000269e <__mulsf3>:
    269e:	0e 94 62 13 	call	0x26c4	; 0x26c4 <__mulsf3x>
    26a2:	0c 94 15 13 	jmp	0x262a	; 0x262a <__fp_round>
    26a6:	0e 94 07 13 	call	0x260e	; 0x260e <__fp_pscA>
    26aa:	38 f0       	brcs	.+14     	; 0x26ba <__mulsf3+0x1c>
    26ac:	0e 94 0e 13 	call	0x261c	; 0x261c <__fp_pscB>
    26b0:	20 f0       	brcs	.+8      	; 0x26ba <__mulsf3+0x1c>
    26b2:	95 23       	and	r25, r21
    26b4:	11 f0       	breq	.+4      	; 0x26ba <__mulsf3+0x1c>
    26b6:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__fp_inf>
    26ba:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__fp_nan>
    26be:	11 24       	eor	r1, r1
    26c0:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__fp_szero>

000026c4 <__mulsf3x>:
    26c4:	0e 94 26 13 	call	0x264c	; 0x264c <__fp_split3>
    26c8:	70 f3       	brcs	.-36     	; 0x26a6 <__mulsf3+0x8>

000026ca <__mulsf3_pse>:
    26ca:	95 9f       	mul	r25, r21
    26cc:	c1 f3       	breq	.-16     	; 0x26be <__mulsf3+0x20>
    26ce:	95 0f       	add	r25, r21
    26d0:	50 e0       	ldi	r21, 0x00	; 0
    26d2:	55 1f       	adc	r21, r21
    26d4:	62 9f       	mul	r22, r18
    26d6:	f0 01       	movw	r30, r0
    26d8:	72 9f       	mul	r23, r18
    26da:	bb 27       	eor	r27, r27
    26dc:	f0 0d       	add	r31, r0
    26de:	b1 1d       	adc	r27, r1
    26e0:	63 9f       	mul	r22, r19
    26e2:	aa 27       	eor	r26, r26
    26e4:	f0 0d       	add	r31, r0
    26e6:	b1 1d       	adc	r27, r1
    26e8:	aa 1f       	adc	r26, r26
    26ea:	64 9f       	mul	r22, r20
    26ec:	66 27       	eor	r22, r22
    26ee:	b0 0d       	add	r27, r0
    26f0:	a1 1d       	adc	r26, r1
    26f2:	66 1f       	adc	r22, r22
    26f4:	82 9f       	mul	r24, r18
    26f6:	22 27       	eor	r18, r18
    26f8:	b0 0d       	add	r27, r0
    26fa:	a1 1d       	adc	r26, r1
    26fc:	62 1f       	adc	r22, r18
    26fe:	73 9f       	mul	r23, r19
    2700:	b0 0d       	add	r27, r0
    2702:	a1 1d       	adc	r26, r1
    2704:	62 1f       	adc	r22, r18
    2706:	83 9f       	mul	r24, r19
    2708:	a0 0d       	add	r26, r0
    270a:	61 1d       	adc	r22, r1
    270c:	22 1f       	adc	r18, r18
    270e:	74 9f       	mul	r23, r20
    2710:	33 27       	eor	r19, r19
    2712:	a0 0d       	add	r26, r0
    2714:	61 1d       	adc	r22, r1
    2716:	23 1f       	adc	r18, r19
    2718:	84 9f       	mul	r24, r20
    271a:	60 0d       	add	r22, r0
    271c:	21 1d       	adc	r18, r1
    271e:	82 2f       	mov	r24, r18
    2720:	76 2f       	mov	r23, r22
    2722:	6a 2f       	mov	r22, r26
    2724:	11 24       	eor	r1, r1
    2726:	9f 57       	subi	r25, 0x7F	; 127
    2728:	50 40       	sbci	r21, 0x00	; 0
    272a:	9a f0       	brmi	.+38     	; 0x2752 <__mulsf3_pse+0x88>
    272c:	f1 f0       	breq	.+60     	; 0x276a <__mulsf3_pse+0xa0>
    272e:	88 23       	and	r24, r24
    2730:	4a f0       	brmi	.+18     	; 0x2744 <__mulsf3_pse+0x7a>
    2732:	ee 0f       	add	r30, r30
    2734:	ff 1f       	adc	r31, r31
    2736:	bb 1f       	adc	r27, r27
    2738:	66 1f       	adc	r22, r22
    273a:	77 1f       	adc	r23, r23
    273c:	88 1f       	adc	r24, r24
    273e:	91 50       	subi	r25, 0x01	; 1
    2740:	50 40       	sbci	r21, 0x00	; 0
    2742:	a9 f7       	brne	.-22     	; 0x272e <__mulsf3_pse+0x64>
    2744:	9e 3f       	cpi	r25, 0xFE	; 254
    2746:	51 05       	cpc	r21, r1
    2748:	80 f0       	brcs	.+32     	; 0x276a <__mulsf3_pse+0xa0>
    274a:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__fp_inf>
    274e:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__fp_szero>
    2752:	5f 3f       	cpi	r21, 0xFF	; 255
    2754:	e4 f3       	brlt	.-8      	; 0x274e <__mulsf3_pse+0x84>
    2756:	98 3e       	cpi	r25, 0xE8	; 232
    2758:	d4 f3       	brlt	.-12     	; 0x274e <__mulsf3_pse+0x84>
    275a:	86 95       	lsr	r24
    275c:	77 95       	ror	r23
    275e:	67 95       	ror	r22
    2760:	b7 95       	ror	r27
    2762:	f7 95       	ror	r31
    2764:	e7 95       	ror	r30
    2766:	9f 5f       	subi	r25, 0xFF	; 255
    2768:	c1 f7       	brne	.-16     	; 0x275a <__mulsf3_pse+0x90>
    276a:	fe 2b       	or	r31, r30
    276c:	88 0f       	add	r24, r24
    276e:	91 1d       	adc	r25, r1
    2770:	96 95       	lsr	r25
    2772:	87 95       	ror	r24
    2774:	97 f9       	bld	r25, 7
    2776:	08 95       	ret

00002778 <__divmodhi4>:
    2778:	97 fb       	bst	r25, 7
    277a:	07 2e       	mov	r0, r23
    277c:	16 f4       	brtc	.+4      	; 0x2782 <__divmodhi4+0xa>
    277e:	00 94       	com	r0
    2780:	07 d0       	rcall	.+14     	; 0x2790 <__divmodhi4_neg1>
    2782:	77 fd       	sbrc	r23, 7
    2784:	09 d0       	rcall	.+18     	; 0x2798 <__divmodhi4_neg2>
    2786:	0e 94 20 14 	call	0x2840	; 0x2840 <__udivmodhi4>
    278a:	07 fc       	sbrc	r0, 7
    278c:	05 d0       	rcall	.+10     	; 0x2798 <__divmodhi4_neg2>
    278e:	3e f4       	brtc	.+14     	; 0x279e <__divmodhi4_exit>

00002790 <__divmodhi4_neg1>:
    2790:	90 95       	com	r25
    2792:	81 95       	neg	r24
    2794:	9f 4f       	sbci	r25, 0xFF	; 255
    2796:	08 95       	ret

00002798 <__divmodhi4_neg2>:
    2798:	70 95       	com	r23
    279a:	61 95       	neg	r22
    279c:	7f 4f       	sbci	r23, 0xFF	; 255

0000279e <__divmodhi4_exit>:
    279e:	08 95       	ret

000027a0 <__udivmodsi4>:
    27a0:	a1 e2       	ldi	r26, 0x21	; 33
    27a2:	1a 2e       	mov	r1, r26
    27a4:	aa 1b       	sub	r26, r26
    27a6:	bb 1b       	sub	r27, r27
    27a8:	fd 01       	movw	r30, r26
    27aa:	0d c0       	rjmp	.+26     	; 0x27c6 <__udivmodsi4_ep>

000027ac <__udivmodsi4_loop>:
    27ac:	aa 1f       	adc	r26, r26
    27ae:	bb 1f       	adc	r27, r27
    27b0:	ee 1f       	adc	r30, r30
    27b2:	ff 1f       	adc	r31, r31
    27b4:	a2 17       	cp	r26, r18
    27b6:	b3 07       	cpc	r27, r19
    27b8:	e4 07       	cpc	r30, r20
    27ba:	f5 07       	cpc	r31, r21
    27bc:	20 f0       	brcs	.+8      	; 0x27c6 <__udivmodsi4_ep>
    27be:	a2 1b       	sub	r26, r18
    27c0:	b3 0b       	sbc	r27, r19
    27c2:	e4 0b       	sbc	r30, r20
    27c4:	f5 0b       	sbc	r31, r21

000027c6 <__udivmodsi4_ep>:
    27c6:	66 1f       	adc	r22, r22
    27c8:	77 1f       	adc	r23, r23
    27ca:	88 1f       	adc	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	1a 94       	dec	r1
    27d0:	69 f7       	brne	.-38     	; 0x27ac <__udivmodsi4_loop>
    27d2:	60 95       	com	r22
    27d4:	70 95       	com	r23
    27d6:	80 95       	com	r24
    27d8:	90 95       	com	r25
    27da:	9b 01       	movw	r18, r22
    27dc:	ac 01       	movw	r20, r24
    27de:	bd 01       	movw	r22, r26
    27e0:	cf 01       	movw	r24, r30
    27e2:	08 95       	ret

000027e4 <__divmodsi4>:
    27e4:	05 2e       	mov	r0, r21
    27e6:	97 fb       	bst	r25, 7
    27e8:	1e f4       	brtc	.+6      	; 0x27f0 <__divmodsi4+0xc>
    27ea:	00 94       	com	r0
    27ec:	0e 94 09 14 	call	0x2812	; 0x2812 <__negsi2>
    27f0:	57 fd       	sbrc	r21, 7
    27f2:	07 d0       	rcall	.+14     	; 0x2802 <__divmodsi4_neg2>
    27f4:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodsi4>
    27f8:	07 fc       	sbrc	r0, 7
    27fa:	03 d0       	rcall	.+6      	; 0x2802 <__divmodsi4_neg2>
    27fc:	4e f4       	brtc	.+18     	; 0x2810 <__divmodsi4_exit>
    27fe:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__negsi2>

00002802 <__divmodsi4_neg2>:
    2802:	50 95       	com	r21
    2804:	40 95       	com	r20
    2806:	30 95       	com	r19
    2808:	21 95       	neg	r18
    280a:	3f 4f       	sbci	r19, 0xFF	; 255
    280c:	4f 4f       	sbci	r20, 0xFF	; 255
    280e:	5f 4f       	sbci	r21, 0xFF	; 255

00002810 <__divmodsi4_exit>:
    2810:	08 95       	ret

00002812 <__negsi2>:
    2812:	90 95       	com	r25
    2814:	80 95       	com	r24
    2816:	70 95       	com	r23
    2818:	61 95       	neg	r22
    281a:	7f 4f       	sbci	r23, 0xFF	; 255
    281c:	8f 4f       	sbci	r24, 0xFF	; 255
    281e:	9f 4f       	sbci	r25, 0xFF	; 255
    2820:	08 95       	ret

00002822 <__umulhisi3>:
    2822:	a2 9f       	mul	r26, r18
    2824:	b0 01       	movw	r22, r0
    2826:	b3 9f       	mul	r27, r19
    2828:	c0 01       	movw	r24, r0
    282a:	a3 9f       	mul	r26, r19
    282c:	70 0d       	add	r23, r0
    282e:	81 1d       	adc	r24, r1
    2830:	11 24       	eor	r1, r1
    2832:	91 1d       	adc	r25, r1
    2834:	b2 9f       	mul	r27, r18
    2836:	70 0d       	add	r23, r0
    2838:	81 1d       	adc	r24, r1
    283a:	11 24       	eor	r1, r1
    283c:	91 1d       	adc	r25, r1
    283e:	08 95       	ret

00002840 <__udivmodhi4>:
    2840:	aa 1b       	sub	r26, r26
    2842:	bb 1b       	sub	r27, r27
    2844:	51 e1       	ldi	r21, 0x11	; 17
    2846:	07 c0       	rjmp	.+14     	; 0x2856 <__udivmodhi4_ep>

00002848 <__udivmodhi4_loop>:
    2848:	aa 1f       	adc	r26, r26
    284a:	bb 1f       	adc	r27, r27
    284c:	a6 17       	cp	r26, r22
    284e:	b7 07       	cpc	r27, r23
    2850:	10 f0       	brcs	.+4      	; 0x2856 <__udivmodhi4_ep>
    2852:	a6 1b       	sub	r26, r22
    2854:	b7 0b       	sbc	r27, r23

00002856 <__udivmodhi4_ep>:
    2856:	88 1f       	adc	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	5a 95       	dec	r21
    285c:	a9 f7       	brne	.-22     	; 0x2848 <__udivmodhi4_loop>
    285e:	80 95       	com	r24
    2860:	90 95       	com	r25
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	08 95       	ret

00002868 <fgetc>:
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    286c:	ec 01       	movw	r28, r24
    286e:	2b 81       	ldd	r18, Y+3	; 0x03
    2870:	20 ff       	sbrs	r18, 0
    2872:	33 c0       	rjmp	.+102    	; 0x28da <fgetc+0x72>
    2874:	26 ff       	sbrs	r18, 6
    2876:	0a c0       	rjmp	.+20     	; 0x288c <fgetc+0x24>
    2878:	2f 7b       	andi	r18, 0xBF	; 191
    287a:	2b 83       	std	Y+3, r18	; 0x03
    287c:	8e 81       	ldd	r24, Y+6	; 0x06
    287e:	9f 81       	ldd	r25, Y+7	; 0x07
    2880:	01 96       	adiw	r24, 0x01	; 1
    2882:	9f 83       	std	Y+7, r25	; 0x07
    2884:	8e 83       	std	Y+6, r24	; 0x06
    2886:	8a 81       	ldd	r24, Y+2	; 0x02
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	29 c0       	rjmp	.+82     	; 0x28de <fgetc+0x76>
    288c:	22 ff       	sbrs	r18, 2
    288e:	0f c0       	rjmp	.+30     	; 0x28ae <fgetc+0x46>
    2890:	e8 81       	ld	r30, Y
    2892:	f9 81       	ldd	r31, Y+1	; 0x01
    2894:	80 81       	ld	r24, Z
    2896:	08 2e       	mov	r0, r24
    2898:	00 0c       	add	r0, r0
    289a:	99 0b       	sbc	r25, r25
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	19 f4       	brne	.+6      	; 0x28a6 <fgetc+0x3e>
    28a0:	20 62       	ori	r18, 0x20	; 32
    28a2:	2b 83       	std	Y+3, r18	; 0x03
    28a4:	1a c0       	rjmp	.+52     	; 0x28da <fgetc+0x72>
    28a6:	31 96       	adiw	r30, 0x01	; 1
    28a8:	f9 83       	std	Y+1, r31	; 0x01
    28aa:	e8 83       	st	Y, r30
    28ac:	0e c0       	rjmp	.+28     	; 0x28ca <fgetc+0x62>
    28ae:	ea 85       	ldd	r30, Y+10	; 0x0a
    28b0:	fb 85       	ldd	r31, Y+11	; 0x0b
    28b2:	09 95       	icall
    28b4:	97 ff       	sbrs	r25, 7
    28b6:	09 c0       	rjmp	.+18     	; 0x28ca <fgetc+0x62>
    28b8:	2b 81       	ldd	r18, Y+3	; 0x03
    28ba:	01 96       	adiw	r24, 0x01	; 1
    28bc:	11 f0       	breq	.+4      	; 0x28c2 <fgetc+0x5a>
    28be:	80 e2       	ldi	r24, 0x20	; 32
    28c0:	01 c0       	rjmp	.+2      	; 0x28c4 <fgetc+0x5c>
    28c2:	80 e1       	ldi	r24, 0x10	; 16
    28c4:	82 2b       	or	r24, r18
    28c6:	8b 83       	std	Y+3, r24	; 0x03
    28c8:	08 c0       	rjmp	.+16     	; 0x28da <fgetc+0x72>
    28ca:	2e 81       	ldd	r18, Y+6	; 0x06
    28cc:	3f 81       	ldd	r19, Y+7	; 0x07
    28ce:	2f 5f       	subi	r18, 0xFF	; 255
    28d0:	3f 4f       	sbci	r19, 0xFF	; 255
    28d2:	3f 83       	std	Y+7, r19	; 0x07
    28d4:	2e 83       	std	Y+6, r18	; 0x06
    28d6:	99 27       	eor	r25, r25
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <fgetc+0x76>
    28da:	8f ef       	ldi	r24, 0xFF	; 255
    28dc:	9f ef       	ldi	r25, 0xFF	; 255
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	08 95       	ret

000028e4 <printf>:
    28e4:	a0 e0       	ldi	r26, 0x00	; 0
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e8 e7       	ldi	r30, 0x78	; 120
    28ea:	f4 e1       	ldi	r31, 0x14	; 20
    28ec:	0c 94 4f 17 	jmp	0x2e9e	; 0x2e9e <__prologue_saves__+0x20>
    28f0:	ae 01       	movw	r20, r28
    28f2:	4b 5f       	subi	r20, 0xFB	; 251
    28f4:	5f 4f       	sbci	r21, 0xFF	; 255
    28f6:	fa 01       	movw	r30, r20
    28f8:	61 91       	ld	r22, Z+
    28fa:	71 91       	ld	r23, Z+
    28fc:	af 01       	movw	r20, r30
    28fe:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <__iob+0x2>
    2902:	90 91 19 06 	lds	r25, 0x0619	; 0x800619 <__iob+0x3>
    2906:	0e 94 ae 14 	call	0x295c	; 0x295c <vfprintf>
    290a:	e2 e0       	ldi	r30, 0x02	; 2
    290c:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <__epilogue_restores__+0x20>

00002910 <printf_P>:
    2910:	a0 e0       	ldi	r26, 0x00	; 0
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	ee e8       	ldi	r30, 0x8E	; 142
    2916:	f4 e1       	ldi	r31, 0x14	; 20
    2918:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <__prologue_saves__+0x1c>
    291c:	ae 01       	movw	r20, r28
    291e:	49 5f       	subi	r20, 0xF9	; 249
    2920:	5f 4f       	sbci	r21, 0xFF	; 255
    2922:	da 01       	movw	r26, r20
    2924:	6d 91       	ld	r22, X+
    2926:	7d 91       	ld	r23, X+
    2928:	ad 01       	movw	r20, r26
    292a:	06 e1       	ldi	r16, 0x16	; 22
    292c:	16 e0       	ldi	r17, 0x06	; 6
    292e:	f8 01       	movw	r30, r16
    2930:	82 81       	ldd	r24, Z+2	; 0x02
    2932:	93 81       	ldd	r25, Z+3	; 0x03
    2934:	dc 01       	movw	r26, r24
    2936:	13 96       	adiw	r26, 0x03	; 3
    2938:	2c 91       	ld	r18, X
    293a:	13 97       	sbiw	r26, 0x03	; 3
    293c:	28 60       	ori	r18, 0x08	; 8
    293e:	13 96       	adiw	r26, 0x03	; 3
    2940:	2c 93       	st	X, r18
    2942:	0e 94 ae 14 	call	0x295c	; 0x295c <vfprintf>
    2946:	d8 01       	movw	r26, r16
    2948:	12 96       	adiw	r26, 0x02	; 2
    294a:	ed 91       	ld	r30, X+
    294c:	fc 91       	ld	r31, X
    294e:	13 97       	sbiw	r26, 0x03	; 3
    2950:	23 81       	ldd	r18, Z+3	; 0x03
    2952:	27 7f       	andi	r18, 0xF7	; 247
    2954:	23 83       	std	Z+3, r18	; 0x03
    2956:	e4 e0       	ldi	r30, 0x04	; 4
    2958:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__epilogue_restores__+0x1c>

0000295c <vfprintf>:
    295c:	ab e0       	ldi	r26, 0x0B	; 11
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e4 eb       	ldi	r30, 0xB4	; 180
    2962:	f4 e1       	ldi	r31, 0x14	; 20
    2964:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__prologue_saves__>
    2968:	6c 01       	movw	r12, r24
    296a:	7b 01       	movw	r14, r22
    296c:	8a 01       	movw	r16, r20
    296e:	fc 01       	movw	r30, r24
    2970:	17 82       	std	Z+7, r1	; 0x07
    2972:	16 82       	std	Z+6, r1	; 0x06
    2974:	83 81       	ldd	r24, Z+3	; 0x03
    2976:	81 ff       	sbrs	r24, 1
    2978:	cc c1       	rjmp	.+920    	; 0x2d12 <vfprintf+0x3b6>
    297a:	ce 01       	movw	r24, r28
    297c:	01 96       	adiw	r24, 0x01	; 1
    297e:	3c 01       	movw	r6, r24
    2980:	f6 01       	movw	r30, r12
    2982:	93 81       	ldd	r25, Z+3	; 0x03
    2984:	f7 01       	movw	r30, r14
    2986:	93 fd       	sbrc	r25, 3
    2988:	85 91       	lpm	r24, Z+
    298a:	93 ff       	sbrs	r25, 3
    298c:	81 91       	ld	r24, Z+
    298e:	7f 01       	movw	r14, r30
    2990:	88 23       	and	r24, r24
    2992:	09 f4       	brne	.+2      	; 0x2996 <vfprintf+0x3a>
    2994:	ba c1       	rjmp	.+884    	; 0x2d0a <vfprintf+0x3ae>
    2996:	85 32       	cpi	r24, 0x25	; 37
    2998:	39 f4       	brne	.+14     	; 0x29a8 <vfprintf+0x4c>
    299a:	93 fd       	sbrc	r25, 3
    299c:	85 91       	lpm	r24, Z+
    299e:	93 ff       	sbrs	r25, 3
    29a0:	81 91       	ld	r24, Z+
    29a2:	7f 01       	movw	r14, r30
    29a4:	85 32       	cpi	r24, 0x25	; 37
    29a6:	29 f4       	brne	.+10     	; 0x29b2 <vfprintf+0x56>
    29a8:	b6 01       	movw	r22, r12
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <fputc>
    29b0:	e7 cf       	rjmp	.-50     	; 0x2980 <vfprintf+0x24>
    29b2:	91 2c       	mov	r9, r1
    29b4:	21 2c       	mov	r2, r1
    29b6:	31 2c       	mov	r3, r1
    29b8:	ff e1       	ldi	r31, 0x1F	; 31
    29ba:	f3 15       	cp	r31, r3
    29bc:	d8 f0       	brcs	.+54     	; 0x29f4 <vfprintf+0x98>
    29be:	8b 32       	cpi	r24, 0x2B	; 43
    29c0:	79 f0       	breq	.+30     	; 0x29e0 <vfprintf+0x84>
    29c2:	38 f4       	brcc	.+14     	; 0x29d2 <vfprintf+0x76>
    29c4:	80 32       	cpi	r24, 0x20	; 32
    29c6:	79 f0       	breq	.+30     	; 0x29e6 <vfprintf+0x8a>
    29c8:	83 32       	cpi	r24, 0x23	; 35
    29ca:	a1 f4       	brne	.+40     	; 0x29f4 <vfprintf+0x98>
    29cc:	23 2d       	mov	r18, r3
    29ce:	20 61       	ori	r18, 0x10	; 16
    29d0:	1d c0       	rjmp	.+58     	; 0x2a0c <vfprintf+0xb0>
    29d2:	8d 32       	cpi	r24, 0x2D	; 45
    29d4:	61 f0       	breq	.+24     	; 0x29ee <vfprintf+0x92>
    29d6:	80 33       	cpi	r24, 0x30	; 48
    29d8:	69 f4       	brne	.+26     	; 0x29f4 <vfprintf+0x98>
    29da:	23 2d       	mov	r18, r3
    29dc:	21 60       	ori	r18, 0x01	; 1
    29de:	16 c0       	rjmp	.+44     	; 0x2a0c <vfprintf+0xb0>
    29e0:	83 2d       	mov	r24, r3
    29e2:	82 60       	ori	r24, 0x02	; 2
    29e4:	38 2e       	mov	r3, r24
    29e6:	e3 2d       	mov	r30, r3
    29e8:	e4 60       	ori	r30, 0x04	; 4
    29ea:	3e 2e       	mov	r3, r30
    29ec:	2a c0       	rjmp	.+84     	; 0x2a42 <vfprintf+0xe6>
    29ee:	f3 2d       	mov	r31, r3
    29f0:	f8 60       	ori	r31, 0x08	; 8
    29f2:	1d c0       	rjmp	.+58     	; 0x2a2e <vfprintf+0xd2>
    29f4:	37 fc       	sbrc	r3, 7
    29f6:	2d c0       	rjmp	.+90     	; 0x2a52 <vfprintf+0xf6>
    29f8:	20 ed       	ldi	r18, 0xD0	; 208
    29fa:	28 0f       	add	r18, r24
    29fc:	2a 30       	cpi	r18, 0x0A	; 10
    29fe:	40 f0       	brcs	.+16     	; 0x2a10 <vfprintf+0xb4>
    2a00:	8e 32       	cpi	r24, 0x2E	; 46
    2a02:	b9 f4       	brne	.+46     	; 0x2a32 <vfprintf+0xd6>
    2a04:	36 fc       	sbrc	r3, 6
    2a06:	81 c1       	rjmp	.+770    	; 0x2d0a <vfprintf+0x3ae>
    2a08:	23 2d       	mov	r18, r3
    2a0a:	20 64       	ori	r18, 0x40	; 64
    2a0c:	32 2e       	mov	r3, r18
    2a0e:	19 c0       	rjmp	.+50     	; 0x2a42 <vfprintf+0xe6>
    2a10:	36 fe       	sbrs	r3, 6
    2a12:	06 c0       	rjmp	.+12     	; 0x2a20 <vfprintf+0xc4>
    2a14:	8a e0       	ldi	r24, 0x0A	; 10
    2a16:	98 9e       	mul	r9, r24
    2a18:	20 0d       	add	r18, r0
    2a1a:	11 24       	eor	r1, r1
    2a1c:	92 2e       	mov	r9, r18
    2a1e:	11 c0       	rjmp	.+34     	; 0x2a42 <vfprintf+0xe6>
    2a20:	ea e0       	ldi	r30, 0x0A	; 10
    2a22:	2e 9e       	mul	r2, r30
    2a24:	20 0d       	add	r18, r0
    2a26:	11 24       	eor	r1, r1
    2a28:	22 2e       	mov	r2, r18
    2a2a:	f3 2d       	mov	r31, r3
    2a2c:	f0 62       	ori	r31, 0x20	; 32
    2a2e:	3f 2e       	mov	r3, r31
    2a30:	08 c0       	rjmp	.+16     	; 0x2a42 <vfprintf+0xe6>
    2a32:	8c 36       	cpi	r24, 0x6C	; 108
    2a34:	21 f4       	brne	.+8      	; 0x2a3e <vfprintf+0xe2>
    2a36:	83 2d       	mov	r24, r3
    2a38:	80 68       	ori	r24, 0x80	; 128
    2a3a:	38 2e       	mov	r3, r24
    2a3c:	02 c0       	rjmp	.+4      	; 0x2a42 <vfprintf+0xe6>
    2a3e:	88 36       	cpi	r24, 0x68	; 104
    2a40:	41 f4       	brne	.+16     	; 0x2a52 <vfprintf+0xf6>
    2a42:	f7 01       	movw	r30, r14
    2a44:	93 fd       	sbrc	r25, 3
    2a46:	85 91       	lpm	r24, Z+
    2a48:	93 ff       	sbrs	r25, 3
    2a4a:	81 91       	ld	r24, Z+
    2a4c:	7f 01       	movw	r14, r30
    2a4e:	81 11       	cpse	r24, r1
    2a50:	b3 cf       	rjmp	.-154    	; 0x29b8 <vfprintf+0x5c>
    2a52:	98 2f       	mov	r25, r24
    2a54:	9f 7d       	andi	r25, 0xDF	; 223
    2a56:	95 54       	subi	r25, 0x45	; 69
    2a58:	93 30       	cpi	r25, 0x03	; 3
    2a5a:	28 f4       	brcc	.+10     	; 0x2a66 <vfprintf+0x10a>
    2a5c:	0c 5f       	subi	r16, 0xFC	; 252
    2a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a60:	9f e3       	ldi	r25, 0x3F	; 63
    2a62:	99 83       	std	Y+1, r25	; 0x01
    2a64:	0d c0       	rjmp	.+26     	; 0x2a80 <vfprintf+0x124>
    2a66:	83 36       	cpi	r24, 0x63	; 99
    2a68:	31 f0       	breq	.+12     	; 0x2a76 <vfprintf+0x11a>
    2a6a:	83 37       	cpi	r24, 0x73	; 115
    2a6c:	71 f0       	breq	.+28     	; 0x2a8a <vfprintf+0x12e>
    2a6e:	83 35       	cpi	r24, 0x53	; 83
    2a70:	09 f0       	breq	.+2      	; 0x2a74 <vfprintf+0x118>
    2a72:	59 c0       	rjmp	.+178    	; 0x2b26 <vfprintf+0x1ca>
    2a74:	21 c0       	rjmp	.+66     	; 0x2ab8 <vfprintf+0x15c>
    2a76:	f8 01       	movw	r30, r16
    2a78:	80 81       	ld	r24, Z
    2a7a:	89 83       	std	Y+1, r24	; 0x01
    2a7c:	0e 5f       	subi	r16, 0xFE	; 254
    2a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a80:	88 24       	eor	r8, r8
    2a82:	83 94       	inc	r8
    2a84:	91 2c       	mov	r9, r1
    2a86:	53 01       	movw	r10, r6
    2a88:	13 c0       	rjmp	.+38     	; 0x2ab0 <vfprintf+0x154>
    2a8a:	28 01       	movw	r4, r16
    2a8c:	f2 e0       	ldi	r31, 0x02	; 2
    2a8e:	4f 0e       	add	r4, r31
    2a90:	51 1c       	adc	r5, r1
    2a92:	f8 01       	movw	r30, r16
    2a94:	a0 80       	ld	r10, Z
    2a96:	b1 80       	ldd	r11, Z+1	; 0x01
    2a98:	36 fe       	sbrs	r3, 6
    2a9a:	03 c0       	rjmp	.+6      	; 0x2aa2 <vfprintf+0x146>
    2a9c:	69 2d       	mov	r22, r9
    2a9e:	70 e0       	ldi	r23, 0x00	; 0
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <vfprintf+0x14a>
    2aa2:	6f ef       	ldi	r22, 0xFF	; 255
    2aa4:	7f ef       	ldi	r23, 0xFF	; 255
    2aa6:	c5 01       	movw	r24, r10
    2aa8:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <strnlen>
    2aac:	4c 01       	movw	r8, r24
    2aae:	82 01       	movw	r16, r4
    2ab0:	f3 2d       	mov	r31, r3
    2ab2:	ff 77       	andi	r31, 0x7F	; 127
    2ab4:	3f 2e       	mov	r3, r31
    2ab6:	16 c0       	rjmp	.+44     	; 0x2ae4 <vfprintf+0x188>
    2ab8:	28 01       	movw	r4, r16
    2aba:	22 e0       	ldi	r18, 0x02	; 2
    2abc:	42 0e       	add	r4, r18
    2abe:	51 1c       	adc	r5, r1
    2ac0:	f8 01       	movw	r30, r16
    2ac2:	a0 80       	ld	r10, Z
    2ac4:	b1 80       	ldd	r11, Z+1	; 0x01
    2ac6:	36 fe       	sbrs	r3, 6
    2ac8:	03 c0       	rjmp	.+6      	; 0x2ad0 <vfprintf+0x174>
    2aca:	69 2d       	mov	r22, r9
    2acc:	70 e0       	ldi	r23, 0x00	; 0
    2ace:	02 c0       	rjmp	.+4      	; 0x2ad4 <vfprintf+0x178>
    2ad0:	6f ef       	ldi	r22, 0xFF	; 255
    2ad2:	7f ef       	ldi	r23, 0xFF	; 255
    2ad4:	c5 01       	movw	r24, r10
    2ad6:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <strnlen_P>
    2ada:	4c 01       	movw	r8, r24
    2adc:	f3 2d       	mov	r31, r3
    2ade:	f0 68       	ori	r31, 0x80	; 128
    2ae0:	3f 2e       	mov	r3, r31
    2ae2:	82 01       	movw	r16, r4
    2ae4:	33 fc       	sbrc	r3, 3
    2ae6:	1b c0       	rjmp	.+54     	; 0x2b1e <vfprintf+0x1c2>
    2ae8:	82 2d       	mov	r24, r2
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	88 16       	cp	r8, r24
    2aee:	99 06       	cpc	r9, r25
    2af0:	b0 f4       	brcc	.+44     	; 0x2b1e <vfprintf+0x1c2>
    2af2:	b6 01       	movw	r22, r12
    2af4:	80 e2       	ldi	r24, 0x20	; 32
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <fputc>
    2afc:	2a 94       	dec	r2
    2afe:	f4 cf       	rjmp	.-24     	; 0x2ae8 <vfprintf+0x18c>
    2b00:	f5 01       	movw	r30, r10
    2b02:	37 fc       	sbrc	r3, 7
    2b04:	85 91       	lpm	r24, Z+
    2b06:	37 fe       	sbrs	r3, 7
    2b08:	81 91       	ld	r24, Z+
    2b0a:	5f 01       	movw	r10, r30
    2b0c:	b6 01       	movw	r22, r12
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <fputc>
    2b14:	21 10       	cpse	r2, r1
    2b16:	2a 94       	dec	r2
    2b18:	21 e0       	ldi	r18, 0x01	; 1
    2b1a:	82 1a       	sub	r8, r18
    2b1c:	91 08       	sbc	r9, r1
    2b1e:	81 14       	cp	r8, r1
    2b20:	91 04       	cpc	r9, r1
    2b22:	71 f7       	brne	.-36     	; 0x2b00 <vfprintf+0x1a4>
    2b24:	e8 c0       	rjmp	.+464    	; 0x2cf6 <vfprintf+0x39a>
    2b26:	84 36       	cpi	r24, 0x64	; 100
    2b28:	11 f0       	breq	.+4      	; 0x2b2e <vfprintf+0x1d2>
    2b2a:	89 36       	cpi	r24, 0x69	; 105
    2b2c:	41 f5       	brne	.+80     	; 0x2b7e <vfprintf+0x222>
    2b2e:	f8 01       	movw	r30, r16
    2b30:	37 fe       	sbrs	r3, 7
    2b32:	07 c0       	rjmp	.+14     	; 0x2b42 <vfprintf+0x1e6>
    2b34:	60 81       	ld	r22, Z
    2b36:	71 81       	ldd	r23, Z+1	; 0x01
    2b38:	82 81       	ldd	r24, Z+2	; 0x02
    2b3a:	93 81       	ldd	r25, Z+3	; 0x03
    2b3c:	0c 5f       	subi	r16, 0xFC	; 252
    2b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b40:	08 c0       	rjmp	.+16     	; 0x2b52 <vfprintf+0x1f6>
    2b42:	60 81       	ld	r22, Z
    2b44:	71 81       	ldd	r23, Z+1	; 0x01
    2b46:	07 2e       	mov	r0, r23
    2b48:	00 0c       	add	r0, r0
    2b4a:	88 0b       	sbc	r24, r24
    2b4c:	99 0b       	sbc	r25, r25
    2b4e:	0e 5f       	subi	r16, 0xFE	; 254
    2b50:	1f 4f       	sbci	r17, 0xFF	; 255
    2b52:	f3 2d       	mov	r31, r3
    2b54:	ff 76       	andi	r31, 0x6F	; 111
    2b56:	3f 2e       	mov	r3, r31
    2b58:	97 ff       	sbrs	r25, 7
    2b5a:	09 c0       	rjmp	.+18     	; 0x2b6e <vfprintf+0x212>
    2b5c:	90 95       	com	r25
    2b5e:	80 95       	com	r24
    2b60:	70 95       	com	r23
    2b62:	61 95       	neg	r22
    2b64:	7f 4f       	sbci	r23, 0xFF	; 255
    2b66:	8f 4f       	sbci	r24, 0xFF	; 255
    2b68:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6a:	f0 68       	ori	r31, 0x80	; 128
    2b6c:	3f 2e       	mov	r3, r31
    2b6e:	2a e0       	ldi	r18, 0x0A	; 10
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	a3 01       	movw	r20, r6
    2b74:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__ultoa_invert>
    2b78:	88 2e       	mov	r8, r24
    2b7a:	86 18       	sub	r8, r6
    2b7c:	45 c0       	rjmp	.+138    	; 0x2c08 <vfprintf+0x2ac>
    2b7e:	85 37       	cpi	r24, 0x75	; 117
    2b80:	31 f4       	brne	.+12     	; 0x2b8e <vfprintf+0x232>
    2b82:	23 2d       	mov	r18, r3
    2b84:	2f 7e       	andi	r18, 0xEF	; 239
    2b86:	b2 2e       	mov	r11, r18
    2b88:	2a e0       	ldi	r18, 0x0A	; 10
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	25 c0       	rjmp	.+74     	; 0x2bd8 <vfprintf+0x27c>
    2b8e:	93 2d       	mov	r25, r3
    2b90:	99 7f       	andi	r25, 0xF9	; 249
    2b92:	b9 2e       	mov	r11, r25
    2b94:	8f 36       	cpi	r24, 0x6F	; 111
    2b96:	c1 f0       	breq	.+48     	; 0x2bc8 <vfprintf+0x26c>
    2b98:	18 f4       	brcc	.+6      	; 0x2ba0 <vfprintf+0x244>
    2b9a:	88 35       	cpi	r24, 0x58	; 88
    2b9c:	79 f0       	breq	.+30     	; 0x2bbc <vfprintf+0x260>
    2b9e:	b5 c0       	rjmp	.+362    	; 0x2d0a <vfprintf+0x3ae>
    2ba0:	80 37       	cpi	r24, 0x70	; 112
    2ba2:	19 f0       	breq	.+6      	; 0x2baa <vfprintf+0x24e>
    2ba4:	88 37       	cpi	r24, 0x78	; 120
    2ba6:	21 f0       	breq	.+8      	; 0x2bb0 <vfprintf+0x254>
    2ba8:	b0 c0       	rjmp	.+352    	; 0x2d0a <vfprintf+0x3ae>
    2baa:	e9 2f       	mov	r30, r25
    2bac:	e0 61       	ori	r30, 0x10	; 16
    2bae:	be 2e       	mov	r11, r30
    2bb0:	b4 fe       	sbrs	r11, 4
    2bb2:	0d c0       	rjmp	.+26     	; 0x2bce <vfprintf+0x272>
    2bb4:	fb 2d       	mov	r31, r11
    2bb6:	f4 60       	ori	r31, 0x04	; 4
    2bb8:	bf 2e       	mov	r11, r31
    2bba:	09 c0       	rjmp	.+18     	; 0x2bce <vfprintf+0x272>
    2bbc:	34 fe       	sbrs	r3, 4
    2bbe:	0a c0       	rjmp	.+20     	; 0x2bd4 <vfprintf+0x278>
    2bc0:	29 2f       	mov	r18, r25
    2bc2:	26 60       	ori	r18, 0x06	; 6
    2bc4:	b2 2e       	mov	r11, r18
    2bc6:	06 c0       	rjmp	.+12     	; 0x2bd4 <vfprintf+0x278>
    2bc8:	28 e0       	ldi	r18, 0x08	; 8
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	05 c0       	rjmp	.+10     	; 0x2bd8 <vfprintf+0x27c>
    2bce:	20 e1       	ldi	r18, 0x10	; 16
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	02 c0       	rjmp	.+4      	; 0x2bd8 <vfprintf+0x27c>
    2bd4:	20 e1       	ldi	r18, 0x10	; 16
    2bd6:	32 e0       	ldi	r19, 0x02	; 2
    2bd8:	f8 01       	movw	r30, r16
    2bda:	b7 fe       	sbrs	r11, 7
    2bdc:	07 c0       	rjmp	.+14     	; 0x2bec <vfprintf+0x290>
    2bde:	60 81       	ld	r22, Z
    2be0:	71 81       	ldd	r23, Z+1	; 0x01
    2be2:	82 81       	ldd	r24, Z+2	; 0x02
    2be4:	93 81       	ldd	r25, Z+3	; 0x03
    2be6:	0c 5f       	subi	r16, 0xFC	; 252
    2be8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bea:	06 c0       	rjmp	.+12     	; 0x2bf8 <vfprintf+0x29c>
    2bec:	60 81       	ld	r22, Z
    2bee:	71 81       	ldd	r23, Z+1	; 0x01
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	0e 5f       	subi	r16, 0xFE	; 254
    2bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf8:	a3 01       	movw	r20, r6
    2bfa:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__ultoa_invert>
    2bfe:	88 2e       	mov	r8, r24
    2c00:	86 18       	sub	r8, r6
    2c02:	fb 2d       	mov	r31, r11
    2c04:	ff 77       	andi	r31, 0x7F	; 127
    2c06:	3f 2e       	mov	r3, r31
    2c08:	36 fe       	sbrs	r3, 6
    2c0a:	0d c0       	rjmp	.+26     	; 0x2c26 <vfprintf+0x2ca>
    2c0c:	23 2d       	mov	r18, r3
    2c0e:	2e 7f       	andi	r18, 0xFE	; 254
    2c10:	a2 2e       	mov	r10, r18
    2c12:	89 14       	cp	r8, r9
    2c14:	58 f4       	brcc	.+22     	; 0x2c2c <vfprintf+0x2d0>
    2c16:	34 fe       	sbrs	r3, 4
    2c18:	0b c0       	rjmp	.+22     	; 0x2c30 <vfprintf+0x2d4>
    2c1a:	32 fc       	sbrc	r3, 2
    2c1c:	09 c0       	rjmp	.+18     	; 0x2c30 <vfprintf+0x2d4>
    2c1e:	83 2d       	mov	r24, r3
    2c20:	8e 7e       	andi	r24, 0xEE	; 238
    2c22:	a8 2e       	mov	r10, r24
    2c24:	05 c0       	rjmp	.+10     	; 0x2c30 <vfprintf+0x2d4>
    2c26:	b8 2c       	mov	r11, r8
    2c28:	a3 2c       	mov	r10, r3
    2c2a:	03 c0       	rjmp	.+6      	; 0x2c32 <vfprintf+0x2d6>
    2c2c:	b8 2c       	mov	r11, r8
    2c2e:	01 c0       	rjmp	.+2      	; 0x2c32 <vfprintf+0x2d6>
    2c30:	b9 2c       	mov	r11, r9
    2c32:	a4 fe       	sbrs	r10, 4
    2c34:	0f c0       	rjmp	.+30     	; 0x2c54 <vfprintf+0x2f8>
    2c36:	fe 01       	movw	r30, r28
    2c38:	e8 0d       	add	r30, r8
    2c3a:	f1 1d       	adc	r31, r1
    2c3c:	80 81       	ld	r24, Z
    2c3e:	80 33       	cpi	r24, 0x30	; 48
    2c40:	21 f4       	brne	.+8      	; 0x2c4a <vfprintf+0x2ee>
    2c42:	9a 2d       	mov	r25, r10
    2c44:	99 7e       	andi	r25, 0xE9	; 233
    2c46:	a9 2e       	mov	r10, r25
    2c48:	09 c0       	rjmp	.+18     	; 0x2c5c <vfprintf+0x300>
    2c4a:	a2 fe       	sbrs	r10, 2
    2c4c:	06 c0       	rjmp	.+12     	; 0x2c5a <vfprintf+0x2fe>
    2c4e:	b3 94       	inc	r11
    2c50:	b3 94       	inc	r11
    2c52:	04 c0       	rjmp	.+8      	; 0x2c5c <vfprintf+0x300>
    2c54:	8a 2d       	mov	r24, r10
    2c56:	86 78       	andi	r24, 0x86	; 134
    2c58:	09 f0       	breq	.+2      	; 0x2c5c <vfprintf+0x300>
    2c5a:	b3 94       	inc	r11
    2c5c:	a3 fc       	sbrc	r10, 3
    2c5e:	11 c0       	rjmp	.+34     	; 0x2c82 <vfprintf+0x326>
    2c60:	a0 fe       	sbrs	r10, 0
    2c62:	06 c0       	rjmp	.+12     	; 0x2c70 <vfprintf+0x314>
    2c64:	b2 14       	cp	r11, r2
    2c66:	88 f4       	brcc	.+34     	; 0x2c8a <vfprintf+0x32e>
    2c68:	28 0c       	add	r2, r8
    2c6a:	92 2c       	mov	r9, r2
    2c6c:	9b 18       	sub	r9, r11
    2c6e:	0e c0       	rjmp	.+28     	; 0x2c8c <vfprintf+0x330>
    2c70:	b2 14       	cp	r11, r2
    2c72:	60 f4       	brcc	.+24     	; 0x2c8c <vfprintf+0x330>
    2c74:	b6 01       	movw	r22, r12
    2c76:	80 e2       	ldi	r24, 0x20	; 32
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <fputc>
    2c7e:	b3 94       	inc	r11
    2c80:	f7 cf       	rjmp	.-18     	; 0x2c70 <vfprintf+0x314>
    2c82:	b2 14       	cp	r11, r2
    2c84:	18 f4       	brcc	.+6      	; 0x2c8c <vfprintf+0x330>
    2c86:	2b 18       	sub	r2, r11
    2c88:	02 c0       	rjmp	.+4      	; 0x2c8e <vfprintf+0x332>
    2c8a:	98 2c       	mov	r9, r8
    2c8c:	21 2c       	mov	r2, r1
    2c8e:	a4 fe       	sbrs	r10, 4
    2c90:	10 c0       	rjmp	.+32     	; 0x2cb2 <vfprintf+0x356>
    2c92:	b6 01       	movw	r22, r12
    2c94:	80 e3       	ldi	r24, 0x30	; 48
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <fputc>
    2c9c:	a2 fe       	sbrs	r10, 2
    2c9e:	17 c0       	rjmp	.+46     	; 0x2cce <vfprintf+0x372>
    2ca0:	a1 fc       	sbrc	r10, 1
    2ca2:	03 c0       	rjmp	.+6      	; 0x2caa <vfprintf+0x34e>
    2ca4:	88 e7       	ldi	r24, 0x78	; 120
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	02 c0       	rjmp	.+4      	; 0x2cae <vfprintf+0x352>
    2caa:	88 e5       	ldi	r24, 0x58	; 88
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	b6 01       	movw	r22, r12
    2cb0:	0c c0       	rjmp	.+24     	; 0x2cca <vfprintf+0x36e>
    2cb2:	8a 2d       	mov	r24, r10
    2cb4:	86 78       	andi	r24, 0x86	; 134
    2cb6:	59 f0       	breq	.+22     	; 0x2cce <vfprintf+0x372>
    2cb8:	a1 fe       	sbrs	r10, 1
    2cba:	02 c0       	rjmp	.+4      	; 0x2cc0 <vfprintf+0x364>
    2cbc:	8b e2       	ldi	r24, 0x2B	; 43
    2cbe:	01 c0       	rjmp	.+2      	; 0x2cc2 <vfprintf+0x366>
    2cc0:	80 e2       	ldi	r24, 0x20	; 32
    2cc2:	a7 fc       	sbrc	r10, 7
    2cc4:	8d e2       	ldi	r24, 0x2D	; 45
    2cc6:	b6 01       	movw	r22, r12
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <fputc>
    2cce:	89 14       	cp	r8, r9
    2cd0:	38 f4       	brcc	.+14     	; 0x2ce0 <vfprintf+0x384>
    2cd2:	b6 01       	movw	r22, r12
    2cd4:	80 e3       	ldi	r24, 0x30	; 48
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <fputc>
    2cdc:	9a 94       	dec	r9
    2cde:	f7 cf       	rjmp	.-18     	; 0x2cce <vfprintf+0x372>
    2ce0:	8a 94       	dec	r8
    2ce2:	f3 01       	movw	r30, r6
    2ce4:	e8 0d       	add	r30, r8
    2ce6:	f1 1d       	adc	r31, r1
    2ce8:	80 81       	ld	r24, Z
    2cea:	b6 01       	movw	r22, r12
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <fputc>
    2cf2:	81 10       	cpse	r8, r1
    2cf4:	f5 cf       	rjmp	.-22     	; 0x2ce0 <vfprintf+0x384>
    2cf6:	22 20       	and	r2, r2
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <vfprintf+0x3a0>
    2cfa:	42 ce       	rjmp	.-892    	; 0x2980 <vfprintf+0x24>
    2cfc:	b6 01       	movw	r22, r12
    2cfe:	80 e2       	ldi	r24, 0x20	; 32
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <fputc>
    2d06:	2a 94       	dec	r2
    2d08:	f6 cf       	rjmp	.-20     	; 0x2cf6 <vfprintf+0x39a>
    2d0a:	f6 01       	movw	r30, r12
    2d0c:	86 81       	ldd	r24, Z+6	; 0x06
    2d0e:	97 81       	ldd	r25, Z+7	; 0x07
    2d10:	02 c0       	rjmp	.+4      	; 0x2d16 <vfprintf+0x3ba>
    2d12:	8f ef       	ldi	r24, 0xFF	; 255
    2d14:	9f ef       	ldi	r25, 0xFF	; 255
    2d16:	2b 96       	adiw	r28, 0x0b	; 11
    2d18:	e2 e1       	ldi	r30, 0x12	; 18
    2d1a:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__epilogue_restores__>

00002d1e <strnlen_P>:
    2d1e:	fc 01       	movw	r30, r24
    2d20:	05 90       	lpm	r0, Z+
    2d22:	61 50       	subi	r22, 0x01	; 1
    2d24:	70 40       	sbci	r23, 0x00	; 0
    2d26:	01 10       	cpse	r0, r1
    2d28:	d8 f7       	brcc	.-10     	; 0x2d20 <strnlen_P+0x2>
    2d2a:	80 95       	com	r24
    2d2c:	90 95       	com	r25
    2d2e:	8e 0f       	add	r24, r30
    2d30:	9f 1f       	adc	r25, r31
    2d32:	08 95       	ret

00002d34 <strnlen>:
    2d34:	fc 01       	movw	r30, r24
    2d36:	61 50       	subi	r22, 0x01	; 1
    2d38:	70 40       	sbci	r23, 0x00	; 0
    2d3a:	01 90       	ld	r0, Z+
    2d3c:	01 10       	cpse	r0, r1
    2d3e:	d8 f7       	brcc	.-10     	; 0x2d36 <strnlen+0x2>
    2d40:	80 95       	com	r24
    2d42:	90 95       	com	r25
    2d44:	8e 0f       	add	r24, r30
    2d46:	9f 1f       	adc	r25, r31
    2d48:	08 95       	ret

00002d4a <fputc>:
    2d4a:	0f 93       	push	r16
    2d4c:	1f 93       	push	r17
    2d4e:	cf 93       	push	r28
    2d50:	df 93       	push	r29
    2d52:	fb 01       	movw	r30, r22
    2d54:	23 81       	ldd	r18, Z+3	; 0x03
    2d56:	21 fd       	sbrc	r18, 1
    2d58:	03 c0       	rjmp	.+6      	; 0x2d60 <fputc+0x16>
    2d5a:	8f ef       	ldi	r24, 0xFF	; 255
    2d5c:	9f ef       	ldi	r25, 0xFF	; 255
    2d5e:	2c c0       	rjmp	.+88     	; 0x2db8 <fputc+0x6e>
    2d60:	22 ff       	sbrs	r18, 2
    2d62:	16 c0       	rjmp	.+44     	; 0x2d90 <fputc+0x46>
    2d64:	46 81       	ldd	r20, Z+6	; 0x06
    2d66:	57 81       	ldd	r21, Z+7	; 0x07
    2d68:	24 81       	ldd	r18, Z+4	; 0x04
    2d6a:	35 81       	ldd	r19, Z+5	; 0x05
    2d6c:	42 17       	cp	r20, r18
    2d6e:	53 07       	cpc	r21, r19
    2d70:	44 f4       	brge	.+16     	; 0x2d82 <fputc+0x38>
    2d72:	a0 81       	ld	r26, Z
    2d74:	b1 81       	ldd	r27, Z+1	; 0x01
    2d76:	9d 01       	movw	r18, r26
    2d78:	2f 5f       	subi	r18, 0xFF	; 255
    2d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7c:	31 83       	std	Z+1, r19	; 0x01
    2d7e:	20 83       	st	Z, r18
    2d80:	8c 93       	st	X, r24
    2d82:	26 81       	ldd	r18, Z+6	; 0x06
    2d84:	37 81       	ldd	r19, Z+7	; 0x07
    2d86:	2f 5f       	subi	r18, 0xFF	; 255
    2d88:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8a:	37 83       	std	Z+7, r19	; 0x07
    2d8c:	26 83       	std	Z+6, r18	; 0x06
    2d8e:	14 c0       	rjmp	.+40     	; 0x2db8 <fputc+0x6e>
    2d90:	8b 01       	movw	r16, r22
    2d92:	ec 01       	movw	r28, r24
    2d94:	fb 01       	movw	r30, r22
    2d96:	00 84       	ldd	r0, Z+8	; 0x08
    2d98:	f1 85       	ldd	r31, Z+9	; 0x09
    2d9a:	e0 2d       	mov	r30, r0
    2d9c:	09 95       	icall
    2d9e:	89 2b       	or	r24, r25
    2da0:	e1 f6       	brne	.-72     	; 0x2d5a <fputc+0x10>
    2da2:	d8 01       	movw	r26, r16
    2da4:	16 96       	adiw	r26, 0x06	; 6
    2da6:	8d 91       	ld	r24, X+
    2da8:	9c 91       	ld	r25, X
    2daa:	17 97       	sbiw	r26, 0x07	; 7
    2dac:	01 96       	adiw	r24, 0x01	; 1
    2dae:	17 96       	adiw	r26, 0x07	; 7
    2db0:	9c 93       	st	X, r25
    2db2:	8e 93       	st	-X, r24
    2db4:	16 97       	sbiw	r26, 0x06	; 6
    2db6:	ce 01       	movw	r24, r28
    2db8:	df 91       	pop	r29
    2dba:	cf 91       	pop	r28
    2dbc:	1f 91       	pop	r17
    2dbe:	0f 91       	pop	r16
    2dc0:	08 95       	ret

00002dc2 <__ultoa_invert>:
    2dc2:	fa 01       	movw	r30, r20
    2dc4:	aa 27       	eor	r26, r26
    2dc6:	28 30       	cpi	r18, 0x08	; 8
    2dc8:	51 f1       	breq	.+84     	; 0x2e1e <__ultoa_invert+0x5c>
    2dca:	20 31       	cpi	r18, 0x10	; 16
    2dcc:	81 f1       	breq	.+96     	; 0x2e2e <__ultoa_invert+0x6c>
    2dce:	e8 94       	clt
    2dd0:	6f 93       	push	r22
    2dd2:	6e 7f       	andi	r22, 0xFE	; 254
    2dd4:	6e 5f       	subi	r22, 0xFE	; 254
    2dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd8:	8f 4f       	sbci	r24, 0xFF	; 255
    2dda:	9f 4f       	sbci	r25, 0xFF	; 255
    2ddc:	af 4f       	sbci	r26, 0xFF	; 255
    2dde:	b1 e0       	ldi	r27, 0x01	; 1
    2de0:	3e d0       	rcall	.+124    	; 0x2e5e <__ultoa_invert+0x9c>
    2de2:	b4 e0       	ldi	r27, 0x04	; 4
    2de4:	3c d0       	rcall	.+120    	; 0x2e5e <__ultoa_invert+0x9c>
    2de6:	67 0f       	add	r22, r23
    2de8:	78 1f       	adc	r23, r24
    2dea:	89 1f       	adc	r24, r25
    2dec:	9a 1f       	adc	r25, r26
    2dee:	a1 1d       	adc	r26, r1
    2df0:	68 0f       	add	r22, r24
    2df2:	79 1f       	adc	r23, r25
    2df4:	8a 1f       	adc	r24, r26
    2df6:	91 1d       	adc	r25, r1
    2df8:	a1 1d       	adc	r26, r1
    2dfa:	6a 0f       	add	r22, r26
    2dfc:	71 1d       	adc	r23, r1
    2dfe:	81 1d       	adc	r24, r1
    2e00:	91 1d       	adc	r25, r1
    2e02:	a1 1d       	adc	r26, r1
    2e04:	20 d0       	rcall	.+64     	; 0x2e46 <__ultoa_invert+0x84>
    2e06:	09 f4       	brne	.+2      	; 0x2e0a <__ultoa_invert+0x48>
    2e08:	68 94       	set
    2e0a:	3f 91       	pop	r19
    2e0c:	2a e0       	ldi	r18, 0x0A	; 10
    2e0e:	26 9f       	mul	r18, r22
    2e10:	11 24       	eor	r1, r1
    2e12:	30 19       	sub	r19, r0
    2e14:	30 5d       	subi	r19, 0xD0	; 208
    2e16:	31 93       	st	Z+, r19
    2e18:	de f6       	brtc	.-74     	; 0x2dd0 <__ultoa_invert+0xe>
    2e1a:	cf 01       	movw	r24, r30
    2e1c:	08 95       	ret
    2e1e:	46 2f       	mov	r20, r22
    2e20:	47 70       	andi	r20, 0x07	; 7
    2e22:	40 5d       	subi	r20, 0xD0	; 208
    2e24:	41 93       	st	Z+, r20
    2e26:	b3 e0       	ldi	r27, 0x03	; 3
    2e28:	0f d0       	rcall	.+30     	; 0x2e48 <__ultoa_invert+0x86>
    2e2a:	c9 f7       	brne	.-14     	; 0x2e1e <__ultoa_invert+0x5c>
    2e2c:	f6 cf       	rjmp	.-20     	; 0x2e1a <__ultoa_invert+0x58>
    2e2e:	46 2f       	mov	r20, r22
    2e30:	4f 70       	andi	r20, 0x0F	; 15
    2e32:	40 5d       	subi	r20, 0xD0	; 208
    2e34:	4a 33       	cpi	r20, 0x3A	; 58
    2e36:	18 f0       	brcs	.+6      	; 0x2e3e <__ultoa_invert+0x7c>
    2e38:	49 5d       	subi	r20, 0xD9	; 217
    2e3a:	31 fd       	sbrc	r19, 1
    2e3c:	40 52       	subi	r20, 0x20	; 32
    2e3e:	41 93       	st	Z+, r20
    2e40:	02 d0       	rcall	.+4      	; 0x2e46 <__ultoa_invert+0x84>
    2e42:	a9 f7       	brne	.-22     	; 0x2e2e <__ultoa_invert+0x6c>
    2e44:	ea cf       	rjmp	.-44     	; 0x2e1a <__ultoa_invert+0x58>
    2e46:	b4 e0       	ldi	r27, 0x04	; 4
    2e48:	a6 95       	lsr	r26
    2e4a:	97 95       	ror	r25
    2e4c:	87 95       	ror	r24
    2e4e:	77 95       	ror	r23
    2e50:	67 95       	ror	r22
    2e52:	ba 95       	dec	r27
    2e54:	c9 f7       	brne	.-14     	; 0x2e48 <__ultoa_invert+0x86>
    2e56:	00 97       	sbiw	r24, 0x00	; 0
    2e58:	61 05       	cpc	r22, r1
    2e5a:	71 05       	cpc	r23, r1
    2e5c:	08 95       	ret
    2e5e:	9b 01       	movw	r18, r22
    2e60:	ac 01       	movw	r20, r24
    2e62:	0a 2e       	mov	r0, r26
    2e64:	06 94       	lsr	r0
    2e66:	57 95       	ror	r21
    2e68:	47 95       	ror	r20
    2e6a:	37 95       	ror	r19
    2e6c:	27 95       	ror	r18
    2e6e:	ba 95       	dec	r27
    2e70:	c9 f7       	brne	.-14     	; 0x2e64 <__ultoa_invert+0xa2>
    2e72:	62 0f       	add	r22, r18
    2e74:	73 1f       	adc	r23, r19
    2e76:	84 1f       	adc	r24, r20
    2e78:	95 1f       	adc	r25, r21
    2e7a:	a0 1d       	adc	r26, r0
    2e7c:	08 95       	ret

00002e7e <__prologue_saves__>:
    2e7e:	2f 92       	push	r2
    2e80:	3f 92       	push	r3
    2e82:	4f 92       	push	r4
    2e84:	5f 92       	push	r5
    2e86:	6f 92       	push	r6
    2e88:	7f 92       	push	r7
    2e8a:	8f 92       	push	r8
    2e8c:	9f 92       	push	r9
    2e8e:	af 92       	push	r10
    2e90:	bf 92       	push	r11
    2e92:	cf 92       	push	r12
    2e94:	df 92       	push	r13
    2e96:	ef 92       	push	r14
    2e98:	ff 92       	push	r15
    2e9a:	0f 93       	push	r16
    2e9c:	1f 93       	push	r17
    2e9e:	cf 93       	push	r28
    2ea0:	df 93       	push	r29
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
    2ea6:	ca 1b       	sub	r28, r26
    2ea8:	db 0b       	sbc	r29, r27
    2eaa:	0f b6       	in	r0, 0x3f	; 63
    2eac:	f8 94       	cli
    2eae:	de bf       	out	0x3e, r29	; 62
    2eb0:	0f be       	out	0x3f, r0	; 63
    2eb2:	cd bf       	out	0x3d, r28	; 61
    2eb4:	09 94       	ijmp

00002eb6 <__epilogue_restores__>:
    2eb6:	2a 88       	ldd	r2, Y+18	; 0x12
    2eb8:	39 88       	ldd	r3, Y+17	; 0x11
    2eba:	48 88       	ldd	r4, Y+16	; 0x10
    2ebc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ebe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ec0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ec2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ec4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ec6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ec8:	b9 84       	ldd	r11, Y+9	; 0x09
    2eca:	c8 84       	ldd	r12, Y+8	; 0x08
    2ecc:	df 80       	ldd	r13, Y+7	; 0x07
    2ece:	ee 80       	ldd	r14, Y+6	; 0x06
    2ed0:	fd 80       	ldd	r15, Y+5	; 0x05
    2ed2:	0c 81       	ldd	r16, Y+4	; 0x04
    2ed4:	1b 81       	ldd	r17, Y+3	; 0x03
    2ed6:	aa 81       	ldd	r26, Y+2	; 0x02
    2ed8:	b9 81       	ldd	r27, Y+1	; 0x01
    2eda:	ce 0f       	add	r28, r30
    2edc:	d1 1d       	adc	r29, r1
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	ed 01       	movw	r28, r26
    2eea:	08 95       	ret

00002eec <_exit>:
    2eec:	f8 94       	cli

00002eee <__stop_program>:
    2eee:	ff cf       	rjmp	.-2      	; 0x2eee <__stop_program>
