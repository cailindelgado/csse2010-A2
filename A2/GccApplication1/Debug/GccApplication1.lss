
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00001822  000018b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001822  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012a  008001a0  008001a0  00001956  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001956  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002844  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001167  00000000  00000000  00004510  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017b7  00000000  00000000  00005677  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000077c  00000000  00000000  00006e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b68  00000000  00000000  000075ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001774  00000000  00000000  00008114  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  00009888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c1 01 	jmp	0x382	; 0x382 <__ctors_end>
       4:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
       8:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
       c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      10:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      14:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_5>
      18:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      1c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      20:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      24:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      28:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      2c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      30:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      34:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      38:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      3c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      40:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__vector_16>
      44:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      48:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      4c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      50:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__vector_20>
      54:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__vector_21>
      58:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      5c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      60:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      64:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      68:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      6c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      70:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      74:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      78:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2286>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2262>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 20 43 61 69 6c 69 6e 20 44 65 6c 67      by  Cailin Delg
      d4:	61 64 6f 20 2d 20 34 38 30 32 37 39 34 32 00        ado - 48027942.

000000e3 <__c.2260>:
      e3:	20 5c 24 24 20 20 20 5c 24 24 20 20 20 20 20 5c      \$$   \$$     \
      f3:	24 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20     $     \$$   \$$ 
     103:	20 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20           \$$   \$$ 
     113:	20 5c 24 24 24 24 24 24 24 20 5c 24 24 20 20 20      \$$$$$$$ \$$   
     123:	20 20 20 20 20 5c 24 24 24 24 24 24 00                   \$$$$$$.

00000130 <__c.2258>:
     130:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 5c 24     | $$  | $$    \$
     140:	24 24 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20     $$   | $$  | $$ 
     150:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     160:	5c 24 24 20 20 20 20 20 5c 7c 20 24 24 20 20 20     \$$     \| $$   
     170:	20 20 20 20 5c 24 24 20 20 20 20 24 24 00               \$$    $$.

0000017e <__c.2256>:
     17e:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 5c 24 24     | $$  | $$   \$$
     18e:	20 24 24 20 20 7c 20 24 24 20 20 7c 20 24 24 20      $$  | $$  | $$ 
     19e:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 7c          | $$  | $$|
     1ae:	20 24 24 24 24 24 24 24 24 7c 20 24 24 20 20 20      $$$$$$$$| $$   
     1be:	20 20 20 7c 20 24 24 5f 5f 2f 20 24 24 00              | $$__/ $$.

000001cc <__c.2254>:
     1cc:	7c 20 24 24 24 24 24 24 24 24 20 20 5c 24 24 5c     | $$$$$$$$  \$$\
     1dc:	20 20 24 24 20 7c 20 24 24 24 24 24 24 24 5c 20       $$ | $$$$$$$\ 
     1ec:	20 20 20 20 20 7c 20 24 24 24 24 24 24 24 24 7c          | $$$$$$$$|
     1fc:	20 24 24 20 20 20 20 24 24 7c 20 24 24 20 20 20      $$    $$| $$   
     20c:	5c 24 24 7c 20 24 24 20 20 7c 20 24 24 00           \$$| $$  | $$.

0000021a <__c.2252>:
     21a:	7c 20 24 24 20 20 20 20 24 24 20 5c 24 24 5c 20     | $$    $$ \$$\ 
     22a:	2f 20 20 24 24 7c 20 24 24 20 20 20 20 24 24 20     /  $$| $$    $$ 
     23a:	20 20 20 20 20 7c 20 24 24 20 20 20 20 24 24 7c          | $$    $$|
     24a:	20 20 24 24 24 24 24 24 5c 7c 20 20 24 24 24 24       $$$$$$\|  $$$$
     25a:	24 24 5c 7c 20 20 24 24 24 24 24 24 5c 00           $$\|  $$$$$$\.

00000268 <__c.2250>:
     268:	7c 20 24 24 5f 5f 7c 20 24 24 7c 20 24 24 20 20     | $$__| $$| $$  
     278:	20 7c 20 24 24 7c 20 24 24 5f 5f 7c 20 24 24 20      | $$| $$__| $$ 
     288:	20 20 20 20 20 7c 20 24 24 5f 5f 7c 20 24 24 20          | $$__| $$ 
     298:	2f 20 20 20 20 20 20 5c 20 20 2f 20 20 20 20 20     /      \  /     
     2a8:	20 5c 20 20 2f 20 20 20 20 20 20 5c 00               \  /      \.

000002b5 <__c.2248>:
     2b5:	7c 20 20 24 24 24 24 24 24 5c 7c 20 24 24 20 20     |  $$$$$$\| $$  
     2c5:	20 7c 20 24 24 7c 20 24 24 24 24 24 24 24 5c 20      | $$| $$$$$$$\ 
     2d5:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     2e5:	20 5f 5f 5f 5f 5f 5f 20 20 20 20 5f 5f 5f 5f 5f      ______    _____
     2f5:	5f 20 20 20 20 5f 5f 5f 5f 5f 5f 00                 _    ______.

00000301 <__c.2246>:
     301:	20 2f 20 20 20 20 20 20 5c 20 7c 20 20 5c 20 20      /      \ |  \  
     311:	20 7c 20 20 5c 7c 20 20 20 20 20 20 20 5c 20 20      |  \|       \  
     321:	20 20 20 20 20 7c 20 20 5c 20 20 7c 20 20 5c 00          |  \  |  \.

00000331 <__c.2244>:
     331:	20 20 5f 5f 5f 5f 5f 5f 20 20 20 5f 5f 20 20 20       ______   __   
     341:	20 20 5f 5f 20 20 5f 5f 5f 5f 5f 5f 5f 20 20 20       __  _______   
     351:	20 20 20 20 20 20 5f 5f 20 20 20 20 5f 5f 00              __    __.

00000360 <__c.2058>:
     360:	1b 5b 3f 32 35 68 00                                .[?25h.

00000367 <__c.2054>:
     367:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000036e <__c.2050>:
     36e:	1b 5b 25 64 6d 00                                   .[%dm.

00000374 <__c.2040>:
     374:	1b 5b 32 4a 00                                      .[2J.

00000379 <__c.2025>:
     379:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000382 <__ctors_end>:
     382:	11 24       	eor	r1, r1
     384:	1f be       	out	0x3f, r1	; 63
     386:	cf ef       	ldi	r28, 0xFF	; 255
     388:	d8 e0       	ldi	r29, 0x08	; 8
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	cd bf       	out	0x3d, r28	; 61

0000038e <__do_copy_data>:
     38e:	11 e0       	ldi	r17, 0x01	; 1
     390:	a0 e0       	ldi	r26, 0x00	; 0
     392:	b1 e0       	ldi	r27, 0x01	; 1
     394:	e2 e2       	ldi	r30, 0x22	; 34
     396:	f8 e1       	ldi	r31, 0x18	; 24
     398:	02 c0       	rjmp	.+4      	; 0x39e <__do_copy_data+0x10>
     39a:	05 90       	lpm	r0, Z+
     39c:	0d 92       	st	X+, r0
     39e:	a0 3a       	cpi	r26, 0xA0	; 160
     3a0:	b1 07       	cpc	r27, r17
     3a2:	d9 f7       	brne	.-10     	; 0x39a <__do_copy_data+0xc>

000003a4 <__do_clear_bss>:
     3a4:	22 e0       	ldi	r18, 0x02	; 2
     3a6:	a0 ea       	ldi	r26, 0xA0	; 160
     3a8:	b1 e0       	ldi	r27, 0x01	; 1
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <.do_clear_bss_start>

000003ac <.do_clear_bss_loop>:
     3ac:	1d 92       	st	X+, r1

000003ae <.do_clear_bss_start>:
     3ae:	aa 3c       	cpi	r26, 0xCA	; 202
     3b0:	b2 07       	cpc	r27, r18
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <.do_clear_bss_loop>
     3b4:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <main>
     3b8:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <_exit>

000003bc <__bad_interrupt>:
     3bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c0 <init_button_interrupts>:
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void)
{
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     3c0:	e8 e6       	ldi	r30, 0x68	; 104
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	82 60       	ori	r24, 0x02	; 2
     3c8:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     3ca:	8b b3       	in	r24, 0x1b	; 27
     3cc:	82 60       	ori	r24, 0x02	; 2
     3ce:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     3d0:	ec e6       	ldi	r30, 0x6C	; 108
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	8f 60       	ori	r24, 0x0F	; 15
     3d8:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     3da:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
     3de:	08 95       	ret

000003e0 <button_pushed>:

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0)
     3e0:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
     3e4:	18 16       	cp	r1, r24
     3e6:	14 f5       	brge	.+68     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	{
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     3e8:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3ec:	6f b7       	in	r22, 0x3f	; 63
		cli();
     3ee:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	09 c0       	rjmp	.+18     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		{
			button_queue[i - 1] = button_queue[i];
     3f4:	f9 01       	movw	r30, r18
     3f6:	ef 55       	subi	r30, 0x5F	; 95
     3f8:	fe 4f       	sbci	r31, 0xFE	; 254
     3fa:	40 81       	ld	r20, Z
     3fc:	f9 01       	movw	r30, r18
     3fe:	e0 56       	subi	r30, 0x60	; 96
     400:	fe 4f       	sbci	r31, 0xFE	; 254
     402:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     404:	9f 5f       	subi	r25, 0xFF	; 255
     406:	29 2f       	mov	r18, r25
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <__data_end>
     40e:	04 2e       	mov	r0, r20
     410:	00 0c       	add	r0, r0
     412:	55 0b       	sbc	r21, r21
     414:	24 17       	cp	r18, r20
     416:	35 07       	cpc	r19, r21
     418:	6c f3       	brlt	.-38     	; 0x3f4 <button_pushed+0x14>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     41a:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <__data_end>
     41e:	91 50       	subi	r25, 0x01	; 1
     420:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <__data_end>
		
		if (interrupts_were_enabled)
     424:	66 23       	and	r22, r22
     426:	1c f4       	brge	.+6      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		{
			// Turn them back on again
			sei();
     428:	78 94       	sei
     42a:	08 95       	ret
	queue_length = 0;
}

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     42c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     42e:	08 95       	ret

00000430 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect)
{
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	2f 93       	push	r18
     43c:	3f 93       	push	r19
     43e:	4f 93       	push	r20
     440:	8f 93       	push	r24
     442:	9f 93       	push	r25
     444:	ef 93       	push	r30
     446:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     448:	43 b1       	in	r20, 0x03	; 3
     44a:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	26 c0       	rjmp	.+76     	; 0x49c <__vector_5+0x6c>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     450:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <__data_end>
     454:	94 30       	cpi	r25, 0x04	; 4
     456:	0c f5       	brge	.+66     	; 0x49a <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     458:	24 2f       	mov	r18, r20
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	08 2e       	mov	r0, r24
     45e:	02 c0       	rjmp	.+4      	; 0x464 <__vector_5+0x34>
     460:	35 95       	asr	r19
     462:	27 95       	ror	r18
     464:	0a 94       	dec	r0
     466:	e2 f7       	brpl	.-8      	; 0x460 <__vector_5+0x30>
     468:	20 ff       	sbrs	r18, 0
     46a:	17 c0       	rjmp	.+46     	; 0x49a <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin)))
     46c:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <last_button_state>
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	08 2e       	mov	r0, r24
     474:	02 c0       	rjmp	.+4      	; 0x47a <__vector_5+0x4a>
     476:	35 95       	asr	r19
     478:	27 95       	ror	r18
     47a:	0a 94       	dec	r0
     47c:	e2 f7       	brpl	.-8      	; 0x476 <__vector_5+0x46>
     47e:	20 fd       	sbrc	r18, 0
     480:	0c c0       	rjmp	.+24     	; 0x49a <__vector_5+0x6a>
				{
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     482:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <__data_end>
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	9e 0f       	add	r25, r30
     48a:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <__data_end>
     48e:	0e 2e       	mov	r0, r30
     490:	00 0c       	add	r0, r0
     492:	ff 0b       	sbc	r31, r31
     494:	ef 55       	subi	r30, 0x5F	; 95
     496:	fe 4f       	sbci	r31, 0xFE	; 254
     498:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     49a:	8f 5f       	subi	r24, 0xFF	; 255
     49c:	84 30       	cpi	r24, 0x04	; 4
     49e:	c0 f2       	brcs	.-80     	; 0x450 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     4a0:	40 93 a5 01 	sts	0x01A5, r20	; 0x8001a5 <last_button_state>
}
     4a4:	ff 91       	pop	r31
     4a6:	ef 91       	pop	r30
     4a8:	9f 91       	pop	r25
     4aa:	8f 91       	pop	r24
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <update_start_screen>:

// Update dynamic start screen based on the frame number (0-31)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	18 2f       	mov	r17, r24
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     4c4:	d4 e0       	ldi	r29, 0x04	; 4
     4c6:	36 c0       	rjmp	.+108    	; 0x534 <update_start_screen+0x78>
	{
		for (uint8_t col = 11; col < 16; col++)
		{
			colour = col == 14 ? COLOUR_YELLOW : COLOUR_BLACK;
     4c8:	ce 30       	cpi	r28, 0x0E	; 14
     4ca:	11 f4       	brne	.+4      	; 0x4d0 <update_start_screen+0x14>
     4cc:	4f ef       	ldi	r20, 0xFF	; 255
     4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <update_start_screen+0x16>
     4d0:	40 e0       	ldi	r20, 0x00	; 0
			if (((32+col-frame_number) & ((1<<(row-2))-1)) == (1<<(row-3))-1)
     4d2:	2c 2f       	mov	r18, r28
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	20 5e       	subi	r18, 0xE0	; 224
     4d8:	3f 4f       	sbci	r19, 0xFF	; 255
     4da:	21 1b       	sub	r18, r17
     4dc:	31 09       	sbc	r19, r1
     4de:	ed 2f       	mov	r30, r29
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	bf 01       	movw	r22, r30
     4e4:	62 50       	subi	r22, 0x02	; 2
     4e6:	71 09       	sbc	r23, r1
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	dc 01       	movw	r26, r24
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <update_start_screen+0x38>
     4f0:	aa 0f       	add	r26, r26
     4f2:	bb 1f       	adc	r27, r27
     4f4:	6a 95       	dec	r22
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <update_start_screen+0x34>
     4f8:	bd 01       	movw	r22, r26
     4fa:	61 50       	subi	r22, 0x01	; 1
     4fc:	71 09       	sbc	r23, r1
     4fe:	26 23       	and	r18, r22
     500:	37 23       	and	r19, r23
     502:	33 97       	sbiw	r30, 0x03	; 3
     504:	02 c0       	rjmp	.+4      	; 0x50a <update_start_screen+0x4e>
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	ea 95       	dec	r30
     50c:	e2 f7       	brpl	.-8      	; 0x506 <update_start_screen+0x4a>
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	28 17       	cp	r18, r24
     512:	39 07       	cpc	r19, r25
     514:	29 f4       	brne	.+10     	; 0x520 <update_start_screen+0x64>
			{
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
     516:	ce 30       	cpi	r28, 0x0E	; 14
     518:	10 f4       	brcc	.+4      	; 0x51e <update_start_screen+0x62>
     51a:	4f e0       	ldi	r20, 0x0F	; 15
     51c:	01 c0       	rjmp	.+2      	; 0x520 <update_start_screen+0x64>
     51e:	40 ef       	ldi	r20, 0xF0	; 240
			}
			ledmatrix_update_pixel(col, row, colour);
     520:	6d 2f       	mov	r22, r29
     522:	8c 2f       	mov	r24, r28
     524:	0e 94 8b 04 	call	0x916	; 0x916 <ledmatrix_update_pixel>
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
	{
		for (uint8_t col = 11; col < 16; col++)
     528:	cf 5f       	subi	r28, 0xFF	; 255
     52a:	01 c0       	rjmp	.+2      	; 0x52e <update_start_screen+0x72>
     52c:	cb e0       	ldi	r28, 0x0B	; 11
     52e:	c0 31       	cpi	r28, 0x10	; 16
     530:	58 f2       	brcs	.-106    	; 0x4c8 <update_start_screen+0xc>
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     532:	df 5f       	subi	r29, 0xFF	; 255
     534:	d8 30       	cpi	r29, 0x08	; 8
     536:	d0 f3       	brcs	.-12     	; 0x52c <update_start_screen+0x70>
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
			}
			ledmatrix_update_pixel(col, row, colour);
		}
	}
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	08 95       	ret

00000540 <show_start_screen>:
// Stored as a 5 x 3 grid pattern going from Left-to-Right, Top-to-Bottom
// Padded with a leading zero so that it fits into a 16-bit value


void show_start_screen(void)
{
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	28 97       	sbiw	r28, 0x08	; 8
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     556:	0e 94 c7 04 	call	0x98e	; 0x98e <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     55a:	10 e0       	ldi	r17, 0x00	; 0
     55c:	31 c0       	rjmp	.+98     	; 0x5c0 <show_start_screen+0x80>
	{
		col_data = pong_display[col];
     55e:	e1 2f       	mov	r30, r17
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	e2 5f       	subi	r30, 0xF2	; 242
     564:	fe 4f       	sbci	r31, 0xFE	; 254
     566:	90 81       	ld	r25, Z
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	21 c0       	rjmp	.+66     	; 0x5ae <show_start_screen+0x6e>
		{
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data>>row & 1)
     56c:	28 2f       	mov	r18, r24
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	49 2f       	mov	r20, r25
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	08 2e       	mov	r0, r24
     576:	02 c0       	rjmp	.+4      	; 0x57c <show_start_screen+0x3c>
     578:	55 95       	asr	r21
     57a:	47 95       	ror	r20
     57c:	0a 94       	dec	r0
     57e:	e2 f7       	brpl	.-8      	; 0x578 <show_start_screen+0x38>
     580:	40 ff       	sbrs	r20, 0
     582:	0d c0       	rjmp	.+26     	; 0x59e <show_start_screen+0x5e>
			{
				column_colour_data[row] = (row < 4 ? COLOUR_RED : COLOUR_GREEN);
     584:	84 30       	cpi	r24, 0x04	; 4
     586:	10 f4       	brcc	.+4      	; 0x58c <show_start_screen+0x4c>
     588:	4f e0       	ldi	r20, 0x0F	; 15
     58a:	01 c0       	rjmp	.+2      	; 0x58e <show_start_screen+0x4e>
     58c:	40 ef       	ldi	r20, 0xF0	; 240
     58e:	e1 e0       	ldi	r30, 0x01	; 1
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	ec 0f       	add	r30, r28
     594:	fd 1f       	adc	r31, r29
     596:	e2 0f       	add	r30, r18
     598:	f3 1f       	adc	r31, r19
     59a:	40 83       	st	Z, r20
     59c:	07 c0       	rjmp	.+14     	; 0x5ac <show_start_screen+0x6c>
			}
			else
			{
				column_colour_data[row] = 0;
     59e:	e1 e0       	ldi	r30, 0x01	; 1
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	ec 0f       	add	r30, r28
     5a4:	fd 1f       	adc	r31, r29
     5a6:	e2 0f       	add	r30, r18
     5a8:	f3 1f       	adc	r31, r19
     5aa:	10 82       	st	Z, r1
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
	{
		col_data = pong_display[col];
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     5ac:	8f 5f       	subi	r24, 0xFF	; 255
     5ae:	88 30       	cpi	r24, 0x08	; 8
     5b0:	e8 f2       	brcs	.-70     	; 0x56c <show_start_screen+0x2c>
			else
			{
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
     5b2:	be 01       	movw	r22, r28
     5b4:	6f 5f       	subi	r22, 0xFF	; 255
     5b6:	7f 4f       	sbci	r23, 0xFF	; 255
     5b8:	81 2f       	mov	r24, r17
     5ba:	0e 94 aa 04 	call	0x954	; 0x954 <ledmatrix_update_column>
{
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     5be:	1f 5f       	subi	r17, 0xFF	; 255
     5c0:	10 31       	cpi	r17, 0x10	; 16
     5c2:	68 f2       	brcs	.-102    	; 0x55e <show_start_screen+0x1e>
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
	}
	update_start_screen(0);
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <update_start_screen>
}
     5ca:	28 96       	adiw	r28, 0x08	; 8
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	08 95       	ret

000005de <default_grid>:
}

// Initialise the display for the board, this creates the display
// for an empty board.
void default_grid(void)
{
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	28 97       	sbiw	r28, 0x08	; 8
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_clear();
     5f2:	0e 94 c7 04 	call	0x98e	; 0x98e <ledmatrix_clear>
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	09 c0       	rjmp	.+18     	; 0x60c <default_grid+0x2e>
	{
		colours[row] = COLOUR_YELLOW;
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	ec 0f       	add	r30, r28
     600:	fd 1f       	adc	r31, r29
     602:	e8 0f       	add	r30, r24
     604:	f1 1d       	adc	r31, r1
     606:	9f ef       	ldi	r25, 0xFF	; 255
     608:	90 83       	st	Z, r25
void default_grid(void)
{
	ledmatrix_clear();
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     60a:	8f 5f       	subi	r24, 0xFF	; 255
     60c:	88 30       	cpi	r24, 0x08	; 8
     60e:	a8 f3       	brcs	.-22     	; 0x5fa <default_grid+0x1c>
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
     610:	be 01       	movw	r22, r28
     612:	6f 5f       	subi	r22, 0xFF	; 255
     614:	7f 4f       	sbci	r23, 0xFF	; 255
     616:	8d e0       	ldi	r24, 0x0D	; 13
     618:	0e 94 aa 04 	call	0x954	; 0x954 <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	09 c0       	rjmp	.+18     	; 0x632 <default_grid+0x54>
	{
		colours[row] = COLOUR_HALF_YELLOW;
     620:	e1 e0       	ldi	r30, 0x01	; 1
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	ec 0f       	add	r30, r28
     626:	fd 1f       	adc	r31, r29
     628:	e8 0f       	add	r30, r24
     62a:	f1 1d       	adc	r31, r1
     62c:	95 e5       	ldi	r25, 0x55	; 85
     62e:	90 83       	st	Z, r25
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     630:	8f 5f       	subi	r24, 0xFF	; 255
     632:	88 30       	cpi	r24, 0x08	; 8
     634:	a8 f3       	brcs	.-22     	; 0x620 <default_grid+0x42>
	{
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
     636:	be 01       	movw	r22, r28
     638:	6f 5f       	subi	r22, 0xFF	; 255
     63a:	7f 4f       	sbci	r23, 0xFF	; 255
     63c:	8c e0       	ldi	r24, 0x0C	; 12
     63e:	0e 94 aa 04 	call	0x954	; 0x954 <ledmatrix_update_column>
	ledmatrix_update_column(14, colours);
     642:	be 01       	movw	r22, r28
     644:	6f 5f       	subi	r22, 0xFF	; 255
     646:	7f 4f       	sbci	r23, 0xFF	; 255
     648:	8e e0       	ldi	r24, 0x0E	; 14
     64a:	0e 94 aa 04 	call	0x954	; 0x954 <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	09 c0       	rjmp	.+18     	; 0x664 <default_grid+0x86>
	{
		colours[row] = COLOUR_QUART_YELLOW;
     652:	e1 e0       	ldi	r30, 0x01	; 1
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	ec 0f       	add	r30, r28
     658:	fd 1f       	adc	r31, r29
     65a:	e8 0f       	add	r30, r24
     65c:	f1 1d       	adc	r31, r1
     65e:	91 e1       	ldi	r25, 0x11	; 17
     660:	90 83       	st	Z, r25
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
	ledmatrix_update_column(14, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     662:	8f 5f       	subi	r24, 0xFF	; 255
     664:	88 30       	cpi	r24, 0x08	; 8
     666:	a8 f3       	brcs	.-22     	; 0x652 <default_grid+0x74>
	{
		colours[row] = COLOUR_QUART_YELLOW;
	}
	ledmatrix_update_column(11, colours);
     668:	be 01       	movw	r22, r28
     66a:	6f 5f       	subi	r22, 0xFF	; 255
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	8b e0       	ldi	r24, 0x0B	; 11
     670:	0e 94 aa 04 	call	0x954	; 0x954 <ledmatrix_update_column>
	ledmatrix_update_column(15, colours);
     674:	be 01       	movw	r22, r28
     676:	6f 5f       	subi	r22, 0xFF	; 255
     678:	7f 4f       	sbci	r23, 0xFF	; 255
     67a:	8f e0       	ldi	r24, 0x0F	; 15
     67c:	0e 94 aa 04 	call	0x954	; 0x954 <ledmatrix_update_column>
}
     680:	28 96       	adiw	r28, 0x08	; 8
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <initialise_game>:

// Initialize the game by resetting the grid and beat
void initialise_game(void)
{
	// initialize the display we are using.
	default_grid();
     692:	0e 94 ef 02 	call	0x5de	; 0x5de <default_grid>
	beat = 0;
     696:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <beat+0x1>
     69a:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <beat>
     69e:	08 95       	ret

000006a0 <play_note>:
}

// Play a note in the given lane
void play_note(uint8_t lane) // button lane, normally aligned
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	d8 2f       	mov	r29, r24
	// e) depending on your implementation, clear the variable in
	//    advance_note when a note disappears from the screen

	
	
	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     6a8:	cb e0       	ldi	r28, 0x0B	; 11
     6aa:	39 c0       	rjmp	.+114    	; 0x71e <play_note+0x7e>
	
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col; //this is the next position that the note will be in
     6ac:	8f e0       	ldi	r24, 0x0F	; 15
     6ae:	8c 1b       	sub	r24, r28
		uint8_t index = (future + beat) / 5;	//this is the note??
     6b0:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <beat>
     6b4:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <beat+0x1>
     6b8:	48 0f       	add	r20, r24
     6ba:	51 1d       	adc	r21, r1
     6bc:	9a 01       	movw	r18, r20
     6be:	ad ec       	ldi	r26, 0xCD	; 205
     6c0:	bc ec       	ldi	r27, 0xCC	; 204
     6c2:	0e 94 b2 08 	call	0x1164	; 0x1164 <__umulhisi3>
     6c6:	fc 01       	movw	r30, r24
     6c8:	f6 95       	lsr	r31
     6ca:	e7 95       	ror	r30
     6cc:	f6 95       	lsr	r31
     6ce:	e7 95       	ror	r30
		
		if ((future+beat) % 5) {
     6d0:	cf 01       	movw	r24, r30
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	8e 0f       	add	r24, r30
     6dc:	9f 1f       	adc	r25, r31
     6de:	48 17       	cp	r20, r24
     6e0:	59 07       	cpc	r21, r25
     6e2:	e1 f4       	brne	.+56     	; 0x71c <play_note+0x7c>
			continue;
		}
		if (track[index] & (1<<lane))
     6e4:	ff 27       	eor	r31, r31
     6e6:	e2 5e       	subi	r30, 0xE2	; 226
     6e8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ea:	80 81       	ld	r24, Z
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0d 2e       	mov	r0, r29
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <play_note+0x56>
     6f2:	95 95       	asr	r25
     6f4:	87 95       	ror	r24
     6f6:	0a 94       	dec	r0
     6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <play_note+0x52>
     6fa:	80 ff       	sbrs	r24, 0
     6fc:	0f c0       	rjmp	.+30     	; 0x71c <play_note+0x7c>
		{
			green_check = lane;
     6fe:	d0 93 ab 01 	sts	0x01AB, r29	; 0x8001ab <green_check>
			
			// if so, colour the two pixels green
			ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     702:	40 ef       	ldi	r20, 0xF0	; 240
     704:	1d 2f       	mov	r17, r29
     706:	11 0f       	add	r17, r17
     708:	61 2f       	mov	r22, r17
     70a:	8c 2f       	mov	r24, r28
     70c:	0e 94 8b 04 	call	0x916	; 0x916 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	61 0f       	add	r22, r17
     714:	40 ef       	ldi	r20, 0xF0	; 240
     716:	8c 2f       	mov	r24, r28
     718:	0e 94 8b 04 	call	0x916	; 0x916 <ledmatrix_update_pixel>
	// e) depending on your implementation, clear the variable in
	//    advance_note when a note disappears from the screen

	
	
	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     71c:	cf 5f       	subi	r28, 0xFF	; 255
     71e:	c0 31       	cpi	r28, 0x10	; 16
     720:	28 f2       	brcs	.-118    	; 0x6ac <play_note+0xc>
			// if so, colour the two pixels green
			ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
			ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
		}
	}
}
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	08 95       	ret

0000072a <advance_note>:

// Advance the notes one row down the display
void advance_note(void)
{
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     736:	c0 e0       	ldi	r28, 0x00	; 0
     738:	65 c0       	rjmp	.+202    	; 0x804 <__DATA_REGION_LENGTH__+0x4>
	{
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col;
     73a:	8f e0       	ldi	r24, 0x0F	; 15
     73c:	8c 1b       	sub	r24, r28
		uint8_t index = (future + beat) / 5;
     73e:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <beat>
     742:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <beat+0x1>
     746:	48 0f       	add	r20, r24
     748:	51 1d       	adc	r21, r1
     74a:	9a 01       	movw	r18, r20
     74c:	ad ec       	ldi	r26, 0xCD	; 205
     74e:	bc ec       	ldi	r27, 0xCC	; 204
     750:	0e 94 b2 08 	call	0x1164	; 0x1164 <__umulhisi3>
     754:	8c 01       	movw	r16, r24
     756:	16 95       	lsr	r17
     758:	07 95       	ror	r16
     75a:	16 95       	lsr	r17
     75c:	07 95       	ror	r16
		if (index >= TRACK_LENGTH)
     75e:	01 38       	cpi	r16, 0x81	; 129
     760:	08 f0       	brcs	.+2      	; 0x764 <advance_note+0x3a>
     762:	53 c0       	rjmp	.+166    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		{
			//green_check = 4; //change green_check to be a lane outside scope of game
			break;
		}
		if ((future+beat) % 5)
     764:	c8 01       	movw	r24, r16
     766:	98 01       	movw	r18, r16
     768:	22 0f       	add	r18, r18
     76a:	33 1f       	adc	r19, r19
     76c:	22 0f       	add	r18, r18
     76e:	33 1f       	adc	r19, r19
     770:	82 0f       	add	r24, r18
     772:	93 1f       	adc	r25, r19
     774:	48 17       	cp	r20, r24
     776:	59 07       	cpc	r21, r25
     778:	09 f0       	breq	.+2      	; 0x77c <advance_note+0x52>
     77a:	43 c0       	rjmp	.+134    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     77c:	d0 e0       	ldi	r29, 0x00	; 0
     77e:	3e c0       	rjmp	.+124    	; 0x7fc <advance_note+0xd2>
		{
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
		{
			if (track[index] & (1<<lane))
     780:	f8 01       	movw	r30, r16
     782:	ff 27       	eor	r31, r31
     784:	e2 5e       	subi	r30, 0xE2	; 226
     786:	fe 4f       	sbci	r31, 0xFE	; 254
     788:	80 81       	ld	r24, Z
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0d 2e       	mov	r0, r29
     78e:	02 c0       	rjmp	.+4      	; 0x794 <advance_note+0x6a>
     790:	95 95       	asr	r25
     792:	87 95       	ror	r24
     794:	0a 94       	dec	r0
     796:	e2 f7       	brpl	.-8      	; 0x790 <advance_note+0x66>
     798:	80 ff       	sbrs	r24, 0
     79a:	2f c0       	rjmp	.+94     	; 0x7fa <advance_note+0xd0>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
     79c:	cb 30       	cpi	r28, 0x0B	; 11
     79e:	59 f0       	breq	.+22     	; 0x7b6 <advance_note+0x8c>
     7a0:	cf 30       	cpi	r28, 0x0F	; 15
     7a2:	71 f0       	breq	.+28     	; 0x7c0 <advance_note+0x96>
				{
					colour = COLOUR_QUART_YELLOW;
				}
				else if (col==12 || col == 14)
     7a4:	cc 30       	cpi	r28, 0x0C	; 12
     7a6:	89 f0       	breq	.+34     	; 0x7ca <advance_note+0xa0>
     7a8:	ce 30       	cpi	r28, 0x0E	; 14
     7aa:	a1 f0       	breq	.+40     	; 0x7d4 <advance_note+0xaa>
				{
					colour = COLOUR_HALF_YELLOW;
				}
				else if (col==13)
     7ac:	cd 30       	cpi	r28, 0x0D	; 13
     7ae:	b9 f4       	brne	.+46     	; 0x7de <advance_note+0xb4>
				{
					colour = COLOUR_YELLOW;
     7b0:	ee 24       	eor	r14, r14
     7b2:	ea 94       	dec	r14
     7b4:	15 c0       	rjmp	.+42     	; 0x7e0 <advance_note+0xb6>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
				{
					colour = COLOUR_QUART_YELLOW;
     7b6:	0f 2e       	mov	r0, r31
     7b8:	f1 e1       	ldi	r31, 0x11	; 17
     7ba:	ef 2e       	mov	r14, r31
     7bc:	f0 2d       	mov	r31, r0
     7be:	10 c0       	rjmp	.+32     	; 0x7e0 <advance_note+0xb6>
     7c0:	0f 2e       	mov	r0, r31
     7c2:	f1 e1       	ldi	r31, 0x11	; 17
     7c4:	ef 2e       	mov	r14, r31
     7c6:	f0 2d       	mov	r31, r0
     7c8:	0b c0       	rjmp	.+22     	; 0x7e0 <advance_note+0xb6>
				}
				else if (col==12 || col == 14)
				{
					colour = COLOUR_HALF_YELLOW;
     7ca:	0f 2e       	mov	r0, r31
     7cc:	f5 e5       	ldi	r31, 0x55	; 85
     7ce:	ef 2e       	mov	r14, r31
     7d0:	f0 2d       	mov	r31, r0
     7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <advance_note+0xb6>
     7d4:	0f 2e       	mov	r0, r31
     7d6:	f5 e5       	ldi	r31, 0x55	; 85
     7d8:	ef 2e       	mov	r14, r31
     7da:	f0 2d       	mov	r31, r0
     7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <advance_note+0xb6>
				{
					colour = COLOUR_YELLOW;
				}
				else
				{
					colour = COLOUR_BLACK;
     7de:	e1 2c       	mov	r14, r1
				}
				ledmatrix_update_pixel(col, 2*lane, colour);
     7e0:	4e 2d       	mov	r20, r14
     7e2:	fd 2e       	mov	r15, r29
     7e4:	ff 0c       	add	r15, r15
     7e6:	6f 2d       	mov	r22, r15
     7e8:	8c 2f       	mov	r24, r28
     7ea:	0e 94 8b 04 	call	0x916	; 0x916 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 2*lane+1, colour);
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	6f 0d       	add	r22, r15
     7f2:	4e 2d       	mov	r20, r14
     7f4:	8c 2f       	mov	r24, r28
     7f6:	0e 94 8b 04 	call	0x916	; 0x916 <ledmatrix_update_pixel>
		}
		if ((future+beat) % 5)
		{
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
     7fa:	df 5f       	subi	r29, 0xFF	; 255
     7fc:	d4 30       	cpi	r29, 0x04	; 4
     7fe:	08 f4       	brcc	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     800:	bf cf       	rjmp	.-130    	; 0x780 <advance_note+0x56>

// Advance the notes one row down the display
void advance_note(void)
{
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     802:	cf 5f       	subi	r28, 0xFF	; 255
     804:	c0 31       	cpi	r28, 0x10	; 16
     806:	08 f4       	brcc	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     808:	98 cf       	rjmp	.-208    	; 0x73a <advance_note+0x10>
			}
		}
	}
	
	// increment the beat
	beat++;
     80a:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <beat>
     80e:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <beat+0x1>
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <beat+0x1>
     818:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <beat>
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     81c:	c0 e0       	ldi	r28, 0x00	; 0
     81e:	6b c0       	rjmp	.+214    	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
	{
		// col counts from one end, future from the other
		uint8_t future = MATRIX_NUM_COLUMNS-1-col;
     820:	8f e0       	ldi	r24, 0x0F	; 15
     822:	8c 1b       	sub	r24, r28
		// notes are only drawn every five columns
		if ((future+beat)%5)
     824:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <beat>
     828:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <beat+0x1>
     82c:	48 0f       	add	r20, r24
     82e:	51 1d       	adc	r21, r1
     830:	9a 01       	movw	r18, r20
     832:	ad ec       	ldi	r26, 0xCD	; 205
     834:	bc ec       	ldi	r27, 0xCC	; 204
     836:	0e 94 b2 08 	call	0x1164	; 0x1164 <__umulhisi3>
     83a:	96 95       	lsr	r25
     83c:	87 95       	ror	r24
     83e:	96 95       	lsr	r25
     840:	87 95       	ror	r24
     842:	9c 01       	movw	r18, r24
     844:	22 0f       	add	r18, r18
     846:	33 1f       	adc	r19, r19
     848:	22 0f       	add	r18, r18
     84a:	33 1f       	adc	r19, r19
     84c:	82 0f       	add	r24, r18
     84e:	93 1f       	adc	r25, r19
     850:	48 17       	cp	r20, r24
     852:	59 07       	cpc	r21, r25
     854:	09 f0       	breq	.+2      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     856:	4e c0       	rjmp	.+156    	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
		{
			continue;
		}
		
		// index of which note in the track to play
		uint8_t index = (future+beat)/5;
     858:	9a 01       	movw	r18, r20
     85a:	0e 94 b2 08 	call	0x1164	; 0x1164 <__umulhisi3>
     85e:	8c 01       	movw	r16, r24
     860:	16 95       	lsr	r17
     862:	07 95       	ror	r16
     864:	16 95       	lsr	r17
     866:	07 95       	ror	r16
		// if the index is beyond the end of the track,
		// no note can be drawn
		if (index >= TRACK_LENGTH)
     868:	01 38       	cpi	r16, 0x81	; 129
     86a:	08 f0       	brcs	.+2      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
     86c:	43 c0       	rjmp	.+134    	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
     86e:	d0 e0       	ldi	r29, 0x00	; 0
     870:	3e c0       	rjmp	.+124    	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{
			
			//check if there's a note in the specific path
			if (track[index] & (1<<lane)) {
     872:	f8 01       	movw	r30, r16
     874:	ff 27       	eor	r31, r31
     876:	e2 5e       	subi	r30, 0xE2	; 226
     878:	fe 4f       	sbci	r31, 0xFE	; 254
     87a:	80 81       	ld	r24, Z
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0d 2e       	mov	r0, r29
     880:	02 c0       	rjmp	.+4      	; 0x886 <__DATA_REGION_LENGTH__+0x86>
     882:	95 95       	asr	r25
     884:	87 95       	ror	r24
     886:	0a 94       	dec	r0
     888:	e2 f7       	brpl	.-8      	; 0x882 <__DATA_REGION_LENGTH__+0x82>
     88a:	80 ff       	sbrs	r24, 0
     88c:	2f c0       	rjmp	.+94     	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
				
				//check if theres a note in the led matrix section
				if ((green_check == lane) & ((col >= 11) & (col <= 15))) {
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <green_check>
     894:	8d 13       	cpse	r24, r29
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	21 e0       	ldi	r18, 0x01	; 1
     89a:	85 ef       	ldi	r24, 0xF5	; 245
     89c:	8c 0f       	add	r24, r28
     89e:	85 30       	cpi	r24, 0x05	; 5
     8a0:	08 f0       	brcs	.+2      	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	99 23       	and	r25, r25
     8a6:	81 f0       	breq	.+32     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
     8a8:	22 23       	and	r18, r18
     8aa:	71 f0       	breq	.+28     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
					//if true set pixels to green
					ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     8ac:	40 ef       	ldi	r20, 0xF0	; 240
     8ae:	fd 2e       	mov	r15, r29
     8b0:	ff 0c       	add	r15, r15
     8b2:	6f 2d       	mov	r22, r15
     8b4:	8c 2f       	mov	r24, r28
     8b6:	0e 94 8b 04 	call	0x916	; 0x916 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	6f 0d       	add	r22, r15
     8be:	40 ef       	ldi	r20, 0xF0	; 240
     8c0:	8c 2f       	mov	r24, r28
     8c2:	0e 94 8b 04 	call	0x916	; 0x916 <ledmatrix_update_pixel>
     8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
					
				} else {
					ledmatrix_update_pixel(col, 2*lane, COLOUR_RED);
     8c8:	4f e0       	ldi	r20, 0x0F	; 15
     8ca:	fd 2e       	mov	r15, r29
     8cc:	ff 0c       	add	r15, r15
     8ce:	6f 2d       	mov	r22, r15
     8d0:	8c 2f       	mov	r24, r28
     8d2:	0e 94 8b 04 	call	0x916	; 0x916 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_RED);							
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	6f 0d       	add	r22, r15
     8da:	4f e0       	ldi	r20, 0x0F	; 15
     8dc:	8c 2f       	mov	r24, r28
     8de:	0e 94 8b 04 	call	0x916	; 0x916 <ledmatrix_update_pixel>
				}
				if (col >= 15) {
     8e2:	cf 30       	cpi	r28, 0x0F	; 15
     8e4:	18 f0       	brcs	.+6      	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
					green_check = 4;
     8e6:	84 e0       	ldi	r24, 0x04	; 4
     8e8:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <green_check>
		if (index >= TRACK_LENGTH)
		{
			continue;
		}
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
     8ec:	df 5f       	subi	r29, 0xFF	; 255
     8ee:	d4 30       	cpi	r29, 0x04	; 4
     8f0:	08 f4       	brcc	.+2      	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
     8f2:	bf cf       	rjmp	.-130    	; 0x872 <__DATA_REGION_LENGTH__+0x72>
	
	// increment the beat
	beat++;
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     8f4:	cf 5f       	subi	r28, 0xFF	; 255
     8f6:	c0 31       	cpi	r28, 0x10	; 16
     8f8:	08 f4       	brcc	.+2      	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
     8fa:	92 cf       	rjmp	.-220    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
				ledmatrix_update_pixel(col, 2*lane+1, COLOUR_RED);
			}	
			*/	
		}
	}
}
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	ff 90       	pop	r15
     906:	ef 90       	pop	r14
     908:	08 95       	ret

0000090a <is_game_over>:
uint8_t is_game_over(void)
{
	// YOUR CODE HERE
	// Detect if the game is over i.e. if a player has won.
	return 0;
}
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	08 95       	ret

0000090e <ledmatrix_setup>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     90e:	80 e8       	ldi	r24, 0x80	; 128
     910:	0e 94 d5 07 	call	0xfaa	; 0xfaa <spi_setup_master>
     914:	08 95       	ret

00000916 <ledmatrix_update_pixel>:
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	80 31       	cpi	r24, 0x10	; 16
     91e:	b0 f4       	brcc	.+44     	; 0x94c <ledmatrix_update_pixel+0x36>
     920:	68 30       	cpi	r22, 0x08	; 8
     922:	a0 f4       	brcc	.+40     	; 0x94c <ledmatrix_update_pixel+0x36>
     924:	14 2f       	mov	r17, r20
     926:	c6 2f       	mov	r28, r22
     928:	d8 2f       	mov	r29, r24
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	0e 94 01 08 	call	0x1002	; 0x1002 <spi_send_byte>
     930:	6c 2f       	mov	r22, r28
     932:	67 70       	andi	r22, 0x07	; 7
     934:	80 e1       	ldi	r24, 0x10	; 16
     936:	68 9f       	mul	r22, r24
     938:	90 01       	movw	r18, r0
     93a:	11 24       	eor	r1, r1
     93c:	8d 2f       	mov	r24, r29
     93e:	8f 70       	andi	r24, 0x0F	; 15
     940:	82 2b       	or	r24, r18
     942:	0e 94 01 08 	call	0x1002	; 0x1002 <spi_send_byte>
     946:	81 2f       	mov	r24, r17
     948:	0e 94 01 08 	call	0x1002	; 0x1002 <spi_send_byte>
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	1f 91       	pop	r17
     952:	08 95       	ret

00000954 <ledmatrix_update_column>:
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	80 31       	cpi	r24, 0x10	; 16
     95c:	a0 f4       	brcc	.+40     	; 0x986 <ledmatrix_update_column+0x32>
     95e:	8b 01       	movw	r16, r22
     960:	c8 2f       	mov	r28, r24
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	0e 94 01 08 	call	0x1002	; 0x1002 <spi_send_byte>
     968:	8c 2f       	mov	r24, r28
     96a:	8f 70       	andi	r24, 0x0F	; 15
     96c:	0e 94 01 08 	call	0x1002	; 0x1002 <spi_send_byte>
     970:	c0 e0       	ldi	r28, 0x00	; 0
     972:	07 c0       	rjmp	.+14     	; 0x982 <ledmatrix_update_column+0x2e>
     974:	f8 01       	movw	r30, r16
     976:	ec 0f       	add	r30, r28
     978:	f1 1d       	adc	r31, r1
     97a:	80 81       	ld	r24, Z
     97c:	0e 94 01 08 	call	0x1002	; 0x1002 <spi_send_byte>
     980:	cf 5f       	subi	r28, 0xFF	; 255
     982:	c8 30       	cpi	r28, 0x08	; 8
     984:	b8 f3       	brcs	.-18     	; 0x974 <ledmatrix_update_column+0x20>
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	08 95       	ret

0000098e <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     98e:	8f e0       	ldi	r24, 0x0F	; 15
     990:	0e 94 01 08 	call	0x1002	; 0x1002 <spi_send_byte>
     994:	08 95       	ret

00000996 <initialise_hardware>:
	}
}

void initialise_hardware(void)
{
	ledmatrix_setup();
     996:	0e 94 87 04 	call	0x90e	; 0x90e <ledmatrix_setup>
	init_button_interrupts();
     99a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	7b e4       	ldi	r23, 0x4B	; 75
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 ed 06 	call	0xdda	; 0xdda <init_serial_stdio>
	
	init_timer0();
     9ac:	0e 94 40 08 	call	0x1080	; 0x1080 <init_timer0>
	init_timer1();
     9b0:	0e 94 8b 08 	call	0x1116	; 0x1116 <init_timer1>
	init_timer2();
     9b4:	0e 94 90 08 	call	0x1120	; 0x1120 <init_timer2>
	
	// Turn on global interrupts
	sei();
     9b8:	78 94       	sei
     9ba:	08 95       	ret

000009bc <start_screen>:
}

void start_screen(void)
{
     9bc:	4f 92       	push	r4
     9be:	5f 92       	push	r5
     9c0:	6f 92       	push	r6
     9c2:	7f 92       	push	r7
     9c4:	8f 92       	push	r8
     9c6:	9f 92       	push	r9
     9c8:	af 92       	push	r10
     9ca:	bf 92       	push	r11
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
	// Clear terminal screen and output a message
	clear_terminal();
     9d8:	0e 94 18 08 	call	0x1030	; 0x1030 <clear_terminal>
	show_cursor();
     9dc:	0e 94 37 08 	call	0x106e	; 0x106e <show_cursor>
	clear_terminal();
     9e0:	0e 94 18 08 	call	0x1030	; 0x1030 <clear_terminal>
	hide_cursor();
     9e4:	0e 94 2e 08 	call	0x105c	; 0x105c <hide_cursor>
	set_display_attribute(FG_WHITE);
     9e8:	85 e2       	ldi	r24, 0x25	; 37
     9ea:	0e 94 21 08 	call	0x1042	; 0x1042 <set_display_attribute>
	move_terminal_cursor(10,4);
     9ee:	64 e0       	ldi	r22, 0x04	; 4
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	8a e0       	ldi	r24, 0x0A	; 10
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0e 94 07 08 	call	0x100e	; 0x100e <move_terminal_cursor>
	printf_P(PSTR("  ______   __     __  _______         __    __"));
     9fa:	81 e3       	ldi	r24, 0x31	; 49
     9fc:	93 e0       	ldi	r25, 0x03	; 3
     9fe:	9f 93       	push	r25
     a00:	8f 93       	push	r24
     a02:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
	move_terminal_cursor(10,5);
     a06:	65 e0       	ldi	r22, 0x05	; 5
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	8a e0       	ldi	r24, 0x0A	; 10
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 07 08 	call	0x100e	; 0x100e <move_terminal_cursor>
	printf_P(PSTR(" /      \\ |  \\   |  \\|       \\       |  \\  |  \\"));
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	93 e0       	ldi	r25, 0x03	; 3
     a16:	9f 93       	push	r25
     a18:	8f 93       	push	r24
     a1a:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
	move_terminal_cursor(10,6);
     a1e:	66 e0       	ldi	r22, 0x06	; 6
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	8a e0       	ldi	r24, 0x0A	; 10
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 07 08 	call	0x100e	; 0x100e <move_terminal_cursor>
	printf_P(PSTR("|  $$$$$$\\| $$   | $$| $$$$$$$\\      | $$  | $$  ______    ______    ______"));
     a2a:	85 eb       	ldi	r24, 0xB5	; 181
     a2c:	92 e0       	ldi	r25, 0x02	; 2
     a2e:	9f 93       	push	r25
     a30:	8f 93       	push	r24
     a32:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
	move_terminal_cursor(10,7);
     a36:	67 e0       	ldi	r22, 0x07	; 7
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	8a e0       	ldi	r24, 0x0A	; 10
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 07 08 	call	0x100e	; 0x100e <move_terminal_cursor>
	printf_P(PSTR("| $$__| $$| $$   | $$| $$__| $$      | $$__| $$ /      \\  /      \\  /      \\"));
     a42:	88 e6       	ldi	r24, 0x68	; 104
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	9f 93       	push	r25
     a48:	8f 93       	push	r24
     a4a:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
	move_terminal_cursor(10,8);
     a4e:	68 e0       	ldi	r22, 0x08	; 8
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	8a e0       	ldi	r24, 0x0A	; 10
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 07 08 	call	0x100e	; 0x100e <move_terminal_cursor>
	printf_P(PSTR("| $$    $$ \\$$\\ /  $$| $$    $$      | $$    $$|  $$$$$$\\|  $$$$$$\\|  $$$$$$\\"));
     a5a:	8a e1       	ldi	r24, 0x1A	; 26
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	9f 93       	push	r25
     a60:	8f 93       	push	r24
     a62:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
	move_terminal_cursor(10,9);
     a66:	69 e0       	ldi	r22, 0x09	; 9
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	8a e0       	ldi	r24, 0x0A	; 10
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 07 08 	call	0x100e	; 0x100e <move_terminal_cursor>
	printf_P(PSTR("| $$$$$$$$  \\$$\\  $$ | $$$$$$$\\      | $$$$$$$$| $$    $$| $$   \\$$| $$  | $$"));
     a72:	8c ec       	ldi	r24, 0xCC	; 204
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	9f 93       	push	r25
     a78:	8f 93       	push	r24
     a7a:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
	move_terminal_cursor(10,10);
     a7e:	6a e0       	ldi	r22, 0x0A	; 10
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	8a e0       	ldi	r24, 0x0A	; 10
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 07 08 	call	0x100e	; 0x100e <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$   \\$$ $$  | $$  | $$      | $$  | $$| $$$$$$$$| $$      | $$__/ $$"));
     a8a:	8e e7       	ldi	r24, 0x7E	; 126
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	9f 93       	push	r25
     a90:	8f 93       	push	r24
     a92:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
	move_terminal_cursor(10,11);
     a96:	6b e0       	ldi	r22, 0x0B	; 11
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	8a e0       	ldi	r24, 0x0A	; 10
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 07 08 	call	0x100e	; 0x100e <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$    \\$$$   | $$  | $$      | $$  | $$ \\$$     \\| $$       \\$$    $$"));
     aa2:	80 e3       	ldi	r24, 0x30	; 48
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	9f 93       	push	r25
     aa8:	8f 93       	push	r24
     aaa:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
	move_terminal_cursor(10,12);
     aae:	6c e0       	ldi	r22, 0x0C	; 12
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	8a e0       	ldi	r24, 0x0A	; 10
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 07 08 	call	0x100e	; 0x100e <move_terminal_cursor>
	printf_P(PSTR(" \\$$   \\$$     \\$     \\$$   \\$$       \\$$   \\$$  \\$$$$$$$ \\$$        \\$$$$$$"));
     aba:	83 ee       	ldi	r24, 0xE3	; 227
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	9f 93       	push	r25
     ac0:	8f 93       	push	r24
     ac2:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
	move_terminal_cursor(10,14);
     ac6:	6e e0       	ldi	r22, 0x0E	; 14
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	8a e0       	ldi	r24, 0x0A	; 10
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 07 08 	call	0x100e	; 0x100e <move_terminal_cursor>
	// change this to your name and student number; remove the chevrons <>
	printf_P(PSTR("CSSE2010/7201 A2 by  Cailin Delgado - 48027942"));
     ad2:	84 eb       	ldi	r24, 0xB4	; 180
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	9f 93       	push	r25
     ad8:	8f 93       	push	r24
     ada:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
     ade:	0e 94 a0 02 	call	0x540	; 0x540 <show_start_screen>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
     ae2:	0e 94 56 08 	call	0x10ac	; 0x10ac <get_current_time>
     ae6:	4b 01       	movw	r8, r22
     ae8:	5c 01       	movw	r10, r24
	
	uint8_t frame_number = 0;
	game_speed = 1000;
     aea:	88 ee       	ldi	r24, 0xE8	; 232
     aec:	93 e0       	ldi	r25, 0x03	; 3
     aee:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <game_speed+0x1>
     af2:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <game_speed>
     af6:	8d b7       	in	r24, 0x3d	; 61
     af8:	9e b7       	in	r25, 0x3e	; 62
     afa:	44 96       	adiw	r24, 0x14	; 20
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	9e bf       	out	0x3e, r25	; 62
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	8d bf       	out	0x3d, r24	; 61
	show_start_screen();

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
	
	uint8_t frame_number = 0;
     b06:	c0 e0       	ldi	r28, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available())
     b08:	0e 94 34 07 	call	0xe68	; 0xe68 <serial_input_available>
     b0c:	88 23       	and	r24, r24
     b0e:	39 f0       	breq	.+14     	; 0xb1e <start_screen+0x162>
		{
			serial_input = fgetc(stdin);
     b10:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__iob>
     b14:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <__iob+0x1>
     b18:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <fgetc>
     b1c:	01 c0       	rjmp	.+2      	; 0xb20 <start_screen+0x164>
	{
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available())
		{
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S')
     b20:	83 37       	cpi	r24, 0x73	; 115
     b22:	99 f1       	breq	.+102    	; 0xb8a <start_screen+0x1ce>
     b24:	83 35       	cpi	r24, 0x53	; 83
     b26:	89 f1       	breq	.+98     	; 0xb8a <start_screen+0x1ce>
		{
			break;
		} 
		
		// Next check for any button presses
		int8_t btn = button_pushed();
     b28:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <button_pushed>
		if (btn != NO_BUTTON_PUSHED)
     b2c:	8f 3f       	cpi	r24, 0xFF	; 255
     b2e:	69 f5       	brne	.+90     	; 0xb8a <start_screen+0x1ce>
		{
			break;
		}

		// every 200 ms, update the animation
		current_time = get_current_time();
     b30:	0e 94 56 08 	call	0x10ac	; 0x10ac <get_current_time>
     b34:	6b 01       	movw	r12, r22
     b36:	7c 01       	movw	r14, r24
		if (current_time - last_screen_update > game_speed/5)
     b38:	2b 01       	movw	r4, r22
     b3a:	3c 01       	movw	r6, r24
     b3c:	48 18       	sub	r4, r8
     b3e:	59 08       	sbc	r5, r9
     b40:	6a 08       	sbc	r6, r10
     b42:	7b 08       	sbc	r7, r11
     b44:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <game_speed>
     b48:	30 91 af 01 	lds	r19, 0x01AF	; 0x8001af <game_speed+0x1>
     b4c:	ad ec       	ldi	r26, 0xCD	; 205
     b4e:	bc ec       	ldi	r27, 0xCC	; 204
     b50:	0e 94 b2 08 	call	0x1164	; 0x1164 <__umulhisi3>
     b54:	96 95       	lsr	r25
     b56:	87 95       	ror	r24
     b58:	96 95       	lsr	r25
     b5a:	87 95       	ror	r24
     b5c:	a0 e0       	ldi	r26, 0x00	; 0
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	84 15       	cp	r24, r4
     b62:	95 05       	cpc	r25, r5
     b64:	a6 05       	cpc	r26, r6
     b66:	b7 05       	cpc	r27, r7
     b68:	78 f6       	brcc	.-98     	; 0xb08 <start_screen+0x14c>
		{
			update_start_screen(frame_number);
     b6a:	8c 2f       	mov	r24, r28
     b6c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <update_start_screen>
			frame_number = (frame_number + 1) % 32;
     b70:	d0 e0       	ldi	r29, 0x00	; 0
     b72:	21 96       	adiw	r28, 0x01	; 1
     b74:	cf 71       	andi	r28, 0x1F	; 31
     b76:	d0 78       	andi	r29, 0x80	; 128
     b78:	dd 23       	and	r29, r29
     b7a:	24 f4       	brge	.+8      	; 0xb84 <start_screen+0x1c8>
     b7c:	21 97       	sbiw	r28, 0x01	; 1
     b7e:	c0 6e       	ori	r28, 0xE0	; 224
     b80:	df 6f       	ori	r29, 0xFF	; 255
     b82:	21 96       	adiw	r28, 0x01	; 1
			last_screen_update = current_time;
     b84:	46 01       	movw	r8, r12
     b86:	57 01       	movw	r10, r14
     b88:	bf cf       	rjmp	.-130    	; 0xb08 <start_screen+0x14c>
		}
	}
}
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	bf 90       	pop	r11
     b98:	af 90       	pop	r10
     b9a:	9f 90       	pop	r9
     b9c:	8f 90       	pop	r8
     b9e:	7f 90       	pop	r7
     ba0:	6f 90       	pop	r6
     ba2:	5f 90       	pop	r5
     ba4:	4f 90       	pop	r4
     ba6:	08 95       	ret

00000ba8 <new_game>:

void new_game(void)
{
	// Clear the serial terminal
	clear_terminal();
     ba8:	0e 94 18 08 	call	0x1030	; 0x1030 <clear_terminal>
	
	// Initialise the game and display
	initialise_game();
     bac:	0e 94 49 03 	call	0x692	; 0x692 <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     bb0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <button_pushed>
	clear_serial_input_buffer();
     bb4:	0e 94 3b 07 	call	0xe76	; 0xe76 <clear_serial_input_buffer>
     bb8:	08 95       	ret

00000bba <play_game>:
}

void play_game(void)
{
     bba:	8f 92       	push	r8
     bbc:	9f 92       	push	r9
     bbe:	af 92       	push	r10
     bc0:	bf 92       	push	r11
     bc2:	cf 92       	push	r12
     bc4:	df 92       	push	r13
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
	
	uint32_t last_advance_time, current_time;
	int8_t btn; // The button pushed
	
	last_advance_time = get_current_time();
     bca:	0e 94 56 08 	call	0x10ac	; 0x10ac <get_current_time>
     bce:	4b 01       	movw	r8, r22
     bd0:	5c 01       	movw	r10, r24
	
	// We play the game until it's over
	while (!is_game_over())
     bd2:	63 c0       	rjmp	.+198    	; 0xc9a <play_game+0xe0>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
     bd4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <button_pushed>
		char keyboard_input = -1;
		
		if (btn == BUTTON0_PUSHED) {
     bd8:	81 11       	cpse	r24, r1
     bda:	04 c0       	rjmp	.+8      	; 0xbe4 <play_game+0x2a>
			// If button 0 play the lowest note (right lane)
			play_note(3); //bitwise lane is the left-most lane, button lane is the rightmost lane
     bdc:	83 e0       	ldi	r24, 0x03	; 3
     bde:	0e 94 50 03 	call	0x6a0	; 0x6a0 <play_note>
     be2:	11 c0       	rjmp	.+34     	; 0xc06 <play_game+0x4c>
		
		} else if (btn == BUTTON1_PUSHED) {
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	21 f4       	brne	.+8      	; 0xbf0 <play_game+0x36>
			//If button 1 is pushed play the second lowest note
			play_note(2);
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	0e 94 50 03 	call	0x6a0	; 0x6a0 <play_note>
     bee:	0b c0       	rjmp	.+22     	; 0xc06 <play_game+0x4c>
		
		} else if (btn == BUTTON2_PUSHED) {
     bf0:	82 30       	cpi	r24, 0x02	; 2
     bf2:	21 f4       	brne	.+8      	; 0xbfc <play_game+0x42>
			//If button 2 is pushed play the second highest note
			play_note(1); 
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <play_note>
     bfa:	05 c0       	rjmp	.+10     	; 0xc06 <play_game+0x4c>
			
		} else if (btn == BUTTON3_PUSHED) {
     bfc:	83 30       	cpi	r24, 0x03	; 3
     bfe:	19 f4       	brne	.+6      	; 0xc06 <play_game+0x4c>
			//If button 3 is pushed play the highest note
			play_note(0);
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	0e 94 50 03 	call	0x6a0	; 0x6a0 <play_note>
		} 
		
		if (serial_input_available()) {
     c06:	0e 94 34 07 	call	0xe68	; 0xe68 <serial_input_available>
     c0a:	88 23       	and	r24, r24
     c0c:	39 f0       	breq	.+14     	; 0xc1c <play_game+0x62>
			keyboard_input = fgetc(stdin);
     c0e:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__iob>
     c12:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <__iob+0x1>
     c16:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <fgetc>
     c1a:	01 c0       	rjmp	.+2      	; 0xc1e <play_game+0x64>
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
		char keyboard_input = -1;
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		//if the keyboard input is 'a', 's', 'd', 'f' then play the appropriate note
		if (keyboard_input == 'a' || keyboard_input == 'A') {
     c1e:	81 36       	cpi	r24, 0x61	; 97
     c20:	11 f0       	breq	.+4      	; 0xc26 <play_game+0x6c>
     c22:	81 34       	cpi	r24, 0x41	; 65
     c24:	21 f4       	brne	.+8      	; 0xc2e <play_game+0x74>
			play_note(0);
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	0e 94 50 03 	call	0x6a0	; 0x6a0 <play_note>
     c2c:	17 c0       	rjmp	.+46     	; 0xc5c <play_game+0xa2>
			
		} else if (keyboard_input == 's' || keyboard_input == 'S') {
     c2e:	83 37       	cpi	r24, 0x73	; 115
     c30:	11 f0       	breq	.+4      	; 0xc36 <play_game+0x7c>
     c32:	83 35       	cpi	r24, 0x53	; 83
     c34:	21 f4       	brne	.+8      	; 0xc3e <play_game+0x84>
			play_note(1);
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	0e 94 50 03 	call	0x6a0	; 0x6a0 <play_note>
     c3c:	0f c0       	rjmp	.+30     	; 0xc5c <play_game+0xa2>
		
		} else if (keyboard_input == 'd' || keyboard_input == 'D') {
     c3e:	84 36       	cpi	r24, 0x64	; 100
     c40:	11 f0       	breq	.+4      	; 0xc46 <play_game+0x8c>
     c42:	84 34       	cpi	r24, 0x44	; 68
     c44:	21 f4       	brne	.+8      	; 0xc4e <play_game+0x94>
			play_note(2);
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	0e 94 50 03 	call	0x6a0	; 0x6a0 <play_note>
     c4c:	07 c0       	rjmp	.+14     	; 0xc5c <play_game+0xa2>
	
		} else if (keyboard_input == 'f' || keyboard_input == 'F') {
     c4e:	86 36       	cpi	r24, 0x66	; 102
     c50:	11 f0       	breq	.+4      	; 0xc56 <play_game+0x9c>
     c52:	86 34       	cpi	r24, 0x46	; 70
     c54:	19 f4       	brne	.+6      	; 0xc5c <play_game+0xa2>
			play_note(3);
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	0e 94 50 03 	call	0x6a0	; 0x6a0 <play_note>
			
		} 
				
		current_time = get_current_time();
     c5c:	0e 94 56 08 	call	0x10ac	; 0x10ac <get_current_time>
     c60:	6b 01       	movw	r12, r22
     c62:	7c 01       	movw	r14, r24
		if (current_time >= last_advance_time + game_speed/5)
     c64:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <game_speed>
     c68:	30 91 af 01 	lds	r19, 0x01AF	; 0x8001af <game_speed+0x1>
     c6c:	ad ec       	ldi	r26, 0xCD	; 205
     c6e:	bc ec       	ldi	r27, 0xCC	; 204
     c70:	0e 94 b2 08 	call	0x1164	; 0x1164 <__umulhisi3>
     c74:	96 95       	lsr	r25
     c76:	87 95       	ror	r24
     c78:	96 95       	lsr	r25
     c7a:	87 95       	ror	r24
     c7c:	a5 01       	movw	r20, r10
     c7e:	94 01       	movw	r18, r8
     c80:	28 0f       	add	r18, r24
     c82:	39 1f       	adc	r19, r25
     c84:	41 1d       	adc	r20, r1
     c86:	51 1d       	adc	r21, r1
     c88:	c2 16       	cp	r12, r18
     c8a:	d3 06       	cpc	r13, r19
     c8c:	e4 06       	cpc	r14, r20
     c8e:	f5 06       	cpc	r15, r21
     c90:	20 f0       	brcs	.+8      	; 0xc9a <play_game+0xe0>
		{
			// 200ms (0.2 second) has passed since the last time we advance the
			// notes here, so update the advance the notes
			advance_note();
     c92:	0e 94 95 03 	call	0x72a	; 0x72a <advance_note>
			
			// Update the most recent time the notes were advance
			last_advance_time = current_time;
     c96:	46 01       	movw	r8, r12
     c98:	57 01       	movw	r10, r14
	int8_t btn; // The button pushed
	
	last_advance_time = get_current_time();
	
	// We play the game until it's over
	while (!is_game_over())
     c9a:	0e 94 85 04 	call	0x90a	; 0x90a <is_game_over>
     c9e:	88 23       	and	r24, r24
     ca0:	09 f4       	brne	.+2      	; 0xca4 <play_game+0xea>
     ca2:	98 cf       	rjmp	.-208    	; 0xbd4 <play_game+0x1a>
			// Update the most recent time the notes were advance
			last_advance_time = current_time;
		}
	}
	// We get here if the game is over.
}
     ca4:	ff 90       	pop	r15
     ca6:	ef 90       	pop	r14
     ca8:	df 90       	pop	r13
     caa:	cf 90       	pop	r12
     cac:	bf 90       	pop	r11
     cae:	af 90       	pop	r10
     cb0:	9f 90       	pop	r9
     cb2:	8f 90       	pop	r8
     cb4:	08 95       	ret

00000cb6 <handle_game_over>:

void handle_game_over()
{
	move_terminal_cursor(10,14);
     cb6:	6e e0       	ldi	r22, 0x0E	; 14
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	8a e0       	ldi	r24, 0x0A	; 10
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 07 08 	call	0x100e	; 0x100e <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     cc2:	8a ea       	ldi	r24, 0xAA	; 170
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	9f 93       	push	r25
     cc8:	8f 93       	push	r24
     cca:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
	move_terminal_cursor(10,15);
     cce:	6f e0       	ldi	r22, 0x0F	; 15
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	8a e0       	ldi	r24, 0x0A	; 10
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 07 08 	call	0x100e	; 0x100e <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
     cda:	8c e7       	ldi	r24, 0x7C	; 124
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	9f 93       	push	r25
     ce0:	8f 93       	push	r24
     ce2:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <button_pushed>
     cf2:	8f 3f       	cpi	r24, 0xFF	; 255
     cf4:	e1 f3       	breq	.-8      	; 0xcee <handle_game_over+0x38>
	{
		; // wait
	}
}
     cf6:	08 95       	ret

00000cf8 <main>:
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     cf8:	0e 94 cb 04 	call	0x996	; 0x996 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
     cfc:	0e 94 de 04 	call	0x9bc	; 0x9bc <start_screen>
	
	// Loop forever and continuously play the game.
	while(1)
	{
		new_game();
     d00:	0e 94 d4 05 	call	0xba8	; 0xba8 <new_game>
		play_game();
     d04:	0e 94 dd 05 	call	0xbba	; 0xbba <play_game>
		handle_game_over();
     d08:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <handle_game_over>
     d0c:	f9 cf       	rjmp	.-14     	; 0xd00 <main+0x8>

00000d0e <uart_put_char>:
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream)
{
     d0e:	cf 93       	push	r28
     d10:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n')
     d12:	8a 30       	cpi	r24, 0x0A	; 10
     d14:	19 f4       	brne	.+6      	; 0xd1c <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
     d16:	8d e0       	ldi	r24, 0x0D	; 13
     d18:	0e 94 87 06 	call	0xd0e	; 0xd0e <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     d1c:	9f b7       	in	r25, 0x3f	; 63
     d1e:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
     d22:	99 23       	and	r25, r25
     d24:	29 f1       	breq	.+74     	; 0xd70 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
     d26:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <bytes_in_out_buffer>
     d2a:	8f 3f       	cpi	r24, 0xFF	; 255
     d2c:	d1 f3       	breq	.-12     	; 0xd22 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     d2e:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     d30:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <out_insert_pos>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8e 0f       	add	r24, r30
     d38:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <out_insert_pos>
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	ee 54       	subi	r30, 0x4E	; 78
     d40:	fe 4f       	sbci	r31, 0xFE	; 254
     d42:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     d44:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <bytes_in_out_buffer>
     d48:	8f 5f       	subi	r24, 0xFF	; 255
     d4a:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
     d4e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <out_insert_pos>
     d52:	8f 3f       	cpi	r24, 0xFF	; 255
     d54:	11 f4       	brne	.+4      	; 0xd5a <uart_put_char+0x4c>
	{
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     d56:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     d5a:	e1 ec       	ldi	r30, 0xC1	; 193
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	80 62       	ori	r24, 0x20	; 32
     d62:	80 83       	st	Z, r24
	if (interrupts_enabled)
     d64:	99 23       	and	r25, r25
     d66:	39 f0       	breq	.+14     	; 0xd76 <uart_put_char+0x68>
	{
		sei();
     d68:	78 94       	sei
	}
	return 0;
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <uart_put_char+0x6c>
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
}
     d7a:	cf 91       	pop	r28
     d7c:	08 95       	ret

00000d7e <uart_get_char>:

int uart_get_char(FILE* stream)
{
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0)
     d7e:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <bytes_in_input_buffer>
     d82:	88 23       	and	r24, r24
     d84:	e1 f3       	breq	.-8      	; 0xd7e <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     d86:	2f b7       	in	r18, 0x3f	; 63
     d88:	20 78       	andi	r18, 0x80	; 128
	cli();
     d8a:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
     d8c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <input_insert_pos>
     d90:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <bytes_in_input_buffer>
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	83 1b       	sub	r24, r19
     d98:	91 09       	sbc	r25, r1
     d9a:	5a f4       	brpl	.+22     	; 0xdb2 <uart_get_char+0x34>
	{
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     d9c:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <input_insert_pos>
     da0:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <bytes_in_input_buffer>
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	e8 1b       	sub	r30, r24
     da8:	f1 09       	sbc	r31, r1
     daa:	ee 53       	subi	r30, 0x3E	; 62
     dac:	fd 4f       	sbci	r31, 0xFD	; 253
     dae:	80 81       	ld	r24, Z
     db0:	0a c0       	rjmp	.+20     	; 0xdc6 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     db2:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <input_insert_pos>
     db6:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <bytes_in_input_buffer>
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	e8 1b       	sub	r30, r24
     dbe:	f1 09       	sbc	r31, r1
     dc0:	ee 54       	subi	r30, 0x4E	; 78
     dc2:	fd 4f       	sbci	r31, 0xFD	; 253
     dc4:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     dc6:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <bytes_in_input_buffer>
     dca:	91 50       	subi	r25, 0x01	; 1
     dcc:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <bytes_in_input_buffer>
	if (interrupts_enabled)
     dd0:	22 23       	and	r18, r18
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <uart_get_char+0x58>
	{
		sei();
     dd4:	78 94       	sei
	}	
	return c;
}
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	08 95       	ret

00000dda <init_serial_stdio>:
{
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     dda:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <out_insert_pos>
	bytes_in_out_buffer = 0;
     dde:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <bytes_in_out_buffer>
	input_insert_pos = 0;
     de2:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <input_insert_pos>
	bytes_in_input_buffer = 0;
     de6:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <bytes_in_input_buffer>
	input_overrun = 0;
     dea:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     dee:	40 93 a6 01 	sts	0x01A6, r20	; 0x8001a6 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	aa 1f       	adc	r26, r26
     dfc:	bb 1f       	adc	r27, r27
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	aa 1f       	adc	r26, r26
     e04:	bb 1f       	adc	r27, r27
     e06:	9c 01       	movw	r18, r24
     e08:	ad 01       	movw	r20, r26
     e0a:	22 0f       	add	r18, r18
     e0c:	33 1f       	adc	r19, r19
     e0e:	44 1f       	adc	r20, r20
     e10:	55 1f       	adc	r21, r21
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	72 e1       	ldi	r23, 0x12	; 18
     e16:	8a e7       	ldi	r24, 0x7A	; 122
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 93 08 	call	0x1126	; 0x1126 <__divmodsi4>
     e1e:	ba 01       	movw	r22, r20
     e20:	a9 01       	movw	r20, r18
     e22:	4f 5f       	subi	r20, 0xFF	; 255
     e24:	5f 4f       	sbci	r21, 0xFF	; 255
     e26:	6f 4f       	sbci	r22, 0xFF	; 255
     e28:	7f 4f       	sbci	r23, 0xFF	; 255
     e2a:	db 01       	movw	r26, r22
     e2c:	ca 01       	movw	r24, r20
     e2e:	1a f4       	brpl	.+6      	; 0xe36 <init_serial_stdio+0x5c>
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	a1 1d       	adc	r26, r1
     e34:	b1 1d       	adc	r27, r1
     e36:	b5 95       	asr	r27
     e38:	a7 95       	ror	r26
     e3a:	97 95       	ror	r25
     e3c:	87 95       	ror	r24
     e3e:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     e40:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     e44:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     e48:	e1 ec       	ldi	r30, 0xC1	; 193
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	88 e1       	ldi	r24, 0x18	; 24
     e4e:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
     e50:	80 81       	ld	r24, Z
     e52:	80 68       	ori	r24, 0x80	; 128
     e54:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     e56:	e4 ec       	ldi	r30, 0xC4	; 196
     e58:	f2 e0       	ldi	r31, 0x02	; 2
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	93 83       	std	Z+3, r25	; 0x03
     e60:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     e62:	91 83       	std	Z+1, r25	; 0x01
     e64:	80 83       	st	Z, r24
     e66:	08 95       	ret

00000e68 <serial_input_available>:
}

int8_t serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
     e68:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <bytes_in_input_buffer>
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	91 11       	cpse	r25, r1
     e70:	01 c0       	rjmp	.+2      	; 0xe74 <serial_input_available+0xc>
     e72:	80 e0       	ldi	r24, 0x00	; 0
}
     e74:	08 95       	ret

00000e76 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     e76:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <input_insert_pos>
	bytes_in_input_buffer = 0;
     e7a:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <bytes_in_input_buffer>
     e7e:	08 95       	ret

00000e80 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     e80:	1f 92       	push	r1
     e82:	0f 92       	push	r0
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	0f 92       	push	r0
     e88:	11 24       	eor	r1, r1
     e8a:	2f 93       	push	r18
     e8c:	8f 93       	push	r24
     e8e:	9f 93       	push	r25
     e90:	ef 93       	push	r30
     e92:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0)
     e94:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <bytes_in_out_buffer>
     e98:	88 23       	and	r24, r24
     e9a:	29 f1       	breq	.+74     	; 0xee6 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
     e9c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <out_insert_pos>
     ea0:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <bytes_in_out_buffer>
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	82 1b       	sub	r24, r18
     ea8:	91 09       	sbc	r25, r1
     eaa:	5a f4       	brpl	.+22     	; 0xec2 <__vector_21+0x42>
		{
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     eac:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <out_insert_pos>
     eb0:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <bytes_in_out_buffer>
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	e8 1b       	sub	r30, r24
     eb8:	f1 09       	sbc	r31, r1
     eba:	ef 54       	subi	r30, 0x4F	; 79
     ebc:	fd 4f       	sbci	r31, 0xFD	; 253
     ebe:	90 81       	ld	r25, Z
     ec0:	0a c0       	rjmp	.+20     	; 0xed6 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     ec2:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <out_insert_pos>
     ec6:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <bytes_in_out_buffer>
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	e8 1b       	sub	r30, r24
     ece:	f1 09       	sbc	r31, r1
     ed0:	ee 54       	subi	r30, 0x4E	; 78
     ed2:	fe 4f       	sbci	r31, 0xFE	; 254
     ed4:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     ed6:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <bytes_in_out_buffer>
     eda:	81 50       	subi	r24, 0x01	; 1
     edc:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     ee0:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     ee4:	05 c0       	rjmp	.+10     	; 0xef0 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
     ee6:	e1 ec       	ldi	r30, 0xC1	; 193
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8f 7d       	andi	r24, 0xDF	; 223
     eee:	80 83       	st	Z, r24
	}
}
     ef0:	ff 91       	pop	r31
     ef2:	ef 91       	pop	r30
     ef4:	9f 91       	pop	r25
     ef6:	8f 91       	pop	r24
     ef8:	2f 91       	pop	r18
     efa:	0f 90       	pop	r0
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	0f 90       	pop	r0
     f00:	1f 90       	pop	r1
     f02:	18 95       	reti

00000f04 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     f04:	1f 92       	push	r1
     f06:	0f 92       	push	r0
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	0f 92       	push	r0
     f0c:	11 24       	eor	r1, r1
     f0e:	2f 93       	push	r18
     f10:	3f 93       	push	r19
     f12:	4f 93       	push	r20
     f14:	5f 93       	push	r21
     f16:	6f 93       	push	r22
     f18:	7f 93       	push	r23
     f1a:	8f 93       	push	r24
     f1c:	9f 93       	push	r25
     f1e:	af 93       	push	r26
     f20:	bf 93       	push	r27
     f22:	cf 93       	push	r28
     f24:	ef 93       	push	r30
     f26:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     f28:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
     f2c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <do_echo>
     f30:	88 23       	and	r24, r24
     f32:	49 f0       	breq	.+18     	; 0xf46 <__vector_20+0x42>
     f34:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <bytes_in_out_buffer>
     f38:	8f 3f       	cpi	r24, 0xFF	; 255
     f3a:	29 f0       	breq	.+10     	; 0xf46 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	8c 2f       	mov	r24, r28
     f42:	0e 94 87 06 	call	0xd0e	; 0xd0e <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
     f46:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <bytes_in_input_buffer>
     f4a:	80 31       	cpi	r24, 0x10	; 16
     f4c:	20 f0       	brcs	.+8      	; 0xf56 <__vector_20+0x52>
	{
		input_overrun = 1;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <input_overrun>
     f54:	18 c0       	rjmp	.+48     	; 0xf86 <__vector_20+0x82>
	} else
	{
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r')
     f56:	cd 30       	cpi	r28, 0x0D	; 13
     f58:	09 f4       	brne	.+2      	; 0xf5c <__vector_20+0x58>
		{
			c = '\n';
     f5a:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     f5c:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <input_insert_pos>
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	8e 0f       	add	r24, r30
     f64:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <input_insert_pos>
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	ee 54       	subi	r30, 0x4E	; 78
     f6c:	fd 4f       	sbci	r31, 0xFD	; 253
     f6e:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     f70:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <bytes_in_input_buffer>
     f74:	8f 5f       	subi	r24, 0xFF	; 255
     f76:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
     f7a:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <input_insert_pos>
     f7e:	80 31       	cpi	r24, 0x10	; 16
     f80:	11 f4       	brne	.+4      	; 0xf86 <__vector_20+0x82>
		{
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     f82:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <input_insert_pos>
		}
	}
}
     f86:	ff 91       	pop	r31
     f88:	ef 91       	pop	r30
     f8a:	cf 91       	pop	r28
     f8c:	bf 91       	pop	r27
     f8e:	af 91       	pop	r26
     f90:	9f 91       	pop	r25
     f92:	8f 91       	pop	r24
     f94:	7f 91       	pop	r23
     f96:	6f 91       	pop	r22
     f98:	5f 91       	pop	r21
     f9a:	4f 91       	pop	r20
     f9c:	3f 91       	pop	r19
     f9e:	2f 91       	pop	r18
     fa0:	0f 90       	pop	r0
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	0f 90       	pop	r0
     fa6:	1f 90       	pop	r1
     fa8:	18 95       	reti

00000faa <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider)
{
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
     faa:	94 b1       	in	r25, 0x04	; 4
     fac:	90 6b       	ori	r25, 0xB0	; 176
     fae:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
     fb0:	95 b1       	in	r25, 0x05	; 5
     fb2:	90 61       	ori	r25, 0x10	; 16
     fb4:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
     fb6:	90 e5       	ldi	r25, 0x50	; 80
     fb8:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider)
     fba:	88 30       	cpi	r24, 0x08	; 8
     fbc:	21 f0       	breq	.+8      	; 0xfc6 <spi_setup_master+0x1c>
     fbe:	80 32       	cpi	r24, 0x20	; 32
     fc0:	11 f0       	breq	.+4      	; 0xfc6 <spi_setup_master+0x1c>
     fc2:	82 30       	cpi	r24, 0x02	; 2
     fc4:	19 f4       	brne	.+6      	; 0xfcc <spi_setup_master+0x22>
	{
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	9d bd       	out	0x2d, r25	; 45
			break;
     fca:	01 c0       	rjmp	.+2      	; 0xfce <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
     fcc:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
     fce:	80 32       	cpi	r24, 0x20	; 32
     fd0:	69 f0       	breq	.+26     	; 0xfec <spi_setup_master+0x42>
     fd2:	28 f4       	brcc	.+10     	; 0xfde <spi_setup_master+0x34>
     fd4:	88 30       	cpi	r24, 0x08	; 8
     fd6:	71 f0       	breq	.+28     	; 0xff4 <spi_setup_master+0x4a>
     fd8:	80 31       	cpi	r24, 0x10	; 16
     fda:	61 f0       	breq	.+24     	; 0xff4 <spi_setup_master+0x4a>
     fdc:	0e c0       	rjmp	.+28     	; 0xffa <spi_setup_master+0x50>
     fde:	80 34       	cpi	r24, 0x40	; 64
     fe0:	29 f0       	breq	.+10     	; 0xfec <spi_setup_master+0x42>
     fe2:	80 38       	cpi	r24, 0x80	; 128
     fe4:	51 f4       	brne	.+20     	; 0xffa <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
     fe6:	8c b5       	in	r24, 0x2c	; 44
     fe8:	81 60       	ori	r24, 0x01	; 1
     fea:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
     fec:	8c b5       	in	r24, 0x2c	; 44
     fee:	82 60       	ori	r24, 0x02	; 2
     ff0:	8c bd       	out	0x2c, r24	; 44
			break;
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
     ff4:	8c b5       	in	r24, 0x2c	; 44
     ff6:	81 60       	ori	r24, 0x01	; 1
     ff8:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
     ffa:	85 b1       	in	r24, 0x05	; 5
     ffc:	8f 7e       	andi	r24, 0xEF	; 239
     ffe:	85 b9       	out	0x05, r24	; 5
    1000:	08 95       	ret

00001002 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1002:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    1004:	0d b4       	in	r0, 0x2d	; 45
    1006:	07 fe       	sbrs	r0, 7
    1008:	fd cf       	rjmp	.-6      	; 0x1004 <spi_send_byte+0x2>
	{
		; // wait
	}
	return SPDR0;
    100a:	8e b5       	in	r24, 0x2e	; 46
}
    100c:	08 95       	ret

0000100e <move_terminal_cursor>:
}

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
}
    100e:	9f 93       	push	r25
    1010:	8f 93       	push	r24
    1012:	7f 93       	push	r23
    1014:	6f 93       	push	r22
    1016:	89 e7       	ldi	r24, 0x79	; 121
    1018:	93 e0       	ldi	r25, 0x03	; 3
    101a:	9f 93       	push	r25
    101c:	8f 93       	push	r24
    101e:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	08 95       	ret

00001030 <clear_terminal>:
    1030:	84 e7       	ldi	r24, 0x74	; 116
    1032:	93 e0       	ldi	r25, 0x03	; 3
    1034:	9f 93       	push	r25
    1036:	8f 93       	push	r24
    1038:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	08 95       	ret

00001042 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    1042:	1f 92       	push	r1
    1044:	8f 93       	push	r24
    1046:	8e e6       	ldi	r24, 0x6E	; 110
    1048:	93 e0       	ldi	r25, 0x03	; 3
    104a:	9f 93       	push	r25
    104c:	8f 93       	push	r24
    104e:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
}
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	08 95       	ret

0000105c <hide_cursor>:

void hide_cursor()
{
	printf_P(PSTR("\x1b[?25l"));
    105c:	87 e6       	ldi	r24, 0x67	; 103
    105e:	93 e0       	ldi	r25, 0x03	; 3
    1060:	9f 93       	push	r25
    1062:	8f 93       	push	r24
    1064:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
}
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	08 95       	ret

0000106e <show_cursor>:

void show_cursor()
{
	printf_P(PSTR("\x1b[?25h"));
    106e:	80 e6       	ldi	r24, 0x60	; 96
    1070:	93 e0       	ldi	r25, 0x03	; 3
    1072:	9f 93       	push	r25
    1074:	8f 93       	push	r24
    1076:	0e 94 21 09 	call	0x1242	; 0x1242 <printf_P>
}
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	08 95       	ret

00001080 <init_timer0>:
void init_timer0(void)
{
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
    1080:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <clock_ticks_ms>
    1084:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <clock_ticks_ms+0x1>
    1088:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <clock_ticks_ms+0x2>
    108c:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    1090:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    1092:	8c e7       	ldi	r24, 0x7C	; 124
    1094:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
    1096:	92 e0       	ldi	r25, 0x02	; 2
    1098:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    109a:	83 e0       	ldi	r24, 0x03	; 3
    109c:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
    109e:	ee e6       	ldi	r30, 0x6E	; 110
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	82 60       	ori	r24, 0x02	; 2
    10a6:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
    10a8:	95 bb       	out	0x15, r25	; 21
    10aa:	08 95       	ret

000010ac <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    10ac:	8f b7       	in	r24, 0x3f	; 63
    10ae:	28 2f       	mov	r18, r24
    10b0:	20 78       	andi	r18, 0x80	; 128
	cli();
    10b2:	f8 94       	cli
	return_value = clock_ticks_ms;
    10b4:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <clock_ticks_ms>
    10b8:	70 91 a8 01 	lds	r23, 0x01A8	; 0x8001a8 <clock_ticks_ms+0x1>
    10bc:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <clock_ticks_ms+0x2>
    10c0:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    10c4:	22 23       	and	r18, r18
    10c6:	09 f0       	breq	.+2      	; 0x10ca <get_current_time+0x1e>
	{
		sei();
    10c8:	78 94       	sei
	}
	return return_value;
}
    10ca:	08 95       	ret

000010cc <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
    10cc:	1f 92       	push	r1
    10ce:	0f 92       	push	r0
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	0f 92       	push	r0
    10d4:	11 24       	eor	r1, r1
    10d6:	8f 93       	push	r24
    10d8:	9f 93       	push	r25
    10da:	af 93       	push	r26
    10dc:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
    10de:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <clock_ticks_ms>
    10e2:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <clock_ticks_ms+0x1>
    10e6:	a0 91 a9 01 	lds	r26, 0x01A9	; 0x8001a9 <clock_ticks_ms+0x2>
    10ea:	b0 91 aa 01 	lds	r27, 0x01AA	; 0x8001aa <clock_ticks_ms+0x3>
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	a1 1d       	adc	r26, r1
    10f2:	b1 1d       	adc	r27, r1
    10f4:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <clock_ticks_ms>
    10f8:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <clock_ticks_ms+0x1>
    10fc:	a0 93 a9 01 	sts	0x01A9, r26	; 0x8001a9 <clock_ticks_ms+0x2>
    1100:	b0 93 aa 01 	sts	0x01AA, r27	; 0x8001aa <clock_ticks_ms+0x3>
}
    1104:	bf 91       	pop	r27
    1106:	af 91       	pop	r26
    1108:	9f 91       	pop	r25
    110a:	8f 91       	pop	r24
    110c:	0f 90       	pop	r0
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	0f 90       	pop	r0
    1112:	1f 90       	pop	r1
    1114:	18 95       	reti

00001116 <init_timer1>:

/* Set up timer 1
 */
void init_timer1(void)
{
	TCNT1 = 0;
    1116:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    111a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    111e:	08 95       	ret

00001120 <init_timer2>:

/* Set up timer 2
 */
void init_timer2(void)
{
	TCNT2 = 0;
    1120:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    1124:	08 95       	ret

00001126 <__divmodsi4>:
    1126:	05 2e       	mov	r0, r21
    1128:	97 fb       	bst	r25, 7
    112a:	1e f4       	brtc	.+6      	; 0x1132 <__divmodsi4+0xc>
    112c:	00 94       	com	r0
    112e:	0e 94 aa 08 	call	0x1154	; 0x1154 <__negsi2>
    1132:	57 fd       	sbrc	r21, 7
    1134:	07 d0       	rcall	.+14     	; 0x1144 <__divmodsi4_neg2>
    1136:	0e 94 c1 08 	call	0x1182	; 0x1182 <__udivmodsi4>
    113a:	07 fc       	sbrc	r0, 7
    113c:	03 d0       	rcall	.+6      	; 0x1144 <__divmodsi4_neg2>
    113e:	4e f4       	brtc	.+18     	; 0x1152 <__divmodsi4_exit>
    1140:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__negsi2>

00001144 <__divmodsi4_neg2>:
    1144:	50 95       	com	r21
    1146:	40 95       	com	r20
    1148:	30 95       	com	r19
    114a:	21 95       	neg	r18
    114c:	3f 4f       	sbci	r19, 0xFF	; 255
    114e:	4f 4f       	sbci	r20, 0xFF	; 255
    1150:	5f 4f       	sbci	r21, 0xFF	; 255

00001152 <__divmodsi4_exit>:
    1152:	08 95       	ret

00001154 <__negsi2>:
    1154:	90 95       	com	r25
    1156:	80 95       	com	r24
    1158:	70 95       	com	r23
    115a:	61 95       	neg	r22
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	8f 4f       	sbci	r24, 0xFF	; 255
    1160:	9f 4f       	sbci	r25, 0xFF	; 255
    1162:	08 95       	ret

00001164 <__umulhisi3>:
    1164:	a2 9f       	mul	r26, r18
    1166:	b0 01       	movw	r22, r0
    1168:	b3 9f       	mul	r27, r19
    116a:	c0 01       	movw	r24, r0
    116c:	a3 9f       	mul	r26, r19
    116e:	70 0d       	add	r23, r0
    1170:	81 1d       	adc	r24, r1
    1172:	11 24       	eor	r1, r1
    1174:	91 1d       	adc	r25, r1
    1176:	b2 9f       	mul	r27, r18
    1178:	70 0d       	add	r23, r0
    117a:	81 1d       	adc	r24, r1
    117c:	11 24       	eor	r1, r1
    117e:	91 1d       	adc	r25, r1
    1180:	08 95       	ret

00001182 <__udivmodsi4>:
    1182:	a1 e2       	ldi	r26, 0x21	; 33
    1184:	1a 2e       	mov	r1, r26
    1186:	aa 1b       	sub	r26, r26
    1188:	bb 1b       	sub	r27, r27
    118a:	fd 01       	movw	r30, r26
    118c:	0d c0       	rjmp	.+26     	; 0x11a8 <__udivmodsi4_ep>

0000118e <__udivmodsi4_loop>:
    118e:	aa 1f       	adc	r26, r26
    1190:	bb 1f       	adc	r27, r27
    1192:	ee 1f       	adc	r30, r30
    1194:	ff 1f       	adc	r31, r31
    1196:	a2 17       	cp	r26, r18
    1198:	b3 07       	cpc	r27, r19
    119a:	e4 07       	cpc	r30, r20
    119c:	f5 07       	cpc	r31, r21
    119e:	20 f0       	brcs	.+8      	; 0x11a8 <__udivmodsi4_ep>
    11a0:	a2 1b       	sub	r26, r18
    11a2:	b3 0b       	sbc	r27, r19
    11a4:	e4 0b       	sbc	r30, r20
    11a6:	f5 0b       	sbc	r31, r21

000011a8 <__udivmodsi4_ep>:
    11a8:	66 1f       	adc	r22, r22
    11aa:	77 1f       	adc	r23, r23
    11ac:	88 1f       	adc	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	1a 94       	dec	r1
    11b2:	69 f7       	brne	.-38     	; 0x118e <__udivmodsi4_loop>
    11b4:	60 95       	com	r22
    11b6:	70 95       	com	r23
    11b8:	80 95       	com	r24
    11ba:	90 95       	com	r25
    11bc:	9b 01       	movw	r18, r22
    11be:	ac 01       	movw	r20, r24
    11c0:	bd 01       	movw	r22, r26
    11c2:	cf 01       	movw	r24, r30
    11c4:	08 95       	ret

000011c6 <fgetc>:
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	ec 01       	movw	r28, r24
    11cc:	2b 81       	ldd	r18, Y+3	; 0x03
    11ce:	20 ff       	sbrs	r18, 0
    11d0:	33 c0       	rjmp	.+102    	; 0x1238 <fgetc+0x72>
    11d2:	26 ff       	sbrs	r18, 6
    11d4:	0a c0       	rjmp	.+20     	; 0x11ea <fgetc+0x24>
    11d6:	2f 7b       	andi	r18, 0xBF	; 191
    11d8:	2b 83       	std	Y+3, r18	; 0x03
    11da:	8e 81       	ldd	r24, Y+6	; 0x06
    11dc:	9f 81       	ldd	r25, Y+7	; 0x07
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	9f 83       	std	Y+7, r25	; 0x07
    11e2:	8e 83       	std	Y+6, r24	; 0x06
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	29 c0       	rjmp	.+82     	; 0x123c <fgetc+0x76>
    11ea:	22 ff       	sbrs	r18, 2
    11ec:	0f c0       	rjmp	.+30     	; 0x120c <fgetc+0x46>
    11ee:	e8 81       	ld	r30, Y
    11f0:	f9 81       	ldd	r31, Y+1	; 0x01
    11f2:	80 81       	ld	r24, Z
    11f4:	08 2e       	mov	r0, r24
    11f6:	00 0c       	add	r0, r0
    11f8:	99 0b       	sbc	r25, r25
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	19 f4       	brne	.+6      	; 0x1204 <fgetc+0x3e>
    11fe:	20 62       	ori	r18, 0x20	; 32
    1200:	2b 83       	std	Y+3, r18	; 0x03
    1202:	1a c0       	rjmp	.+52     	; 0x1238 <fgetc+0x72>
    1204:	31 96       	adiw	r30, 0x01	; 1
    1206:	f9 83       	std	Y+1, r31	; 0x01
    1208:	e8 83       	st	Y, r30
    120a:	0e c0       	rjmp	.+28     	; 0x1228 <fgetc+0x62>
    120c:	ea 85       	ldd	r30, Y+10	; 0x0a
    120e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1210:	09 95       	icall
    1212:	97 ff       	sbrs	r25, 7
    1214:	09 c0       	rjmp	.+18     	; 0x1228 <fgetc+0x62>
    1216:	2b 81       	ldd	r18, Y+3	; 0x03
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	11 f0       	breq	.+4      	; 0x1220 <fgetc+0x5a>
    121c:	80 e2       	ldi	r24, 0x20	; 32
    121e:	01 c0       	rjmp	.+2      	; 0x1222 <fgetc+0x5c>
    1220:	80 e1       	ldi	r24, 0x10	; 16
    1222:	82 2b       	or	r24, r18
    1224:	8b 83       	std	Y+3, r24	; 0x03
    1226:	08 c0       	rjmp	.+16     	; 0x1238 <fgetc+0x72>
    1228:	2e 81       	ldd	r18, Y+6	; 0x06
    122a:	3f 81       	ldd	r19, Y+7	; 0x07
    122c:	2f 5f       	subi	r18, 0xFF	; 255
    122e:	3f 4f       	sbci	r19, 0xFF	; 255
    1230:	3f 83       	std	Y+7, r19	; 0x07
    1232:	2e 83       	std	Y+6, r18	; 0x06
    1234:	99 27       	eor	r25, r25
    1236:	02 c0       	rjmp	.+4      	; 0x123c <fgetc+0x76>
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	9f ef       	ldi	r25, 0xFF	; 255
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <printf_P>:
    1242:	a0 e0       	ldi	r26, 0x00	; 0
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e7 e2       	ldi	r30, 0x27	; 39
    1248:	f9 e0       	ldi	r31, 0x09	; 9
    124a:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__prologue_saves__+0x1c>
    124e:	ae 01       	movw	r20, r28
    1250:	49 5f       	subi	r20, 0xF9	; 249
    1252:	5f 4f       	sbci	r21, 0xFF	; 255
    1254:	da 01       	movw	r26, r20
    1256:	6d 91       	ld	r22, X+
    1258:	7d 91       	ld	r23, X+
    125a:	ad 01       	movw	r20, r26
    125c:	04 ec       	ldi	r16, 0xC4	; 196
    125e:	12 e0       	ldi	r17, 0x02	; 2
    1260:	f8 01       	movw	r30, r16
    1262:	82 81       	ldd	r24, Z+2	; 0x02
    1264:	93 81       	ldd	r25, Z+3	; 0x03
    1266:	dc 01       	movw	r26, r24
    1268:	13 96       	adiw	r26, 0x03	; 3
    126a:	2c 91       	ld	r18, X
    126c:	13 97       	sbiw	r26, 0x03	; 3
    126e:	28 60       	ori	r18, 0x08	; 8
    1270:	13 96       	adiw	r26, 0x03	; 3
    1272:	2c 93       	st	X, r18
    1274:	0e 94 47 09 	call	0x128e	; 0x128e <vfprintf>
    1278:	d8 01       	movw	r26, r16
    127a:	12 96       	adiw	r26, 0x02	; 2
    127c:	ed 91       	ld	r30, X+
    127e:	fc 91       	ld	r31, X
    1280:	13 97       	sbiw	r26, 0x03	; 3
    1282:	23 81       	ldd	r18, Z+3	; 0x03
    1284:	27 7f       	andi	r18, 0xF7	; 247
    1286:	23 83       	std	Z+3, r18	; 0x03
    1288:	e4 e0       	ldi	r30, 0x04	; 4
    128a:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__epilogue_restores__+0x1c>

0000128e <vfprintf>:
    128e:	ab e0       	ldi	r26, 0x0B	; 11
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	ed e4       	ldi	r30, 0x4D	; 77
    1294:	f9 e0       	ldi	r31, 0x09	; 9
    1296:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__prologue_saves__>
    129a:	6c 01       	movw	r12, r24
    129c:	7b 01       	movw	r14, r22
    129e:	8a 01       	movw	r16, r20
    12a0:	fc 01       	movw	r30, r24
    12a2:	17 82       	std	Z+7, r1	; 0x07
    12a4:	16 82       	std	Z+6, r1	; 0x06
    12a6:	83 81       	ldd	r24, Z+3	; 0x03
    12a8:	81 ff       	sbrs	r24, 1
    12aa:	cc c1       	rjmp	.+920    	; 0x1644 <vfprintf+0x3b6>
    12ac:	ce 01       	movw	r24, r28
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	3c 01       	movw	r6, r24
    12b2:	f6 01       	movw	r30, r12
    12b4:	93 81       	ldd	r25, Z+3	; 0x03
    12b6:	f7 01       	movw	r30, r14
    12b8:	93 fd       	sbrc	r25, 3
    12ba:	85 91       	lpm	r24, Z+
    12bc:	93 ff       	sbrs	r25, 3
    12be:	81 91       	ld	r24, Z+
    12c0:	7f 01       	movw	r14, r30
    12c2:	88 23       	and	r24, r24
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <vfprintf+0x3a>
    12c6:	ba c1       	rjmp	.+884    	; 0x163c <vfprintf+0x3ae>
    12c8:	85 32       	cpi	r24, 0x25	; 37
    12ca:	39 f4       	brne	.+14     	; 0x12da <vfprintf+0x4c>
    12cc:	93 fd       	sbrc	r25, 3
    12ce:	85 91       	lpm	r24, Z+
    12d0:	93 ff       	sbrs	r25, 3
    12d2:	81 91       	ld	r24, Z+
    12d4:	7f 01       	movw	r14, r30
    12d6:	85 32       	cpi	r24, 0x25	; 37
    12d8:	29 f4       	brne	.+10     	; 0x12e4 <vfprintf+0x56>
    12da:	b6 01       	movw	r22, r12
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    12e2:	e7 cf       	rjmp	.-50     	; 0x12b2 <vfprintf+0x24>
    12e4:	91 2c       	mov	r9, r1
    12e6:	21 2c       	mov	r2, r1
    12e8:	31 2c       	mov	r3, r1
    12ea:	ff e1       	ldi	r31, 0x1F	; 31
    12ec:	f3 15       	cp	r31, r3
    12ee:	d8 f0       	brcs	.+54     	; 0x1326 <vfprintf+0x98>
    12f0:	8b 32       	cpi	r24, 0x2B	; 43
    12f2:	79 f0       	breq	.+30     	; 0x1312 <vfprintf+0x84>
    12f4:	38 f4       	brcc	.+14     	; 0x1304 <vfprintf+0x76>
    12f6:	80 32       	cpi	r24, 0x20	; 32
    12f8:	79 f0       	breq	.+30     	; 0x1318 <vfprintf+0x8a>
    12fa:	83 32       	cpi	r24, 0x23	; 35
    12fc:	a1 f4       	brne	.+40     	; 0x1326 <vfprintf+0x98>
    12fe:	23 2d       	mov	r18, r3
    1300:	20 61       	ori	r18, 0x10	; 16
    1302:	1d c0       	rjmp	.+58     	; 0x133e <vfprintf+0xb0>
    1304:	8d 32       	cpi	r24, 0x2D	; 45
    1306:	61 f0       	breq	.+24     	; 0x1320 <vfprintf+0x92>
    1308:	80 33       	cpi	r24, 0x30	; 48
    130a:	69 f4       	brne	.+26     	; 0x1326 <vfprintf+0x98>
    130c:	23 2d       	mov	r18, r3
    130e:	21 60       	ori	r18, 0x01	; 1
    1310:	16 c0       	rjmp	.+44     	; 0x133e <vfprintf+0xb0>
    1312:	83 2d       	mov	r24, r3
    1314:	82 60       	ori	r24, 0x02	; 2
    1316:	38 2e       	mov	r3, r24
    1318:	e3 2d       	mov	r30, r3
    131a:	e4 60       	ori	r30, 0x04	; 4
    131c:	3e 2e       	mov	r3, r30
    131e:	2a c0       	rjmp	.+84     	; 0x1374 <vfprintf+0xe6>
    1320:	f3 2d       	mov	r31, r3
    1322:	f8 60       	ori	r31, 0x08	; 8
    1324:	1d c0       	rjmp	.+58     	; 0x1360 <vfprintf+0xd2>
    1326:	37 fc       	sbrc	r3, 7
    1328:	2d c0       	rjmp	.+90     	; 0x1384 <vfprintf+0xf6>
    132a:	20 ed       	ldi	r18, 0xD0	; 208
    132c:	28 0f       	add	r18, r24
    132e:	2a 30       	cpi	r18, 0x0A	; 10
    1330:	40 f0       	brcs	.+16     	; 0x1342 <vfprintf+0xb4>
    1332:	8e 32       	cpi	r24, 0x2E	; 46
    1334:	b9 f4       	brne	.+46     	; 0x1364 <vfprintf+0xd6>
    1336:	36 fc       	sbrc	r3, 6
    1338:	81 c1       	rjmp	.+770    	; 0x163c <vfprintf+0x3ae>
    133a:	23 2d       	mov	r18, r3
    133c:	20 64       	ori	r18, 0x40	; 64
    133e:	32 2e       	mov	r3, r18
    1340:	19 c0       	rjmp	.+50     	; 0x1374 <vfprintf+0xe6>
    1342:	36 fe       	sbrs	r3, 6
    1344:	06 c0       	rjmp	.+12     	; 0x1352 <vfprintf+0xc4>
    1346:	8a e0       	ldi	r24, 0x0A	; 10
    1348:	98 9e       	mul	r9, r24
    134a:	20 0d       	add	r18, r0
    134c:	11 24       	eor	r1, r1
    134e:	92 2e       	mov	r9, r18
    1350:	11 c0       	rjmp	.+34     	; 0x1374 <vfprintf+0xe6>
    1352:	ea e0       	ldi	r30, 0x0A	; 10
    1354:	2e 9e       	mul	r2, r30
    1356:	20 0d       	add	r18, r0
    1358:	11 24       	eor	r1, r1
    135a:	22 2e       	mov	r2, r18
    135c:	f3 2d       	mov	r31, r3
    135e:	f0 62       	ori	r31, 0x20	; 32
    1360:	3f 2e       	mov	r3, r31
    1362:	08 c0       	rjmp	.+16     	; 0x1374 <vfprintf+0xe6>
    1364:	8c 36       	cpi	r24, 0x6C	; 108
    1366:	21 f4       	brne	.+8      	; 0x1370 <vfprintf+0xe2>
    1368:	83 2d       	mov	r24, r3
    136a:	80 68       	ori	r24, 0x80	; 128
    136c:	38 2e       	mov	r3, r24
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <vfprintf+0xe6>
    1370:	88 36       	cpi	r24, 0x68	; 104
    1372:	41 f4       	brne	.+16     	; 0x1384 <vfprintf+0xf6>
    1374:	f7 01       	movw	r30, r14
    1376:	93 fd       	sbrc	r25, 3
    1378:	85 91       	lpm	r24, Z+
    137a:	93 ff       	sbrs	r25, 3
    137c:	81 91       	ld	r24, Z+
    137e:	7f 01       	movw	r14, r30
    1380:	81 11       	cpse	r24, r1
    1382:	b3 cf       	rjmp	.-154    	; 0x12ea <vfprintf+0x5c>
    1384:	98 2f       	mov	r25, r24
    1386:	9f 7d       	andi	r25, 0xDF	; 223
    1388:	95 54       	subi	r25, 0x45	; 69
    138a:	93 30       	cpi	r25, 0x03	; 3
    138c:	28 f4       	brcc	.+10     	; 0x1398 <vfprintf+0x10a>
    138e:	0c 5f       	subi	r16, 0xFC	; 252
    1390:	1f 4f       	sbci	r17, 0xFF	; 255
    1392:	9f e3       	ldi	r25, 0x3F	; 63
    1394:	99 83       	std	Y+1, r25	; 0x01
    1396:	0d c0       	rjmp	.+26     	; 0x13b2 <vfprintf+0x124>
    1398:	83 36       	cpi	r24, 0x63	; 99
    139a:	31 f0       	breq	.+12     	; 0x13a8 <vfprintf+0x11a>
    139c:	83 37       	cpi	r24, 0x73	; 115
    139e:	71 f0       	breq	.+28     	; 0x13bc <vfprintf+0x12e>
    13a0:	83 35       	cpi	r24, 0x53	; 83
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <vfprintf+0x118>
    13a4:	59 c0       	rjmp	.+178    	; 0x1458 <vfprintf+0x1ca>
    13a6:	21 c0       	rjmp	.+66     	; 0x13ea <vfprintf+0x15c>
    13a8:	f8 01       	movw	r30, r16
    13aa:	80 81       	ld	r24, Z
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	0e 5f       	subi	r16, 0xFE	; 254
    13b0:	1f 4f       	sbci	r17, 0xFF	; 255
    13b2:	88 24       	eor	r8, r8
    13b4:	83 94       	inc	r8
    13b6:	91 2c       	mov	r9, r1
    13b8:	53 01       	movw	r10, r6
    13ba:	13 c0       	rjmp	.+38     	; 0x13e2 <vfprintf+0x154>
    13bc:	28 01       	movw	r4, r16
    13be:	f2 e0       	ldi	r31, 0x02	; 2
    13c0:	4f 0e       	add	r4, r31
    13c2:	51 1c       	adc	r5, r1
    13c4:	f8 01       	movw	r30, r16
    13c6:	a0 80       	ld	r10, Z
    13c8:	b1 80       	ldd	r11, Z+1	; 0x01
    13ca:	36 fe       	sbrs	r3, 6
    13cc:	03 c0       	rjmp	.+6      	; 0x13d4 <vfprintf+0x146>
    13ce:	69 2d       	mov	r22, r9
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <vfprintf+0x14a>
    13d4:	6f ef       	ldi	r22, 0xFF	; 255
    13d6:	7f ef       	ldi	r23, 0xFF	; 255
    13d8:	c5 01       	movw	r24, r10
    13da:	0e 94 33 0b 	call	0x1666	; 0x1666 <strnlen>
    13de:	4c 01       	movw	r8, r24
    13e0:	82 01       	movw	r16, r4
    13e2:	f3 2d       	mov	r31, r3
    13e4:	ff 77       	andi	r31, 0x7F	; 127
    13e6:	3f 2e       	mov	r3, r31
    13e8:	16 c0       	rjmp	.+44     	; 0x1416 <vfprintf+0x188>
    13ea:	28 01       	movw	r4, r16
    13ec:	22 e0       	ldi	r18, 0x02	; 2
    13ee:	42 0e       	add	r4, r18
    13f0:	51 1c       	adc	r5, r1
    13f2:	f8 01       	movw	r30, r16
    13f4:	a0 80       	ld	r10, Z
    13f6:	b1 80       	ldd	r11, Z+1	; 0x01
    13f8:	36 fe       	sbrs	r3, 6
    13fa:	03 c0       	rjmp	.+6      	; 0x1402 <vfprintf+0x174>
    13fc:	69 2d       	mov	r22, r9
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <vfprintf+0x178>
    1402:	6f ef       	ldi	r22, 0xFF	; 255
    1404:	7f ef       	ldi	r23, 0xFF	; 255
    1406:	c5 01       	movw	r24, r10
    1408:	0e 94 28 0b 	call	0x1650	; 0x1650 <strnlen_P>
    140c:	4c 01       	movw	r8, r24
    140e:	f3 2d       	mov	r31, r3
    1410:	f0 68       	ori	r31, 0x80	; 128
    1412:	3f 2e       	mov	r3, r31
    1414:	82 01       	movw	r16, r4
    1416:	33 fc       	sbrc	r3, 3
    1418:	1b c0       	rjmp	.+54     	; 0x1450 <vfprintf+0x1c2>
    141a:	82 2d       	mov	r24, r2
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	88 16       	cp	r8, r24
    1420:	99 06       	cpc	r9, r25
    1422:	b0 f4       	brcc	.+44     	; 0x1450 <vfprintf+0x1c2>
    1424:	b6 01       	movw	r22, r12
    1426:	80 e2       	ldi	r24, 0x20	; 32
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    142e:	2a 94       	dec	r2
    1430:	f4 cf       	rjmp	.-24     	; 0x141a <vfprintf+0x18c>
    1432:	f5 01       	movw	r30, r10
    1434:	37 fc       	sbrc	r3, 7
    1436:	85 91       	lpm	r24, Z+
    1438:	37 fe       	sbrs	r3, 7
    143a:	81 91       	ld	r24, Z+
    143c:	5f 01       	movw	r10, r30
    143e:	b6 01       	movw	r22, r12
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    1446:	21 10       	cpse	r2, r1
    1448:	2a 94       	dec	r2
    144a:	21 e0       	ldi	r18, 0x01	; 1
    144c:	82 1a       	sub	r8, r18
    144e:	91 08       	sbc	r9, r1
    1450:	81 14       	cp	r8, r1
    1452:	91 04       	cpc	r9, r1
    1454:	71 f7       	brne	.-36     	; 0x1432 <vfprintf+0x1a4>
    1456:	e8 c0       	rjmp	.+464    	; 0x1628 <vfprintf+0x39a>
    1458:	84 36       	cpi	r24, 0x64	; 100
    145a:	11 f0       	breq	.+4      	; 0x1460 <vfprintf+0x1d2>
    145c:	89 36       	cpi	r24, 0x69	; 105
    145e:	41 f5       	brne	.+80     	; 0x14b0 <vfprintf+0x222>
    1460:	f8 01       	movw	r30, r16
    1462:	37 fe       	sbrs	r3, 7
    1464:	07 c0       	rjmp	.+14     	; 0x1474 <vfprintf+0x1e6>
    1466:	60 81       	ld	r22, Z
    1468:	71 81       	ldd	r23, Z+1	; 0x01
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	0c 5f       	subi	r16, 0xFC	; 252
    1470:	1f 4f       	sbci	r17, 0xFF	; 255
    1472:	08 c0       	rjmp	.+16     	; 0x1484 <vfprintf+0x1f6>
    1474:	60 81       	ld	r22, Z
    1476:	71 81       	ldd	r23, Z+1	; 0x01
    1478:	07 2e       	mov	r0, r23
    147a:	00 0c       	add	r0, r0
    147c:	88 0b       	sbc	r24, r24
    147e:	99 0b       	sbc	r25, r25
    1480:	0e 5f       	subi	r16, 0xFE	; 254
    1482:	1f 4f       	sbci	r17, 0xFF	; 255
    1484:	f3 2d       	mov	r31, r3
    1486:	ff 76       	andi	r31, 0x6F	; 111
    1488:	3f 2e       	mov	r3, r31
    148a:	97 ff       	sbrs	r25, 7
    148c:	09 c0       	rjmp	.+18     	; 0x14a0 <vfprintf+0x212>
    148e:	90 95       	com	r25
    1490:	80 95       	com	r24
    1492:	70 95       	com	r23
    1494:	61 95       	neg	r22
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	8f 4f       	sbci	r24, 0xFF	; 255
    149a:	9f 4f       	sbci	r25, 0xFF	; 255
    149c:	f0 68       	ori	r31, 0x80	; 128
    149e:	3f 2e       	mov	r3, r31
    14a0:	2a e0       	ldi	r18, 0x0A	; 10
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	a3 01       	movw	r20, r6
    14a6:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__ultoa_invert>
    14aa:	88 2e       	mov	r8, r24
    14ac:	86 18       	sub	r8, r6
    14ae:	45 c0       	rjmp	.+138    	; 0x153a <vfprintf+0x2ac>
    14b0:	85 37       	cpi	r24, 0x75	; 117
    14b2:	31 f4       	brne	.+12     	; 0x14c0 <vfprintf+0x232>
    14b4:	23 2d       	mov	r18, r3
    14b6:	2f 7e       	andi	r18, 0xEF	; 239
    14b8:	b2 2e       	mov	r11, r18
    14ba:	2a e0       	ldi	r18, 0x0A	; 10
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	25 c0       	rjmp	.+74     	; 0x150a <vfprintf+0x27c>
    14c0:	93 2d       	mov	r25, r3
    14c2:	99 7f       	andi	r25, 0xF9	; 249
    14c4:	b9 2e       	mov	r11, r25
    14c6:	8f 36       	cpi	r24, 0x6F	; 111
    14c8:	c1 f0       	breq	.+48     	; 0x14fa <vfprintf+0x26c>
    14ca:	18 f4       	brcc	.+6      	; 0x14d2 <vfprintf+0x244>
    14cc:	88 35       	cpi	r24, 0x58	; 88
    14ce:	79 f0       	breq	.+30     	; 0x14ee <vfprintf+0x260>
    14d0:	b5 c0       	rjmp	.+362    	; 0x163c <vfprintf+0x3ae>
    14d2:	80 37       	cpi	r24, 0x70	; 112
    14d4:	19 f0       	breq	.+6      	; 0x14dc <vfprintf+0x24e>
    14d6:	88 37       	cpi	r24, 0x78	; 120
    14d8:	21 f0       	breq	.+8      	; 0x14e2 <vfprintf+0x254>
    14da:	b0 c0       	rjmp	.+352    	; 0x163c <vfprintf+0x3ae>
    14dc:	e9 2f       	mov	r30, r25
    14de:	e0 61       	ori	r30, 0x10	; 16
    14e0:	be 2e       	mov	r11, r30
    14e2:	b4 fe       	sbrs	r11, 4
    14e4:	0d c0       	rjmp	.+26     	; 0x1500 <vfprintf+0x272>
    14e6:	fb 2d       	mov	r31, r11
    14e8:	f4 60       	ori	r31, 0x04	; 4
    14ea:	bf 2e       	mov	r11, r31
    14ec:	09 c0       	rjmp	.+18     	; 0x1500 <vfprintf+0x272>
    14ee:	34 fe       	sbrs	r3, 4
    14f0:	0a c0       	rjmp	.+20     	; 0x1506 <vfprintf+0x278>
    14f2:	29 2f       	mov	r18, r25
    14f4:	26 60       	ori	r18, 0x06	; 6
    14f6:	b2 2e       	mov	r11, r18
    14f8:	06 c0       	rjmp	.+12     	; 0x1506 <vfprintf+0x278>
    14fa:	28 e0       	ldi	r18, 0x08	; 8
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	05 c0       	rjmp	.+10     	; 0x150a <vfprintf+0x27c>
    1500:	20 e1       	ldi	r18, 0x10	; 16
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	02 c0       	rjmp	.+4      	; 0x150a <vfprintf+0x27c>
    1506:	20 e1       	ldi	r18, 0x10	; 16
    1508:	32 e0       	ldi	r19, 0x02	; 2
    150a:	f8 01       	movw	r30, r16
    150c:	b7 fe       	sbrs	r11, 7
    150e:	07 c0       	rjmp	.+14     	; 0x151e <vfprintf+0x290>
    1510:	60 81       	ld	r22, Z
    1512:	71 81       	ldd	r23, Z+1	; 0x01
    1514:	82 81       	ldd	r24, Z+2	; 0x02
    1516:	93 81       	ldd	r25, Z+3	; 0x03
    1518:	0c 5f       	subi	r16, 0xFC	; 252
    151a:	1f 4f       	sbci	r17, 0xFF	; 255
    151c:	06 c0       	rjmp	.+12     	; 0x152a <vfprintf+0x29c>
    151e:	60 81       	ld	r22, Z
    1520:	71 81       	ldd	r23, Z+1	; 0x01
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 5f       	subi	r16, 0xFE	; 254
    1528:	1f 4f       	sbci	r17, 0xFF	; 255
    152a:	a3 01       	movw	r20, r6
    152c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__ultoa_invert>
    1530:	88 2e       	mov	r8, r24
    1532:	86 18       	sub	r8, r6
    1534:	fb 2d       	mov	r31, r11
    1536:	ff 77       	andi	r31, 0x7F	; 127
    1538:	3f 2e       	mov	r3, r31
    153a:	36 fe       	sbrs	r3, 6
    153c:	0d c0       	rjmp	.+26     	; 0x1558 <vfprintf+0x2ca>
    153e:	23 2d       	mov	r18, r3
    1540:	2e 7f       	andi	r18, 0xFE	; 254
    1542:	a2 2e       	mov	r10, r18
    1544:	89 14       	cp	r8, r9
    1546:	58 f4       	brcc	.+22     	; 0x155e <vfprintf+0x2d0>
    1548:	34 fe       	sbrs	r3, 4
    154a:	0b c0       	rjmp	.+22     	; 0x1562 <vfprintf+0x2d4>
    154c:	32 fc       	sbrc	r3, 2
    154e:	09 c0       	rjmp	.+18     	; 0x1562 <vfprintf+0x2d4>
    1550:	83 2d       	mov	r24, r3
    1552:	8e 7e       	andi	r24, 0xEE	; 238
    1554:	a8 2e       	mov	r10, r24
    1556:	05 c0       	rjmp	.+10     	; 0x1562 <vfprintf+0x2d4>
    1558:	b8 2c       	mov	r11, r8
    155a:	a3 2c       	mov	r10, r3
    155c:	03 c0       	rjmp	.+6      	; 0x1564 <vfprintf+0x2d6>
    155e:	b8 2c       	mov	r11, r8
    1560:	01 c0       	rjmp	.+2      	; 0x1564 <vfprintf+0x2d6>
    1562:	b9 2c       	mov	r11, r9
    1564:	a4 fe       	sbrs	r10, 4
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <vfprintf+0x2f8>
    1568:	fe 01       	movw	r30, r28
    156a:	e8 0d       	add	r30, r8
    156c:	f1 1d       	adc	r31, r1
    156e:	80 81       	ld	r24, Z
    1570:	80 33       	cpi	r24, 0x30	; 48
    1572:	21 f4       	brne	.+8      	; 0x157c <vfprintf+0x2ee>
    1574:	9a 2d       	mov	r25, r10
    1576:	99 7e       	andi	r25, 0xE9	; 233
    1578:	a9 2e       	mov	r10, r25
    157a:	09 c0       	rjmp	.+18     	; 0x158e <vfprintf+0x300>
    157c:	a2 fe       	sbrs	r10, 2
    157e:	06 c0       	rjmp	.+12     	; 0x158c <vfprintf+0x2fe>
    1580:	b3 94       	inc	r11
    1582:	b3 94       	inc	r11
    1584:	04 c0       	rjmp	.+8      	; 0x158e <vfprintf+0x300>
    1586:	8a 2d       	mov	r24, r10
    1588:	86 78       	andi	r24, 0x86	; 134
    158a:	09 f0       	breq	.+2      	; 0x158e <vfprintf+0x300>
    158c:	b3 94       	inc	r11
    158e:	a3 fc       	sbrc	r10, 3
    1590:	11 c0       	rjmp	.+34     	; 0x15b4 <vfprintf+0x326>
    1592:	a0 fe       	sbrs	r10, 0
    1594:	06 c0       	rjmp	.+12     	; 0x15a2 <vfprintf+0x314>
    1596:	b2 14       	cp	r11, r2
    1598:	88 f4       	brcc	.+34     	; 0x15bc <vfprintf+0x32e>
    159a:	28 0c       	add	r2, r8
    159c:	92 2c       	mov	r9, r2
    159e:	9b 18       	sub	r9, r11
    15a0:	0e c0       	rjmp	.+28     	; 0x15be <vfprintf+0x330>
    15a2:	b2 14       	cp	r11, r2
    15a4:	60 f4       	brcc	.+24     	; 0x15be <vfprintf+0x330>
    15a6:	b6 01       	movw	r22, r12
    15a8:	80 e2       	ldi	r24, 0x20	; 32
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    15b0:	b3 94       	inc	r11
    15b2:	f7 cf       	rjmp	.-18     	; 0x15a2 <vfprintf+0x314>
    15b4:	b2 14       	cp	r11, r2
    15b6:	18 f4       	brcc	.+6      	; 0x15be <vfprintf+0x330>
    15b8:	2b 18       	sub	r2, r11
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <vfprintf+0x332>
    15bc:	98 2c       	mov	r9, r8
    15be:	21 2c       	mov	r2, r1
    15c0:	a4 fe       	sbrs	r10, 4
    15c2:	10 c0       	rjmp	.+32     	; 0x15e4 <vfprintf+0x356>
    15c4:	b6 01       	movw	r22, r12
    15c6:	80 e3       	ldi	r24, 0x30	; 48
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    15ce:	a2 fe       	sbrs	r10, 2
    15d0:	17 c0       	rjmp	.+46     	; 0x1600 <vfprintf+0x372>
    15d2:	a1 fc       	sbrc	r10, 1
    15d4:	03 c0       	rjmp	.+6      	; 0x15dc <vfprintf+0x34e>
    15d6:	88 e7       	ldi	r24, 0x78	; 120
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <vfprintf+0x352>
    15dc:	88 e5       	ldi	r24, 0x58	; 88
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	b6 01       	movw	r22, r12
    15e2:	0c c0       	rjmp	.+24     	; 0x15fc <vfprintf+0x36e>
    15e4:	8a 2d       	mov	r24, r10
    15e6:	86 78       	andi	r24, 0x86	; 134
    15e8:	59 f0       	breq	.+22     	; 0x1600 <vfprintf+0x372>
    15ea:	a1 fe       	sbrs	r10, 1
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <vfprintf+0x364>
    15ee:	8b e2       	ldi	r24, 0x2B	; 43
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <vfprintf+0x366>
    15f2:	80 e2       	ldi	r24, 0x20	; 32
    15f4:	a7 fc       	sbrc	r10, 7
    15f6:	8d e2       	ldi	r24, 0x2D	; 45
    15f8:	b6 01       	movw	r22, r12
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    1600:	89 14       	cp	r8, r9
    1602:	38 f4       	brcc	.+14     	; 0x1612 <vfprintf+0x384>
    1604:	b6 01       	movw	r22, r12
    1606:	80 e3       	ldi	r24, 0x30	; 48
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    160e:	9a 94       	dec	r9
    1610:	f7 cf       	rjmp	.-18     	; 0x1600 <vfprintf+0x372>
    1612:	8a 94       	dec	r8
    1614:	f3 01       	movw	r30, r6
    1616:	e8 0d       	add	r30, r8
    1618:	f1 1d       	adc	r31, r1
    161a:	80 81       	ld	r24, Z
    161c:	b6 01       	movw	r22, r12
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    1624:	81 10       	cpse	r8, r1
    1626:	f5 cf       	rjmp	.-22     	; 0x1612 <vfprintf+0x384>
    1628:	22 20       	and	r2, r2
    162a:	09 f4       	brne	.+2      	; 0x162e <vfprintf+0x3a0>
    162c:	42 ce       	rjmp	.-892    	; 0x12b2 <vfprintf+0x24>
    162e:	b6 01       	movw	r22, r12
    1630:	80 e2       	ldi	r24, 0x20	; 32
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    1638:	2a 94       	dec	r2
    163a:	f6 cf       	rjmp	.-20     	; 0x1628 <vfprintf+0x39a>
    163c:	f6 01       	movw	r30, r12
    163e:	86 81       	ldd	r24, Z+6	; 0x06
    1640:	97 81       	ldd	r25, Z+7	; 0x07
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <vfprintf+0x3ba>
    1644:	8f ef       	ldi	r24, 0xFF	; 255
    1646:	9f ef       	ldi	r25, 0xFF	; 255
    1648:	2b 96       	adiw	r28, 0x0b	; 11
    164a:	e2 e1       	ldi	r30, 0x12	; 18
    164c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__epilogue_restores__>

00001650 <strnlen_P>:
    1650:	fc 01       	movw	r30, r24
    1652:	05 90       	lpm	r0, Z+
    1654:	61 50       	subi	r22, 0x01	; 1
    1656:	70 40       	sbci	r23, 0x00	; 0
    1658:	01 10       	cpse	r0, r1
    165a:	d8 f7       	brcc	.-10     	; 0x1652 <strnlen_P+0x2>
    165c:	80 95       	com	r24
    165e:	90 95       	com	r25
    1660:	8e 0f       	add	r24, r30
    1662:	9f 1f       	adc	r25, r31
    1664:	08 95       	ret

00001666 <strnlen>:
    1666:	fc 01       	movw	r30, r24
    1668:	61 50       	subi	r22, 0x01	; 1
    166a:	70 40       	sbci	r23, 0x00	; 0
    166c:	01 90       	ld	r0, Z+
    166e:	01 10       	cpse	r0, r1
    1670:	d8 f7       	brcc	.-10     	; 0x1668 <strnlen+0x2>
    1672:	80 95       	com	r24
    1674:	90 95       	com	r25
    1676:	8e 0f       	add	r24, r30
    1678:	9f 1f       	adc	r25, r31
    167a:	08 95       	ret

0000167c <fputc>:
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	fb 01       	movw	r30, r22
    1686:	23 81       	ldd	r18, Z+3	; 0x03
    1688:	21 fd       	sbrc	r18, 1
    168a:	03 c0       	rjmp	.+6      	; 0x1692 <fputc+0x16>
    168c:	8f ef       	ldi	r24, 0xFF	; 255
    168e:	9f ef       	ldi	r25, 0xFF	; 255
    1690:	2c c0       	rjmp	.+88     	; 0x16ea <fputc+0x6e>
    1692:	22 ff       	sbrs	r18, 2
    1694:	16 c0       	rjmp	.+44     	; 0x16c2 <fputc+0x46>
    1696:	46 81       	ldd	r20, Z+6	; 0x06
    1698:	57 81       	ldd	r21, Z+7	; 0x07
    169a:	24 81       	ldd	r18, Z+4	; 0x04
    169c:	35 81       	ldd	r19, Z+5	; 0x05
    169e:	42 17       	cp	r20, r18
    16a0:	53 07       	cpc	r21, r19
    16a2:	44 f4       	brge	.+16     	; 0x16b4 <fputc+0x38>
    16a4:	a0 81       	ld	r26, Z
    16a6:	b1 81       	ldd	r27, Z+1	; 0x01
    16a8:	9d 01       	movw	r18, r26
    16aa:	2f 5f       	subi	r18, 0xFF	; 255
    16ac:	3f 4f       	sbci	r19, 0xFF	; 255
    16ae:	31 83       	std	Z+1, r19	; 0x01
    16b0:	20 83       	st	Z, r18
    16b2:	8c 93       	st	X, r24
    16b4:	26 81       	ldd	r18, Z+6	; 0x06
    16b6:	37 81       	ldd	r19, Z+7	; 0x07
    16b8:	2f 5f       	subi	r18, 0xFF	; 255
    16ba:	3f 4f       	sbci	r19, 0xFF	; 255
    16bc:	37 83       	std	Z+7, r19	; 0x07
    16be:	26 83       	std	Z+6, r18	; 0x06
    16c0:	14 c0       	rjmp	.+40     	; 0x16ea <fputc+0x6e>
    16c2:	8b 01       	movw	r16, r22
    16c4:	ec 01       	movw	r28, r24
    16c6:	fb 01       	movw	r30, r22
    16c8:	00 84       	ldd	r0, Z+8	; 0x08
    16ca:	f1 85       	ldd	r31, Z+9	; 0x09
    16cc:	e0 2d       	mov	r30, r0
    16ce:	09 95       	icall
    16d0:	89 2b       	or	r24, r25
    16d2:	e1 f6       	brne	.-72     	; 0x168c <fputc+0x10>
    16d4:	d8 01       	movw	r26, r16
    16d6:	16 96       	adiw	r26, 0x06	; 6
    16d8:	8d 91       	ld	r24, X+
    16da:	9c 91       	ld	r25, X
    16dc:	17 97       	sbiw	r26, 0x07	; 7
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	17 96       	adiw	r26, 0x07	; 7
    16e2:	9c 93       	st	X, r25
    16e4:	8e 93       	st	-X, r24
    16e6:	16 97       	sbiw	r26, 0x06	; 6
    16e8:	ce 01       	movw	r24, r28
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	08 95       	ret

000016f4 <__ultoa_invert>:
    16f4:	fa 01       	movw	r30, r20
    16f6:	aa 27       	eor	r26, r26
    16f8:	28 30       	cpi	r18, 0x08	; 8
    16fa:	51 f1       	breq	.+84     	; 0x1750 <__ultoa_invert+0x5c>
    16fc:	20 31       	cpi	r18, 0x10	; 16
    16fe:	81 f1       	breq	.+96     	; 0x1760 <__ultoa_invert+0x6c>
    1700:	e8 94       	clt
    1702:	6f 93       	push	r22
    1704:	6e 7f       	andi	r22, 0xFE	; 254
    1706:	6e 5f       	subi	r22, 0xFE	; 254
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	8f 4f       	sbci	r24, 0xFF	; 255
    170c:	9f 4f       	sbci	r25, 0xFF	; 255
    170e:	af 4f       	sbci	r26, 0xFF	; 255
    1710:	b1 e0       	ldi	r27, 0x01	; 1
    1712:	3e d0       	rcall	.+124    	; 0x1790 <__ultoa_invert+0x9c>
    1714:	b4 e0       	ldi	r27, 0x04	; 4
    1716:	3c d0       	rcall	.+120    	; 0x1790 <__ultoa_invert+0x9c>
    1718:	67 0f       	add	r22, r23
    171a:	78 1f       	adc	r23, r24
    171c:	89 1f       	adc	r24, r25
    171e:	9a 1f       	adc	r25, r26
    1720:	a1 1d       	adc	r26, r1
    1722:	68 0f       	add	r22, r24
    1724:	79 1f       	adc	r23, r25
    1726:	8a 1f       	adc	r24, r26
    1728:	91 1d       	adc	r25, r1
    172a:	a1 1d       	adc	r26, r1
    172c:	6a 0f       	add	r22, r26
    172e:	71 1d       	adc	r23, r1
    1730:	81 1d       	adc	r24, r1
    1732:	91 1d       	adc	r25, r1
    1734:	a1 1d       	adc	r26, r1
    1736:	20 d0       	rcall	.+64     	; 0x1778 <__ultoa_invert+0x84>
    1738:	09 f4       	brne	.+2      	; 0x173c <__ultoa_invert+0x48>
    173a:	68 94       	set
    173c:	3f 91       	pop	r19
    173e:	2a e0       	ldi	r18, 0x0A	; 10
    1740:	26 9f       	mul	r18, r22
    1742:	11 24       	eor	r1, r1
    1744:	30 19       	sub	r19, r0
    1746:	30 5d       	subi	r19, 0xD0	; 208
    1748:	31 93       	st	Z+, r19
    174a:	de f6       	brtc	.-74     	; 0x1702 <__ultoa_invert+0xe>
    174c:	cf 01       	movw	r24, r30
    174e:	08 95       	ret
    1750:	46 2f       	mov	r20, r22
    1752:	47 70       	andi	r20, 0x07	; 7
    1754:	40 5d       	subi	r20, 0xD0	; 208
    1756:	41 93       	st	Z+, r20
    1758:	b3 e0       	ldi	r27, 0x03	; 3
    175a:	0f d0       	rcall	.+30     	; 0x177a <__ultoa_invert+0x86>
    175c:	c9 f7       	brne	.-14     	; 0x1750 <__ultoa_invert+0x5c>
    175e:	f6 cf       	rjmp	.-20     	; 0x174c <__ultoa_invert+0x58>
    1760:	46 2f       	mov	r20, r22
    1762:	4f 70       	andi	r20, 0x0F	; 15
    1764:	40 5d       	subi	r20, 0xD0	; 208
    1766:	4a 33       	cpi	r20, 0x3A	; 58
    1768:	18 f0       	brcs	.+6      	; 0x1770 <__ultoa_invert+0x7c>
    176a:	49 5d       	subi	r20, 0xD9	; 217
    176c:	31 fd       	sbrc	r19, 1
    176e:	40 52       	subi	r20, 0x20	; 32
    1770:	41 93       	st	Z+, r20
    1772:	02 d0       	rcall	.+4      	; 0x1778 <__ultoa_invert+0x84>
    1774:	a9 f7       	brne	.-22     	; 0x1760 <__ultoa_invert+0x6c>
    1776:	ea cf       	rjmp	.-44     	; 0x174c <__ultoa_invert+0x58>
    1778:	b4 e0       	ldi	r27, 0x04	; 4
    177a:	a6 95       	lsr	r26
    177c:	97 95       	ror	r25
    177e:	87 95       	ror	r24
    1780:	77 95       	ror	r23
    1782:	67 95       	ror	r22
    1784:	ba 95       	dec	r27
    1786:	c9 f7       	brne	.-14     	; 0x177a <__ultoa_invert+0x86>
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	61 05       	cpc	r22, r1
    178c:	71 05       	cpc	r23, r1
    178e:	08 95       	ret
    1790:	9b 01       	movw	r18, r22
    1792:	ac 01       	movw	r20, r24
    1794:	0a 2e       	mov	r0, r26
    1796:	06 94       	lsr	r0
    1798:	57 95       	ror	r21
    179a:	47 95       	ror	r20
    179c:	37 95       	ror	r19
    179e:	27 95       	ror	r18
    17a0:	ba 95       	dec	r27
    17a2:	c9 f7       	brne	.-14     	; 0x1796 <__ultoa_invert+0xa2>
    17a4:	62 0f       	add	r22, r18
    17a6:	73 1f       	adc	r23, r19
    17a8:	84 1f       	adc	r24, r20
    17aa:	95 1f       	adc	r25, r21
    17ac:	a0 1d       	adc	r26, r0
    17ae:	08 95       	ret

000017b0 <__prologue_saves__>:
    17b0:	2f 92       	push	r2
    17b2:	3f 92       	push	r3
    17b4:	4f 92       	push	r4
    17b6:	5f 92       	push	r5
    17b8:	6f 92       	push	r6
    17ba:	7f 92       	push	r7
    17bc:	8f 92       	push	r8
    17be:	9f 92       	push	r9
    17c0:	af 92       	push	r10
    17c2:	bf 92       	push	r11
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	ca 1b       	sub	r28, r26
    17da:	db 0b       	sbc	r29, r27
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	09 94       	ijmp

000017e8 <__epilogue_restores__>:
    17e8:	2a 88       	ldd	r2, Y+18	; 0x12
    17ea:	39 88       	ldd	r3, Y+17	; 0x11
    17ec:	48 88       	ldd	r4, Y+16	; 0x10
    17ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    17f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    17f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    17f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    17f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    17f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    17fa:	b9 84       	ldd	r11, Y+9	; 0x09
    17fc:	c8 84       	ldd	r12, Y+8	; 0x08
    17fe:	df 80       	ldd	r13, Y+7	; 0x07
    1800:	ee 80       	ldd	r14, Y+6	; 0x06
    1802:	fd 80       	ldd	r15, Y+5	; 0x05
    1804:	0c 81       	ldd	r16, Y+4	; 0x04
    1806:	1b 81       	ldd	r17, Y+3	; 0x03
    1808:	aa 81       	ldd	r26, Y+2	; 0x02
    180a:	b9 81       	ldd	r27, Y+1	; 0x01
    180c:	ce 0f       	add	r28, r30
    180e:	d1 1d       	adc	r29, r1
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	ed 01       	movw	r28, r26
    181c:	08 95       	ret

0000181e <_exit>:
    181e:	f8 94       	cli

00001820 <__stop_program>:
    1820:	ff cf       	rjmp	.-2      	; 0x1820 <__stop_program>
