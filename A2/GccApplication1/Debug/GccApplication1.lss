
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000052a  00800100  0000316e  00003202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000316e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015d  0080062a  0080062a  0000372c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000372c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  000037c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004046  00000000  00000000  00003b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000136a  00000000  00000000  00007b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002465  00000000  00000000  00008eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aa8  00000000  00000000  0000b320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d82  00000000  00000000  0000bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027d5  00000000  00000000  0000cb4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0000f31f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__ctors_end>
       4:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       8:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      10:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      14:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_5>
      18:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      1c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      20:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      24:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__vector_9>
      28:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      2c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      30:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      34:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      38:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      3c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      40:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__vector_16>
      44:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      48:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      4c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      50:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <__vector_20>
      54:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__vector_21>
      58:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      5c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      60:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      64:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      68:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      6c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      70:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      74:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      78:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2353>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2285>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 20 43 61 69 6c 69 6e 20 44 65 6c 67      by  Cailin Delg
      d4:	61 64 6f 20 2d 20 34 38 30 32 37 39 34 32 00        ado - 48027942.

000000e3 <__c.2283>:
      e3:	20 5c 24 24 20 20 20 5c 24 24 20 20 20 20 20 5c      \$$   \$$     \
      f3:	24 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20     $     \$$   \$$ 
     103:	20 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20           \$$   \$$ 
     113:	20 5c 24 24 24 24 24 24 24 20 5c 24 24 20 20 20      \$$$$$$$ \$$   
     123:	20 20 20 20 20 5c 24 24 24 24 24 24 00                   \$$$$$$.

00000130 <__c.2281>:
     130:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 5c 24     | $$  | $$    \$
     140:	24 24 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20     $$   | $$  | $$ 
     150:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     160:	5c 24 24 20 20 20 20 20 5c 7c 20 24 24 20 20 20     \$$     \| $$   
     170:	20 20 20 20 5c 24 24 20 20 20 20 24 24 00               \$$    $$.

0000017e <__c.2279>:
     17e:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 5c 24 24     | $$  | $$   \$$
     18e:	20 24 24 20 20 7c 20 24 24 20 20 7c 20 24 24 20      $$  | $$  | $$ 
     19e:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 7c          | $$  | $$|
     1ae:	20 24 24 24 24 24 24 24 24 7c 20 24 24 20 20 20      $$$$$$$$| $$   
     1be:	20 20 20 7c 20 24 24 5f 5f 2f 20 24 24 00              | $$__/ $$.

000001cc <__c.2277>:
     1cc:	7c 20 24 24 24 24 24 24 24 24 20 20 5c 24 24 5c     | $$$$$$$$  \$$\
     1dc:	20 20 24 24 20 7c 20 24 24 24 24 24 24 24 5c 20       $$ | $$$$$$$\ 
     1ec:	20 20 20 20 20 7c 20 24 24 24 24 24 24 24 24 7c          | $$$$$$$$|
     1fc:	20 24 24 20 20 20 20 24 24 7c 20 24 24 20 20 20      $$    $$| $$   
     20c:	5c 24 24 7c 20 24 24 20 20 7c 20 24 24 00           \$$| $$  | $$.

0000021a <__c.2275>:
     21a:	7c 20 24 24 20 20 20 20 24 24 20 5c 24 24 5c 20     | $$    $$ \$$\ 
     22a:	2f 20 20 24 24 7c 20 24 24 20 20 20 20 24 24 20     /  $$| $$    $$ 
     23a:	20 20 20 20 20 7c 20 24 24 20 20 20 20 24 24 7c          | $$    $$|
     24a:	20 20 24 24 24 24 24 24 5c 7c 20 20 24 24 24 24       $$$$$$\|  $$$$
     25a:	24 24 5c 7c 20 20 24 24 24 24 24 24 5c 00           $$\|  $$$$$$\.

00000268 <__c.2273>:
     268:	7c 20 24 24 5f 5f 7c 20 24 24 7c 20 24 24 20 20     | $$__| $$| $$  
     278:	20 7c 20 24 24 7c 20 24 24 5f 5f 7c 20 24 24 20      | $$| $$__| $$ 
     288:	20 20 20 20 20 7c 20 24 24 5f 5f 7c 20 24 24 20          | $$__| $$ 
     298:	2f 20 20 20 20 20 20 5c 20 20 2f 20 20 20 20 20     /      \  /     
     2a8:	20 5c 20 20 2f 20 20 20 20 20 20 5c 00               \  /      \.

000002b5 <__c.2271>:
     2b5:	7c 20 20 24 24 24 24 24 24 5c 7c 20 24 24 20 20     |  $$$$$$\| $$  
     2c5:	20 7c 20 24 24 7c 20 24 24 24 24 24 24 24 5c 20      | $$| $$$$$$$\ 
     2d5:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     2e5:	20 5f 5f 5f 5f 5f 5f 20 20 20 20 5f 5f 5f 5f 5f      ______    _____
     2f5:	5f 20 20 20 20 5f 5f 5f 5f 5f 5f 00                 _    ______.

00000301 <__c.2269>:
     301:	20 2f 20 20 20 20 20 20 5c 20 7c 20 20 5c 20 20      /      \ |  \  
     311:	20 7c 20 20 5c 7c 20 20 20 20 20 20 20 5c 20 20      |  \|       \  
     321:	20 20 20 20 20 7c 20 20 5c 20 20 7c 20 20 5c 00          |  \  |  \.

00000331 <__c.2267>:
     331:	20 20 5f 5f 5f 5f 5f 5f 20 20 20 5f 5f 20 20 20       ______   __   
     341:	20 20 5f 5f 20 20 5f 5f 5f 5f 5f 5f 5f 20 20 20       __  _______   
     351:	20 20 20 20 20 20 5f 5f 20 20 20 20 5f 5f 00              __    __.

00000360 <__c.2058>:
     360:	1b 5b 3f 32 35 68 00                                .[?25h.

00000367 <__c.2054>:
     367:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000036e <__c.2050>:
     36e:	1b 5b 25 64 6d 00                                   .[%dm.

00000374 <__c.2045>:
     374:	1b 5b 4b 00                                         .[K.

00000378 <__c.2040>:
     378:	1b 5b 32 4a 00                                      .[2J.

0000037d <__c.2025>:
     37d:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000386 <__ctors_end>:
     386:	11 24       	eor	r1, r1
     388:	1f be       	out	0x3f, r1	; 63
     38a:	cf ef       	ldi	r28, 0xFF	; 255
     38c:	d8 e0       	ldi	r29, 0x08	; 8
     38e:	de bf       	out	0x3e, r29	; 62
     390:	cd bf       	out	0x3d, r28	; 61

00000392 <__do_copy_data>:
     392:	16 e0       	ldi	r17, 0x06	; 6
     394:	a0 e0       	ldi	r26, 0x00	; 0
     396:	b1 e0       	ldi	r27, 0x01	; 1
     398:	ee e6       	ldi	r30, 0x6E	; 110
     39a:	f1 e3       	ldi	r31, 0x31	; 49
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__do_copy_data+0x10>
     39e:	05 90       	lpm	r0, Z+
     3a0:	0d 92       	st	X+, r0
     3a2:	aa 32       	cpi	r26, 0x2A	; 42
     3a4:	b1 07       	cpc	r27, r17
     3a6:	d9 f7       	brne	.-10     	; 0x39e <__do_copy_data+0xc>

000003a8 <__do_clear_bss>:
     3a8:	27 e0       	ldi	r18, 0x07	; 7
     3aa:	aa e2       	ldi	r26, 0x2A	; 42
     3ac:	b6 e0       	ldi	r27, 0x06	; 6
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
     3b2:	a7 38       	cpi	r26, 0x87	; 135
     3b4:	b2 07       	cpc	r27, r18
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>
     3b8:	0e 94 4a 10 	call	0x2094	; 0x2094 <main>
     3bc:	0c 94 b5 18 	jmp	0x316a	; 0x316a <_exit>

000003c0 <__bad_interrupt>:
     3c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c4 <init_button_interrupts>:
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void)
{
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     3c4:	e8 e6       	ldi	r30, 0x68	; 104
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	82 60       	ori	r24, 0x02	; 2
     3cc:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     3ce:	8b b3       	in	r24, 0x1b	; 27
     3d0:	82 60       	ori	r24, 0x02	; 2
     3d2:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     3d4:	ec e6       	ldi	r30, 0x6C	; 108
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	8f 60       	ori	r24, 0x0F	; 15
     3dc:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     3de:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <__data_end>
     3e2:	08 95       	ret

000003e4 <button_pushed>:

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0)
     3e4:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <__data_end>
     3e8:	18 16       	cp	r1, r24
     3ea:	14 f5       	brge	.+68     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     3ec:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3f0:	6f b7       	in	r22, 0x3f	; 63
		cli();
     3f2:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	09 c0       	rjmp	.+18     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		{
			button_queue[i - 1] = button_queue[i];
     3f8:	f9 01       	movw	r30, r18
     3fa:	e5 5d       	subi	r30, 0xD5	; 213
     3fc:	f9 4f       	sbci	r31, 0xF9	; 249
     3fe:	40 81       	ld	r20, Z
     400:	f9 01       	movw	r30, r18
     402:	e6 5d       	subi	r30, 0xD6	; 214
     404:	f9 4f       	sbci	r31, 0xF9	; 249
     406:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     408:	9f 5f       	subi	r25, 0xFF	; 255
     40a:	29 2f       	mov	r18, r25
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 91 2a 06 	lds	r20, 0x062A	; 0x80062a <__data_end>
     412:	04 2e       	mov	r0, r20
     414:	00 0c       	add	r0, r0
     416:	55 0b       	sbc	r21, r21
     418:	24 17       	cp	r18, r20
     41a:	35 07       	cpc	r19, r21
     41c:	6c f3       	brlt	.-38     	; 0x3f8 <button_pushed+0x14>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     41e:	90 91 2a 06 	lds	r25, 0x062A	; 0x80062a <__data_end>
     422:	91 50       	subi	r25, 0x01	; 1
     424:	90 93 2a 06 	sts	0x062A, r25	; 0x80062a <__data_end>
		
		if (interrupts_were_enabled)
     428:	66 23       	and	r22, r22
     42a:	1c f4       	brge	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		{
			// Turn them back on again
			sei();
     42c:	78 94       	sei
     42e:	08 95       	ret
	queue_length = 0;
}

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     430:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     432:	08 95       	ret

00000434 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect)
{
     434:	1f 92       	push	r1
     436:	0f 92       	push	r0
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     44c:	43 b1       	in	r20, 0x03	; 3
     44e:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	26 c0       	rjmp	.+76     	; 0x4a0 <__vector_5+0x6c>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     454:	90 91 2a 06 	lds	r25, 0x062A	; 0x80062a <__data_end>
     458:	94 30       	cpi	r25, 0x04	; 4
     45a:	0c f5       	brge	.+66     	; 0x49e <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     45c:	24 2f       	mov	r18, r20
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	08 2e       	mov	r0, r24
     462:	02 c0       	rjmp	.+4      	; 0x468 <__vector_5+0x34>
     464:	35 95       	asr	r19
     466:	27 95       	ror	r18
     468:	0a 94       	dec	r0
     46a:	e2 f7       	brpl	.-8      	; 0x464 <__vector_5+0x30>
     46c:	20 ff       	sbrs	r18, 0
     46e:	17 c0       	rjmp	.+46     	; 0x49e <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin)))
     470:	20 91 2f 06 	lds	r18, 0x062F	; 0x80062f <last_button_state>
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	08 2e       	mov	r0, r24
     478:	02 c0       	rjmp	.+4      	; 0x47e <__vector_5+0x4a>
     47a:	35 95       	asr	r19
     47c:	27 95       	ror	r18
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <__vector_5+0x46>
     482:	20 fd       	sbrc	r18, 0
     484:	0c c0       	rjmp	.+24     	; 0x49e <__vector_5+0x6a>
				{
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     486:	e0 91 2a 06 	lds	r30, 0x062A	; 0x80062a <__data_end>
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	9e 0f       	add	r25, r30
     48e:	90 93 2a 06 	sts	0x062A, r25	; 0x80062a <__data_end>
     492:	0e 2e       	mov	r0, r30
     494:	00 0c       	add	r0, r0
     496:	ff 0b       	sbc	r31, r31
     498:	e5 5d       	subi	r30, 0xD5	; 213
     49a:	f9 4f       	sbci	r31, 0xF9	; 249
     49c:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	c0 f2       	brcs	.-80     	; 0x454 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     4a4:	40 93 2f 06 	sts	0x062F, r20	; 0x80062f <last_button_state>
}
     4a8:	ff 91       	pop	r31
     4aa:	ef 91       	pop	r30
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <update_start_screen>:

// Update dynamic start screen based on the frame number (0-31)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	18 2f       	mov	r17, r24
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     4c8:	d4 e0       	ldi	r29, 0x04	; 4
     4ca:	36 c0       	rjmp	.+108    	; 0x538 <update_start_screen+0x78>
	{
		for (uint8_t col = 11; col < 16; col++)
		{
			colour = col == 14 ? COLOUR_YELLOW : COLOUR_BLACK;
     4cc:	ce 30       	cpi	r28, 0x0E	; 14
     4ce:	11 f4       	brne	.+4      	; 0x4d4 <update_start_screen+0x14>
     4d0:	4f ef       	ldi	r20, 0xFF	; 255
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <update_start_screen+0x16>
     4d4:	40 e0       	ldi	r20, 0x00	; 0
			if (((32+col-frame_number) & ((1<<(row-2))-1)) == (1<<(row-3))-1)
     4d6:	2c 2f       	mov	r18, r28
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	20 5e       	subi	r18, 0xE0	; 224
     4dc:	3f 4f       	sbci	r19, 0xFF	; 255
     4de:	21 1b       	sub	r18, r17
     4e0:	31 09       	sbc	r19, r1
     4e2:	ed 2f       	mov	r30, r29
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	bf 01       	movw	r22, r30
     4e8:	62 50       	subi	r22, 0x02	; 2
     4ea:	71 09       	sbc	r23, r1
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	dc 01       	movw	r26, r24
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <update_start_screen+0x38>
     4f4:	aa 0f       	add	r26, r26
     4f6:	bb 1f       	adc	r27, r27
     4f8:	6a 95       	dec	r22
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <update_start_screen+0x34>
     4fc:	bd 01       	movw	r22, r26
     4fe:	61 50       	subi	r22, 0x01	; 1
     500:	71 09       	sbc	r23, r1
     502:	26 23       	and	r18, r22
     504:	37 23       	and	r19, r23
     506:	33 97       	sbiw	r30, 0x03	; 3
     508:	02 c0       	rjmp	.+4      	; 0x50e <update_start_screen+0x4e>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	ea 95       	dec	r30
     510:	e2 f7       	brpl	.-8      	; 0x50a <update_start_screen+0x4a>
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	28 17       	cp	r18, r24
     516:	39 07       	cpc	r19, r25
     518:	29 f4       	brne	.+10     	; 0x524 <update_start_screen+0x64>
			{
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
     51a:	ce 30       	cpi	r28, 0x0E	; 14
     51c:	10 f4       	brcc	.+4      	; 0x522 <update_start_screen+0x62>
     51e:	4f e0       	ldi	r20, 0x0F	; 15
     520:	01 c0       	rjmp	.+2      	; 0x524 <update_start_screen+0x64>
     522:	40 ef       	ldi	r20, 0xF0	; 240
			}
			ledmatrix_update_pixel(col, row, colour);
     524:	6d 2f       	mov	r22, r29
     526:	8c 2f       	mov	r24, r28
     528:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
	{
		for (uint8_t col = 11; col < 16; col++)
     52c:	cf 5f       	subi	r28, 0xFF	; 255
     52e:	01 c0       	rjmp	.+2      	; 0x532 <update_start_screen+0x72>
     530:	cb e0       	ldi	r28, 0x0B	; 11
     532:	c0 31       	cpi	r28, 0x10	; 16
     534:	58 f2       	brcs	.-106    	; 0x4cc <update_start_screen+0xc>
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     536:	df 5f       	subi	r29, 0xFF	; 255
     538:	d8 30       	cpi	r29, 0x08	; 8
     53a:	d0 f3       	brcs	.-12     	; 0x530 <update_start_screen+0x70>
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
			}
			ledmatrix_update_pixel(col, row, colour);
		}
	}
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	08 95       	ret

00000544 <show_start_screen>:
// Stored as a 5 x 3 grid pattern going from Left-to-Right, Top-to-Bottom
// Padded with a leading zero so that it fits into a 16-bit value


void show_start_screen(void)
{
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	28 97       	sbiw	r28, 0x08	; 8
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     55a:	0e 94 55 08 	call	0x10aa	; 0x10aa <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	31 c0       	rjmp	.+98     	; 0x5c4 <show_start_screen+0x80>
	{
		col_data = pong_display[col];
     562:	e1 2f       	mov	r30, r17
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	ee 5c       	subi	r30, 0xCE	; 206
     568:	fe 4f       	sbci	r31, 0xFE	; 254
     56a:	90 81       	ld	r25, Z
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	21 c0       	rjmp	.+66     	; 0x5b2 <show_start_screen+0x6e>
		{
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data>>row & 1)
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	49 2f       	mov	r20, r25
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	08 2e       	mov	r0, r24
     57a:	02 c0       	rjmp	.+4      	; 0x580 <show_start_screen+0x3c>
     57c:	55 95       	asr	r21
     57e:	47 95       	ror	r20
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <show_start_screen+0x38>
     584:	40 ff       	sbrs	r20, 0
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <show_start_screen+0x5e>
			{
				column_colour_data[row] = (row < 4 ? COLOUR_RED : COLOUR_GREEN);
     588:	84 30       	cpi	r24, 0x04	; 4
     58a:	10 f4       	brcc	.+4      	; 0x590 <show_start_screen+0x4c>
     58c:	4f e0       	ldi	r20, 0x0F	; 15
     58e:	01 c0       	rjmp	.+2      	; 0x592 <show_start_screen+0x4e>
     590:	40 ef       	ldi	r20, 0xF0	; 240
     592:	e1 e0       	ldi	r30, 0x01	; 1
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	ec 0f       	add	r30, r28
     598:	fd 1f       	adc	r31, r29
     59a:	e2 0f       	add	r30, r18
     59c:	f3 1f       	adc	r31, r19
     59e:	40 83       	st	Z, r20
     5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <show_start_screen+0x6c>
			}
			else
			{
				column_colour_data[row] = 0;
     5a2:	e1 e0       	ldi	r30, 0x01	; 1
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	ec 0f       	add	r30, r28
     5a8:	fd 1f       	adc	r31, r29
     5aa:	e2 0f       	add	r30, r18
     5ac:	f3 1f       	adc	r31, r19
     5ae:	10 82       	st	Z, r1
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
	{
		col_data = pong_display[col];
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	88 30       	cpi	r24, 0x08	; 8
     5b4:	e8 f2       	brcs	.-70     	; 0x570 <show_start_screen+0x2c>
			else
			{
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
     5b6:	be 01       	movw	r22, r28
     5b8:	6f 5f       	subi	r22, 0xFF	; 255
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	81 2f       	mov	r24, r17
     5be:	0e 94 38 08 	call	0x1070	; 0x1070 <ledmatrix_update_column>
{
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     5c2:	1f 5f       	subi	r17, 0xFF	; 255
     5c4:	10 31       	cpi	r17, 0x10	; 16
     5c6:	68 f2       	brcs	.-102    	; 0x562 <show_start_screen+0x1e>
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
	}
	update_start_screen(0);
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
}
     5ce:	28 96       	adiw	r28, 0x08	; 8
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	08 95       	ret

000005e2 <default_grid>:
}

// Initialize the display for the board, this creates the display
// for an empty board.
void default_grid(void)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	28 97       	sbiw	r28, 0x08	; 8
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_clear();
     5f6:	0e 94 55 08 	call	0x10aa	; 0x10aa <ledmatrix_clear>
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <default_grid+0x2e>
	{
		colours[row] = COLOUR_YELLOW;
     5fe:	e1 e0       	ldi	r30, 0x01	; 1
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	e8 0f       	add	r30, r24
     608:	f1 1d       	adc	r31, r1
     60a:	9f ef       	ldi	r25, 0xFF	; 255
     60c:	90 83       	st	Z, r25
void default_grid(void)
{
	ledmatrix_clear();
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     60e:	8f 5f       	subi	r24, 0xFF	; 255
     610:	88 30       	cpi	r24, 0x08	; 8
     612:	a8 f3       	brcs	.-22     	; 0x5fe <default_grid+0x1c>
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
     614:	be 01       	movw	r22, r28
     616:	6f 5f       	subi	r22, 0xFF	; 255
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	8d e0       	ldi	r24, 0x0D	; 13
     61c:	0e 94 38 08 	call	0x1070	; 0x1070 <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	09 c0       	rjmp	.+18     	; 0x636 <default_grid+0x54>
	{
		colours[row] = COLOUR_HALF_YELLOW;
     624:	e1 e0       	ldi	r30, 0x01	; 1
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ec 0f       	add	r30, r28
     62a:	fd 1f       	adc	r31, r29
     62c:	e8 0f       	add	r30, r24
     62e:	f1 1d       	adc	r31, r1
     630:	95 e5       	ldi	r25, 0x55	; 85
     632:	90 83       	st	Z, r25
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	88 30       	cpi	r24, 0x08	; 8
     638:	a8 f3       	brcs	.-22     	; 0x624 <default_grid+0x42>
	{
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
     63a:	be 01       	movw	r22, r28
     63c:	6f 5f       	subi	r22, 0xFF	; 255
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	8c e0       	ldi	r24, 0x0C	; 12
     642:	0e 94 38 08 	call	0x1070	; 0x1070 <ledmatrix_update_column>
	ledmatrix_update_column(14, colours);
     646:	be 01       	movw	r22, r28
     648:	6f 5f       	subi	r22, 0xFF	; 255
     64a:	7f 4f       	sbci	r23, 0xFF	; 255
     64c:	8e e0       	ldi	r24, 0x0E	; 14
     64e:	0e 94 38 08 	call	0x1070	; 0x1070 <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	09 c0       	rjmp	.+18     	; 0x668 <default_grid+0x86>
	{
		colours[row] = COLOUR_QUART_YELLOW;
     656:	e1 e0       	ldi	r30, 0x01	; 1
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	e8 0f       	add	r30, r24
     660:	f1 1d       	adc	r31, r1
     662:	91 e1       	ldi	r25, 0x11	; 17
     664:	90 83       	st	Z, r25
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
	ledmatrix_update_column(14, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	88 30       	cpi	r24, 0x08	; 8
     66a:	a8 f3       	brcs	.-22     	; 0x656 <default_grid+0x74>
	{
		colours[row] = COLOUR_QUART_YELLOW;
	}
	ledmatrix_update_column(11, colours);
     66c:	be 01       	movw	r22, r28
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	8b e0       	ldi	r24, 0x0B	; 11
     674:	0e 94 38 08 	call	0x1070	; 0x1070 <ledmatrix_update_column>
	ledmatrix_update_column(15, colours);
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	8f e0       	ldi	r24, 0x0F	; 15
     680:	0e 94 38 08 	call	0x1070	; 0x1070 <ledmatrix_update_column>
}
     684:	28 96       	adiw	r28, 0x08	; 8
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <update_points>:
uint8_t game_over = 0;

//updates the points in the terminal
void update_points() {
	//clear terminal line and reprint the game score with the points
	move_terminal_cursor(10, 13);
     696:	6d e0       	ldi	r22, 0x0D	; 13
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	8a e0       	ldi	r24, 0x0A	; 10
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
	clear_to_end_of_line();
     6a2:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <clear_to_end_of_line>

	// if x >= 10 and [-9, 0)
	if ((points >= 10) || (points < 0 && points >= -9)) {
     6a6:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
     6aa:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
     6ae:	8a 30       	cpi	r24, 0x0A	; 10
     6b0:	91 05       	cpc	r25, r1
     6b2:	34 f4       	brge	.+12     	; 0x6c0 <update_points+0x2a>
     6b4:	9c 01       	movw	r18, r24
     6b6:	27 5f       	subi	r18, 0xF7	; 247
     6b8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ba:	29 30       	cpi	r18, 0x09	; 9
     6bc:	31 05       	cpc	r19, r1
     6be:	68 f4       	brcc	.+26     	; 0x6da <update_points+0x44>
		printf("Game Score:   %d", points);
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	82 e4       	ldi	r24, 0x42	; 66
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	08 95       	ret
		
		//if x >= 100 and (-9, -99)
	} else if ((points >= 100) || (points < -9 && points > -99)) {
     6da:	84 36       	cpi	r24, 0x64	; 100
     6dc:	91 05       	cpc	r25, r1
     6de:	34 f4       	brge	.+12     	; 0x6ec <update_points+0x56>
     6e0:	9c 01       	movw	r18, r24
     6e2:	2e 59       	subi	r18, 0x9E	; 158
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255
     6e6:	29 35       	cpi	r18, 0x59	; 89
     6e8:	31 05       	cpc	r19, r1
     6ea:	68 f4       	brcc	.+26     	; 0x706 <update_points+0x70>
		printf("Game Score:  %d", points);
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	83 e5       	ldi	r24, 0x53	; 83
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	08 95       	ret
		
		//if x < -99
	} else if (points < -99) {
     706:	8d 39       	cpi	r24, 0x9D	; 157
     708:	2f ef       	ldi	r18, 0xFF	; 255
     70a:	92 07       	cpc	r25, r18
     70c:	6c f4       	brge	.+26     	; 0x728 <update_points+0x92>
		printf("Game Score: %d", points);
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	83 e6       	ldi	r24, 0x63	; 99
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	08 95       	ret
		
	} else {
		printf("Game Score:    %d", points);
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	82 e7       	ldi	r24, 0x72	; 114
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	9f 93       	push	r25
     732:	8f 93       	push	r24
     734:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	08 95       	ret

00000742 <update_combo>:
	}
}

//updates the combo points in the terminal
void update_combo() {
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
	//Clear terminal line and reprint the combo count
	move_terminal_cursor(10, 14);
     746:	6e e0       	ldi	r22, 0x0E	; 14
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	8a e0       	ldi	r24, 0x0A	; 10
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
	clear_to_end_of_line();
     752:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <clear_to_end_of_line>
	
	//adjusts the combo count padding so it matches points
	if (combo_count >= 10) {
     756:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <combo_count>
     75a:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <combo_count+0x1>
     75e:	8a 30       	cpi	r24, 0x0A	; 10
     760:	91 05       	cpc	r25, r1
     762:	6c f0       	brlt	.+26     	; 0x77e <update_combo+0x3c>
		printf("Combo Count:  %d", combo_count);
     764:	9f 93       	push	r25
     766:	8f 93       	push	r24
     768:	84 e8       	ldi	r24, 0x84	; 132
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	9f 93       	push	r25
     76e:	8f 93       	push	r24
     770:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0c c0       	rjmp	.+24     	; 0x796 <update_combo+0x54>
		
	} else {
		printf("Combo Count:   %d", combo_count);
     77e:	9f 93       	push	r25
     780:	8f 93       	push	r24
     782:	85 e9       	ldi	r24, 0x95	; 149
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	9f 93       	push	r25
     788:	8f 93       	push	r24
     78a:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
	}
	
	//update combo check accordingly
	if (combo_count >= 3) {
     796:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <combo_count>
     79a:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <combo_count+0x1>
     79e:	03 97       	sbiw	r24, 0x03	; 3
     7a0:	3c f0       	brlt	.+14     	; 0x7b0 <update_combo+0x6e>
		combo_check = 1;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	90 93 62 06 	sts	0x0662, r25	; 0x800662 <combo_check+0x1>
     7aa:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <combo_check>
     7ae:	12 c0       	rjmp	.+36     	; 0x7d4 <update_combo+0x92>
	} else {
		combo_check = 0;
     7b0:	10 92 62 06 	sts	0x0662, r1	; 0x800662 <combo_check+0x1>
     7b4:	10 92 61 06 	sts	0x0661, r1	; 0x800661 <combo_check>
		
		for (int term_line = 3; term_line < 12; term_line++) {
     7b8:	c3 e0       	ldi	r28, 0x03	; 3
     7ba:	d0 e0       	ldi	r29, 0x00	; 0
     7bc:	08 c0       	rjmp	.+16     	; 0x7ce <update_combo+0x8c>
			move_terminal_cursor(10, term_line);
     7be:	be 01       	movw	r22, r28
     7c0:	8a e0       	ldi	r24, 0x0A	; 10
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
			clear_to_end_of_line();
     7c8:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <clear_to_end_of_line>
	if (combo_count >= 3) {
		combo_check = 1;
	} else {
		combo_check = 0;
		
		for (int term_line = 3; term_line < 12; term_line++) {
     7cc:	21 96       	adiw	r28, 0x01	; 1
     7ce:	cc 30       	cpi	r28, 0x0C	; 12
     7d0:	d1 05       	cpc	r29, r1
     7d2:	ac f3       	brlt	.-22     	; 0x7be <update_combo+0x7c>
			move_terminal_cursor(10, term_line);
			clear_to_end_of_line();
		}
	}
}
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <sound_note>:

//play the note sound
void sound_note(int lane, int col) {
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	68 97       	sbiw	r28, 0x18	; 24
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	cd bf       	out	0x3d, r28	; 61
	advance_count = 0;
     7ee:	10 92 5c 06 	sts	0x065C, r1	; 0x80065c <advance_count+0x1>
     7f2:	10 92 5b 06 	sts	0x065B, r1	; 0x80065b <advance_count>
	
	if (lane == -1 && col == -1) {
     7f6:	8f 3f       	cpi	r24, 0xFF	; 255
     7f8:	2f ef       	ldi	r18, 0xFF	; 255
     7fa:	92 07       	cpc	r25, r18
     7fc:	59 f4       	brne	.+22     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     7fe:	6f 3f       	cpi	r22, 0xFF	; 255
     800:	2f ef       	ldi	r18, 0xFF	; 255
     802:	72 07       	cpc	r23, r18
     804:	39 f4       	brne	.+14     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		//turn off buzzer
		disable_piezzo = 1;
     806:	21 e0       	ldi	r18, 0x01	; 1
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	30 93 3f 06 	sts	0x063F, r19	; 0x80063f <disable_piezzo+0x1>
     80e:	20 93 3e 06 	sts	0x063E, r18	; 0x80063e <disable_piezzo>
     812:	04 c0       	rjmp	.+8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	} else {
		disable_piezzo = 0;
     814:	10 92 3f 06 	sts	0x063F, r1	; 0x80063f <disable_piezzo+0x1>
     818:	10 92 3e 06 	sts	0x063E, r1	; 0x80063e <disable_piezzo>
	}
	
	//set frequency appropriately
							      //0     1   2    3
	int track_frequencies[3][4] = {{523, 622, 698, 784}, 
     81c:	28 e1       	ldi	r18, 0x18	; 24
     81e:	ea e1       	ldi	r30, 0x1A	; 26
     820:	f1 e0       	ldi	r31, 0x01	; 1
     822:	de 01       	movw	r26, r28
     824:	11 96       	adiw	r26, 0x01	; 1
     826:	01 90       	ld	r0, Z+
     828:	0d 92       	st	X+, r0
     82a:	2a 95       	dec	r18
     82c:	e1 f7       	brne	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
								   {185, 220, 247, 277}, 
								   {220, 247, 277, 330}};			//make into a multidimensional array
									
	
	freq = track_frequencies[track_no][lane];
     82e:	e0 91 5d 06 	lds	r30, 0x065D	; 0x80065d <track_no>
     832:	f0 91 5e 06 	lds	r31, 0x065E	; 0x80065e <track_no+0x1>
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	ee 0f       	add	r30, r30
     83c:	ff 1f       	adc	r31, r31
     83e:	e8 0f       	add	r30, r24
     840:	f9 1f       	adc	r31, r25
     842:	ee 0f       	add	r30, r30
     844:	ff 1f       	adc	r31, r31
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	8c 0f       	add	r24, r28
     84c:	9d 1f       	adc	r25, r29
     84e:	e8 0f       	add	r30, r24
     850:	f9 1f       	adc	r31, r25
     852:	80 81       	ld	r24, Z
     854:	91 81       	ldd	r25, Z+1	; 0x01
     856:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <freq+0x1>
     85a:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <freq>
	
	//set duty cycle appropriately
	if (col == 11) {
     85e:	6b 30       	cpi	r22, 0x0B	; 11
     860:	71 05       	cpc	r23, r1
     862:	69 f4       	brne	.+26     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
		duty_cycle = 2;
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e4       	ldi	r27, 0x40	; 64
     86c:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <duty_cycle>
     870:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <duty_cycle+0x1>
     874:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <duty_cycle+0x2>
     878:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <duty_cycle+0x3>
     87c:	3f c0       	rjmp	.+126    	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
		
	} else if (col == 12) {
     87e:	6c 30       	cpi	r22, 0x0C	; 12
     880:	71 05       	cpc	r23, r1
     882:	69 f4       	brne	.+26     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
		duty_cycle = 10;
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e2       	ldi	r26, 0x20	; 32
     88a:	b1 e4       	ldi	r27, 0x41	; 65
     88c:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <duty_cycle>
     890:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <duty_cycle+0x1>
     894:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <duty_cycle+0x2>
     898:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <duty_cycle+0x3>
     89c:	2f c0       	rjmp	.+94     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
		
	} else if (col == 13) {
     89e:	6d 30       	cpi	r22, 0x0D	; 13
     8a0:	71 05       	cpc	r23, r1
     8a2:	69 f4       	brne	.+26     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
		duty_cycle = 50;
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	a8 e4       	ldi	r26, 0x48	; 72
     8aa:	b2 e4       	ldi	r27, 0x42	; 66
     8ac:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <duty_cycle>
     8b0:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <duty_cycle+0x1>
     8b4:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <duty_cycle+0x2>
     8b8:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <duty_cycle+0x3>
     8bc:	1f c0       	rjmp	.+62     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
		
	} else if (col == 14) {
     8be:	6e 30       	cpi	r22, 0x0E	; 14
     8c0:	71 05       	cpc	r23, r1
     8c2:	69 f4       	brne	.+26     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
		duty_cycle = 90;
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a4 eb       	ldi	r26, 0xB4	; 180
     8ca:	b2 e4       	ldi	r27, 0x42	; 66
     8cc:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <duty_cycle>
     8d0:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <duty_cycle+0x1>
     8d4:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <duty_cycle+0x2>
     8d8:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <duty_cycle+0x3>
     8dc:	0f c0       	rjmp	.+30     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
		
	} else if (col == 15) {
     8de:	6f 30       	cpi	r22, 0x0F	; 15
     8e0:	71 05       	cpc	r23, r1
     8e2:	61 f4       	brne	.+24     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
		duty_cycle = 98;
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	a4 ec       	ldi	r26, 0xC4	; 196
     8ea:	b2 e4       	ldi	r27, 0x42	; 66
     8ec:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <duty_cycle>
     8f0:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <duty_cycle+0x1>
     8f4:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <duty_cycle+0x2>
     8f8:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <duty_cycle+0x3>
		
	}
	
	note_sound();
     8fc:	0e 94 c3 12 	call	0x2586	; 0x2586 <note_sound>
}
     900:	68 96       	adiw	r28, 0x18	; 24
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <draw_notes>:

void draw_notes() {
     912:	9f 92       	push	r9
     914:	af 92       	push	r10
     916:	bf 92       	push	r11
     918:	cf 92       	push	r12
     91a:	df 92       	push	r13
     91c:	ef 92       	push	r14
     91e:	ff 92       	push	r15
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
	
	PixelColour color = COLOUR_RED;
	
	if (combo_count >= 3) {
     928:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <combo_count>
     92c:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <combo_count+0x1>
     930:	03 97       	sbiw	r24, 0x03	; 3
     932:	2c f0       	brlt	.+10     	; 0x93e <draw_notes+0x2c>
		color = COLOUR_ORANGE;
     934:	0f 2e       	mov	r0, r31
     936:	fc e3       	ldi	r31, 0x3C	; 60
     938:	cf 2e       	mov	r12, r31
     93a:	f0 2d       	mov	r31, r0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <draw_notes+0x34>
	} else {
		color = COLOUR_RED;
     93e:	0f 2e       	mov	r0, r31
     940:	ff e0       	ldi	r31, 0x0F	; 15
     942:	cf 2e       	mov	r12, r31
     944:	f0 2d       	mov	r31, r0
	}
	
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     946:	d1 2c       	mov	r13, r1
     948:	d9 c0       	rjmp	.+434    	; 0xafc <draw_notes+0x1ea>
	{
		// col counts from one end, future from the other
		uint8_t future = MATRIX_NUM_COLUMNS-1-col;
     94a:	8f e0       	ldi	r24, 0x0F	; 15
     94c:	8d 19       	sub	r24, r13
		
		//is 1 if there is a long note, else 0
		int long_check = 0;
		
		// index of which note in the track to play
		uint8_t index = (future+beat)/5;
     94e:	e0 91 69 06 	lds	r30, 0x0669	; 0x800669 <beat>
     952:	f0 91 6a 06 	lds	r31, 0x066A	; 0x80066a <beat+0x1>
     956:	af 01       	movw	r20, r30
     958:	48 0f       	add	r20, r24
     95a:	51 1d       	adc	r21, r1
     95c:	9a 01       	movw	r18, r20
     95e:	ad ec       	ldi	r26, 0xCD	; 205
     960:	bc ec       	ldi	r27, 0xCC	; 204
     962:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__umulhisi3>
     966:	ec 01       	movw	r28, r24
     968:	d6 95       	lsr	r29
     96a:	c7 95       	ror	r28
     96c:	d6 95       	lsr	r29
     96e:	c7 95       	ror	r28
		
		// notes are only drawn every five columns
		if ((future+beat)%5)
     970:	ce 01       	movw	r24, r28
     972:	88 0f       	add	r24, r24
     974:	99 1f       	adc	r25, r25
     976:	88 0f       	add	r24, r24
     978:	99 1f       	adc	r25, r25
     97a:	8c 0f       	add	r24, r28
     97c:	9d 1f       	adc	r25, r29
     97e:	48 17       	cp	r20, r24
     980:	59 07       	cpc	r21, r25
     982:	09 f0       	breq	.+2      	; 0x986 <draw_notes+0x74>
     984:	ba c0       	rjmp	.+372    	; 0xafa <draw_notes+0x1e8>
		{
			continue;
		}
		
		uint8_t ghost_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     986:	9f 01       	movw	r18, r30
     988:	21 5f       	subi	r18, 0xF1	; 241
     98a:	3f 4f       	sbci	r19, 0xFF	; 255
     98c:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__umulhisi3>
     990:	96 95       	lsr	r25
     992:	87 95       	ror	r24
     994:	96 95       	lsr	r25
     996:	87 95       	ror	r24
		//next note in track that is coming
		uint8_t ghost_note = track[track_no][ghost_index];
     998:	20 91 5d 06 	lds	r18, 0x065D	; 0x80065d <track_no>
     99c:	30 91 5e 06 	lds	r19, 0x065E	; 0x80065e <track_no+0x1>
     9a0:	f9 01       	movw	r30, r18
     9a2:	f6 95       	lsr	r31
     9a4:	fe 2f       	mov	r31, r30
     9a6:	ee 27       	eor	r30, r30
     9a8:	f7 95       	ror	r31
     9aa:	e7 95       	ror	r30
     9ac:	e2 0f       	add	r30, r18
     9ae:	f3 1f       	adc	r31, r19
     9b0:	e3 51       	subi	r30, 0x13	; 19
     9b2:	fe 4f       	sbci	r31, 0xFE	; 254
     9b4:	e8 0f       	add	r30, r24
     9b6:	f1 1d       	adc	r31, r1
     9b8:	b0 80       	ld	r11, Z
		
		// if the index is beyond the end of the track,
		// no note can be drawn
		if (index >= TRACK_LENGTH || (index + 1) >= TRACK_LENGTH)
     9ba:	c1 38       	cpi	r28, 0x81	; 129
     9bc:	08 f0       	brcs	.+2      	; 0x9c0 <draw_notes+0xae>
     9be:	9d c0       	rjmp	.+314    	; 0xafa <draw_notes+0x1e8>
     9c0:	dd 27       	eor	r29, r29
     9c2:	7e 01       	movw	r14, r28
     9c4:	8f ef       	ldi	r24, 0xFF	; 255
     9c6:	e8 1a       	sub	r14, r24
     9c8:	f8 0a       	sbc	r15, r24
     9ca:	81 e8       	ldi	r24, 0x81	; 129
     9cc:	e8 16       	cp	r14, r24
     9ce:	f1 04       	cpc	r15, r1
     9d0:	0c f0       	brlt	.+2      	; 0x9d4 <draw_notes+0xc2>
     9d2:	93 c0       	rjmp	.+294    	; 0xafa <draw_notes+0x1e8>
     9d4:	a1 2c       	mov	r10, r1
     9d6:	00 e0       	ldi	r16, 0x00	; 0
     9d8:	10 e0       	ldi	r17, 0x00	; 0
     9da:	8b c0       	rjmp	.+278    	; 0xaf2 <draw_notes+0x1e0>
		
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{
			
			uint8_t current_note = track[track_no][index];
     9dc:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <track_no>
     9e0:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <track_no+0x1>
     9e4:	9c 01       	movw	r18, r24
     9e6:	36 95       	lsr	r19
     9e8:	32 2f       	mov	r19, r18
     9ea:	22 27       	eor	r18, r18
     9ec:	37 95       	ror	r19
     9ee:	27 95       	ror	r18
     9f0:	82 0f       	add	r24, r18
     9f2:	93 1f       	adc	r25, r19
     9f4:	83 51       	subi	r24, 0x13	; 19
     9f6:	9e 4f       	sbci	r25, 0xFE	; 254
     9f8:	fc 01       	movw	r30, r24
     9fa:	ec 0f       	add	r30, r28
     9fc:	fd 1f       	adc	r31, r29
     9fe:	20 81       	ld	r18, Z
			
			//check if at the start of a long note
			if (current_note == track[track_no][index + 1]>>4) {
     a00:	fc 01       	movw	r30, r24
     a02:	ee 0d       	add	r30, r14
     a04:	ff 1d       	adc	r31, r15
     a06:	80 81       	ld	r24, Z
     a08:	98 2f       	mov	r25, r24
     a0a:	92 95       	swap	r25
     a0c:	9f 70       	andi	r25, 0x0F	; 15
     a0e:	29 17       	cp	r18, r25
     a10:	11 f1       	breq	.+68     	; 0xa56 <draw_notes+0x144>
				long_check = 1;
				
				//check if in the middle of long note
				} else if ((long_check) && (track[track_no][index + 1] == current_note)) {
     a12:	01 15       	cp	r16, r1
     a14:	11 05       	cpc	r17, r1
     a16:	19 f0       	breq	.+6      	; 0xa1e <draw_notes+0x10c>
     a18:	28 17       	cp	r18, r24
     a1a:	09 f4       	brne	.+2      	; 0xa1e <draw_notes+0x10c>
     a1c:	69 c0       	rjmp	.+210    	; 0xaf0 <draw_notes+0x1de>
				continue;
				
				//check if at the end of long note
				} else if ((long_check) && (track[index + 1] != track[index - 1])) {
     a1e:	01 15       	cp	r16, r1
     a20:	11 05       	cpc	r17, r1
     a22:	d9 f0       	breq	.+54     	; 0xa5a <draw_notes+0x148>
     a24:	a7 01       	movw	r20, r14
     a26:	56 95       	lsr	r21
     a28:	54 2f       	mov	r21, r20
     a2a:	44 27       	eor	r20, r20
     a2c:	57 95       	ror	r21
     a2e:	47 95       	ror	r20
     a30:	4e 0d       	add	r20, r14
     a32:	5f 1d       	adc	r21, r15
     a34:	ce 01       	movw	r24, r28
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	bc 01       	movw	r22, r24
     a3a:	76 95       	lsr	r23
     a3c:	76 2f       	mov	r23, r22
     a3e:	66 27       	eor	r22, r22
     a40:	77 95       	ror	r23
     a42:	67 95       	ror	r22
     a44:	86 0f       	add	r24, r22
     a46:	97 1f       	adc	r25, r23
     a48:	48 17       	cp	r20, r24
     a4a:	59 07       	cpc	r21, r25
     a4c:	09 f0       	breq	.+2      	; 0xa50 <draw_notes+0x13e>
     a4e:	50 c0       	rjmp	.+160    	; 0xaf0 <draw_notes+0x1de>
				continue;
				
				//else outside long note.
				} else {
				long_check = 0;
     a50:	00 e0       	ldi	r16, 0x00	; 0
     a52:	10 e0       	ldi	r17, 0x00	; 0
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <draw_notes+0x148>
			
			uint8_t current_note = track[track_no][index];
			
			//check if at the start of a long note
			if (current_note == track[track_no][index + 1]>>4) {
				long_check = 1;
     a56:	01 e0       	ldi	r16, 0x01	; 1
     a58:	10 e0       	ldi	r17, 0x00	; 0
				//else outside long note.
				} else {
				long_check = 0;
			}
			
			if (long_check) {
     a5a:	01 15       	cp	r16, r1
     a5c:	11 05       	cpc	r17, r1
     a5e:	21 f0       	breq	.+8      	; 0xa68 <draw_notes+0x156>
				current_note = current_note>>4;
     a60:	32 2f       	mov	r19, r18
     a62:	32 95       	swap	r19
     a64:	3f 70       	andi	r19, 0x0F	; 15
     a66:	01 c0       	rjmp	.+2      	; 0xa6a <draw_notes+0x158>
		
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{
			
			uint8_t current_note = track[track_no][index];
     a68:	32 2f       	mov	r19, r18
			if (long_check) {
				current_note = current_note>>4;
			}
			
			//check if there's a note in the specific path
			if (track[track_no][index] & (1<<lane)) {										//track[index] replaced current_note
     a6a:	4a 2d       	mov	r20, r10
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	82 2f       	mov	r24, r18
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0a 2c       	mov	r0, r10
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <draw_notes+0x168>
     a76:	95 95       	asr	r25
     a78:	87 95       	ror	r24
     a7a:	0a 94       	dec	r0
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <draw_notes+0x164>
     a7e:	80 ff       	sbrs	r24, 0
     a80:	37 c0       	rjmp	.+110    	; 0xaf0 <draw_notes+0x1de>
				
				//check if theres a note in the led matrix section
				if ((green_check == lane) && ((col >= 11) && (col <= 15))) {
     a82:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a86:	08 2e       	mov	r0, r24
     a88:	00 0c       	add	r0, r0
     a8a:	99 0b       	sbc	r25, r25
     a8c:	48 17       	cp	r20, r24
     a8e:	59 07       	cpc	r21, r25
     a90:	91 f4       	brne	.+36     	; 0xab6 <draw_notes+0x1a4>
     a92:	85 ef       	ldi	r24, 0xF5	; 245
     a94:	8d 0d       	add	r24, r13
     a96:	85 30       	cpi	r24, 0x05	; 5
     a98:	70 f4       	brcc	.+28     	; 0xab6 <draw_notes+0x1a4>
					//if true set pixels to green
					ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     a9a:	40 ef       	ldi	r20, 0xF0	; 240
     a9c:	9a 2c       	mov	r9, r10
     a9e:	99 0c       	add	r9, r9
     aa0:	69 2d       	mov	r22, r9
     aa2:	8d 2d       	mov	r24, r13
     aa4:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     aa8:	61 e0       	ldi	r22, 0x01	; 1
     aaa:	69 0d       	add	r22, r9
     aac:	40 ef       	ldi	r20, 0xF0	; 240
     aae:	8d 2d       	mov	r24, r13
     ab0:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
     ab4:	1d c0       	rjmp	.+58     	; 0xaf0 <draw_notes+0x1de>
					
					} else if (ghost_note != current_note) {
     ab6:	3b 15       	cp	r19, r11
     ab8:	71 f0       	breq	.+28     	; 0xad6 <draw_notes+0x1c4>
					ledmatrix_update_pixel(col, 2*lane, color);
     aba:	4c 2d       	mov	r20, r12
     abc:	9a 2c       	mov	r9, r10
     abe:	99 0c       	add	r9, r9
     ac0:	69 2d       	mov	r22, r9
     ac2:	8d 2d       	mov	r24, r13
     ac4:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, color);
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	69 0d       	add	r22, r9
     acc:	4c 2d       	mov	r20, r12
     ace:	8d 2d       	mov	r24, r13
     ad0:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
     ad4:	0d c0       	rjmp	.+26     	; 0xaf0 <draw_notes+0x1de>
					
					} else {
					ledmatrix_update_pixel(col, 2*lane, color);
     ad6:	4c 2d       	mov	r20, r12
     ad8:	9a 2c       	mov	r9, r10
     ada:	99 0c       	add	r9, r9
     adc:	69 2d       	mov	r22, r9
     ade:	8d 2d       	mov	r24, r13
     ae0:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, color);
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	69 0d       	add	r22, r9
     ae8:	4c 2d       	mov	r20, r12
     aea:	8d 2d       	mov	r24, r13
     aec:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
		{
			continue;
		}
		
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
     af0:	a3 94       	inc	r10
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	8a 15       	cp	r24, r10
     af6:	08 f0       	brcs	.+2      	; 0xafa <draw_notes+0x1e8>
     af8:	71 cf       	rjmp	.-286    	; 0x9dc <draw_notes+0xca>
		color = COLOUR_RED;
	}
	
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     afa:	d3 94       	inc	r13
     afc:	8f e0       	ldi	r24, 0x0F	; 15
     afe:	8d 15       	cp	r24, r13
     b00:	08 f0       	brcs	.+2      	; 0xb04 <draw_notes+0x1f2>
     b02:	23 cf       	rjmp	.-442    	; 0x94a <draw_notes+0x38>
				
			}
		}
		
	}
}
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	bf 90       	pop	r11
     b16:	af 90       	pop	r10
     b18:	9f 90       	pop	r9
     b1a:	08 95       	ret

00000b1c <set_track>:

//sets the track
void set_track(int track_number) {
	//to set the track do a matrix of tracks, where each matrix is of size TRACK_LENGTH and the individual elements are the tracks.
	if (track_number == 0) {
     b1c:	00 97       	sbiw	r24, 0x00	; 0
     b1e:	51 f4       	brne	.+20     	; 0xb34 <set_track+0x18>
		//track_name = "Through fire and flames";
		strcpy(track_name, "Through fire and flames");
     b20:	88 e1       	ldi	r24, 0x18	; 24
     b22:	e7 ea       	ldi	r30, 0xA7	; 167
     b24:	f1 e0       	ldi	r31, 0x01	; 1
     b26:	a2 e4       	ldi	r26, 0x42	; 66
     b28:	b6 e0       	ldi	r27, 0x06	; 6
     b2a:	01 90       	ld	r0, Z+
     b2c:	0d 92       	st	X+, r0
     b2e:	8a 95       	dec	r24
     b30:	e1 f7       	brne	.-8      	; 0xb2a <set_track+0xe>
     b32:	08 95       	ret
	
	} else if (track_number == 1) {
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	91 05       	cpc	r25, r1
     b38:	51 f4       	brne	.+20     	; 0xb4e <set_track+0x32>
		//track_name = "Someone Like You by Adele"
		strcpy(track_name, "Someone like you by Adele");
     b3a:	8a e1       	ldi	r24, 0x1A	; 26
     b3c:	ef eb       	ldi	r30, 0xBF	; 191
     b3e:	f1 e0       	ldi	r31, 0x01	; 1
     b40:	a2 e4       	ldi	r26, 0x42	; 66
     b42:	b6 e0       	ldi	r27, 0x06	; 6
     b44:	01 90       	ld	r0, Z+
     b46:	0d 92       	st	X+, r0
     b48:	8a 95       	dec	r24
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <set_track+0x28>
     b4c:	08 95       	ret
		
	} else if (track_number == 2) {
     b4e:	02 97       	sbiw	r24, 0x02	; 2
     b50:	49 f4       	brne	.+18     	; 0xb64 <set_track+0x48>
		//track_name = "Pompeii by Bastille"
		strcpy(track_name, "Pompeii by Bastille");
     b52:	84 e1       	ldi	r24, 0x14	; 20
     b54:	e9 ed       	ldi	r30, 0xD9	; 217
     b56:	f1 e0       	ldi	r31, 0x01	; 1
     b58:	a2 e4       	ldi	r26, 0x42	; 66
     b5a:	b6 e0       	ldi	r27, 0x06	; 6
     b5c:	01 90       	ld	r0, Z+
     b5e:	0d 92       	st	X+, r0
     b60:	8a 95       	dec	r24
     b62:	e1 f7       	brne	.-8      	; 0xb5c <set_track+0x40>
     b64:	08 95       	ret

00000b66 <initialise_game>:

// Initialize the game by resetting the grid and beat
void initialise_game(void)
{
	// initialize the display we are using.
	default_grid();
     b66:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <default_grid>
	
	beat = 0;
     b6a:	10 92 6a 06 	sts	0x066A, r1	; 0x80066a <beat+0x1>
     b6e:	10 92 69 06 	sts	0x0669, r1	; 0x800669 <beat>
	game_over = 0;
     b72:	10 92 30 06 	sts	0x0630, r1	; 0x800630 <game_over>
	advance_count = 0;
     b76:	10 92 5c 06 	sts	0x065C, r1	; 0x80065c <advance_count+0x1>
     b7a:	10 92 5b 06 	sts	0x065B, r1	; 0x80065b <advance_count>
	
	update_points();
     b7e:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
	update_combo();
     b82:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
     b86:	08 95       	ret

00000b88 <play_note>:
}

// Play a note in the given lane
void play_note(uint8_t lane)											//the colors need to be changed in this function.
{	
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	d8 2f       	mov	r29, r24

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     b96:	cb e0       	ldi	r28, 0x0B	; 11
     b98:	d4 c0       	rjmp	.+424    	; 0xd42 <play_note+0x1ba>
	
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col; //this is the next position that the note will be in
     b9a:	8f e0       	ldi	r24, 0x0F	; 15
     b9c:	8c 1b       	sub	r24, r28
		uint8_t index = (future + beat) / 5; 
     b9e:	40 91 69 06 	lds	r20, 0x0669	; 0x800669 <beat>
     ba2:	50 91 6a 06 	lds	r21, 0x066A	; 0x80066a <beat+0x1>
     ba6:	48 0f       	add	r20, r24
     ba8:	51 1d       	adc	r21, r1
     baa:	9a 01       	movw	r18, r20
     bac:	ad ec       	ldi	r26, 0xCD	; 205
     bae:	bc ec       	ldi	r27, 0xCC	; 204
     bb0:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__umulhisi3>
     bb4:	8c 01       	movw	r16, r24
     bb6:	16 95       	lsr	r17
     bb8:	07 95       	ror	r16
     bba:	16 95       	lsr	r17
     bbc:	07 95       	ror	r16
		
		if ((future + beat) % 5) {
     bbe:	c8 01       	movw	r24, r16
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	80 0f       	add	r24, r16
     bca:	91 1f       	adc	r25, r17
     bcc:	48 17       	cp	r20, r24
     bce:	59 07       	cpc	r21, r25
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <play_note+0x4c>
     bd2:	b6 c0       	rjmp	.+364    	; 0xd40 <play_note+0x1b8>
			continue;
		}
		if (track[track_no][index] & (1<<lane))
     bd4:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <track_no>
     bd8:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <track_no+0x1>
     bdc:	fc 01       	movw	r30, r24
     bde:	f6 95       	lsr	r31
     be0:	fe 2f       	mov	r31, r30
     be2:	ee 27       	eor	r30, r30
     be4:	f7 95       	ror	r31
     be6:	e7 95       	ror	r30
     be8:	e8 0f       	add	r30, r24
     bea:	f9 1f       	adc	r31, r25
     bec:	e3 51       	subi	r30, 0x13	; 19
     bee:	fe 4f       	sbci	r31, 0xFE	; 254
     bf0:	e0 0f       	add	r30, r16
     bf2:	f1 1d       	adc	r31, r1
     bf4:	80 81       	ld	r24, Z
     bf6:	ed 2e       	mov	r14, r29
     bf8:	f1 2c       	mov	r15, r1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0d 2e       	mov	r0, r29
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <play_note+0x7c>
     c00:	95 95       	asr	r25
     c02:	87 95       	ror	r24
     c04:	0a 94       	dec	r0
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <play_note+0x78>
     c08:	80 ff       	sbrs	r24, 0
     c0a:	87 c0       	rjmp	.+270    	; 0xd1a <play_note+0x192>
		{	
			if (green_check == lane) {
     c0c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c10:	08 2e       	mov	r0, r24
     c12:	00 0c       	add	r0, r0
     c14:	99 0b       	sbc	r25, r25
     c16:	e8 16       	cp	r14, r24
     c18:	f9 06       	cpc	r15, r25
     c1a:	c1 f4       	brne	.+48     	; 0xc4c <play_note+0xc4>
				points--;
     c1c:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
     c20:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <points+0x1>
     c2a:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <points>
				update_points();
     c2e:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
				
				combo_count = 0;
     c32:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <combo_count+0x1>
     c36:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <combo_count>
				update_combo();
     c3a:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
				
				sound_note(-1,-1);
     c3e:	6f ef       	ldi	r22, 0xFF	; 255
     c40:	7f ef       	ldi	r23, 0xFF	; 255
     c42:	8f ef       	ldi	r24, 0xFF	; 255
     c44:	9f ef       	ldi	r25, 0xFF	; 255
     c46:	0e 94 ed 03 	call	0x7da	; 0x7da <sound_note>
				
				break;
     c4a:	7e c0       	rjmp	.+252    	; 0xd48 <play_note+0x1c0>
			}
			
			green_check = lane;
     c4c:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			// if so, colour the two pixels green
			ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     c50:	40 ef       	ldi	r20, 0xF0	; 240
     c52:	1d 2f       	mov	r17, r29
     c54:	11 0f       	add	r17, r17
     c56:	61 2f       	mov	r22, r17
     c58:	8c 2f       	mov	r24, r28
     c5a:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	61 0f       	add	r22, r17
     c62:	40 ef       	ldi	r20, 0xF0	; 240
     c64:	8c 2f       	mov	r24, r28
     c66:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
			
			//if the note is in the two specified lanes then award the appropriate amount of points
			if (col == 11 || col == 15) {
     c6a:	cb 30       	cpi	r28, 0x0B	; 11
     c6c:	11 f0       	breq	.+4      	; 0xc72 <play_note+0xea>
     c6e:	cf 30       	cpi	r28, 0x0F	; 15
     c70:	99 f4       	brne	.+38     	; 0xc98 <play_note+0x110>
				points++;
     c72:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
     c76:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <points+0x1>
     c80:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <points>
				combo_count = 0;
     c84:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <combo_count+0x1>
     c88:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <combo_count>
				sound_note(lane, col);
     c8c:	6c 2f       	mov	r22, r28
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	c7 01       	movw	r24, r14
     c92:	0e 94 ed 03 	call	0x7da	; 0x7da <sound_note>
     c96:	4e c0       	rjmp	.+156    	; 0xd34 <play_note+0x1ac>
				
			} else if (col == 12 || col == 14) {
     c98:	cc 30       	cpi	r28, 0x0C	; 12
     c9a:	11 f0       	breq	.+4      	; 0xca0 <play_note+0x118>
     c9c:	ce 30       	cpi	r28, 0x0E	; 14
     c9e:	99 f4       	brne	.+38     	; 0xcc6 <play_note+0x13e>
				points += 2;
     ca0:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
     ca4:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
     ca8:	02 96       	adiw	r24, 0x02	; 2
     caa:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <points+0x1>
     cae:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <points>
				combo_count = 0;
     cb2:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <combo_count+0x1>
     cb6:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <combo_count>
				sound_note(lane, col);
     cba:	6c 2f       	mov	r22, r28
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	c7 01       	movw	r24, r14
     cc0:	0e 94 ed 03 	call	0x7da	; 0x7da <sound_note>
     cc4:	37 c0       	rjmp	.+110    	; 0xd34 <play_note+0x1ac>
				
			} else if (col == 13) {
     cc6:	cd 30       	cpi	r28, 0x0D	; 13
     cc8:	a9 f5       	brne	.+106    	; 0xd34 <play_note+0x1ac>
				combo_count++;
     cca:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <combo_count>
     cce:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <combo_count+0x1>
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <combo_count+0x1>
     cd8:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <combo_count>
				sound_note(lane, col);
     cdc:	6c 2f       	mov	r22, r28
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	c7 01       	movw	r24, r14
     ce2:	0e 94 ed 03 	call	0x7da	; 0x7da <sound_note>
				
				if (combo_count > 3) {
     ce6:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <combo_count>
     cea:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <combo_count+0x1>
     cee:	04 97       	sbiw	r24, 0x04	; 4
     cf0:	54 f0       	brlt	.+20     	; 0xd06 <play_note+0x17e>
					points += 4;
     cf2:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
     cf6:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
     cfa:	04 96       	adiw	r24, 0x04	; 4
     cfc:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <points+0x1>
     d00:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <points>
     d04:	17 c0       	rjmp	.+46     	; 0xd34 <play_note+0x1ac>
				} else {
					points += 3;
     d06:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
     d0a:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
     d0e:	03 96       	adiw	r24, 0x03	; 3
     d10:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <points+0x1>
     d14:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <points>
     d18:	0d c0       	rjmp	.+26     	; 0xd34 <play_note+0x1ac>
					
				}
			}
			
		} else {
			points--;
     d1a:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
     d1e:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <points+0x1>
     d28:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <points>
			combo_count = 0;
     d2c:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <combo_count+0x1>
     d30:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <combo_count>
		
		}
			
		update_points();
     d34:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
		update_combo();
     d38:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
		
		draw_notes();
     d3c:	0e 94 89 04 	call	0x912	; 0x912 <draw_notes>

// Play a note in the given lane
void play_note(uint8_t lane)											//the colors need to be changed in this function.
{	

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     d40:	cf 5f       	subi	r28, 0xFF	; 255
     d42:	c0 31       	cpi	r28, 0x10	; 16
     d44:	08 f4       	brcc	.+2      	; 0xd48 <play_note+0x1c0>
     d46:	29 cf       	rjmp	.-430    	; 0xb9a <play_note+0x12>
		update_points();
		update_combo();
		
		draw_notes();
		}	
}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	08 95       	ret

00000d56 <advance_note>:
	
// Advance the notes one row down the display
void advance_note(void)
{
     d56:	af 92       	push	r10
     d58:	bf 92       	push	r11
     d5a:	df 92       	push	r13
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
	//PixelColour color = COLOUR_RED;
	
	if (combo_count >= 3) {
     d66:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <combo_count>
     d6a:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <combo_count+0x1>
     d6e:	03 97       	sbiw	r24, 0x03	; 3
     d70:	1c f4       	brge	.+6      	; 0xd78 <advance_note+0x22>
	
// Advance the notes one row down the display
void advance_note(void)
{
	//if the user has a high combo score, set all notes to orange
	PixelColour dark_colour = COLOUR_DARK_RED;
     d72:	ff 24       	eor	r15, r15
     d74:	f3 94       	inc	r15
     d76:	04 c0       	rjmp	.+8      	; 0xd80 <advance_note+0x2a>
	//PixelColour color = COLOUR_RED;
	
	if (combo_count >= 3) {
		dark_colour = COLOUR_DARK_ORANGE;
     d78:	0f 2e       	mov	r0, r31
     d7a:	fc e1       	ldi	r31, 0x1C	; 28
     d7c:	ff 2e       	mov	r15, r31
     d7e:	f0 2d       	mov	r31, r0
		//color = COLOUR_ORANGE;
	}
	
	advance_count++;
     d80:	80 91 5b 06 	lds	r24, 0x065B	; 0x80065b <advance_count>
     d84:	90 91 5c 06 	lds	r25, 0x065C	; 0x80065c <advance_count+0x1>
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	90 93 5c 06 	sts	0x065C, r25	; 0x80065c <advance_count+0x1>
     d8e:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <advance_count>
	
	if (advance_count >= 5) {
     d92:	05 97       	sbiw	r24, 0x05	; 5
     d94:	34 f0       	brlt	.+12     	; 0xda2 <advance_note+0x4c>
		sound_note(-1, -1);
     d96:	6f ef       	ldi	r22, 0xFF	; 255
     d98:	7f ef       	ldi	r23, 0xFF	; 255
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	9f ef       	ldi	r25, 0xFF	; 255
     d9e:	0e 94 ed 03 	call	0x7da	; 0x7da <sound_note>
     da2:	10 e0       	ldi	r17, 0x00	; 0
     da4:	23 c1       	rjmp	.+582    	; 0xfec <advance_note+0x296>
	
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
	{
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col;
     da6:	8f e0       	ldi	r24, 0x0F	; 15
     da8:	81 1b       	sub	r24, r17
		uint8_t index = (future + beat) / 5;
     daa:	e0 91 69 06 	lds	r30, 0x0669	; 0x800669 <beat>
     dae:	f0 91 6a 06 	lds	r31, 0x066A	; 0x80066a <beat+0x1>
     db2:	af 01       	movw	r20, r30
     db4:	48 0f       	add	r20, r24
     db6:	51 1d       	adc	r21, r1
     db8:	9a 01       	movw	r18, r20
     dba:	ad ec       	ldi	r26, 0xCD	; 205
     dbc:	bc ec       	ldi	r27, 0xCC	; 204
     dbe:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__umulhisi3>
     dc2:	5c 01       	movw	r10, r24
     dc4:	b6 94       	lsr	r11
     dc6:	a7 94       	ror	r10
     dc8:	b6 94       	lsr	r11
     dca:	a7 94       	ror	r10
     dcc:	da 2d       	mov	r29, r10
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     dce:	9f 01       	movw	r18, r30
     dd0:	21 5f       	subi	r18, 0xF1	; 241
     dd2:	3f 4f       	sbci	r19, 0xFF	; 255
     dd4:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__umulhisi3>
     dd8:	96 95       	lsr	r25
     dda:	87 95       	ror	r24
     ddc:	96 95       	lsr	r25
     dde:	87 95       	ror	r24
		uint8_t ghost_index = ghost_start_index +1;
     de0:	8f 5f       	subi	r24, 0xFF	; 255
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     de2:	14 c0       	rjmp	.+40     	; 0xe0c <advance_note+0xb6>
			if (track[track_no][ghost_index] & 0x0F) {
     de4:	20 91 5d 06 	lds	r18, 0x065D	; 0x80065d <track_no>
     de8:	30 91 5e 06 	lds	r19, 0x065E	; 0x80065e <track_no+0x1>
     dec:	f9 01       	movw	r30, r18
     dee:	f6 95       	lsr	r31
     df0:	fe 2f       	mov	r31, r30
     df2:	ee 27       	eor	r30, r30
     df4:	f7 95       	ror	r31
     df6:	e7 95       	ror	r30
     df8:	e2 0f       	add	r30, r18
     dfa:	f3 1f       	adc	r31, r19
     dfc:	e3 51       	subi	r30, 0x13	; 19
     dfe:	fe 4f       	sbci	r31, 0xFE	; 254
     e00:	e8 0f       	add	r30, r24
     e02:	f1 1d       	adc	r31, r1
     e04:	90 81       	ld	r25, Z
     e06:	9f 70       	andi	r25, 0x0F	; 15
     e08:	19 f4       	brne	.+6      	; 0xe10 <advance_note+0xba>
		uint8_t index = (future + beat) / 5;
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
		uint8_t ghost_index = ghost_start_index +1;
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     e0a:	8f 5f       	subi	r24, 0xFF	; 255
     e0c:	81 38       	cpi	r24, 0x81	; 129
     e0e:	50 f3       	brcs	.-44     	; 0xde4 <advance_note+0x8e>
			if (track[track_no][ghost_index] & 0x0F) {
				break;
			}
		}
		uint8_t ghost_note = track[track_no][ghost_index];
     e10:	20 91 5d 06 	lds	r18, 0x065D	; 0x80065d <track_no>
     e14:	30 91 5e 06 	lds	r19, 0x065E	; 0x80065e <track_no+0x1>
     e18:	f9 01       	movw	r30, r18
     e1a:	f6 95       	lsr	r31
     e1c:	fe 2f       	mov	r31, r30
     e1e:	ee 27       	eor	r30, r30
     e20:	f7 95       	ror	r31
     e22:	e7 95       	ror	r30
     e24:	e2 0f       	add	r30, r18
     e26:	f3 1f       	adc	r31, r19
     e28:	e3 51       	subi	r30, 0x13	; 19
     e2a:	fe 4f       	sbci	r31, 0xFE	; 254
     e2c:	e8 0f       	add	r30, r24
     e2e:	f1 1d       	adc	r31, r1
     e30:	c0 81       	ld	r28, Z
		
		if (index >= TRACK_LENGTH)
     e32:	d1 38       	cpi	r29, 0x81	; 129
     e34:	20 f0       	brcs	.+8      	; 0xe3e <advance_note+0xe8>
		{
			//Game Over
			game_over = 1;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	80 93 30 06 	sts	0x0630, r24	; 0x800630 <game_over>
			break;
     e3c:	da c0       	rjmp	.+436    	; 0xff2 <advance_note+0x29c>
		}
		
		if ((future+beat) % 5)
     e3e:	9a 01       	movw	r18, r20
     e40:	ad ec       	ldi	r26, 0xCD	; 205
     e42:	bc ec       	ldi	r27, 0xCC	; 204
     e44:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__umulhisi3>
     e48:	96 95       	lsr	r25
     e4a:	87 95       	ror	r24
     e4c:	96 95       	lsr	r25
     e4e:	87 95       	ror	r24
     e50:	9c 01       	movw	r18, r24
     e52:	22 0f       	add	r18, r18
     e54:	33 1f       	adc	r19, r19
     e56:	22 0f       	add	r18, r18
     e58:	33 1f       	adc	r19, r19
     e5a:	82 0f       	add	r24, r18
     e5c:	93 1f       	adc	r25, r19
     e5e:	48 17       	cp	r20, r24
     e60:	59 07       	cpc	r21, r25
     e62:	09 f0       	breq	.+2      	; 0xe66 <advance_note+0x110>
     e64:	c2 c0       	rjmp	.+388    	; 0xfea <advance_note+0x294>
     e66:	00 e0       	ldi	r16, 0x00	; 0
     e68:	b8 c0       	rjmp	.+368    	; 0xfda <advance_note+0x284>
		} 
		
		for (uint8_t lane = 0; lane < 4; lane++)
		{
			//check if the next note is in the appropriate lane
			if ((ghost_note == 0x01) & (lane == 0)) {
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	c1 30       	cpi	r28, 0x01	; 1
     e6e:	09 f0       	breq	.+2      	; 0xe72 <advance_note+0x11c>
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	01 11       	cpse	r16, r1
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	89 23       	and	r24, r25
     e7a:	71 f0       	breq	.+28     	; 0xe98 <advance_note+0x142>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     e7c:	4f 2d       	mov	r20, r15
     e7e:	d0 2e       	mov	r13, r16
     e80:	dd 0c       	add	r13, r13
     e82:	6d 2d       	mov	r22, r13
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     e8a:	61 e0       	ldi	r22, 0x01	; 1
     e8c:	6d 0d       	add	r22, r13
     e8e:	4f 2d       	mov	r20, r15
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
     e96:	47 c0       	rjmp	.+142    	; 0xf26 <advance_note+0x1d0>
				
			} else if ((ghost_note == 0x02) & (lane == 1)) {
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	c2 30       	cpi	r28, 0x02	; 2
     e9c:	09 f0       	breq	.+2      	; 0xea0 <advance_note+0x14a>
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	01 30       	cpi	r16, 0x01	; 1
     ea4:	09 f0       	breq	.+2      	; 0xea8 <advance_note+0x152>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	89 23       	and	r24, r25
     eaa:	71 f0       	breq	.+28     	; 0xec8 <advance_note+0x172>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     eac:	4f 2d       	mov	r20, r15
     eae:	d0 2e       	mov	r13, r16
     eb0:	dd 0c       	add	r13, r13
     eb2:	6d 2d       	mov	r22, r13
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     eba:	61 e0       	ldi	r22, 0x01	; 1
     ebc:	6d 0d       	add	r22, r13
     ebe:	4f 2d       	mov	r20, r15
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
     ec6:	2f c0       	rjmp	.+94     	; 0xf26 <advance_note+0x1d0>
			
			} else if ((ghost_note == 0x04) & (lane == 2)) {
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	c4 30       	cpi	r28, 0x04	; 4
     ecc:	09 f0       	breq	.+2      	; 0xed0 <advance_note+0x17a>
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	02 30       	cpi	r16, 0x02	; 2
     ed4:	09 f0       	breq	.+2      	; 0xed8 <advance_note+0x182>
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	89 23       	and	r24, r25
     eda:	71 f0       	breq	.+28     	; 0xef8 <advance_note+0x1a2>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     edc:	4f 2d       	mov	r20, r15
     ede:	d0 2e       	mov	r13, r16
     ee0:	dd 0c       	add	r13, r13
     ee2:	6d 2d       	mov	r22, r13
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	6d 0d       	add	r22, r13
     eee:	4f 2d       	mov	r20, r15
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
     ef6:	17 c0       	rjmp	.+46     	; 0xf26 <advance_note+0x1d0>
			
			} else if ((ghost_note == 0x08) & (lane == 3)) {
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	c8 30       	cpi	r28, 0x08	; 8
     efc:	09 f0       	breq	.+2      	; 0xf00 <advance_note+0x1aa>
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	03 30       	cpi	r16, 0x03	; 3
     f04:	09 f0       	breq	.+2      	; 0xf08 <advance_note+0x1b2>
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	89 23       	and	r24, r25
     f0a:	69 f0       	breq	.+26     	; 0xf26 <advance_note+0x1d0>
				ledmatrix_update_pixel(0, 2*lane, dark_colour);
     f0c:	4f 2d       	mov	r20, r15
     f0e:	d0 2e       	mov	r13, r16
     f10:	dd 0c       	add	r13, r13
     f12:	6d 2d       	mov	r22, r13
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, dark_colour);
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	6d 0d       	add	r22, r13
     f1e:	4f 2d       	mov	r20, r15
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
			
			}
				
			if (track[track_no][index] & (1<<lane))
     f26:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <track_no>
     f2a:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <track_no+0x1>
     f2e:	fc 01       	movw	r30, r24
     f30:	f6 95       	lsr	r31
     f32:	fe 2f       	mov	r31, r30
     f34:	ee 27       	eor	r30, r30
     f36:	f7 95       	ror	r31
     f38:	e7 95       	ror	r30
     f3a:	e8 0f       	add	r30, r24
     f3c:	f9 1f       	adc	r31, r25
     f3e:	e3 51       	subi	r30, 0x13	; 19
     f40:	fe 4f       	sbci	r31, 0xFE	; 254
     f42:	ea 0d       	add	r30, r10
     f44:	f1 1d       	adc	r31, r1
     f46:	80 81       	ld	r24, Z
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	00 2e       	mov	r0, r16
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <advance_note+0x1fc>
     f4e:	95 95       	asr	r25
     f50:	87 95       	ror	r24
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <advance_note+0x1f8>
     f56:	80 ff       	sbrs	r24, 0
     f58:	3f c0       	rjmp	.+126    	; 0xfd8 <advance_note+0x282>
			{
				//if note slides off screen and green_check isn't checked to a lane
				if (col == 15 && green_check == -1) {
     f5a:	1f 30       	cpi	r17, 0x0F	; 15
     f5c:	d9 f4       	brne	.+54     	; 0xf94 <advance_note+0x23e>
     f5e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f62:	8f 3f       	cpi	r24, 0xFF	; 255
     f64:	b9 f4       	brne	.+46     	; 0xf94 <advance_note+0x23e>
					points--;
     f66:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
     f6a:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <points+0x1>
     f74:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <points>
					update_points();
     f78:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
					
					if (combo_count != 0) {
     f7c:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <combo_count>
     f80:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <combo_count+0x1>
     f84:	89 2b       	or	r24, r25
     f86:	31 f0       	breq	.+12     	; 0xf94 <advance_note+0x23e>
						combo_count = 0;
     f88:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <combo_count+0x1>
     f8c:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <combo_count>
						update_combo();
     f90:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
					}
				}
				
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
     f94:	1b 30       	cpi	r17, 0x0B	; 11
     f96:	51 f0       	breq	.+20     	; 0xfac <advance_note+0x256>
     f98:	1f 30       	cpi	r17, 0x0F	; 15
     f9a:	51 f0       	breq	.+20     	; 0xfb0 <advance_note+0x25a>
				{
					colour = COLOUR_QUART_YELLOW;
				}
				else if (col==12 || col == 14)
     f9c:	1c 30       	cpi	r17, 0x0C	; 12
     f9e:	51 f0       	breq	.+20     	; 0xfb4 <advance_note+0x25e>
     fa0:	1e 30       	cpi	r17, 0x0E	; 14
     fa2:	51 f0       	breq	.+20     	; 0xfb8 <advance_note+0x262>
				{
					colour = COLOUR_HALF_YELLOW;
				}
				else if (col==13)
     fa4:	1d 30       	cpi	r17, 0x0D	; 13
     fa6:	51 f4       	brne	.+20     	; 0xfbc <advance_note+0x266>
				{
					colour = COLOUR_YELLOW;
     fa8:	df ef       	ldi	r29, 0xFF	; 255
     faa:	09 c0       	rjmp	.+18     	; 0xfbe <advance_note+0x268>
				
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
				{
					colour = COLOUR_QUART_YELLOW;
     fac:	d1 e1       	ldi	r29, 0x11	; 17
     fae:	07 c0       	rjmp	.+14     	; 0xfbe <advance_note+0x268>
     fb0:	d1 e1       	ldi	r29, 0x11	; 17
     fb2:	05 c0       	rjmp	.+10     	; 0xfbe <advance_note+0x268>
				}
				else if (col==12 || col == 14)
				{
					colour = COLOUR_HALF_YELLOW;
     fb4:	d5 e5       	ldi	r29, 0x55	; 85
     fb6:	03 c0       	rjmp	.+6      	; 0xfbe <advance_note+0x268>
     fb8:	d5 e5       	ldi	r29, 0x55	; 85
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <advance_note+0x268>
				{
					colour = COLOUR_YELLOW;
				}
				else
				{
					colour = COLOUR_BLACK;
     fbc:	d0 e0       	ldi	r29, 0x00	; 0
				}
				ledmatrix_update_pixel(col, 2*lane, colour);
     fbe:	4d 2f       	mov	r20, r29
     fc0:	d0 2e       	mov	r13, r16
     fc2:	dd 0c       	add	r13, r13
     fc4:	6d 2d       	mov	r22, r13
     fc6:	81 2f       	mov	r24, r17
     fc8:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 2*lane+1, colour);
     fcc:	61 e0       	ldi	r22, 0x01	; 1
     fce:	6d 0d       	add	r22, r13
     fd0:	4d 2f       	mov	r20, r29
     fd2:	81 2f       	mov	r24, r17
     fd4:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
		if ((future+beat) % 5)
		{
			continue;
		} 
		
		for (uint8_t lane = 0; lane < 4; lane++)
     fd8:	0f 5f       	subi	r16, 0xFF	; 255
     fda:	04 30       	cpi	r16, 0x04	; 4
     fdc:	08 f4       	brcc	.+2      	; 0xfe0 <advance_note+0x28a>
     fde:	45 cf       	rjmp	.-374    	; 0xe6a <advance_note+0x114>
			}
		}
		
		
		//check if the current note goes off the screen
		if (col >= 15) {
     fe0:	1f 30       	cpi	r17, 0x0F	; 15
     fe2:	18 f0       	brcs	.+6      	; 0xfea <advance_note+0x294>
			green_check = -1;
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		sound_note(-1, -1);
	}
	
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     fea:	1f 5f       	subi	r17, 0xFF	; 255
     fec:	10 31       	cpi	r17, 0x10	; 16
     fee:	08 f4       	brcc	.+2      	; 0xff2 <advance_note+0x29c>
     ff0:	da ce       	rjmp	.-588    	; 0xda6 <advance_note+0x50>
			green_check = -1;
		}
	}
	
	// increment the beat
	beat++;
     ff2:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <beat>
     ff6:	90 91 6a 06 	lds	r25, 0x066A	; 0x80066a <beat+0x1>
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	90 93 6a 06 	sts	0x066A, r25	; 0x80066a <beat+0x1>
    1000:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <beat>
	
	draw_notes();
    1004:	0e 94 89 04 	call	0x912	; 0x912 <draw_notes>
}
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	df 90       	pop	r13
    1014:	bf 90       	pop	r11
    1016:	af 90       	pop	r10
    1018:	08 95       	ret

0000101a <is_game_over>:

// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over(void)
{
	// Detect if the game is over i.e. if a player has won.
	if (game_over) {	
    101a:	80 91 30 06 	lds	r24, 0x0630	; 0x800630 <game_over>
    101e:	88 23       	and	r24, r24
    1020:	19 f0       	breq	.+6      	; 0x1028 <is_game_over+0xe>
		game_over = 0; //reset game over check
    1022:	10 92 30 06 	sts	0x0630, r1	; 0x800630 <game_over>
		return 1;	
    1026:	81 e0       	ldi	r24, 0x01	; 1
	
	} else {
	return 0;
	
	}
    1028:	08 95       	ret

0000102a <ledmatrix_setup>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    102a:	80 e8       	ldi	r24, 0x80	; 128
    102c:	0e 94 a7 11 	call	0x234e	; 0x234e <spi_setup_master>
    1030:	08 95       	ret

00001032 <ledmatrix_update_pixel>:
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	80 31       	cpi	r24, 0x10	; 16
    103a:	b0 f4       	brcc	.+44     	; 0x1068 <ledmatrix_update_pixel+0x36>
    103c:	68 30       	cpi	r22, 0x08	; 8
    103e:	a0 f4       	brcc	.+40     	; 0x1068 <ledmatrix_update_pixel+0x36>
    1040:	14 2f       	mov	r17, r20
    1042:	c6 2f       	mov	r28, r22
    1044:	d8 2f       	mov	r29, r24
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <spi_send_byte>
    104c:	6c 2f       	mov	r22, r28
    104e:	67 70       	andi	r22, 0x07	; 7
    1050:	80 e1       	ldi	r24, 0x10	; 16
    1052:	68 9f       	mul	r22, r24
    1054:	90 01       	movw	r18, r0
    1056:	11 24       	eor	r1, r1
    1058:	8d 2f       	mov	r24, r29
    105a:	8f 70       	andi	r24, 0x0F	; 15
    105c:	82 2b       	or	r24, r18
    105e:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <spi_send_byte>
    1062:	81 2f       	mov	r24, r17
    1064:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <spi_send_byte>
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	08 95       	ret

00001070 <ledmatrix_update_column>:
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	80 31       	cpi	r24, 0x10	; 16
    1078:	a0 f4       	brcc	.+40     	; 0x10a2 <ledmatrix_update_column+0x32>
    107a:	8b 01       	movw	r16, r22
    107c:	c8 2f       	mov	r28, r24
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <spi_send_byte>
    1084:	8c 2f       	mov	r24, r28
    1086:	8f 70       	andi	r24, 0x0F	; 15
    1088:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <spi_send_byte>
    108c:	c0 e0       	ldi	r28, 0x00	; 0
    108e:	07 c0       	rjmp	.+14     	; 0x109e <ledmatrix_update_column+0x2e>
    1090:	f8 01       	movw	r30, r16
    1092:	ec 0f       	add	r30, r28
    1094:	f1 1d       	adc	r31, r1
    1096:	80 81       	ld	r24, Z
    1098:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <spi_send_byte>
    109c:	cf 5f       	subi	r28, 0xFF	; 255
    109e:	c8 30       	cpi	r28, 0x08	; 8
    10a0:	b8 f3       	brcs	.-18     	; 0x1090 <ledmatrix_update_column+0x20>
    10a2:	cf 91       	pop	r28
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	08 95       	ret

000010aa <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    10aa:	8f e0       	ldi	r24, 0x0F	; 15
    10ac:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <spi_send_byte>
    10b0:	08 95       	ret

000010b2 <initialise_hardware>:
		}
	uint16_t res = ADC;
	return res;
}

void frequency_joy(uint16_t adc_val) {
    10b2:	0e 94 15 08 	call	0x102a	; 0x102a <ledmatrix_setup>
    10b6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <init_button_interrupts>
    10ba:	8f ef       	ldi	r24, 0xFF	; 255
    10bc:	87 b9       	out	0x07, r24	; 7
    10be:	8c ef       	ldi	r24, 0xFC	; 252
    10c0:	8a b9       	out	0x0a, r24	; 10
    10c2:	80 e4       	ldi	r24, 0x40	; 64
    10c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    10c8:	86 e8       	ldi	r24, 0x86	; 134
    10ca:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	7b e4       	ldi	r23, 0x4B	; 75
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 bf 10 	call	0x217e	; 0x217e <init_serial_stdio>
    10dc:	0e 94 1b 12 	call	0x2436	; 0x2436 <init_timer0>
    10e0:	0e 94 66 12 	call	0x24cc	; 0x24cc <init_timer1>
    10e4:	0e 94 2d 13 	call	0x265a	; 0x265a <init_timer2>
    10e8:	78 94       	sei
    10ea:	08 95       	ret

000010ec <start_screen>:
    10ec:	4f 92       	push	r4
    10ee:	5f 92       	push	r5
    10f0:	6f 92       	push	r6
    10f2:	7f 92       	push	r7
    10f4:	8f 92       	push	r8
    10f6:	9f 92       	push	r9
    10f8:	af 92       	push	r10
    10fa:	bf 92       	push	r11
    10fc:	cf 92       	push	r12
    10fe:	df 92       	push	r13
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <clear_terminal>
    110c:	0e 94 12 12 	call	0x2424	; 0x2424 <show_cursor>
    1110:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <clear_terminal>
    1114:	0e 94 09 12 	call	0x2412	; 0x2412 <hide_cursor>
    1118:	85 e2       	ldi	r24, 0x25	; 37
    111a:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <set_display_attribute>
    111e:	64 e0       	ldi	r22, 0x04	; 4
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	8a e0       	ldi	r24, 0x0A	; 10
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    112a:	81 e3       	ldi	r24, 0x31	; 49
    112c:	93 e0       	ldi	r25, 0x03	; 3
    112e:	9f 93       	push	r25
    1130:	8f 93       	push	r24
    1132:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
    1136:	65 e0       	ldi	r22, 0x05	; 5
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	8a e0       	ldi	r24, 0x0A	; 10
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	93 e0       	ldi	r25, 0x03	; 3
    1146:	9f 93       	push	r25
    1148:	8f 93       	push	r24
    114a:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
    114e:	66 e0       	ldi	r22, 0x06	; 6
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	8a e0       	ldi	r24, 0x0A	; 10
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    115a:	85 eb       	ldi	r24, 0xB5	; 181
    115c:	92 e0       	ldi	r25, 0x02	; 2
    115e:	9f 93       	push	r25
    1160:	8f 93       	push	r24
    1162:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
    1166:	67 e0       	ldi	r22, 0x07	; 7
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	8a e0       	ldi	r24, 0x0A	; 10
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    1172:	88 e6       	ldi	r24, 0x68	; 104
    1174:	92 e0       	ldi	r25, 0x02	; 2
    1176:	9f 93       	push	r25
    1178:	8f 93       	push	r24
    117a:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
    117e:	68 e0       	ldi	r22, 0x08	; 8
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	8a e0       	ldi	r24, 0x0A	; 10
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    118a:	8a e1       	ldi	r24, 0x1A	; 26
    118c:	92 e0       	ldi	r25, 0x02	; 2
    118e:	9f 93       	push	r25
    1190:	8f 93       	push	r24
    1192:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
    1196:	69 e0       	ldi	r22, 0x09	; 9
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	8a e0       	ldi	r24, 0x0A	; 10
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    11a2:	8c ec       	ldi	r24, 0xCC	; 204
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	9f 93       	push	r25
    11a8:	8f 93       	push	r24
    11aa:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
    11ae:	6a e0       	ldi	r22, 0x0A	; 10
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	8a e0       	ldi	r24, 0x0A	; 10
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    11ba:	8e e7       	ldi	r24, 0x7E	; 126
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	9f 93       	push	r25
    11c0:	8f 93       	push	r24
    11c2:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
    11c6:	6b e0       	ldi	r22, 0x0B	; 11
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	8a e0       	ldi	r24, 0x0A	; 10
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    11d2:	80 e3       	ldi	r24, 0x30	; 48
    11d4:	91 e0       	ldi	r25, 0x01	; 1
    11d6:	9f 93       	push	r25
    11d8:	8f 93       	push	r24
    11da:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
    11de:	6c e0       	ldi	r22, 0x0C	; 12
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	8a e0       	ldi	r24, 0x0A	; 10
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    11ea:	83 ee       	ldi	r24, 0xE3	; 227
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	9f 93       	push	r25
    11f0:	8f 93       	push	r24
    11f2:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
    11f6:	6e e0       	ldi	r22, 0x0E	; 14
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	8a e0       	ldi	r24, 0x0A	; 10
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    1202:	84 eb       	ldi	r24, 0xB4	; 180
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	9f 93       	push	r25
    1208:	8f 93       	push	r24
    120a:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
    120e:	0e 94 a2 02 	call	0x544	; 0x544 <show_start_screen>
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0e 94 8e 05 	call	0xb1c	; 0xb1c <set_track>
    121a:	6f e0       	ldi	r22, 0x0F	; 15
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	8a e0       	ldi	r24, 0x0A	; 10
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    1226:	82 e4       	ldi	r24, 0x42	; 66
    1228:	96 e0       	ldi	r25, 0x06	; 6
    122a:	9f 93       	push	r25
    122c:	8f 93       	push	r24
    122e:	80 e7       	ldi	r24, 0x70	; 112
    1230:	93 e0       	ldi	r25, 0x03	; 3
    1232:	9f 93       	push	r25
    1234:	8f 93       	push	r24
    1236:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    123a:	0e 94 31 12 	call	0x2462	; 0x2462 <get_current_time>
    123e:	6b 01       	movw	r12, r22
    1240:	7c 01       	movw	r14, r24
    1242:	88 ee       	ldi	r24, 0xE8	; 232
    1244:	93 e0       	ldi	r25, 0x03	; 3
    1246:	90 93 6c 06 	sts	0x066C, r25	; 0x80066c <game_speed+0x1>
    124a:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <game_speed>
    124e:	61 e1       	ldi	r22, 0x11	; 17
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	8a e0       	ldi	r24, 0x0A	; 10
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    125a:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <clear_to_end_of_line>
    125e:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    1262:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <game_speed+0x1>
    1266:	2d b7       	in	r18, 0x3d	; 61
    1268:	3e b7       	in	r19, 0x3e	; 62
    126a:	28 5e       	subi	r18, 0xE8	; 232
    126c:	3f 4f       	sbci	r19, 0xFF	; 255
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	3e bf       	out	0x3e, r19	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	2d bf       	out	0x3d, r18	; 61
    1278:	88 3e       	cpi	r24, 0xE8	; 232
    127a:	33 e0       	ldi	r19, 0x03	; 3
    127c:	93 07       	cpc	r25, r19
    127e:	69 f4       	brne	.+26     	; 0x129a <start_screen+0x1ae>
    1280:	9f 93       	push	r25
    1282:	8f 93       	push	r24
    1284:	8a e7       	ldi	r24, 0x7A	; 122
    1286:	93 e0       	ldi	r25, 0x03	; 3
    1288:	9f 93       	push	r25
    128a:	8f 93       	push	r24
    128c:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	20 c0       	rjmp	.+64     	; 0x12da <start_screen+0x1ee>
    129a:	84 3f       	cpi	r24, 0xF4	; 244
    129c:	21 e0       	ldi	r18, 0x01	; 1
    129e:	92 07       	cpc	r25, r18
    12a0:	69 f4       	brne	.+26     	; 0x12bc <start_screen+0x1d0>
    12a2:	9f 93       	push	r25
    12a4:	8f 93       	push	r24
    12a6:	80 ea       	ldi	r24, 0xA0	; 160
    12a8:	93 e0       	ldi	r25, 0x03	; 3
    12aa:	9f 93       	push	r25
    12ac:	8f 93       	push	r24
    12ae:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f c0       	rjmp	.+30     	; 0x12da <start_screen+0x1ee>
    12bc:	8a 3f       	cpi	r24, 0xFA	; 250
    12be:	91 05       	cpc	r25, r1
    12c0:	61 f4       	brne	.+24     	; 0x12da <start_screen+0x1ee>
    12c2:	9f 93       	push	r25
    12c4:	8f 93       	push	r24
    12c6:	84 ec       	ldi	r24, 0xC4	; 196
    12c8:	93 e0       	ldi	r25, 0x03	; 3
    12ca:	9f 93       	push	r25
    12cc:	8f 93       	push	r24
    12ce:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	d0 e0       	ldi	r29, 0x00	; 0
    12dc:	0e 94 06 11 	call	0x220c	; 0x220c <serial_input_available>
    12e0:	88 23       	and	r24, r24
    12e2:	41 f0       	breq	.+16     	; 0x12f4 <start_screen+0x208>
    12e4:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <__iob>
    12e8:	90 91 82 07 	lds	r25, 0x0782	; 0x800782 <__iob+0x1>
    12ec:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <fgetc>
    12f0:	c8 2f       	mov	r28, r24
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <start_screen+0x20a>
    12f4:	cf ef       	ldi	r28, 0xFF	; 255
    12f6:	c3 37       	cpi	r28, 0x73	; 115
    12f8:	09 f4       	brne	.+2      	; 0x12fc <start_screen+0x210>
    12fa:	f6 c0       	rjmp	.+492    	; 0x14e8 <start_screen+0x3fc>
    12fc:	c3 35       	cpi	r28, 0x53	; 83
    12fe:	09 f4       	brne	.+2      	; 0x1302 <start_screen+0x216>
    1300:	f3 c0       	rjmp	.+486    	; 0x14e8 <start_screen+0x3fc>
    1302:	c1 33       	cpi	r28, 0x31	; 49
    1304:	f9 f4       	brne	.+62     	; 0x1344 <start_screen+0x258>
    1306:	88 ee       	ldi	r24, 0xE8	; 232
    1308:	93 e0       	ldi	r25, 0x03	; 3
    130a:	90 93 6c 06 	sts	0x066C, r25	; 0x80066c <game_speed+0x1>
    130e:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <game_speed>
    1312:	61 e1       	ldi	r22, 0x11	; 17
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	8a e0       	ldi	r24, 0x0A	; 10
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    131e:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <clear_to_end_of_line>
    1322:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <game_speed+0x1>
    1326:	8f 93       	push	r24
    1328:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    132c:	8f 93       	push	r24
    132e:	8a e7       	ldi	r24, 0x7A	; 122
    1330:	93 e0       	ldi	r25, 0x03	; 3
    1332:	9f 93       	push	r25
    1334:	8f 93       	push	r24
    1336:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	41 c0       	rjmp	.+130    	; 0x13c6 <start_screen+0x2da>
    1344:	c2 33       	cpi	r28, 0x32	; 50
    1346:	f9 f4       	brne	.+62     	; 0x1386 <start_screen+0x29a>
    1348:	84 ef       	ldi	r24, 0xF4	; 244
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	90 93 6c 06 	sts	0x066C, r25	; 0x80066c <game_speed+0x1>
    1350:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <game_speed>
    1354:	61 e1       	ldi	r22, 0x11	; 17
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	8a e0       	ldi	r24, 0x0A	; 10
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    1360:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <clear_to_end_of_line>
    1364:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <game_speed+0x1>
    1368:	8f 93       	push	r24
    136a:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    136e:	8f 93       	push	r24
    1370:	80 ea       	ldi	r24, 0xA0	; 160
    1372:	93 e0       	ldi	r25, 0x03	; 3
    1374:	9f 93       	push	r25
    1376:	8f 93       	push	r24
    1378:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	20 c0       	rjmp	.+64     	; 0x13c6 <start_screen+0x2da>
    1386:	c3 33       	cpi	r28, 0x33	; 51
    1388:	f1 f4       	brne	.+60     	; 0x13c6 <start_screen+0x2da>
    138a:	8a ef       	ldi	r24, 0xFA	; 250
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	90 93 6c 06 	sts	0x066C, r25	; 0x80066c <game_speed+0x1>
    1392:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <game_speed>
    1396:	61 e1       	ldi	r22, 0x11	; 17
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	8a e0       	ldi	r24, 0x0A	; 10
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    13a2:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <clear_to_end_of_line>
    13a6:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <game_speed+0x1>
    13aa:	8f 93       	push	r24
    13ac:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    13b0:	8f 93       	push	r24
    13b2:	84 ec       	ldi	r24, 0xC4	; 196
    13b4:	93 e0       	ldi	r25, 0x03	; 3
    13b6:	9f 93       	push	r25
    13b8:	8f 93       	push	r24
    13ba:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    13ca:	8f 3f       	cpi	r24, 0xFF	; 255
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <start_screen+0x2e4>
    13ce:	8c c0       	rjmp	.+280    	; 0x14e8 <start_screen+0x3fc>
    13d0:	cd 36       	cpi	r28, 0x6D	; 109
    13d2:	11 f0       	breq	.+4      	; 0x13d8 <start_screen+0x2ec>
    13d4:	cd 34       	cpi	r28, 0x4D	; 77
    13d6:	11 f5       	brne	.+68     	; 0x141c <start_screen+0x330>
    13d8:	60 e1       	ldi	r22, 0x10	; 16
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	8a e0       	ldi	r24, 0x0A	; 10
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    13e4:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <clear_to_end_of_line>
    13e8:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <man_mode>
    13ec:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <man_mode+0x1>
    13f0:	89 2b       	or	r24, r25
    13f2:	29 f0       	breq	.+10     	; 0x13fe <start_screen+0x312>
    13f4:	10 92 36 06 	sts	0x0636, r1	; 0x800636 <man_mode+0x1>
    13f8:	10 92 35 06 	sts	0x0635, r1	; 0x800635 <man_mode>
    13fc:	3e c0       	rjmp	.+124    	; 0x147a <start_screen+0x38e>
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	90 93 36 06 	sts	0x0636, r25	; 0x800636 <man_mode+0x1>
    1406:	80 93 35 06 	sts	0x0635, r24	; 0x800635 <man_mode>
    140a:	8b ee       	ldi	r24, 0xEB	; 235
    140c:	93 e0       	ldi	r25, 0x03	; 3
    140e:	9f 93       	push	r25
    1410:	8f 93       	push	r24
    1412:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	2f c0       	rjmp	.+94     	; 0x147a <start_screen+0x38e>
    141c:	c4 37       	cpi	r28, 0x74	; 116
    141e:	11 f0       	breq	.+4      	; 0x1424 <start_screen+0x338>
    1420:	c4 35       	cpi	r28, 0x54	; 84
    1422:	59 f5       	brne	.+86     	; 0x147a <start_screen+0x38e>
    1424:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <track_no>
    1428:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <track_no+0x1>
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	90 93 5e 06 	sts	0x065E, r25	; 0x80065e <track_no+0x1>
    1432:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <track_no>
    1436:	03 97       	sbiw	r24, 0x03	; 3
    1438:	24 f0       	brlt	.+8      	; 0x1442 <start_screen+0x356>
    143a:	10 92 5e 06 	sts	0x065E, r1	; 0x80065e <track_no+0x1>
    143e:	10 92 5d 06 	sts	0x065D, r1	; 0x80065d <track_no>
    1442:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <track_no>
    1446:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <track_no+0x1>
    144a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <set_track>
    144e:	6f e0       	ldi	r22, 0x0F	; 15
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	8a e0       	ldi	r24, 0x0A	; 10
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
    145a:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <clear_to_end_of_line>
    145e:	82 e4       	ldi	r24, 0x42	; 66
    1460:	96 e0       	ldi	r25, 0x06	; 6
    1462:	9f 93       	push	r25
    1464:	8f 93       	push	r24
    1466:	80 e7       	ldi	r24, 0x70	; 112
    1468:	93 e0       	ldi	r25, 0x03	; 3
    146a:	9f 93       	push	r25
    146c:	8f 93       	push	r24
    146e:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <man_mode>
    147e:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <man_mode+0x1>
    1482:	89 2b       	or	r24, r25
    1484:	09 f0       	breq	.+2      	; 0x1488 <start_screen+0x39c>
    1486:	2a cf       	rjmp	.-428    	; 0x12dc <start_screen+0x1f0>
    1488:	0e 94 31 12 	call	0x2462	; 0x2462 <get_current_time>
    148c:	4b 01       	movw	r8, r22
    148e:	5c 01       	movw	r10, r24
    1490:	2b 01       	movw	r4, r22
    1492:	3c 01       	movw	r6, r24
    1494:	4c 18       	sub	r4, r12
    1496:	5d 08       	sbc	r5, r13
    1498:	6e 08       	sbc	r6, r14
    149a:	7f 08       	sbc	r7, r15
    149c:	20 91 6b 06 	lds	r18, 0x066B	; 0x80066b <game_speed>
    14a0:	30 91 6c 06 	lds	r19, 0x066C	; 0x80066c <game_speed+0x1>
    14a4:	ad ec       	ldi	r26, 0xCD	; 205
    14a6:	bc ec       	ldi	r27, 0xCC	; 204
    14a8:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__umulhisi3>
    14ac:	96 95       	lsr	r25
    14ae:	87 95       	ror	r24
    14b0:	96 95       	lsr	r25
    14b2:	87 95       	ror	r24
    14b4:	a0 e0       	ldi	r26, 0x00	; 0
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	84 15       	cp	r24, r4
    14ba:	95 05       	cpc	r25, r5
    14bc:	a6 05       	cpc	r26, r6
    14be:	b7 05       	cpc	r27, r7
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <start_screen+0x3d8>
    14c2:	0c cf       	rjmp	.-488    	; 0x12dc <start_screen+0x1f0>
    14c4:	8d 2f       	mov	r24, r29
    14c6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
    14ca:	8d 2f       	mov	r24, r29
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	8f 71       	andi	r24, 0x1F	; 31
    14d2:	90 78       	andi	r25, 0x80	; 128
    14d4:	99 23       	and	r25, r25
    14d6:	24 f4       	brge	.+8      	; 0x14e0 <start_screen+0x3f4>
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	80 6e       	ori	r24, 0xE0	; 224
    14dc:	9f 6f       	ori	r25, 0xFF	; 255
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	d8 2f       	mov	r29, r24
    14e2:	75 01       	movw	r14, r10
    14e4:	64 01       	movw	r12, r8
    14e6:	fa ce       	rjmp	.-524    	; 0x12dc <start_screen+0x1f0>
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	cf 90       	pop	r12
    14f4:	bf 90       	pop	r11
    14f6:	af 90       	pop	r10
    14f8:	9f 90       	pop	r9
    14fa:	8f 90       	pop	r8
    14fc:	7f 90       	pop	r7
    14fe:	6f 90       	pop	r6
    1500:	5f 90       	pop	r5
    1502:	4f 90       	pop	r4
    1504:	08 95       	ret

00001506 <display_countdown>:
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	ec 01       	movw	r28, r24
    150c:	0e 94 55 08 	call	0x10aa	; 0x10aa <ledmatrix_clear>
    1510:	c2 30       	cpi	r28, 0x02	; 2
    1512:	d1 05       	cpc	r29, r1
    1514:	a9 f1       	breq	.+106    	; 0x1580 <display_countdown+0x7a>
    1516:	1c f4       	brge	.+6      	; 0x151e <display_countdown+0x18>
    1518:	21 97       	sbiw	r28, 0x01	; 1
    151a:	71 f1       	breq	.+92     	; 0x1578 <display_countdown+0x72>
    151c:	74 c1       	rjmp	.+744    	; 0x1806 <display_countdown+0x300>
    151e:	c3 30       	cpi	r28, 0x03	; 3
    1520:	d1 05       	cpc	r29, r1
    1522:	09 f4       	brne	.+2      	; 0x1526 <display_countdown+0x20>
    1524:	f3 c0       	rjmp	.+486    	; 0x170c <display_countdown+0x206>
    1526:	24 97       	sbiw	r28, 0x04	; 4
    1528:	09 f4       	brne	.+2      	; 0x152c <display_countdown+0x26>
    152a:	f5 c0       	rjmp	.+490    	; 0x1716 <display_countdown+0x210>
    152c:	6c c1       	rjmp	.+728    	; 0x1806 <display_countdown+0x300>
    152e:	4f ef       	ldi	r20, 0xFF	; 255
    1530:	63 e0       	ldi	r22, 0x03	; 3
    1532:	8c 2f       	mov	r24, r28
    1534:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1538:	4f ef       	ldi	r20, 0xFF	; 255
    153a:	64 e0       	ldi	r22, 0x04	; 4
    153c:	8c 2f       	mov	r24, r28
    153e:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1542:	c5 30       	cpi	r28, 0x05	; 5
    1544:	59 f4       	brne	.+22     	; 0x155c <display_countdown+0x56>
    1546:	4f ef       	ldi	r20, 0xFF	; 255
    1548:	62 e0       	ldi	r22, 0x02	; 2
    154a:	8c 2f       	mov	r24, r28
    154c:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1550:	4f ef       	ldi	r20, 0xFF	; 255
    1552:	64 e0       	ldi	r22, 0x04	; 4
    1554:	8c 2f       	mov	r24, r28
    1556:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    155a:	0c c0       	rjmp	.+24     	; 0x1574 <display_countdown+0x6e>
    155c:	ca 30       	cpi	r28, 0x0A	; 10
    155e:	51 f4       	brne	.+20     	; 0x1574 <display_countdown+0x6e>
    1560:	4f ef       	ldi	r20, 0xFF	; 255
    1562:	62 e0       	ldi	r22, 0x02	; 2
    1564:	8c 2f       	mov	r24, r28
    1566:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    156a:	4f ef       	ldi	r20, 0xFF	; 255
    156c:	65 e0       	ldi	r22, 0x05	; 5
    156e:	8c 2f       	mov	r24, r28
    1570:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1574:	cf 5f       	subi	r28, 0xFF	; 255
    1576:	01 c0       	rjmp	.+2      	; 0x157a <display_countdown+0x74>
    1578:	c4 e0       	ldi	r28, 0x04	; 4
    157a:	cb 30       	cpi	r28, 0x0B	; 11
    157c:	c0 f2       	brcs	.-80     	; 0x152e <display_countdown+0x28>
    157e:	43 c1       	rjmp	.+646    	; 0x1806 <display_countdown+0x300>
    1580:	4f e0       	ldi	r20, 0x0F	; 15
    1582:	62 e0       	ldi	r22, 0x02	; 2
    1584:	84 e0       	ldi	r24, 0x04	; 4
    1586:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    158a:	4f e0       	ldi	r20, 0x0F	; 15
    158c:	63 e0       	ldi	r22, 0x03	; 3
    158e:	84 e0       	ldi	r24, 0x04	; 4
    1590:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1594:	4f e0       	ldi	r20, 0x0F	; 15
    1596:	64 e0       	ldi	r22, 0x04	; 4
    1598:	84 e0       	ldi	r24, 0x04	; 4
    159a:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    159e:	4f e0       	ldi	r20, 0x0F	; 15
    15a0:	65 e0       	ldi	r22, 0x05	; 5
    15a2:	84 e0       	ldi	r24, 0x04	; 4
    15a4:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    15a8:	4f e0       	ldi	r20, 0x0F	; 15
    15aa:	61 e0       	ldi	r22, 0x01	; 1
    15ac:	85 e0       	ldi	r24, 0x05	; 5
    15ae:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    15b2:	4f e0       	ldi	r20, 0x0F	; 15
    15b4:	62 e0       	ldi	r22, 0x02	; 2
    15b6:	85 e0       	ldi	r24, 0x05	; 5
    15b8:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    15bc:	4f e0       	ldi	r20, 0x0F	; 15
    15be:	65 e0       	ldi	r22, 0x05	; 5
    15c0:	85 e0       	ldi	r24, 0x05	; 5
    15c2:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    15c6:	4f e0       	ldi	r20, 0x0F	; 15
    15c8:	66 e0       	ldi	r22, 0x06	; 6
    15ca:	85 e0       	ldi	r24, 0x05	; 5
    15cc:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    15d0:	4f e0       	ldi	r20, 0x0F	; 15
    15d2:	65 e0       	ldi	r22, 0x05	; 5
    15d4:	86 e0       	ldi	r24, 0x06	; 6
    15d6:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    15da:	4f e0       	ldi	r20, 0x0F	; 15
    15dc:	66 e0       	ldi	r22, 0x06	; 6
    15de:	86 e0       	ldi	r24, 0x06	; 6
    15e0:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    15e4:	4f e0       	ldi	r20, 0x0F	; 15
    15e6:	65 e0       	ldi	r22, 0x05	; 5
    15e8:	87 e0       	ldi	r24, 0x07	; 7
    15ea:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    15ee:	4f e0       	ldi	r20, 0x0F	; 15
    15f0:	66 e0       	ldi	r22, 0x06	; 6
    15f2:	87 e0       	ldi	r24, 0x07	; 7
    15f4:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    15f8:	4f e0       	ldi	r20, 0x0F	; 15
    15fa:	62 e0       	ldi	r22, 0x02	; 2
    15fc:	88 e0       	ldi	r24, 0x08	; 8
    15fe:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1602:	4f e0       	ldi	r20, 0x0F	; 15
    1604:	63 e0       	ldi	r22, 0x03	; 3
    1606:	88 e0       	ldi	r24, 0x08	; 8
    1608:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    160c:	4f e0       	ldi	r20, 0x0F	; 15
    160e:	64 e0       	ldi	r22, 0x04	; 4
    1610:	88 e0       	ldi	r24, 0x08	; 8
    1612:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1616:	4f e0       	ldi	r20, 0x0F	; 15
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	89 e0       	ldi	r24, 0x09	; 9
    161c:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1620:	4f e0       	ldi	r20, 0x0F	; 15
    1622:	62 e0       	ldi	r22, 0x02	; 2
    1624:	89 e0       	ldi	r24, 0x09	; 9
    1626:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    162a:	4f e0       	ldi	r20, 0x0F	; 15
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	8a e0       	ldi	r24, 0x0A	; 10
    1630:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1634:	4f e0       	ldi	r20, 0x0F	; 15
    1636:	62 e0       	ldi	r22, 0x02	; 2
    1638:	8a e0       	ldi	r24, 0x0A	; 10
    163a:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    163e:	4f e0       	ldi	r20, 0x0F	; 15
    1640:	63 e0       	ldi	r22, 0x03	; 3
    1642:	8a e0       	ldi	r24, 0x0A	; 10
    1644:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1648:	4f e0       	ldi	r20, 0x0F	; 15
    164a:	64 e0       	ldi	r22, 0x04	; 4
    164c:	8a e0       	ldi	r24, 0x0A	; 10
    164e:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1652:	4f e0       	ldi	r20, 0x0F	; 15
    1654:	65 e0       	ldi	r22, 0x05	; 5
    1656:	8a e0       	ldi	r24, 0x0A	; 10
    1658:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    165c:	4f e0       	ldi	r20, 0x0F	; 15
    165e:	66 e0       	ldi	r22, 0x06	; 6
    1660:	8a e0       	ldi	r24, 0x0A	; 10
    1662:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1666:	cf c0       	rjmp	.+414    	; 0x1806 <display_countdown+0x300>
    1668:	c4 30       	cpi	r28, 0x04	; 4
    166a:	11 f0       	breq	.+4      	; 0x1670 <display_countdown+0x16a>
    166c:	ca 30       	cpi	r28, 0x0A	; 10
    166e:	a9 f4       	brne	.+42     	; 0x169a <display_countdown+0x194>
    1670:	4f e0       	ldi	r20, 0x0F	; 15
    1672:	62 e0       	ldi	r22, 0x02	; 2
    1674:	8c 2f       	mov	r24, r28
    1676:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    167a:	4f e0       	ldi	r20, 0x0F	; 15
    167c:	63 e0       	ldi	r22, 0x03	; 3
    167e:	8c 2f       	mov	r24, r28
    1680:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1684:	4f e0       	ldi	r20, 0x0F	; 15
    1686:	64 e0       	ldi	r22, 0x04	; 4
    1688:	8c 2f       	mov	r24, r28
    168a:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    168e:	4f e0       	ldi	r20, 0x0F	; 15
    1690:	65 e0       	ldi	r22, 0x05	; 5
    1692:	8c 2f       	mov	r24, r28
    1694:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1698:	37 c0       	rjmp	.+110    	; 0x1708 <display_countdown+0x202>
    169a:	c5 30       	cpi	r28, 0x05	; 5
    169c:	11 f0       	breq	.+4      	; 0x16a2 <display_countdown+0x19c>
    169e:	c9 30       	cpi	r28, 0x09	; 9
    16a0:	a9 f4       	brne	.+42     	; 0x16cc <display_countdown+0x1c6>
    16a2:	4f e0       	ldi	r20, 0x0F	; 15
    16a4:	61 e0       	ldi	r22, 0x01	; 1
    16a6:	8c 2f       	mov	r24, r28
    16a8:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    16ac:	4f e0       	ldi	r20, 0x0F	; 15
    16ae:	62 e0       	ldi	r22, 0x02	; 2
    16b0:	8c 2f       	mov	r24, r28
    16b2:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    16b6:	4f e0       	ldi	r20, 0x0F	; 15
    16b8:	65 e0       	ldi	r22, 0x05	; 5
    16ba:	8c 2f       	mov	r24, r28
    16bc:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    16c0:	4f e0       	ldi	r20, 0x0F	; 15
    16c2:	66 e0       	ldi	r22, 0x06	; 6
    16c4:	8c 2f       	mov	r24, r28
    16c6:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    16ca:	1e c0       	rjmp	.+60     	; 0x1708 <display_countdown+0x202>
    16cc:	c6 30       	cpi	r28, 0x06	; 6
    16ce:	11 f0       	breq	.+4      	; 0x16d4 <display_countdown+0x1ce>
    16d0:	c8 30       	cpi	r28, 0x08	; 8
    16d2:	59 f4       	brne	.+22     	; 0x16ea <display_countdown+0x1e4>
    16d4:	4f e0       	ldi	r20, 0x0F	; 15
    16d6:	65 e0       	ldi	r22, 0x05	; 5
    16d8:	8c 2f       	mov	r24, r28
    16da:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    16de:	4f e0       	ldi	r20, 0x0F	; 15
    16e0:	66 e0       	ldi	r22, 0x06	; 6
    16e2:	8c 2f       	mov	r24, r28
    16e4:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    16e8:	0f c0       	rjmp	.+30     	; 0x1708 <display_countdown+0x202>
    16ea:	4f e0       	ldi	r20, 0x0F	; 15
    16ec:	62 e0       	ldi	r22, 0x02	; 2
    16ee:	8c 2f       	mov	r24, r28
    16f0:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    16f4:	4f e0       	ldi	r20, 0x0F	; 15
    16f6:	63 e0       	ldi	r22, 0x03	; 3
    16f8:	8c 2f       	mov	r24, r28
    16fa:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    16fe:	4f e0       	ldi	r20, 0x0F	; 15
    1700:	64 e0       	ldi	r22, 0x04	; 4
    1702:	8c 2f       	mov	r24, r28
    1704:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1708:	cf 5f       	subi	r28, 0xFF	; 255
    170a:	01 c0       	rjmp	.+2      	; 0x170e <display_countdown+0x208>
    170c:	c4 e0       	ldi	r28, 0x04	; 4
    170e:	cb 30       	cpi	r28, 0x0B	; 11
    1710:	08 f4       	brcc	.+2      	; 0x1714 <display_countdown+0x20e>
    1712:	aa cf       	rjmp	.-172    	; 0x1668 <display_countdown+0x162>
    1714:	78 c0       	rjmp	.+240    	; 0x1806 <display_countdown+0x300>
    1716:	40 ef       	ldi	r20, 0xF0	; 240
    1718:	61 e0       	ldi	r22, 0x01	; 1
    171a:	85 e0       	ldi	r24, 0x05	; 5
    171c:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1720:	40 ef       	ldi	r20, 0xF0	; 240
    1722:	62 e0       	ldi	r22, 0x02	; 2
    1724:	85 e0       	ldi	r24, 0x05	; 5
    1726:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    172a:	40 ef       	ldi	r20, 0xF0	; 240
    172c:	63 e0       	ldi	r22, 0x03	; 3
    172e:	85 e0       	ldi	r24, 0x05	; 5
    1730:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1734:	40 ef       	ldi	r20, 0xF0	; 240
    1736:	65 e0       	ldi	r22, 0x05	; 5
    1738:	85 e0       	ldi	r24, 0x05	; 5
    173a:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    173e:	40 ef       	ldi	r20, 0xF0	; 240
    1740:	66 e0       	ldi	r22, 0x06	; 6
    1742:	85 e0       	ldi	r24, 0x05	; 5
    1744:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1748:	40 ef       	ldi	r20, 0xF0	; 240
    174a:	67 e0       	ldi	r22, 0x07	; 7
    174c:	85 e0       	ldi	r24, 0x05	; 5
    174e:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1752:	40 ef       	ldi	r20, 0xF0	; 240
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	86 e0       	ldi	r24, 0x06	; 6
    1758:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    175c:	40 ef       	ldi	r20, 0xF0	; 240
    175e:	65 e0       	ldi	r22, 0x05	; 5
    1760:	86 e0       	ldi	r24, 0x06	; 6
    1762:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1766:	40 ef       	ldi	r20, 0xF0	; 240
    1768:	67 e0       	ldi	r22, 0x07	; 7
    176a:	86 e0       	ldi	r24, 0x06	; 6
    176c:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1770:	40 ef       	ldi	r20, 0xF0	; 240
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	87 e0       	ldi	r24, 0x07	; 7
    1776:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    177a:	40 ef       	ldi	r20, 0xF0	; 240
    177c:	62 e0       	ldi	r22, 0x02	; 2
    177e:	87 e0       	ldi	r24, 0x07	; 7
    1780:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1784:	40 ef       	ldi	r20, 0xF0	; 240
    1786:	63 e0       	ldi	r22, 0x03	; 3
    1788:	87 e0       	ldi	r24, 0x07	; 7
    178a:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    178e:	40 ef       	ldi	r20, 0xF0	; 240
    1790:	65 e0       	ldi	r22, 0x05	; 5
    1792:	87 e0       	ldi	r24, 0x07	; 7
    1794:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1798:	40 ef       	ldi	r20, 0xF0	; 240
    179a:	67 e0       	ldi	r22, 0x07	; 7
    179c:	87 e0       	ldi	r24, 0x07	; 7
    179e:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    17a2:	40 ef       	ldi	r20, 0xF0	; 240
    17a4:	60 e0       	ldi	r22, 0x00	; 0
    17a6:	88 e0       	ldi	r24, 0x08	; 8
    17a8:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    17ac:	40 ef       	ldi	r20, 0xF0	; 240
    17ae:	63 e0       	ldi	r22, 0x03	; 3
    17b0:	88 e0       	ldi	r24, 0x08	; 8
    17b2:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    17b6:	40 ef       	ldi	r20, 0xF0	; 240
    17b8:	65 e0       	ldi	r22, 0x05	; 5
    17ba:	88 e0       	ldi	r24, 0x08	; 8
    17bc:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    17c0:	40 ef       	ldi	r20, 0xF0	; 240
    17c2:	67 e0       	ldi	r22, 0x07	; 7
    17c4:	88 e0       	ldi	r24, 0x08	; 8
    17c6:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    17ca:	40 ef       	ldi	r20, 0xF0	; 240
    17cc:	61 e0       	ldi	r22, 0x01	; 1
    17ce:	89 e0       	ldi	r24, 0x09	; 9
    17d0:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    17d4:	40 ef       	ldi	r20, 0xF0	; 240
    17d6:	62 e0       	ldi	r22, 0x02	; 2
    17d8:	89 e0       	ldi	r24, 0x09	; 9
    17da:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    17de:	40 ef       	ldi	r20, 0xF0	; 240
    17e0:	63 e0       	ldi	r22, 0x03	; 3
    17e2:	85 e0       	ldi	r24, 0x05	; 5
    17e4:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    17e8:	40 ef       	ldi	r20, 0xF0	; 240
    17ea:	65 e0       	ldi	r22, 0x05	; 5
    17ec:	89 e0       	ldi	r24, 0x09	; 9
    17ee:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    17f2:	40 ef       	ldi	r20, 0xF0	; 240
    17f4:	66 e0       	ldi	r22, 0x06	; 6
    17f6:	89 e0       	ldi	r24, 0x09	; 9
    17f8:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    17fc:	40 ef       	ldi	r20, 0xF0	; 240
    17fe:	67 e0       	ldi	r22, 0x07	; 7
    1800:	89 e0       	ldi	r24, 0x09	; 9
    1802:	0e 94 19 08 	call	0x1032	; 0x1032 <ledmatrix_update_pixel>
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <game_countdown>:
    180c:	8f 92       	push	r8
    180e:	9f 92       	push	r9
    1810:	af 92       	push	r10
    1812:	bf 92       	push	r11
    1814:	cf 92       	push	r12
    1816:	df 92       	push	r13
    1818:	ef 92       	push	r14
    181a:	ff 92       	push	r15
    181c:	0e 94 31 12 	call	0x2462	; 0x2462 <get_current_time>
    1820:	4b 01       	movw	r8, r22
    1822:	5c 01       	movw	r10, r24
    1824:	83 e0       	ldi	r24, 0x03	; 3
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	0e 94 83 0a 	call	0x1506	; 0x1506 <display_countdown>
    182c:	0e 94 31 12 	call	0x2462	; 0x2462 <get_current_time>
    1830:	6b 01       	movw	r12, r22
    1832:	7c 01       	movw	r14, r24
    1834:	ab 01       	movw	r20, r22
    1836:	bc 01       	movw	r22, r24
    1838:	48 19       	sub	r20, r8
    183a:	59 09       	sbc	r21, r9
    183c:	6a 09       	sbc	r22, r10
    183e:	7b 09       	sbc	r23, r11
    1840:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    1844:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <game_speed+0x1>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	a0 e0       	ldi	r26, 0x00	; 0
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	48 17       	cp	r20, r24
    1852:	59 07       	cpc	r21, r25
    1854:	6a 07       	cpc	r22, r26
    1856:	7b 07       	cpc	r23, r27
    1858:	48 f3       	brcs	.-46     	; 0x182c <game_countdown+0x20>
    185a:	82 e0       	ldi	r24, 0x02	; 2
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0e 94 83 0a 	call	0x1506	; 0x1506 <display_countdown>
    1862:	0e 94 31 12 	call	0x2462	; 0x2462 <get_current_time>
    1866:	4b 01       	movw	r8, r22
    1868:	5c 01       	movw	r10, r24
    186a:	ab 01       	movw	r20, r22
    186c:	bc 01       	movw	r22, r24
    186e:	4c 19       	sub	r20, r12
    1870:	5d 09       	sbc	r21, r13
    1872:	6e 09       	sbc	r22, r14
    1874:	7f 09       	sbc	r23, r15
    1876:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    187a:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <game_speed+0x1>
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	a0 e0       	ldi	r26, 0x00	; 0
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	48 17       	cp	r20, r24
    1888:	59 07       	cpc	r21, r25
    188a:	6a 07       	cpc	r22, r26
    188c:	7b 07       	cpc	r23, r27
    188e:	48 f3       	brcs	.-46     	; 0x1862 <game_countdown+0x56>
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 83 0a 	call	0x1506	; 0x1506 <display_countdown>
    1898:	0e 94 31 12 	call	0x2462	; 0x2462 <get_current_time>
    189c:	6b 01       	movw	r12, r22
    189e:	7c 01       	movw	r14, r24
    18a0:	ab 01       	movw	r20, r22
    18a2:	bc 01       	movw	r22, r24
    18a4:	48 19       	sub	r20, r8
    18a6:	59 09       	sbc	r21, r9
    18a8:	6a 09       	sbc	r22, r10
    18aa:	7b 09       	sbc	r23, r11
    18ac:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    18b0:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <game_speed+0x1>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	a0 e0       	ldi	r26, 0x00	; 0
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	48 17       	cp	r20, r24
    18be:	59 07       	cpc	r21, r25
    18c0:	6a 07       	cpc	r22, r26
    18c2:	7b 07       	cpc	r23, r27
    18c4:	48 f3       	brcs	.-46     	; 0x1898 <game_countdown+0x8c>
    18c6:	84 e0       	ldi	r24, 0x04	; 4
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 83 0a 	call	0x1506	; 0x1506 <display_countdown>
    18ce:	0e 94 31 12 	call	0x2462	; 0x2462 <get_current_time>
    18d2:	ab 01       	movw	r20, r22
    18d4:	bc 01       	movw	r22, r24
    18d6:	4c 19       	sub	r20, r12
    18d8:	5d 09       	sbc	r21, r13
    18da:	6e 09       	sbc	r22, r14
    18dc:	7f 09       	sbc	r23, r15
    18de:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    18e2:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <game_speed+0x1>
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	a0 e0       	ldi	r26, 0x00	; 0
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	48 17       	cp	r20, r24
    18f0:	59 07       	cpc	r21, r25
    18f2:	6a 07       	cpc	r22, r26
    18f4:	7b 07       	cpc	r23, r27
    18f6:	58 f3       	brcs	.-42     	; 0x18ce <game_countdown+0xc2>
    18f8:	ff 90       	pop	r15
    18fa:	ef 90       	pop	r14
    18fc:	df 90       	pop	r13
    18fe:	cf 90       	pop	r12
    1900:	bf 90       	pop	r11
    1902:	af 90       	pop	r10
    1904:	9f 90       	pop	r9
    1906:	8f 90       	pop	r8
    1908:	08 95       	ret

0000190a <ssd_display>:
    190a:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
    190e:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <points+0x1>
    1912:	8a 30       	cpi	r24, 0x0A	; 10
    1914:	91 05       	cpc	r25, r1
    1916:	08 f4       	brcc	.+2      	; 0x191a <ssd_display+0x10>
    1918:	61 c0       	rjmp	.+194    	; 0x19dc <ssd_display+0xd2>
    191a:	9c 01       	movw	r18, r24
    191c:	2a 50       	subi	r18, 0x0A	; 10
    191e:	31 09       	sbc	r19, r1
    1920:	2a 35       	cpi	r18, 0x5A	; 90
    1922:	31 05       	cpc	r19, r1
    1924:	28 f4       	brcc	.+10     	; 0x1930 <ssd_display+0x26>
    1926:	6a e0       	ldi	r22, 0x0A	; 10
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__divmodhi4>
    192e:	2a c0       	rjmp	.+84     	; 0x1984 <ssd_display+0x7a>
    1930:	84 36       	cpi	r24, 0x64	; 100
    1932:	91 05       	cpc	r25, r1
    1934:	7c f0       	brlt	.+30     	; 0x1954 <ssd_display+0x4a>
    1936:	2a e0       	ldi	r18, 0x0A	; 10
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	b9 01       	movw	r22, r18
    193c:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__divmodhi4>
    1940:	e8 2f       	mov	r30, r24
    1942:	49 2f       	mov	r20, r25
    1944:	cb 01       	movw	r24, r22
    1946:	b9 01       	movw	r22, r18
    1948:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__divmodhi4>
    194c:	bc 01       	movw	r22, r24
    194e:	8e 2f       	mov	r24, r30
    1950:	94 2f       	mov	r25, r20
    1952:	18 c0       	rjmp	.+48     	; 0x1984 <ssd_display+0x7a>
    1954:	9c 01       	movw	r18, r24
    1956:	27 5f       	subi	r18, 0xF7	; 247
    1958:	3f 4f       	sbci	r19, 0xFF	; 255
    195a:	29 30       	cpi	r18, 0x09	; 9
    195c:	31 05       	cpc	r19, r1
    195e:	30 f4       	brcc	.+12     	; 0x196c <ssd_display+0x62>
    1960:	91 95       	neg	r25
    1962:	81 95       	neg	r24
    1964:	91 09       	sbc	r25, r1
    1966:	6a e0       	ldi	r22, 0x0A	; 10
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	0c c0       	rjmp	.+24     	; 0x1984 <ssd_display+0x7a>
    196c:	87 3f       	cpi	r24, 0xF7	; 247
    196e:	2f ef       	ldi	r18, 0xFF	; 255
    1970:	92 07       	cpc	r25, r18
    1972:	24 f0       	brlt	.+8      	; 0x197c <ssd_display+0x72>
    1974:	bc 01       	movw	r22, r24
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	04 c0       	rjmp	.+8      	; 0x1984 <ssd_display+0x7a>
    197c:	8a e0       	ldi	r24, 0x0A	; 10
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	6a e0       	ldi	r22, 0x0A	; 10
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	20 91 31 06 	lds	r18, 0x0631	; 0x800631 <seven_seg_cc>
    1988:	30 91 32 06 	lds	r19, 0x0632	; 0x800632 <seven_seg_cc+0x1>
    198c:	23 2b       	or	r18, r19
    198e:	99 f0       	breq	.+38     	; 0x19b6 <ssd_display+0xac>
    1990:	8b b1       	in	r24, 0x0b	; 11
    1992:	84 60       	ori	r24, 0x04	; 4
    1994:	8b b9       	out	0x0b, r24	; 11
    1996:	fb 01       	movw	r30, r22
    1998:	ef 5f       	subi	r30, 0xFF	; 255
    199a:	fe 4f       	sbci	r31, 0xFE	; 254
    199c:	80 81       	ld	r24, Z
    199e:	88 b9       	out	0x08, r24	; 8
    19a0:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <seven_seg_cc>
    19a4:	90 91 32 06 	lds	r25, 0x0632	; 0x800632 <seven_seg_cc+0x1>
    19a8:	21 e0       	ldi	r18, 0x01	; 1
    19aa:	82 27       	eor	r24, r18
    19ac:	90 93 32 06 	sts	0x0632, r25	; 0x800632 <seven_seg_cc+0x1>
    19b0:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <seven_seg_cc>
    19b4:	08 95       	ret
    19b6:	2b b1       	in	r18, 0x0b	; 11
    19b8:	2b 7f       	andi	r18, 0xFB	; 251
    19ba:	2b b9       	out	0x0b, r18	; 11
    19bc:	fc 01       	movw	r30, r24
    19be:	ef 5f       	subi	r30, 0xFF	; 255
    19c0:	fe 4f       	sbci	r31, 0xFE	; 254
    19c2:	80 81       	ld	r24, Z
    19c4:	88 b9       	out	0x08, r24	; 8
    19c6:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <seven_seg_cc>
    19ca:	90 91 32 06 	lds	r25, 0x0632	; 0x800632 <seven_seg_cc+0x1>
    19ce:	21 e0       	ldi	r18, 0x01	; 1
    19d0:	82 27       	eor	r24, r18
    19d2:	90 93 32 06 	sts	0x0632, r25	; 0x800632 <seven_seg_cc+0x1>
    19d6:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <seven_seg_cc>
    19da:	08 95       	ret
    19dc:	20 91 31 06 	lds	r18, 0x0631	; 0x800631 <seven_seg_cc>
    19e0:	30 91 32 06 	lds	r19, 0x0632	; 0x800632 <seven_seg_cc+0x1>
    19e4:	23 2b       	or	r18, r19
    19e6:	31 f0       	breq	.+12     	; 0x19f4 <ssd_display+0xea>
    19e8:	fc 01       	movw	r30, r24
    19ea:	ef 5f       	subi	r30, 0xFF	; 255
    19ec:	fe 4f       	sbci	r31, 0xFE	; 254
    19ee:	80 81       	ld	r24, Z
    19f0:	88 b9       	out	0x08, r24	; 8
    19f2:	08 95       	ret
    19f4:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <seven_seg_cc>
    19f8:	90 91 32 06 	lds	r25, 0x0632	; 0x800632 <seven_seg_cc+0x1>
    19fc:	21 e0       	ldi	r18, 0x01	; 1
    19fe:	82 27       	eor	r24, r18
    1a00:	90 93 32 06 	sts	0x0632, r25	; 0x800632 <seven_seg_cc+0x1>
    1a04:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <seven_seg_cc>
    1a08:	08 95       	ret

00001a0a <new_game>:
    1a0a:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <clear_terminal>
    1a0e:	10 92 3d 06 	sts	0x063D, r1	; 0x80063d <points+0x1>
    1a12:	10 92 3c 06 	sts	0x063C, r1	; 0x80063c <points>
    1a16:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <combo_count+0x1>
    1a1a:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <combo_count>
    1a1e:	0e 94 06 0c 	call	0x180c	; 0x180c <game_countdown>
    1a22:	0e 94 b3 05 	call	0xb66	; 0xb66 <initialise_game>
    1a26:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    1a2a:	0e 94 0d 11 	call	0x221a	; 0x221a <clear_serial_input_buffer>
    1a2e:	08 95       	ret

00001a30 <joy_stick>:
    1a30:	ea e7       	ldi	r30, 0x7A	; 122
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	80 64       	ori	r24, 0x40	; 64
    1a38:	80 83       	st	Z, r24
    1a3a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1a3e:	86 fd       	sbrc	r24, 6
    1a40:	fc cf       	rjmp	.-8      	; 0x1a3a <joy_stick+0xa>
    1a42:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1a46:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1a4a:	08 95       	ret

00001a4c <play_game>:
		printf("ADC value is: %d", adc_val);
	} */
}

void play_game(void)
{
    1a4c:	4f 92       	push	r4
    1a4e:	5f 92       	push	r5
    1a50:	6f 92       	push	r6
    1a52:	7f 92       	push	r7
    1a54:	8f 92       	push	r8
    1a56:	9f 92       	push	r9
    1a58:	af 92       	push	r10
    1a5a:	bf 92       	push	r11
    1a5c:	cf 92       	push	r12
    1a5e:	df 92       	push	r13
    1a60:	ef 92       	push	r14
    1a62:	ff 92       	push	r15
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <play_game+0x22>
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <play_game+0x24>
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <play_game+0x26>
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
	
	int8_t btn; // The button pushed
	
	int combo_line = 0;
	
	last_advance_time = get_current_time();
    1a76:	0e 94 31 12 	call	0x2462	; 0x2462 <get_current_time>
    1a7a:	4b 01       	movw	r8, r22
    1a7c:	5c 01       	movw	r10, r24
	
	//Display current track
	move_terminal_cursor(10, 15);
    1a7e:	6f e0       	ldi	r22, 0x0F	; 15
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	8a e0       	ldi	r24, 0x0A	; 10
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
	printf("Track: %s", track_name);													//do %s and add a new track title at the end.
    1a8a:	82 e4       	ldi	r24, 0x42	; 66
    1a8c:	96 e0       	ldi	r25, 0x06	; 6
    1a8e:	9f 93       	push	r25
    1a90:	8f 93       	push	r24
    1a92:	80 e7       	ldi	r24, 0x70	; 112
    1a94:	93 e0       	ldi	r25, 0x03	; 3
    1a96:	9f 93       	push	r25
    1a98:	8f 93       	push	r24
    1a9a:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
	
	move_terminal_cursor(10, 18);
    1a9e:	62 e1       	ldi	r22, 0x12	; 18
    1aa0:	70 e0       	ldi	r23, 0x00	; 0
    1aa2:	8a e0       	ldi	r24, 0x0A	; 10
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
	clear_to_end_of_line();
    1aaa:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <clear_to_end_of_line>
	//update terminal line appropriately
	if (game_speed == 1000) {
    1aae:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    1ab2:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <game_speed+0x1>
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	88 3e       	cpi	r24, 0xE8	; 232
    1ac0:	23 e0       	ldi	r18, 0x03	; 3
    1ac2:	92 07       	cpc	r25, r18
    1ac4:	69 f4       	brne	.+26     	; 0x1ae0 <play_game+0x94>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    1ac6:	9f 93       	push	r25
    1ac8:	8f 93       	push	r24
    1aca:	8a e7       	ldi	r24, 0x7A	; 122
    1acc:	93 e0       	ldi	r25, 0x03	; 3
    1ace:	9f 93       	push	r25
    1ad0:	8f 93       	push	r24
    1ad2:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	20 c0       	rjmp	.+64     	; 0x1b20 <play_game+0xd4>
		
	} else if (game_speed == 500) {
    1ae0:	84 3f       	cpi	r24, 0xF4	; 244
    1ae2:	31 e0       	ldi	r19, 0x01	; 1
    1ae4:	93 07       	cpc	r25, r19
    1ae6:	69 f4       	brne	.+26     	; 0x1b02 <play_game+0xb6>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1ae8:	9f 93       	push	r25
    1aea:	8f 93       	push	r24
    1aec:	80 ea       	ldi	r24, 0xA0	; 160
    1aee:	93 e0       	ldi	r25, 0x03	; 3
    1af0:	9f 93       	push	r25
    1af2:	8f 93       	push	r24
    1af4:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f c0       	rjmp	.+30     	; 0x1b20 <play_game+0xd4>
		
	} else if (game_speed == 250) {
    1b02:	8a 3f       	cpi	r24, 0xFA	; 250
    1b04:	91 05       	cpc	r25, r1
    1b06:	61 f4       	brne	.+24     	; 0x1b20 <play_game+0xd4>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1b08:	9f 93       	push	r25
    1b0a:	8f 93       	push	r24
    1b0c:	84 ec       	ldi	r24, 0xC4	; 196
    1b0e:	93 e0       	ldi	r25, 0x03	; 3
    1b10:	9f 93       	push	r25
    1b12:	8f 93       	push	r24
    1b14:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
		if (!man_mode & !paused) {
			current_time = get_current_time();
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
			{
				pause_time = 0;
    1b20:	1e 82       	std	Y+6, r1	; 0x06
    1b22:	1d 82       	std	Y+5, r1	; 0x05
    1b24:	c1 2c       	mov	r12, r1
    1b26:	d1 2c       	mov	r13, r1
    1b28:	76 01       	movw	r14, r12
    1b2a:	f8 c1       	rjmp	.+1008   	; 0x1f1c <play_game+0x4d0>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
    1b2c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    1b30:	08 2f       	mov	r16, r24
		
		char keyboard_input = -1;
		
		if (serial_input_available()) {
    1b32:	0e 94 06 11 	call	0x220c	; 0x220c <serial_input_available>
    1b36:	88 23       	and	r24, r24
    1b38:	41 f0       	breq	.+16     	; 0x1b4a <play_game+0xfe>
			keyboard_input = fgetc(stdin);
    1b3a:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <__iob>
    1b3e:	90 91 82 07 	lds	r25, 0x0782	; 0x800782 <__iob+0x1>
    1b42:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <fgetc>
    1b46:	18 2f       	mov	r17, r24
    1b48:	01 c0       	rjmp	.+2      	; 0x1b4c <play_game+0x100>
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
		
		char keyboard_input = -1;
    1b4a:	1f ef       	ldi	r17, 0xFF	; 255
		
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		frequency_joy(joy_stick());
    1b4c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <joy_stick>
		
		if (!paused) {
    1b50:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <paused>
    1b54:	90 91 34 06 	lds	r25, 0x0634	; 0x800634 <paused+0x1>
    1b58:	89 2b       	or	r24, r25
    1b5a:	39 f5       	brne	.+78     	; 0x1baa <play_game+0x15e>
			if ((btn == BUTTON0_PUSHED) || (keyboard_input == 'f' || keyboard_input == 'F')) {
    1b5c:	00 23       	and	r16, r16
    1b5e:	21 f0       	breq	.+8      	; 0x1b68 <play_game+0x11c>
    1b60:	16 36       	cpi	r17, 0x66	; 102
    1b62:	11 f0       	breq	.+4      	; 0x1b68 <play_game+0x11c>
    1b64:	16 34       	cpi	r17, 0x46	; 70
    1b66:	21 f4       	brne	.+8      	; 0x1b70 <play_game+0x124>
				// If button 0 play the lowest note (right lane)
				play_note(3);
    1b68:	83 e0       	ldi	r24, 0x03	; 3
    1b6a:	0e 94 c4 05 	call	0xb88	; 0xb88 <play_note>
    1b6e:	1d c0       	rjmp	.+58     	; 0x1baa <play_game+0x15e>
		
			} else if ((btn == BUTTON1_PUSHED) || (keyboard_input == 'd' || keyboard_input == 'D')) {
    1b70:	01 30       	cpi	r16, 0x01	; 1
    1b72:	21 f0       	breq	.+8      	; 0x1b7c <play_game+0x130>
    1b74:	14 36       	cpi	r17, 0x64	; 100
    1b76:	11 f0       	breq	.+4      	; 0x1b7c <play_game+0x130>
    1b78:	14 34       	cpi	r17, 0x44	; 68
    1b7a:	21 f4       	brne	.+8      	; 0x1b84 <play_game+0x138>
				//If button 1 is pushed play the second lowest note
				play_note(2);		
    1b7c:	82 e0       	ldi	r24, 0x02	; 2
    1b7e:	0e 94 c4 05 	call	0xb88	; 0xb88 <play_note>
    1b82:	13 c0       	rjmp	.+38     	; 0x1baa <play_game+0x15e>
		
			} else if ((btn == BUTTON2_PUSHED) || (keyboard_input == 's' || keyboard_input == 'S')) {
    1b84:	02 30       	cpi	r16, 0x02	; 2
    1b86:	21 f0       	breq	.+8      	; 0x1b90 <play_game+0x144>
    1b88:	13 37       	cpi	r17, 0x73	; 115
    1b8a:	11 f0       	breq	.+4      	; 0x1b90 <play_game+0x144>
    1b8c:	13 35       	cpi	r17, 0x53	; 83
    1b8e:	21 f4       	brne	.+8      	; 0x1b98 <play_game+0x14c>
				//If button 2 is pushed play the second highest note
				play_note(1); 
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	0e 94 c4 05 	call	0xb88	; 0xb88 <play_note>
    1b96:	09 c0       	rjmp	.+18     	; 0x1baa <play_game+0x15e>
				
			} else if ((btn == BUTTON3_PUSHED) || (keyboard_input == 'a' || keyboard_input == 'A')) {
    1b98:	03 30       	cpi	r16, 0x03	; 3
    1b9a:	21 f0       	breq	.+8      	; 0x1ba4 <play_game+0x158>
    1b9c:	11 36       	cpi	r17, 0x61	; 97
    1b9e:	11 f0       	breq	.+4      	; 0x1ba4 <play_game+0x158>
    1ba0:	11 34       	cpi	r17, 0x41	; 65
    1ba2:	19 f4       	brne	.+6      	; 0x1baa <play_game+0x15e>
				//If button 3 is pushed play the highest note
				play_note(0);
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	0e 94 c4 05 	call	0xb88	; 0xb88 <play_note>
			
			} 
		}
		
		if (keyboard_input == 'm' || keyboard_input == 'M') {
    1baa:	1d 36       	cpi	r17, 0x6D	; 109
    1bac:	11 f0       	breq	.+4      	; 0x1bb2 <play_game+0x166>
    1bae:	1d 34       	cpi	r17, 0x4D	; 77
    1bb0:	39 f5       	brne	.+78     	; 0x1c00 <play_game+0x1b4>
			//check to see if the game is currently paused
			if (!paused) {
    1bb2:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <paused>
    1bb6:	90 91 34 06 	lds	r25, 0x0634	; 0x800634 <paused+0x1>
    1bba:	89 2b       	or	r24, r25
    1bbc:	09 f5       	brne	.+66     	; 0x1c00 <play_game+0x1b4>
				//clear manual mode alert
				move_terminal_cursor(10, 16);
    1bbe:	60 e1       	ldi	r22, 0x10	; 16
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	8a e0       	ldi	r24, 0x0A	; 10
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
				clear_to_end_of_line();
    1bca:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <clear_to_end_of_line>
				if (man_mode) {
    1bce:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <man_mode>
    1bd2:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <man_mode+0x1>
    1bd6:	89 2b       	or	r24, r25
    1bd8:	29 f0       	breq	.+10     	; 0x1be4 <play_game+0x198>
					man_mode = 0;
    1bda:	10 92 36 06 	sts	0x0636, r1	; 0x800636 <man_mode+0x1>
    1bde:	10 92 35 06 	sts	0x0635, r1	; 0x800635 <man_mode>
    1be2:	0e c0       	rjmp	.+28     	; 0x1c00 <play_game+0x1b4>
		
				} else {
					man_mode = 1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	90 93 36 06 	sts	0x0636, r25	; 0x800636 <man_mode+0x1>
    1bec:	80 93 35 06 	sts	0x0635, r24	; 0x800635 <man_mode>
					
					//print to terminal that manual mode is on
					printf("Manual Mode: ON");
    1bf0:	8b ee       	ldi	r24, 0xEB	; 235
    1bf2:	93 e0       	ldi	r25, 0x03	; 3
    1bf4:	9f 93       	push	r25
    1bf6:	8f 93       	push	r24
    1bf8:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
				}
			}	
		}
		
		if (keyboard_input == 'p' || keyboard_input == 'P') {
    1c00:	10 37       	cpi	r17, 0x70	; 112
    1c02:	11 f0       	breq	.+4      	; 0x1c08 <play_game+0x1bc>
    1c04:	10 35       	cpi	r17, 0x50	; 80
    1c06:	d9 f5       	brne	.+118    	; 0x1c7e <play_game+0x232>
			//clear pause line in terminal
			move_terminal_cursor(10, 17);
    1c08:	61 e1       	ldi	r22, 0x11	; 17
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	8a e0       	ldi	r24, 0x0A	; 10
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
			clear_to_end_of_line();
    1c14:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <clear_to_end_of_line>
			if (paused) {
    1c18:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <paused>
    1c1c:	90 91 34 06 	lds	r25, 0x0634	; 0x800634 <paused+0x1>
    1c20:	89 2b       	or	r24, r25
    1c22:	71 f0       	breq	.+28     	; 0x1c40 <play_game+0x1f4>
				paused = 0;
    1c24:	10 92 34 06 	sts	0x0634, r1	; 0x800634 <paused+0x1>
    1c28:	10 92 33 06 	sts	0x0633, r1	; 0x800633 <paused>
				PORTD = PORTD & 0b11110111;
    1c2c:	8b b1       	in	r24, 0x0b	; 11
    1c2e:	87 7f       	andi	r24, 0xF7	; 247
    1c30:	8b b9       	out	0x0b, r24	; 11
				
				//un-pause sound
				pause_control(paused);
    1c32:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <paused>
    1c36:	90 91 34 06 	lds	r25, 0x0634	; 0x800634 <paused+0x1>
    1c3a:	0e 94 19 13 	call	0x2632	; 0x2632 <pause_control>
    1c3e:	1f c0       	rjmp	.+62     	; 0x1c7e <play_game+0x232>
			
			} else {
				paused = 1;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	90 93 34 06 	sts	0x0634, r25	; 0x800634 <paused+0x1>
    1c48:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <paused>
				pause_time = get_current_time() - last_advance_time; 
    1c4c:	0e 94 31 12 	call	0x2462	; 0x2462 <get_current_time>
    1c50:	6b 01       	movw	r12, r22
    1c52:	7c 01       	movw	r14, r24
    1c54:	c8 18       	sub	r12, r8
    1c56:	d9 08       	sbc	r13, r9
    1c58:	ea 08       	sbc	r14, r10
    1c5a:	fb 08       	sbc	r15, r11
					
				PORTD = PORTD | (1<<3); //essentially just PORTD | 0b00001000
    1c5c:	8b b1       	in	r24, 0x0b	; 11
    1c5e:	88 60       	ori	r24, 0x08	; 8
    1c60:	8b b9       	out	0x0b, r24	; 11
									
				//pause the sound
				pause_control(paused);
    1c62:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <paused>
    1c66:	90 91 34 06 	lds	r25, 0x0634	; 0x800634 <paused+0x1>
    1c6a:	0e 94 19 13 	call	0x2632	; 0x2632 <pause_control>
					
				//tell user that game is currently paused
				printf("Game Paused");
    1c6e:	8b ef       	ldi	r24, 0xFB	; 251
    1c70:	93 e0       	ldi	r25, 0x03	; 3
    1c72:	9f 93       	push	r25
    1c74:	8f 93       	push	r24
    1c76:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
			}
				
		}
		
		//Combo IO board LED's
		if (combo_count == 0) {
    1c7e:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <combo_count>
    1c82:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <combo_count+0x1>
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	21 f4       	brne	.+8      	; 0x1c92 <play_game+0x246>
			//set portD outputs to the I/O boards LED matrix to be 0
			PORTD = PORTD & 0b00011111;
    1c8a:	8b b1       	in	r24, 0x0b	; 11
    1c8c:	8f 71       	andi	r24, 0x1F	; 31
    1c8e:	8b b9       	out	0x0b, r24	; 11
    1c90:	13 c0       	rjmp	.+38     	; 0x1cb8 <play_game+0x26c>

		} else if (combo_count == 1) {
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	91 05       	cpc	r25, r1
    1c96:	21 f4       	brne	.+8      	; 0x1ca0 <play_game+0x254>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<5); 
    1c98:	8b b1       	in	r24, 0x0b	; 11
    1c9a:	80 62       	ori	r24, 0x20	; 32
    1c9c:	8b b9       	out	0x0b, r24	; 11
    1c9e:	0c c0       	rjmp	.+24     	; 0x1cb8 <play_game+0x26c>
			
		} else if (combo_count == 2) {
    1ca0:	82 30       	cpi	r24, 0x02	; 2
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	21 f4       	brne	.+8      	; 0x1cae <play_game+0x262>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<6);
    1ca6:	8b b1       	in	r24, 0x0b	; 11
    1ca8:	80 64       	ori	r24, 0x40	; 64
    1caa:	8b b9       	out	0x0b, r24	; 11
    1cac:	05 c0       	rjmp	.+10     	; 0x1cb8 <play_game+0x26c>
			
		} else if (combo_count >= 3) {
    1cae:	03 97       	sbiw	r24, 0x03	; 3
    1cb0:	1c f0       	brlt	.+6      	; 0x1cb8 <play_game+0x26c>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<7);
    1cb2:	8b b1       	in	r24, 0x0b	; 11
    1cb4:	80 68       	ori	r24, 0x80	; 128
    1cb6:	8b b9       	out	0x0b, r24	; 11
		}
		
		//Combo display
		if ((combo_check) && (combo_line == 0)) {
    1cb8:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <combo_check>
    1cbc:	90 91 62 06 	lds	r25, 0x0662	; 0x800662 <combo_check+0x1>
    1cc0:	89 2b       	or	r24, r25
    1cc2:	c1 f0       	breq	.+48     	; 0x1cf4 <play_game+0x2a8>
    1cc4:	4d 81       	ldd	r20, Y+5	; 0x05
    1cc6:	5e 81       	ldd	r21, Y+6	; 0x06
    1cc8:	45 2b       	or	r20, r21
    1cca:	a1 f4       	brne	.+40     	; 0x1cf4 <play_game+0x2a8>
			move_terminal_cursor(10, 3);
    1ccc:	63 e0       	ldi	r22, 0x03	; 3
    1cce:	70 e0       	ldi	r23, 0x00	; 0
    1cd0:	8a e0       	ldi	r24, 0x0A	; 10
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
			printf("  ______                           __                  __");
    1cd8:	87 e0       	ldi	r24, 0x07	; 7
    1cda:	94 e0       	ldi	r25, 0x04	; 4
    1cdc:	9f 93       	push	r25
    1cde:	8f 93       	push	r24
    1ce0:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
			
			combo_line++; //increment combo line so in next loop the next line is printed of ascii art
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	8d 83       	std	Y+5, r24	; 0x05
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	ca c0       	rjmp	.+404    	; 0x1e88 <play_game+0x43c>
		} else if (combo_line == 1) {
    1cf4:	2d 81       	ldd	r18, Y+5	; 0x05
    1cf6:	3e 81       	ldd	r19, Y+6	; 0x06
    1cf8:	21 30       	cpi	r18, 0x01	; 1
    1cfa:	31 05       	cpc	r19, r1
    1cfc:	a9 f4       	brne	.+42     	; 0x1d28 <play_game+0x2dc>
			move_terminal_cursor(10,4);
    1cfe:	64 e0       	ldi	r22, 0x04	; 4
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	8a e0       	ldi	r24, 0x0A	; 10
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
			printf(" /      \\                         |  \\                |  \\");
    1d0a:	81 e4       	ldi	r24, 0x41	; 65
    1d0c:	94 e0       	ldi	r25, 0x04	; 4
    1d0e:	9f 93       	push	r25
    1d10:	8f 93       	push	r24
    1d12:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
			
			combo_line++;
    1d16:	4d 81       	ldd	r20, Y+5	; 0x05
    1d18:	5e 81       	ldd	r21, Y+6	; 0x06
    1d1a:	4f 5f       	subi	r20, 0xFF	; 255
    1d1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d1e:	5e 83       	std	Y+6, r21	; 0x06
    1d20:	4d 83       	std	Y+5, r20	; 0x05
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	b0 c0       	rjmp	.+352    	; 0x1e88 <play_game+0x43c>
		} else if (combo_line == 2) {
    1d28:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2c:	02 97       	sbiw	r24, 0x02	; 2
    1d2e:	a9 f4       	brne	.+42     	; 0x1d5a <play_game+0x30e>
			move_terminal_cursor(10,5);
    1d30:	65 e0       	ldi	r22, 0x05	; 5
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	8a e0       	ldi	r24, 0x0A	; 10
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
			printf("|  $$$$$$\\  ______   ______ ____  | $$____    ______  | $$");
    1d3c:	8c e7       	ldi	r24, 0x7C	; 124
    1d3e:	94 e0       	ldi	r25, 0x04	; 4
    1d40:	9f 93       	push	r25
    1d42:	8f 93       	push	r24
    1d44:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
			
			combo_line++;
    1d48:	2d 81       	ldd	r18, Y+5	; 0x05
    1d4a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d4c:	2f 5f       	subi	r18, 0xFF	; 255
    1d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d50:	3e 83       	std	Y+6, r19	; 0x06
    1d52:	2d 83       	std	Y+5, r18	; 0x05
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	97 c0       	rjmp	.+302    	; 0x1e88 <play_game+0x43c>
		} else if (combo_line == 3) {
    1d5a:	4d 81       	ldd	r20, Y+5	; 0x05
    1d5c:	5e 81       	ldd	r21, Y+6	; 0x06
    1d5e:	43 30       	cpi	r20, 0x03	; 3
    1d60:	51 05       	cpc	r21, r1
    1d62:	a1 f4       	brne	.+40     	; 0x1d8c <play_game+0x340>
			move_terminal_cursor(10,6);
    1d64:	66 e0       	ldi	r22, 0x06	; 6
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	8a e0       	ldi	r24, 0x0A	; 10
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
			printf("| $$   \\$$ /      \\ |      \\    \\ | $$    \\  /      \\ | $$");
    1d70:	87 eb       	ldi	r24, 0xB7	; 183
    1d72:	94 e0       	ldi	r25, 0x04	; 4
    1d74:	9f 93       	push	r25
    1d76:	8f 93       	push	r24
    1d78:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
			
			combo_line++;
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	01 96       	adiw	r24, 0x01	; 1
    1d82:	9e 83       	std	Y+6, r25	; 0x06
    1d84:	8d 83       	std	Y+5, r24	; 0x05
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	7e c0       	rjmp	.+252    	; 0x1e88 <play_game+0x43c>
		} else if (combo_line == 4) {
    1d8c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d8e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d90:	24 30       	cpi	r18, 0x04	; 4
    1d92:	31 05       	cpc	r19, r1
    1d94:	a9 f4       	brne	.+42     	; 0x1dc0 <play_game+0x374>
			move_terminal_cursor(10,7);
    1d96:	67 e0       	ldi	r22, 0x07	; 7
    1d98:	70 e0       	ldi	r23, 0x00	; 0
    1d9a:	8a e0       	ldi	r24, 0x0A	; 10
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
			printf("| $$      |  $$$$$$\\| $$$$$$\\$$$$\\| $$$$$$$\\|  $$$$$$\\| $$");
    1da2:	82 ef       	ldi	r24, 0xF2	; 242
    1da4:	94 e0       	ldi	r25, 0x04	; 4
    1da6:	9f 93       	push	r25
    1da8:	8f 93       	push	r24
    1daa:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
			
			combo_line++;
    1dae:	4d 81       	ldd	r20, Y+5	; 0x05
    1db0:	5e 81       	ldd	r21, Y+6	; 0x06
    1db2:	4f 5f       	subi	r20, 0xFF	; 255
    1db4:	5f 4f       	sbci	r21, 0xFF	; 255
    1db6:	5e 83       	std	Y+6, r21	; 0x06
    1db8:	4d 83       	std	Y+5, r20	; 0x05
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	64 c0       	rjmp	.+200    	; 0x1e88 <play_game+0x43c>
		}  else if (combo_line == 5) {
    1dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc4:	05 97       	sbiw	r24, 0x05	; 5
    1dc6:	a9 f4       	brne	.+42     	; 0x1df2 <play_game+0x3a6>
			move_terminal_cursor(10,8);
    1dc8:	68 e0       	ldi	r22, 0x08	; 8
    1dca:	70 e0       	ldi	r23, 0x00	; 0
    1dcc:	8a e0       	ldi	r24, 0x0A	; 10
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
			printf("| $$   __ | $$  | $$| $$ | $$ | $$| $$  | $$| $$  | $$ \\$$");
    1dd4:	8d e2       	ldi	r24, 0x2D	; 45
    1dd6:	95 e0       	ldi	r25, 0x05	; 5
    1dd8:	9f 93       	push	r25
    1dda:	8f 93       	push	r24
    1ddc:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
			
			combo_line++;
    1de0:	2d 81       	ldd	r18, Y+5	; 0x05
    1de2:	3e 81       	ldd	r19, Y+6	; 0x06
    1de4:	2f 5f       	subi	r18, 0xFF	; 255
    1de6:	3f 4f       	sbci	r19, 0xFF	; 255
    1de8:	3e 83       	std	Y+6, r19	; 0x06
    1dea:	2d 83       	std	Y+5, r18	; 0x05
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	4b c0       	rjmp	.+150    	; 0x1e88 <play_game+0x43c>
		} else if (combo_line == 6) {
    1df2:	4d 81       	ldd	r20, Y+5	; 0x05
    1df4:	5e 81       	ldd	r21, Y+6	; 0x06
    1df6:	46 30       	cpi	r20, 0x06	; 6
    1df8:	51 05       	cpc	r21, r1
    1dfa:	a1 f4       	brne	.+40     	; 0x1e24 <play_game+0x3d8>
			move_terminal_cursor(10,9);
    1dfc:	69 e0       	ldi	r22, 0x09	; 9
    1dfe:	70 e0       	ldi	r23, 0x00	; 0
    1e00:	8a e0       	ldi	r24, 0x0A	; 10
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
			printf("| $$__/  \\| $$__/ $$| $$ | $$ | $$| $$__/ $$| $$__/ $$ __");
    1e08:	88 e6       	ldi	r24, 0x68	; 104
    1e0a:	95 e0       	ldi	r25, 0x05	; 5
    1e0c:	9f 93       	push	r25
    1e0e:	8f 93       	push	r24
    1e10:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
			
			combo_line++;
    1e14:	8d 81       	ldd	r24, Y+5	; 0x05
    1e16:	9e 81       	ldd	r25, Y+6	; 0x06
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	9e 83       	std	Y+6, r25	; 0x06
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	32 c0       	rjmp	.+100    	; 0x1e88 <play_game+0x43c>
		} else if (combo_line == 7) {
    1e24:	2d 81       	ldd	r18, Y+5	; 0x05
    1e26:	3e 81       	ldd	r19, Y+6	; 0x06
    1e28:	27 30       	cpi	r18, 0x07	; 7
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	a9 f4       	brne	.+42     	; 0x1e58 <play_game+0x40c>
			move_terminal_cursor(10,10);
    1e2e:	6a e0       	ldi	r22, 0x0A	; 10
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	8a e0       	ldi	r24, 0x0A	; 10
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
			printf(" \\$$    $$ \\$$    $$| $$ | $$ | $$| $$    $$ \\$$    $$|  \\");
    1e3a:	82 ea       	ldi	r24, 0xA2	; 162
    1e3c:	95 e0       	ldi	r25, 0x05	; 5
    1e3e:	9f 93       	push	r25
    1e40:	8f 93       	push	r24
    1e42:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
			
			combo_line++;
    1e46:	4d 81       	ldd	r20, Y+5	; 0x05
    1e48:	5e 81       	ldd	r21, Y+6	; 0x06
    1e4a:	4f 5f       	subi	r20, 0xFF	; 255
    1e4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4e:	5e 83       	std	Y+6, r21	; 0x06
    1e50:	4d 83       	std	Y+5, r20	; 0x05
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	18 c0       	rjmp	.+48     	; 0x1e88 <play_game+0x43c>
		} else if (combo_line == 8) {
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	08 97       	sbiw	r24, 0x08	; 8
    1e5e:	a1 f4       	brne	.+40     	; 0x1e88 <play_game+0x43c>
			move_terminal_cursor(10,11);
    1e60:	6b e0       	ldi	r22, 0x0B	; 11
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	8a e0       	ldi	r24, 0x0A	; 10
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
			printf("  \\$$$$$$   \\$$$$$$  \\$$  \\$$  \\$$ \\$$$$$$$   \\$$$$$$  \\$$");
    1e6c:	8d ed       	ldi	r24, 0xDD	; 221
    1e6e:	95 e0       	ldi	r25, 0x05	; 5
    1e70:	9f 93       	push	r25
    1e72:	8f 93       	push	r24
    1e74:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
			
			combo_line = 0;
			combo_check = 0;
    1e78:	10 92 62 06 	sts	0x0662, r1	; 0x800662 <combo_check+0x1>
    1e7c:	10 92 61 06 	sts	0x0661, r1	; 0x800661 <combo_check>
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
			combo_line++;
		} else if (combo_line == 8) {
			move_terminal_cursor(10,11);
			printf("  \\$$$$$$   \\$$$$$$  \\$$  \\$$  \\$$ \\$$$$$$$   \\$$$$$$  \\$$");
			
			combo_line = 0;
    1e84:	1e 82       	std	Y+6, r1	; 0x06
    1e86:	1d 82       	std	Y+5, r1	; 0x05
			combo_check = 0;
		}

		if (!man_mode & !paused) {
    1e88:	20 91 35 06 	lds	r18, 0x0635	; 0x800635 <man_mode>
    1e8c:	30 91 36 06 	lds	r19, 0x0636	; 0x800636 <man_mode+0x1>
    1e90:	91 e0       	ldi	r25, 0x01	; 1
    1e92:	40 91 33 06 	lds	r20, 0x0633	; 0x800633 <paused>
    1e96:	50 91 34 06 	lds	r21, 0x0634	; 0x800634 <paused+0x1>
    1e9a:	45 2b       	or	r20, r21
    1e9c:	09 f0       	breq	.+2      	; 0x1ea0 <play_game+0x454>
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	21 15       	cp	r18, r1
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <play_game+0x45e>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	89 23       	and	r24, r25
    1eac:	69 f1       	breq	.+90     	; 0x1f08 <play_game+0x4bc>
			current_time = get_current_time();
    1eae:	0e 94 31 12 	call	0x2462	; 0x2462 <get_current_time>
    1eb2:	69 83       	std	Y+1, r22	; 0x01
    1eb4:	7a 83       	std	Y+2, r23	; 0x02
    1eb6:	8b 83       	std	Y+3, r24	; 0x03
    1eb8:	9c 83       	std	Y+4, r25	; 0x04
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
    1eba:	2b 01       	movw	r4, r22
    1ebc:	3c 01       	movw	r6, r24
    1ebe:	4c 18       	sub	r4, r12
    1ec0:	5d 08       	sbc	r5, r13
    1ec2:	6e 08       	sbc	r6, r14
    1ec4:	7f 08       	sbc	r7, r15
    1ec6:	20 91 6b 06 	lds	r18, 0x066B	; 0x80066b <game_speed>
    1eca:	30 91 6c 06 	lds	r19, 0x066C	; 0x80066c <game_speed+0x1>
    1ece:	ad ec       	ldi	r26, 0xCD	; 205
    1ed0:	bc ec       	ldi	r27, 0xCC	; 204
    1ed2:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__umulhisi3>
    1ed6:	96 95       	lsr	r25
    1ed8:	87 95       	ror	r24
    1eda:	96 95       	lsr	r25
    1edc:	87 95       	ror	r24
    1ede:	a5 01       	movw	r20, r10
    1ee0:	94 01       	movw	r18, r8
    1ee2:	28 0f       	add	r18, r24
    1ee4:	39 1f       	adc	r19, r25
    1ee6:	41 1d       	adc	r20, r1
    1ee8:	51 1d       	adc	r21, r1
    1eea:	42 16       	cp	r4, r18
    1eec:	53 06       	cpc	r5, r19
    1eee:	64 06       	cpc	r6, r20
    1ef0:	75 06       	cpc	r7, r21
    1ef2:	a0 f0       	brcs	.+40     	; 0x1f1c <play_game+0x4d0>
			{
				pause_time = 0;
				// 200ms (0.2 second) has passed since the last time we advance the
				// notes here, so update the advance the notes
				advance_note();
    1ef4:	0e 94 ab 06 	call	0xd56	; 0xd56 <advance_note>
				
				// Update the most recent time the notes were advanced
				last_advance_time = current_time;
    1ef8:	89 80       	ldd	r8, Y+1	; 0x01
    1efa:	9a 80       	ldd	r9, Y+2	; 0x02
    1efc:	ab 80       	ldd	r10, Y+3	; 0x03
    1efe:	bc 80       	ldd	r11, Y+4	; 0x04
		if (!man_mode & !paused) {
			current_time = get_current_time();
			
			if (current_time - pause_time >= last_advance_time + game_speed/5)
			{
				pause_time = 0;
    1f00:	c1 2c       	mov	r12, r1
    1f02:	d1 2c       	mov	r13, r1
    1f04:	76 01       	movw	r14, r12
    1f06:	0a c0       	rjmp	.+20     	; 0x1f1c <play_game+0x4d0>
				
				// Update the most recent time the notes were advanced
				last_advance_time = current_time;
			}
			
		} else if (man_mode) {
    1f08:	23 2b       	or	r18, r19
    1f0a:	41 f0       	breq	.+16     	; 0x1f1c <play_game+0x4d0>
			if (keyboard_input == 'n' || keyboard_input == 'N') {
    1f0c:	1e 36       	cpi	r17, 0x6E	; 110
    1f0e:	11 f0       	breq	.+4      	; 0x1f14 <play_game+0x4c8>
    1f10:	1e 34       	cpi	r17, 0x4E	; 78
    1f12:	11 f4       	brne	.+4      	; 0x1f18 <play_game+0x4cc>
				advance_note();
    1f14:	0e 94 ab 06 	call	0xd56	; 0xd56 <advance_note>
			}
			draw_notes();
    1f18:	0e 94 89 04 	call	0x912	; 0x912 <draw_notes>
	} else if (game_speed == 250) {
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
	}
	
	// We play the game until it's over
	while (!is_game_over())
    1f1c:	0e 94 0d 08 	call	0x101a	; 0x101a <is_game_over>
    1f20:	88 23       	and	r24, r24
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <play_game+0x4da>
    1f24:	03 ce       	rjmp	.-1018   	; 0x1b2c <play_game+0xe0>
				advance_note();
			}
			draw_notes();
		}
	}
}
    1f26:	26 96       	adiw	r28, 0x06	; 6
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	1f 91       	pop	r17
    1f38:	0f 91       	pop	r16
    1f3a:	ff 90       	pop	r15
    1f3c:	ef 90       	pop	r14
    1f3e:	df 90       	pop	r13
    1f40:	cf 90       	pop	r12
    1f42:	bf 90       	pop	r11
    1f44:	af 90       	pop	r10
    1f46:	9f 90       	pop	r9
    1f48:	8f 90       	pop	r8
    1f4a:	7f 90       	pop	r7
    1f4c:	6f 90       	pop	r6
    1f4e:	5f 90       	pop	r5
    1f50:	4f 90       	pop	r4
    1f52:	08 95       	ret

00001f54 <handle_game_over>:

void handle_game_over()
{
	clear_terminal();
    1f54:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <clear_terminal>
	move_terminal_cursor(10,13);
    1f58:	6d e0       	ldi	r22, 0x0D	; 13
    1f5a:	70 e0       	ldi	r23, 0x00	; 0
    1f5c:	8a e0       	ldi	r24, 0x0A	; 10
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    1f64:	8a ea       	ldi	r24, 0xAA	; 170
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9f 93       	push	r25
    1f6a:	8f 93       	push	r24
    1f6c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
	move_terminal_cursor(10,14);
    1f70:	6e e0       	ldi	r22, 0x0E	; 14
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    1f74:	8a e0       	ldi	r24, 0x0A	; 10
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
	printf("Final Score: %d\n", points);
    1f7c:	80 91 3d 06 	lds	r24, 0x063D	; 0x80063d <points+0x1>
    1f80:	8f 93       	push	r24
    1f82:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <points>
    1f86:	8f 93       	push	r24
    1f88:	88 e1       	ldi	r24, 0x18	; 24
    1f8a:	96 e0       	ldi	r25, 0x06	; 6
    1f8c:	9f 93       	push	r25
    1f8e:	8f 93       	push	r24
    1f90:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
	//Display current track
	move_terminal_cursor(10, 15);
    1f94:	6f e0       	ldi	r22, 0x0F	; 15
    1f96:	70 e0       	ldi	r23, 0x00	; 0
    1f98:	8a e0       	ldi	r24, 0x0A	; 10
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
	printf("Track: %s", track_name);														//do %s and add a new track title at the end.
    1fa0:	82 e4       	ldi	r24, 0x42	; 66
    1fa2:	96 e0       	ldi	r25, 0x06	; 6
    1fa4:	9f 93       	push	r25
    1fa6:	8f 93       	push	r24
    1fa8:	80 e7       	ldi	r24, 0x70	; 112
    1faa:	93 e0       	ldi	r25, 0x03	; 3
    1fac:	9f 93       	push	r25
    1fae:	8f 93       	push	r24
    1fb0:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
	track_no = 0;	
    1fb4:	10 92 5e 06 	sts	0x065E, r1	; 0x80065e <track_no+0x1>
    1fb8:	10 92 5d 06 	sts	0x065D, r1	; 0x80065d <track_no>
	move_terminal_cursor(10, 16);
    1fbc:	60 e1       	ldi	r22, 0x10	; 16
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	8a e0       	ldi	r24, 0x0A	; 10
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
	clear_to_end_of_line();
    1fc8:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <clear_to_end_of_line>
	//display game sped
	if (game_speed == 1000) {
    1fcc:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <game_speed>
    1fd0:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <game_speed+0x1>
    1fd4:	2d b7       	in	r18, 0x3d	; 61
    1fd6:	3e b7       	in	r19, 0x3e	; 62
    1fd8:	26 5f       	subi	r18, 0xF6	; 246
    1fda:	3f 4f       	sbci	r19, 0xFF	; 255
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	3e bf       	out	0x3e, r19	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	2d bf       	out	0x3d, r18	; 61
    1fe6:	88 3e       	cpi	r24, 0xE8	; 232
    1fe8:	33 e0       	ldi	r19, 0x03	; 3
    1fea:	93 07       	cpc	r25, r19
    1fec:	69 f4       	brne	.+26     	; 0x2008 <handle_game_over+0xb4>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    1fee:	9f 93       	push	r25
    1ff0:	8f 93       	push	r24
    1ff2:	8a e7       	ldi	r24, 0x7A	; 122
    1ff4:	93 e0       	ldi	r25, 0x03	; 3
    1ff6:	9f 93       	push	r25
    1ff8:	8f 93       	push	r24
    1ffa:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	20 c0       	rjmp	.+64     	; 0x2048 <handle_game_over+0xf4>
		
		} else if (game_speed == 500) {
    2008:	84 3f       	cpi	r24, 0xF4	; 244
    200a:	21 e0       	ldi	r18, 0x01	; 1
    200c:	92 07       	cpc	r25, r18
    200e:	69 f4       	brne	.+26     	; 0x202a <handle_game_over+0xd6>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    2010:	9f 93       	push	r25
    2012:	8f 93       	push	r24
    2014:	80 ea       	ldi	r24, 0xA0	; 160
    2016:	93 e0       	ldi	r25, 0x03	; 3
    2018:	9f 93       	push	r25
    201a:	8f 93       	push	r24
    201c:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f c0       	rjmp	.+30     	; 0x2048 <handle_game_over+0xf4>
		
		} else if (game_speed == 250) {
    202a:	8a 3f       	cpi	r24, 0xFA	; 250
    202c:	91 05       	cpc	r25, r1
    202e:	61 f4       	brne	.+24     	; 0x2048 <handle_game_over+0xf4>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    2030:	9f 93       	push	r25
    2032:	8f 93       	push	r24
    2034:	84 ec       	ldi	r24, 0xC4	; 196
    2036:	93 e0       	ldi	r25, 0x03	; 3
    2038:	9f 93       	push	r25
    203a:	8f 93       	push	r24
    203c:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <printf>
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
	}
	
	move_terminal_cursor(10, 17);
    2048:	61 e1       	ldi	r22, 0x11	; 17
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	8a e0       	ldi	r24, 0x0A	; 10
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
    2054:	8c e7       	ldi	r24, 0x7C	; 124
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9f 93       	push	r25
    205a:	8f 93       	push	r24
    205c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	10 c0       	rjmp	.+32     	; 0x2086 <handle_game_over+0x132>
	{
		char keyboard_input = -1;
				
		if (serial_input_available()) {
    2066:	0e 94 06 11 	call	0x220c	; 0x220c <serial_input_available>
    206a:	88 23       	and	r24, r24
    206c:	39 f0       	breq	.+14     	; 0x207c <handle_game_over+0x128>
			keyboard_input = fgetc(stdin);
    206e:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <__iob>
    2072:	90 91 82 07 	lds	r25, 0x0782	; 0x800782 <__iob+0x1>
    2076:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <fgetc>
    207a:	01 c0       	rjmp	.+2      	; 0x207e <handle_game_over+0x12a>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
	{
		char keyboard_input = -1;
    207c:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		//check if the user presses s
		if (keyboard_input == 's' || keyboard_input == 'S') {
    207e:	83 37       	cpi	r24, 0x73	; 115
    2080:	31 f0       	breq	.+12     	; 0x208e <handle_game_over+0x13a>
    2082:	83 35       	cpi	r24, 0x53	; 83
    2084:	21 f0       	breq	.+8      	; 0x208e <handle_game_over+0x13a>
	move_terminal_cursor(10, 17);
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    2086:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    208a:	8f 3f       	cpi	r24, 0xFF	; 255
    208c:	61 f3       	breq	.-40     	; 0x2066 <handle_game_over+0x112>
		if (keyboard_input == 's' || keyboard_input == 'S') {
			break;
		}
	}	
	
	start_screen();
    208e:	0e 94 76 08 	call	0x10ec	; 0x10ec <start_screen>
    2092:	08 95       	ret

00002094 <main>:
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    2094:	0e 94 59 08 	call	0x10b2	; 0x10b2 <initialise_hardware>
	
	points = 0;
    2098:	10 92 3d 06 	sts	0x063D, r1	; 0x80063d <points+0x1>
    209c:	10 92 3c 06 	sts	0x063C, r1	; 0x80063c <points>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
    20a0:	0e 94 76 08 	call	0x10ec	; 0x10ec <start_screen>
	
	// Loop forever and continuously play the game.
	while(1)
	{
		new_game();
    20a4:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <new_game>
		play_game();
    20a8:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <play_game>
		handle_game_over();
    20ac:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <handle_game_over>
    20b0:	f9 cf       	rjmp	.-14     	; 0x20a4 <main+0x10>

000020b2 <uart_put_char>:
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream)
{
    20b2:	cf 93       	push	r28
    20b4:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n')
    20b6:	8a 30       	cpi	r24, 0x0A	; 10
    20b8:	19 f4       	brne	.+6      	; 0x20c0 <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
    20ba:	8d e0       	ldi	r24, 0x0D	; 13
    20bc:	0e 94 59 10 	call	0x20b2	; 0x20b2 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    20c0:	9f b7       	in	r25, 0x3f	; 63
    20c2:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
    20c6:	99 23       	and	r25, r25
    20c8:	29 f1       	breq	.+74     	; 0x2114 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    20ca:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <bytes_in_out_buffer>
    20ce:	8f 3f       	cpi	r24, 0xFF	; 255
    20d0:	d1 f3       	breq	.-12     	; 0x20c6 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    20d2:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    20d4:	e0 91 6d 06 	lds	r30, 0x066D	; 0x80066d <out_insert_pos>
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	8e 0f       	add	r24, r30
    20dc:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <out_insert_pos>
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	e1 59       	subi	r30, 0x91	; 145
    20e4:	f9 4f       	sbci	r31, 0xF9	; 249
    20e6:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    20e8:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <bytes_in_out_buffer>
    20ec:	8f 5f       	subi	r24, 0xFF	; 255
    20ee:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
    20f2:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <out_insert_pos>
    20f6:	8f 3f       	cpi	r24, 0xFF	; 255
    20f8:	11 f4       	brne	.+4      	; 0x20fe <uart_put_char+0x4c>
	{
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    20fa:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    20fe:	e1 ec       	ldi	r30, 0xC1	; 193
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	80 62       	ori	r24, 0x20	; 32
    2106:	80 83       	st	Z, r24
	if (interrupts_enabled)
    2108:	99 23       	and	r25, r25
    210a:	39 f0       	breq	.+14     	; 0x211a <uart_put_char+0x68>
	{
		sei();
    210c:	78 94       	sei
	}
	return 0;
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	05 c0       	rjmp	.+10     	; 0x211e <uart_put_char+0x6c>
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	02 c0       	rjmp	.+4      	; 0x211e <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e0       	ldi	r25, 0x00	; 0
}
    211e:	cf 91       	pop	r28
    2120:	08 95       	ret

00002122 <uart_get_char>:

int uart_get_char(FILE* stream)
{
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0)
    2122:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <bytes_in_input_buffer>
    2126:	88 23       	and	r24, r24
    2128:	e1 f3       	breq	.-8      	; 0x2122 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    212a:	2f b7       	in	r18, 0x3f	; 63
    212c:	20 78       	andi	r18, 0x80	; 128
	cli();
    212e:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
    2130:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <input_insert_pos>
    2134:	30 91 80 07 	lds	r19, 0x0780	; 0x800780 <bytes_in_input_buffer>
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	83 1b       	sub	r24, r19
    213c:	91 09       	sbc	r25, r1
    213e:	5a f4       	brpl	.+22     	; 0x2156 <uart_get_char+0x34>
	{
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    2140:	e0 91 6e 07 	lds	r30, 0x076E	; 0x80076e <input_insert_pos>
    2144:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <bytes_in_input_buffer>
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	e8 1b       	sub	r30, r24
    214c:	f1 09       	sbc	r31, r1
    214e:	e1 58       	subi	r30, 0x81	; 129
    2150:	f8 4f       	sbci	r31, 0xF8	; 248
    2152:	80 81       	ld	r24, Z
    2154:	0a c0       	rjmp	.+20     	; 0x216a <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    2156:	e0 91 6e 07 	lds	r30, 0x076E	; 0x80076e <input_insert_pos>
    215a:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <bytes_in_input_buffer>
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	e8 1b       	sub	r30, r24
    2162:	f1 09       	sbc	r31, r1
    2164:	e1 59       	subi	r30, 0x91	; 145
    2166:	f8 4f       	sbci	r31, 0xF8	; 248
    2168:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    216a:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <bytes_in_input_buffer>
    216e:	91 50       	subi	r25, 0x01	; 1
    2170:	90 93 80 07 	sts	0x0780, r25	; 0x800780 <bytes_in_input_buffer>
	if (interrupts_enabled)
    2174:	22 23       	and	r18, r18
    2176:	09 f0       	breq	.+2      	; 0x217a <uart_get_char+0x58>
	{
		sei();
    2178:	78 94       	sei
	}	
	return c;
}
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	08 95       	ret

0000217e <init_serial_stdio>:
{
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    217e:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <out_insert_pos>
	bytes_in_out_buffer = 0;
    2182:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <bytes_in_out_buffer>
	input_insert_pos = 0;
    2186:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <input_insert_pos>
	bytes_in_input_buffer = 0;
    218a:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <bytes_in_input_buffer>
	input_overrun = 0;
    218e:	10 92 7f 07 	sts	0x077F, r1	; 0x80077f <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    2192:	40 93 37 06 	sts	0x0637, r20	; 0x800637 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	aa 1f       	adc	r26, r26
    21a0:	bb 1f       	adc	r27, r27
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	aa 1f       	adc	r26, r26
    21a8:	bb 1f       	adc	r27, r27
    21aa:	9c 01       	movw	r18, r24
    21ac:	ad 01       	movw	r20, r26
    21ae:	22 0f       	add	r18, r18
    21b0:	33 1f       	adc	r19, r19
    21b2:	44 1f       	adc	r20, r20
    21b4:	55 1f       	adc	r21, r21
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	72 e1       	ldi	r23, 0x12	; 18
    21ba:	8a e7       	ldi	r24, 0x7A	; 122
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__divmodsi4>
    21c2:	ba 01       	movw	r22, r20
    21c4:	a9 01       	movw	r20, r18
    21c6:	4f 5f       	subi	r20, 0xFF	; 255
    21c8:	5f 4f       	sbci	r21, 0xFF	; 255
    21ca:	6f 4f       	sbci	r22, 0xFF	; 255
    21cc:	7f 4f       	sbci	r23, 0xFF	; 255
    21ce:	db 01       	movw	r26, r22
    21d0:	ca 01       	movw	r24, r20
    21d2:	1a f4       	brpl	.+6      	; 0x21da <init_serial_stdio+0x5c>
    21d4:	01 96       	adiw	r24, 0x01	; 1
    21d6:	a1 1d       	adc	r26, r1
    21d8:	b1 1d       	adc	r27, r1
    21da:	b5 95       	asr	r27
    21dc:	a7 95       	ror	r26
    21de:	97 95       	ror	r25
    21e0:	87 95       	ror	r24
    21e2:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    21e4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    21e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    21ec:	e1 ec       	ldi	r30, 0xC1	; 193
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	88 e1       	ldi	r24, 0x18	; 24
    21f2:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
    21f4:	80 81       	ld	r24, Z
    21f6:	80 68       	ori	r24, 0x80	; 128
    21f8:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    21fa:	e1 e8       	ldi	r30, 0x81	; 129
    21fc:	f7 e0       	ldi	r31, 0x07	; 7
    21fe:	8c e0       	ldi	r24, 0x0C	; 12
    2200:	91 e0       	ldi	r25, 0x01	; 1
    2202:	93 83       	std	Z+3, r25	; 0x03
    2204:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    2206:	91 83       	std	Z+1, r25	; 0x01
    2208:	80 83       	st	Z, r24
    220a:	08 95       	ret

0000220c <serial_input_available>:
}

int8_t serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
    220c:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <bytes_in_input_buffer>
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	91 11       	cpse	r25, r1
    2214:	01 c0       	rjmp	.+2      	; 0x2218 <serial_input_available+0xc>
    2216:	80 e0       	ldi	r24, 0x00	; 0
}
    2218:	08 95       	ret

0000221a <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    221a:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <input_insert_pos>
	bytes_in_input_buffer = 0;
    221e:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <bytes_in_input_buffer>
    2222:	08 95       	ret

00002224 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    2224:	1f 92       	push	r1
    2226:	0f 92       	push	r0
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	0f 92       	push	r0
    222c:	11 24       	eor	r1, r1
    222e:	2f 93       	push	r18
    2230:	8f 93       	push	r24
    2232:	9f 93       	push	r25
    2234:	ef 93       	push	r30
    2236:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0)
    2238:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <bytes_in_out_buffer>
    223c:	88 23       	and	r24, r24
    223e:	29 f1       	breq	.+74     	; 0x228a <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
    2240:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <out_insert_pos>
    2244:	20 91 6e 06 	lds	r18, 0x066E	; 0x80066e <bytes_in_out_buffer>
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	82 1b       	sub	r24, r18
    224c:	91 09       	sbc	r25, r1
    224e:	5a f4       	brpl	.+22     	; 0x2266 <__vector_21+0x42>
		{
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    2250:	e0 91 6d 06 	lds	r30, 0x066D	; 0x80066d <out_insert_pos>
    2254:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <bytes_in_out_buffer>
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	e8 1b       	sub	r30, r24
    225c:	f1 09       	sbc	r31, r1
    225e:	e2 59       	subi	r30, 0x92	; 146
    2260:	f8 4f       	sbci	r31, 0xF8	; 248
    2262:	90 81       	ld	r25, Z
    2264:	0a c0       	rjmp	.+20     	; 0x227a <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    2266:	e0 91 6d 06 	lds	r30, 0x066D	; 0x80066d <out_insert_pos>
    226a:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <bytes_in_out_buffer>
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	e8 1b       	sub	r30, r24
    2272:	f1 09       	sbc	r31, r1
    2274:	e1 59       	subi	r30, 0x91	; 145
    2276:	f9 4f       	sbci	r31, 0xF9	; 249
    2278:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    227a:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <bytes_in_out_buffer>
    227e:	81 50       	subi	r24, 0x01	; 1
    2280:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    2284:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2288:	05 c0       	rjmp	.+10     	; 0x2294 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
    228a:	e1 ec       	ldi	r30, 0xC1	; 193
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	8f 7d       	andi	r24, 0xDF	; 223
    2292:	80 83       	st	Z, r24
	}
}
    2294:	ff 91       	pop	r31
    2296:	ef 91       	pop	r30
    2298:	9f 91       	pop	r25
    229a:	8f 91       	pop	r24
    229c:	2f 91       	pop	r18
    229e:	0f 90       	pop	r0
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	0f 90       	pop	r0
    22a4:	1f 90       	pop	r1
    22a6:	18 95       	reti

000022a8 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    22a8:	1f 92       	push	r1
    22aa:	0f 92       	push	r0
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	0f 92       	push	r0
    22b0:	11 24       	eor	r1, r1
    22b2:	2f 93       	push	r18
    22b4:	3f 93       	push	r19
    22b6:	4f 93       	push	r20
    22b8:	5f 93       	push	r21
    22ba:	6f 93       	push	r22
    22bc:	7f 93       	push	r23
    22be:	8f 93       	push	r24
    22c0:	9f 93       	push	r25
    22c2:	af 93       	push	r26
    22c4:	bf 93       	push	r27
    22c6:	cf 93       	push	r28
    22c8:	ef 93       	push	r30
    22ca:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    22cc:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
    22d0:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <do_echo>
    22d4:	88 23       	and	r24, r24
    22d6:	49 f0       	breq	.+18     	; 0x22ea <__vector_20+0x42>
    22d8:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <bytes_in_out_buffer>
    22dc:	8f 3f       	cpi	r24, 0xFF	; 255
    22de:	29 f0       	breq	.+10     	; 0x22ea <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	70 e0       	ldi	r23, 0x00	; 0
    22e4:	8c 2f       	mov	r24, r28
    22e6:	0e 94 59 10 	call	0x20b2	; 0x20b2 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
    22ea:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <bytes_in_input_buffer>
    22ee:	80 31       	cpi	r24, 0x10	; 16
    22f0:	20 f0       	brcs	.+8      	; 0x22fa <__vector_20+0x52>
	{
		input_overrun = 1;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <input_overrun>
    22f8:	18 c0       	rjmp	.+48     	; 0x232a <__vector_20+0x82>
	} else
	{
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r')
    22fa:	cd 30       	cpi	r28, 0x0D	; 13
    22fc:	09 f4       	brne	.+2      	; 0x2300 <__vector_20+0x58>
		{
			c = '\n';
    22fe:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    2300:	e0 91 6e 07 	lds	r30, 0x076E	; 0x80076e <input_insert_pos>
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	8e 0f       	add	r24, r30
    2308:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <input_insert_pos>
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	e1 59       	subi	r30, 0x91	; 145
    2310:	f8 4f       	sbci	r31, 0xF8	; 248
    2312:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    2314:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <bytes_in_input_buffer>
    2318:	8f 5f       	subi	r24, 0xFF	; 255
    231a:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
    231e:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <input_insert_pos>
    2322:	80 31       	cpi	r24, 0x10	; 16
    2324:	11 f4       	brne	.+4      	; 0x232a <__vector_20+0x82>
		{
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    2326:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <input_insert_pos>
		}
	}
}
    232a:	ff 91       	pop	r31
    232c:	ef 91       	pop	r30
    232e:	cf 91       	pop	r28
    2330:	bf 91       	pop	r27
    2332:	af 91       	pop	r26
    2334:	9f 91       	pop	r25
    2336:	8f 91       	pop	r24
    2338:	7f 91       	pop	r23
    233a:	6f 91       	pop	r22
    233c:	5f 91       	pop	r21
    233e:	4f 91       	pop	r20
    2340:	3f 91       	pop	r19
    2342:	2f 91       	pop	r18
    2344:	0f 90       	pop	r0
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	0f 90       	pop	r0
    234a:	1f 90       	pop	r1
    234c:	18 95       	reti

0000234e <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider)
{
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    234e:	94 b1       	in	r25, 0x04	; 4
    2350:	90 6b       	ori	r25, 0xB0	; 176
    2352:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
    2354:	95 b1       	in	r25, 0x05	; 5
    2356:	90 61       	ori	r25, 0x10	; 16
    2358:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    235a:	90 e5       	ldi	r25, 0x50	; 80
    235c:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider)
    235e:	88 30       	cpi	r24, 0x08	; 8
    2360:	21 f0       	breq	.+8      	; 0x236a <spi_setup_master+0x1c>
    2362:	80 32       	cpi	r24, 0x20	; 32
    2364:	11 f0       	breq	.+4      	; 0x236a <spi_setup_master+0x1c>
    2366:	82 30       	cpi	r24, 0x02	; 2
    2368:	19 f4       	brne	.+6      	; 0x2370 <spi_setup_master+0x22>
	{
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
    236a:	91 e0       	ldi	r25, 0x01	; 1
    236c:	9d bd       	out	0x2d, r25	; 45
			break;
    236e:	01 c0       	rjmp	.+2      	; 0x2372 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    2370:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
    2372:	80 32       	cpi	r24, 0x20	; 32
    2374:	69 f0       	breq	.+26     	; 0x2390 <spi_setup_master+0x42>
    2376:	28 f4       	brcc	.+10     	; 0x2382 <spi_setup_master+0x34>
    2378:	88 30       	cpi	r24, 0x08	; 8
    237a:	71 f0       	breq	.+28     	; 0x2398 <spi_setup_master+0x4a>
    237c:	80 31       	cpi	r24, 0x10	; 16
    237e:	61 f0       	breq	.+24     	; 0x2398 <spi_setup_master+0x4a>
    2380:	0e c0       	rjmp	.+28     	; 0x239e <spi_setup_master+0x50>
    2382:	80 34       	cpi	r24, 0x40	; 64
    2384:	29 f0       	breq	.+10     	; 0x2390 <spi_setup_master+0x42>
    2386:	80 38       	cpi	r24, 0x80	; 128
    2388:	51 f4       	brne	.+20     	; 0x239e <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
    238a:	8c b5       	in	r24, 0x2c	; 44
    238c:	81 60       	ori	r24, 0x01	; 1
    238e:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
    2390:	8c b5       	in	r24, 0x2c	; 44
    2392:	82 60       	ori	r24, 0x02	; 2
    2394:	8c bd       	out	0x2c, r24	; 44
			break;
    2396:	03 c0       	rjmp	.+6      	; 0x239e <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
    2398:	8c b5       	in	r24, 0x2c	; 44
    239a:	81 60       	ori	r24, 0x01	; 1
    239c:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
    239e:	85 b1       	in	r24, 0x05	; 5
    23a0:	8f 7e       	andi	r24, 0xEF	; 239
    23a2:	85 b9       	out	0x05, r24	; 5
    23a4:	08 95       	ret

000023a6 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    23a6:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    23a8:	0d b4       	in	r0, 0x2d	; 45
    23aa:	07 fe       	sbrs	r0, 7
    23ac:	fd cf       	rjmp	.-6      	; 0x23a8 <spi_send_byte+0x2>
	{
		; // wait
	}
	return SPDR0;
    23ae:	8e b5       	in	r24, 0x2e	; 46
}
    23b0:	08 95       	ret

000023b2 <move_terminal_cursor>:
}

void reverse_video(void)
{
	printf_P(PSTR("\x1b[7m"));
}
    23b2:	9f 93       	push	r25
    23b4:	8f 93       	push	r24
    23b6:	7f 93       	push	r23
    23b8:	6f 93       	push	r22
    23ba:	8d e7       	ldi	r24, 0x7D	; 125
    23bc:	93 e0       	ldi	r25, 0x03	; 3
    23be:	9f 93       	push	r25
    23c0:	8f 93       	push	r24
    23c2:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	08 95       	ret

000023d4 <clear_terminal>:

void clear_terminal(void)
{
	printf_P(PSTR("\x1b[2J"));
    23d4:	88 e7       	ldi	r24, 0x78	; 120
    23d6:	93 e0       	ldi	r25, 0x03	; 3
    23d8:	9f 93       	push	r25
    23da:	8f 93       	push	r24
    23dc:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
}
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	08 95       	ret

000023e6 <clear_to_end_of_line>:

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
    23e6:	84 e7       	ldi	r24, 0x74	; 116
    23e8:	93 e0       	ldi	r25, 0x03	; 3
    23ea:	9f 93       	push	r25
    23ec:	8f 93       	push	r24
    23ee:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
}
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	08 95       	ret

000023f8 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    23f8:	1f 92       	push	r1
    23fa:	8f 93       	push	r24
    23fc:	8e e6       	ldi	r24, 0x6E	; 110
    23fe:	93 e0       	ldi	r25, 0x03	; 3
    2400:	9f 93       	push	r25
    2402:	8f 93       	push	r24
    2404:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
}
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	08 95       	ret

00002412 <hide_cursor>:

void hide_cursor()
{
	printf_P(PSTR("\x1b[?25l"));
    2412:	87 e6       	ldi	r24, 0x67	; 103
    2414:	93 e0       	ldi	r25, 0x03	; 3
    2416:	9f 93       	push	r25
    2418:	8f 93       	push	r24
    241a:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
}
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	08 95       	ret

00002424 <show_cursor>:

void show_cursor()
{
	printf_P(PSTR("\x1b[?25h"));
    2424:	80 e6       	ldi	r24, 0x60	; 96
    2426:	93 e0       	ldi	r25, 0x03	; 3
    2428:	9f 93       	push	r25
    242a:	8f 93       	push	r24
    242c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <printf_P>
}
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	08 95       	ret

00002436 <init_timer0>:
void init_timer0(void)
{
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
    2436:	10 92 38 06 	sts	0x0638, r1	; 0x800638 <clock_ticks_ms>
    243a:	10 92 39 06 	sts	0x0639, r1	; 0x800639 <clock_ticks_ms+0x1>
    243e:	10 92 3a 06 	sts	0x063A, r1	; 0x80063a <clock_ticks_ms+0x2>
    2442:	10 92 3b 06 	sts	0x063B, r1	; 0x80063b <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    2446:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    2448:	8c e7       	ldi	r24, 0x7C	; 124
    244a:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
    244c:	92 e0       	ldi	r25, 0x02	; 2
    244e:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    2450:	83 e0       	ldi	r24, 0x03	; 3
    2452:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
    2454:	ee e6       	ldi	r30, 0x6E	; 110
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	82 60       	ori	r24, 0x02	; 2
    245c:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
    245e:	95 bb       	out	0x15, r25	; 21
    2460:	08 95       	ret

00002462 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    2462:	8f b7       	in	r24, 0x3f	; 63
    2464:	28 2f       	mov	r18, r24
    2466:	20 78       	andi	r18, 0x80	; 128
	cli();
    2468:	f8 94       	cli
	return_value = clock_ticks_ms;
    246a:	60 91 38 06 	lds	r22, 0x0638	; 0x800638 <clock_ticks_ms>
    246e:	70 91 39 06 	lds	r23, 0x0639	; 0x800639 <clock_ticks_ms+0x1>
    2472:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <clock_ticks_ms+0x2>
    2476:	90 91 3b 06 	lds	r25, 0x063B	; 0x80063b <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    247a:	22 23       	and	r18, r18
    247c:	09 f0       	breq	.+2      	; 0x2480 <get_current_time+0x1e>
	{
		sei();
    247e:	78 94       	sei
	}
	return return_value;
}
    2480:	08 95       	ret

00002482 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
    2482:	1f 92       	push	r1
    2484:	0f 92       	push	r0
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	0f 92       	push	r0
    248a:	11 24       	eor	r1, r1
    248c:	8f 93       	push	r24
    248e:	9f 93       	push	r25
    2490:	af 93       	push	r26
    2492:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
    2494:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <clock_ticks_ms>
    2498:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <clock_ticks_ms+0x1>
    249c:	a0 91 3a 06 	lds	r26, 0x063A	; 0x80063a <clock_ticks_ms+0x2>
    24a0:	b0 91 3b 06 	lds	r27, 0x063B	; 0x80063b <clock_ticks_ms+0x3>
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	a1 1d       	adc	r26, r1
    24a8:	b1 1d       	adc	r27, r1
    24aa:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <clock_ticks_ms>
    24ae:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <clock_ticks_ms+0x1>
    24b2:	a0 93 3a 06 	sts	0x063A, r26	; 0x80063a <clock_ticks_ms+0x2>
    24b6:	b0 93 3b 06 	sts	0x063B, r27	; 0x80063b <clock_ticks_ms+0x3>
}
    24ba:	bf 91       	pop	r27
    24bc:	af 91       	pop	r26
    24be:	9f 91       	pop	r25
    24c0:	8f 91       	pop	r24
    24c2:	0f 90       	pop	r0
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	0f 90       	pop	r0
    24c8:	1f 90       	pop	r1
    24ca:	18 95       	reti

000024cc <init_timer1>:

/* Set up timer 1 For buzzer
 */

void init_timer1(void)
{
    24cc:	cf 92       	push	r12
    24ce:	df 92       	push	r13
    24d0:	ef 92       	push	r14
    24d2:	ff 92       	push	r15
	freq = 1;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <freq+0x1>
    24dc:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <freq>
	duty_cycle = 0;
    24e0:	10 92 65 06 	sts	0x0665, r1	; 0x800665 <duty_cycle>
    24e4:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <duty_cycle+0x1>
    24e8:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <duty_cycle+0x2>
    24ec:	10 92 68 06 	sts	0x0668, r1	; 0x800668 <duty_cycle+0x3>
	
	DDRD &= ~(1<<4);	//inverse of 1<<4
    24f0:	8a b1       	in	r24, 0x0a	; 10
    24f2:	8f 7e       	andi	r24, 0xEF	; 239
    24f4:	8a b9       	out	0x0a, r24	; 10
	PORTD &= 0b11101111;
    24f6:	8b b1       	in	r24, 0x0b	; 11
    24f8:	8f 7e       	andi	r24, 0xEF	; 239
    24fa:	8b b9       	out	0x0b, r24	; 11
	
	uint16_t clockperiod = (1000000UL / freq);
    24fc:	20 91 40 06 	lds	r18, 0x0640	; 0x800640 <freq>
    2500:	30 91 41 06 	lds	r19, 0x0641	; 0x800641 <freq+0x1>
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	50 e0       	ldi	r21, 0x00	; 0
    2508:	60 e4       	ldi	r22, 0x40	; 64
    250a:	72 e4       	ldi	r23, 0x42	; 66
    250c:	8f e0       	ldi	r24, 0x0F	; 15
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodsi4>
    2514:	69 01       	movw	r12, r18
    2516:	7a 01       	movw	r14, r20
	uint16_t pulsewidth = (duty_cycle * clockperiod)/100;
    2518:	b9 01       	movw	r22, r18
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	0e 94 00 14 	call	0x2800	; 0x2800 <__floatunsisf>
    2522:	20 91 65 06 	lds	r18, 0x0665	; 0x800665 <duty_cycle>
    2526:	30 91 66 06 	lds	r19, 0x0666	; 0x800666 <duty_cycle+0x1>
    252a:	40 91 67 06 	lds	r20, 0x0667	; 0x800667 <duty_cycle+0x2>
    252e:	50 91 68 06 	lds	r21, 0x0668	; 0x800668 <duty_cycle+0x3>
    2532:	0e 94 8e 14 	call	0x291c	; 0x291c <__mulsf3>
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	48 ec       	ldi	r20, 0xC8	; 200
    253c:	52 e4       	ldi	r21, 0x42	; 66
    253e:	0e 94 5f 13 	call	0x26be	; 0x26be <__divsf3>
    2542:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__fixunssfsi>
	
	// Set the maximum count value for timer/counter 1 to be one less than the clockperiod
	OCR1A = clockperiod - 1;
    2546:	21 e0       	ldi	r18, 0x01	; 1
    2548:	c2 1a       	sub	r12, r18
    254a:	d1 08       	sbc	r13, r1
    254c:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2550:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// Set the count compare value based on the pulse width. The value will be 1 less
	// than the pulse width - unless the pulse width is 0.
	if(pulsewidth == 0) {
    2554:	61 15       	cp	r22, r1
    2556:	71 05       	cpc	r23, r1
    2558:	29 f4       	brne	.+10     	; 0x2564 <init_timer1+0x98>
		OCR1B = 0;
    255a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    255e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    2562:	06 c0       	rjmp	.+12     	; 0x2570 <init_timer1+0xa4>
		
		} else {
		OCR1B = pulsewidth - 1;
    2564:	61 50       	subi	r22, 0x01	; 1
    2566:	71 09       	sbc	r23, r1
    2568:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    256c:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	//set up timer 1 for;
	//Fast PWM, counting from 0 to the value in OCR1A
	//before reseting to 0. Count at 1MHz (CLK/8).
	//Configure output OC1B to be CTC non-inverting mode.
	TCCR1A = (1 << COM1B1) | (1 << WGM10) | (1 <<WGM11);
    2570:	83 e2       	ldi	r24, 0x23	; 35
    2572:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << CS11) | (1 << WGM12) |(1 << WGM13);
    2576:	8a e1       	ldi	r24, 0x1A	; 26
    2578:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
}
    257c:	ff 90       	pop	r15
    257e:	ef 90       	pop	r14
    2580:	df 90       	pop	r13
    2582:	cf 90       	pop	r12
    2584:	08 95       	ret

00002586 <note_sound>:

void note_sound() {
    2586:	cf 92       	push	r12
    2588:	df 92       	push	r13
    258a:	ef 92       	push	r14
    258c:	ff 92       	push	r15
	
	if (!disable_piezzo) { //if you dont want to turn off the piezzo do the following
    258e:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <disable_piezzo>
    2592:	90 91 3f 06 	lds	r25, 0x063F	; 0x80063f <disable_piezzo+0x1>
    2596:	89 2b       	or	r24, r25
    2598:	c9 f5       	brne	.+114    	; 0x260c <note_sound+0x86>
		//turn on PORTd4 and set DDRD4 to be output
		DDRD |= 0b00010000;
    259a:	8a b1       	in	r24, 0x0a	; 10
    259c:	80 61       	ori	r24, 0x10	; 16
    259e:	8a b9       	out	0x0a, r24	; 10
		PORTD |= 0b00010000;
    25a0:	8b b1       	in	r24, 0x0b	; 11
    25a2:	80 61       	ori	r24, 0x10	; 16
    25a4:	8b b9       	out	0x0b, r24	; 11
		
		uint16_t clockperiod = (1000000UL / freq);
    25a6:	20 91 40 06 	lds	r18, 0x0640	; 0x800640 <freq>
    25aa:	30 91 41 06 	lds	r19, 0x0641	; 0x800641 <freq+0x1>
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	50 e0       	ldi	r21, 0x00	; 0
    25b2:	60 e4       	ldi	r22, 0x40	; 64
    25b4:	72 e4       	ldi	r23, 0x42	; 66
    25b6:	8f e0       	ldi	r24, 0x0F	; 15
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodsi4>
    25be:	69 01       	movw	r12, r18
    25c0:	7a 01       	movw	r14, r20
		uint16_t pulsewidth = (duty_cycle * clockperiod)/100;
    25c2:	b9 01       	movw	r22, r18
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	0e 94 00 14 	call	0x2800	; 0x2800 <__floatunsisf>
    25cc:	20 91 65 06 	lds	r18, 0x0665	; 0x800665 <duty_cycle>
    25d0:	30 91 66 06 	lds	r19, 0x0666	; 0x800666 <duty_cycle+0x1>
    25d4:	40 91 67 06 	lds	r20, 0x0667	; 0x800667 <duty_cycle+0x2>
    25d8:	50 91 68 06 	lds	r21, 0x0668	; 0x800668 <duty_cycle+0x3>
    25dc:	0e 94 8e 14 	call	0x291c	; 0x291c <__mulsf3>
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	48 ec       	ldi	r20, 0xC8	; 200
    25e6:	52 e4       	ldi	r21, 0x42	; 66
    25e8:	0e 94 5f 13 	call	0x26be	; 0x26be <__divsf3>
    25ec:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__fixunssfsi>
	
		OCR1A = clockperiod - 1;
    25f0:	21 e0       	ldi	r18, 0x01	; 1
    25f2:	c2 1a       	sub	r12, r18
    25f4:	d1 08       	sbc	r13, r1
    25f6:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    25fa:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = pulsewidth - 1;
    25fe:	61 50       	subi	r22, 0x01	; 1
    2600:	71 09       	sbc	r23, r1
    2602:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2606:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    260a:	0e c0       	rjmp	.+28     	; 0x2628 <note_sound+0xa2>
		
	} else { //if you want to turn off the piezzo do the following
		//set bot checks to be 0
		OCR1A = 0;
    260c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2610:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = 0;
    2614:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2618:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		
		//make DDRD4 to be input and PORTD4 to be off
		DDRD &= ~(1<<4);	//inverse of 1<<4
    261c:	8a b1       	in	r24, 0x0a	; 10
    261e:	8f 7e       	andi	r24, 0xEF	; 239
    2620:	8a b9       	out	0x0a, r24	; 10
		PORTD &= 0b11101111;
    2622:	8b b1       	in	r24, 0x0b	; 11
    2624:	8f 7e       	andi	r24, 0xEF	; 239
    2626:	8b b9       	out	0x0b, r24	; 11
			
	}
}
    2628:	ff 90       	pop	r15
    262a:	ef 90       	pop	r14
    262c:	df 90       	pop	r13
    262e:	cf 90       	pop	r12
    2630:	08 95       	ret

00002632 <pause_control>:

void pause_control(int is_paused) {
	if (is_paused) {
    2632:	89 2b       	or	r24, r25
    2634:	79 f0       	breq	.+30     	; 0x2654 <pause_control+0x22>
		OCR1A = 0;
    2636:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    263a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = 0;
    263e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2642:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		
		DDRD &= ~(1<<4);	//inverse of 1<<4
    2646:	8a b1       	in	r24, 0x0a	; 10
    2648:	8f 7e       	andi	r24, 0xEF	; 239
    264a:	8a b9       	out	0x0a, r24	; 10
		PORTD &= 0b11101111;
    264c:	8b b1       	in	r24, 0x0b	; 11
    264e:	8f 7e       	andi	r24, 0xEF	; 239
    2650:	8b b9       	out	0x0b, r24	; 11
    2652:	08 95       	ret
		
	} else {
		note_sound();
    2654:	0e 94 c3 12 	call	0x2586	; 0x2586 <note_sound>
    2658:	08 95       	ret

0000265a <init_timer2>:
void init_timer2(void)
{
	
	//TCNT2 = 0;
	//set up so that there is an interrupt every 10ms (100 times per second)
	OCR2A = 77; //clock divided by 1024 - count for 10000 cycles
    265a:	8d e4       	ldi	r24, 0x4D	; 77
    265c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = 0; //CTC mode
    2660:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1<<WGM22) | (1<<CS22) | (1<<CS20); // Divide clock by 1024(PRE) 
    2664:	8d e0       	ldi	r24, 0x0D	; 13
    2666:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	//enable interrupt on timer on output compare match
	TIMSK2 = (1<<OCIE2A);
    266a:	82 e0       	ldi	r24, 0x02	; 2
    266c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	 
	//Ensure interrupt flag is cleared
	TIFR2 = (1<<OCF2A);
    2670:	87 bb       	out	0x17, r24	; 23
	
	// Turn on global interrupts
	sei();
    2672:	78 94       	sei
    2674:	08 95       	ret

00002676 <__vector_9>:
}

ISR(TIMER2_COMPA_vect) {
    2676:	1f 92       	push	r1
    2678:	0f 92       	push	r0
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	0f 92       	push	r0
    267e:	11 24       	eor	r1, r1
    2680:	2f 93       	push	r18
    2682:	3f 93       	push	r19
    2684:	4f 93       	push	r20
    2686:	5f 93       	push	r21
    2688:	6f 93       	push	r22
    268a:	7f 93       	push	r23
    268c:	8f 93       	push	r24
    268e:	9f 93       	push	r25
    2690:	af 93       	push	r26
    2692:	bf 93       	push	r27
    2694:	ef 93       	push	r30
    2696:	ff 93       	push	r31
	ssd_display();
    2698:	0e 94 85 0c 	call	0x190a	; 0x190a <ssd_display>
}
    269c:	ff 91       	pop	r31
    269e:	ef 91       	pop	r30
    26a0:	bf 91       	pop	r27
    26a2:	af 91       	pop	r26
    26a4:	9f 91       	pop	r25
    26a6:	8f 91       	pop	r24
    26a8:	7f 91       	pop	r23
    26aa:	6f 91       	pop	r22
    26ac:	5f 91       	pop	r21
    26ae:	4f 91       	pop	r20
    26b0:	3f 91       	pop	r19
    26b2:	2f 91       	pop	r18
    26b4:	0f 90       	pop	r0
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	0f 90       	pop	r0
    26ba:	1f 90       	pop	r1
    26bc:	18 95       	reti

000026be <__divsf3>:
    26be:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__divsf3x>
    26c2:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__fp_round>
    26c6:	0e 94 4d 14 	call	0x289a	; 0x289a <__fp_pscB>
    26ca:	58 f0       	brcs	.+22     	; 0x26e2 <__divsf3+0x24>
    26cc:	0e 94 46 14 	call	0x288c	; 0x288c <__fp_pscA>
    26d0:	40 f0       	brcs	.+16     	; 0x26e2 <__divsf3+0x24>
    26d2:	29 f4       	brne	.+10     	; 0x26de <__divsf3+0x20>
    26d4:	5f 3f       	cpi	r21, 0xFF	; 255
    26d6:	29 f0       	breq	.+10     	; 0x26e2 <__divsf3+0x24>
    26d8:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__fp_inf>
    26dc:	51 11       	cpse	r21, r1
    26de:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__fp_szero>
    26e2:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__fp_nan>

000026e6 <__divsf3x>:
    26e6:	0e 94 65 14 	call	0x28ca	; 0x28ca <__fp_split3>
    26ea:	68 f3       	brcs	.-38     	; 0x26c6 <__divsf3+0x8>

000026ec <__divsf3_pse>:
    26ec:	99 23       	and	r25, r25
    26ee:	b1 f3       	breq	.-20     	; 0x26dc <__divsf3+0x1e>
    26f0:	55 23       	and	r21, r21
    26f2:	91 f3       	breq	.-28     	; 0x26d8 <__divsf3+0x1a>
    26f4:	95 1b       	sub	r25, r21
    26f6:	55 0b       	sbc	r21, r21
    26f8:	bb 27       	eor	r27, r27
    26fa:	aa 27       	eor	r26, r26
    26fc:	62 17       	cp	r22, r18
    26fe:	73 07       	cpc	r23, r19
    2700:	84 07       	cpc	r24, r20
    2702:	38 f0       	brcs	.+14     	; 0x2712 <__divsf3_pse+0x26>
    2704:	9f 5f       	subi	r25, 0xFF	; 255
    2706:	5f 4f       	sbci	r21, 0xFF	; 255
    2708:	22 0f       	add	r18, r18
    270a:	33 1f       	adc	r19, r19
    270c:	44 1f       	adc	r20, r20
    270e:	aa 1f       	adc	r26, r26
    2710:	a9 f3       	breq	.-22     	; 0x26fc <__divsf3_pse+0x10>
    2712:	35 d0       	rcall	.+106    	; 0x277e <__divsf3_pse+0x92>
    2714:	0e 2e       	mov	r0, r30
    2716:	3a f0       	brmi	.+14     	; 0x2726 <__divsf3_pse+0x3a>
    2718:	e0 e8       	ldi	r30, 0x80	; 128
    271a:	32 d0       	rcall	.+100    	; 0x2780 <__divsf3_pse+0x94>
    271c:	91 50       	subi	r25, 0x01	; 1
    271e:	50 40       	sbci	r21, 0x00	; 0
    2720:	e6 95       	lsr	r30
    2722:	00 1c       	adc	r0, r0
    2724:	ca f7       	brpl	.-14     	; 0x2718 <__divsf3_pse+0x2c>
    2726:	2b d0       	rcall	.+86     	; 0x277e <__divsf3_pse+0x92>
    2728:	fe 2f       	mov	r31, r30
    272a:	29 d0       	rcall	.+82     	; 0x277e <__divsf3_pse+0x92>
    272c:	66 0f       	add	r22, r22
    272e:	77 1f       	adc	r23, r23
    2730:	88 1f       	adc	r24, r24
    2732:	bb 1f       	adc	r27, r27
    2734:	26 17       	cp	r18, r22
    2736:	37 07       	cpc	r19, r23
    2738:	48 07       	cpc	r20, r24
    273a:	ab 07       	cpc	r26, r27
    273c:	b0 e8       	ldi	r27, 0x80	; 128
    273e:	09 f0       	breq	.+2      	; 0x2742 <__divsf3_pse+0x56>
    2740:	bb 0b       	sbc	r27, r27
    2742:	80 2d       	mov	r24, r0
    2744:	bf 01       	movw	r22, r30
    2746:	ff 27       	eor	r31, r31
    2748:	93 58       	subi	r25, 0x83	; 131
    274a:	5f 4f       	sbci	r21, 0xFF	; 255
    274c:	3a f0       	brmi	.+14     	; 0x275c <__divsf3_pse+0x70>
    274e:	9e 3f       	cpi	r25, 0xFE	; 254
    2750:	51 05       	cpc	r21, r1
    2752:	78 f0       	brcs	.+30     	; 0x2772 <__divsf3_pse+0x86>
    2754:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__fp_inf>
    2758:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__fp_szero>
    275c:	5f 3f       	cpi	r21, 0xFF	; 255
    275e:	e4 f3       	brlt	.-8      	; 0x2758 <__divsf3_pse+0x6c>
    2760:	98 3e       	cpi	r25, 0xE8	; 232
    2762:	d4 f3       	brlt	.-12     	; 0x2758 <__divsf3_pse+0x6c>
    2764:	86 95       	lsr	r24
    2766:	77 95       	ror	r23
    2768:	67 95       	ror	r22
    276a:	b7 95       	ror	r27
    276c:	f7 95       	ror	r31
    276e:	9f 5f       	subi	r25, 0xFF	; 255
    2770:	c9 f7       	brne	.-14     	; 0x2764 <__divsf3_pse+0x78>
    2772:	88 0f       	add	r24, r24
    2774:	91 1d       	adc	r25, r1
    2776:	96 95       	lsr	r25
    2778:	87 95       	ror	r24
    277a:	97 f9       	bld	r25, 7
    277c:	08 95       	ret
    277e:	e1 e0       	ldi	r30, 0x01	; 1
    2780:	66 0f       	add	r22, r22
    2782:	77 1f       	adc	r23, r23
    2784:	88 1f       	adc	r24, r24
    2786:	bb 1f       	adc	r27, r27
    2788:	62 17       	cp	r22, r18
    278a:	73 07       	cpc	r23, r19
    278c:	84 07       	cpc	r24, r20
    278e:	ba 07       	cpc	r27, r26
    2790:	20 f0       	brcs	.+8      	; 0x279a <__divsf3_pse+0xae>
    2792:	62 1b       	sub	r22, r18
    2794:	73 0b       	sbc	r23, r19
    2796:	84 0b       	sbc	r24, r20
    2798:	ba 0b       	sbc	r27, r26
    279a:	ee 1f       	adc	r30, r30
    279c:	88 f7       	brcc	.-30     	; 0x2780 <__divsf3_pse+0x94>
    279e:	e0 95       	com	r30
    27a0:	08 95       	ret

000027a2 <__fixunssfsi>:
    27a2:	0e 94 6d 14 	call	0x28da	; 0x28da <__fp_splitA>
    27a6:	88 f0       	brcs	.+34     	; 0x27ca <__fixunssfsi+0x28>
    27a8:	9f 57       	subi	r25, 0x7F	; 127
    27aa:	98 f0       	brcs	.+38     	; 0x27d2 <__fixunssfsi+0x30>
    27ac:	b9 2f       	mov	r27, r25
    27ae:	99 27       	eor	r25, r25
    27b0:	b7 51       	subi	r27, 0x17	; 23
    27b2:	b0 f0       	brcs	.+44     	; 0x27e0 <__fixunssfsi+0x3e>
    27b4:	e1 f0       	breq	.+56     	; 0x27ee <__fixunssfsi+0x4c>
    27b6:	66 0f       	add	r22, r22
    27b8:	77 1f       	adc	r23, r23
    27ba:	88 1f       	adc	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	1a f0       	brmi	.+6      	; 0x27c6 <__fixunssfsi+0x24>
    27c0:	ba 95       	dec	r27
    27c2:	c9 f7       	brne	.-14     	; 0x27b6 <__fixunssfsi+0x14>
    27c4:	14 c0       	rjmp	.+40     	; 0x27ee <__fixunssfsi+0x4c>
    27c6:	b1 30       	cpi	r27, 0x01	; 1
    27c8:	91 f0       	breq	.+36     	; 0x27ee <__fixunssfsi+0x4c>
    27ca:	0e 94 87 14 	call	0x290e	; 0x290e <__fp_zero>
    27ce:	b1 e0       	ldi	r27, 0x01	; 1
    27d0:	08 95       	ret
    27d2:	0c 94 87 14 	jmp	0x290e	; 0x290e <__fp_zero>
    27d6:	67 2f       	mov	r22, r23
    27d8:	78 2f       	mov	r23, r24
    27da:	88 27       	eor	r24, r24
    27dc:	b8 5f       	subi	r27, 0xF8	; 248
    27de:	39 f0       	breq	.+14     	; 0x27ee <__fixunssfsi+0x4c>
    27e0:	b9 3f       	cpi	r27, 0xF9	; 249
    27e2:	cc f3       	brlt	.-14     	; 0x27d6 <__fixunssfsi+0x34>
    27e4:	86 95       	lsr	r24
    27e6:	77 95       	ror	r23
    27e8:	67 95       	ror	r22
    27ea:	b3 95       	inc	r27
    27ec:	d9 f7       	brne	.-10     	; 0x27e4 <__fixunssfsi+0x42>
    27ee:	3e f4       	brtc	.+14     	; 0x27fe <__fixunssfsi+0x5c>
    27f0:	90 95       	com	r25
    27f2:	80 95       	com	r24
    27f4:	70 95       	com	r23
    27f6:	61 95       	neg	r22
    27f8:	7f 4f       	sbci	r23, 0xFF	; 255
    27fa:	8f 4f       	sbci	r24, 0xFF	; 255
    27fc:	9f 4f       	sbci	r25, 0xFF	; 255
    27fe:	08 95       	ret

00002800 <__floatunsisf>:
    2800:	e8 94       	clt
    2802:	09 c0       	rjmp	.+18     	; 0x2816 <__floatsisf+0x12>

00002804 <__floatsisf>:
    2804:	97 fb       	bst	r25, 7
    2806:	3e f4       	brtc	.+14     	; 0x2816 <__floatsisf+0x12>
    2808:	90 95       	com	r25
    280a:	80 95       	com	r24
    280c:	70 95       	com	r23
    280e:	61 95       	neg	r22
    2810:	7f 4f       	sbci	r23, 0xFF	; 255
    2812:	8f 4f       	sbci	r24, 0xFF	; 255
    2814:	9f 4f       	sbci	r25, 0xFF	; 255
    2816:	99 23       	and	r25, r25
    2818:	a9 f0       	breq	.+42     	; 0x2844 <__floatsisf+0x40>
    281a:	f9 2f       	mov	r31, r25
    281c:	96 e9       	ldi	r25, 0x96	; 150
    281e:	bb 27       	eor	r27, r27
    2820:	93 95       	inc	r25
    2822:	f6 95       	lsr	r31
    2824:	87 95       	ror	r24
    2826:	77 95       	ror	r23
    2828:	67 95       	ror	r22
    282a:	b7 95       	ror	r27
    282c:	f1 11       	cpse	r31, r1
    282e:	f8 cf       	rjmp	.-16     	; 0x2820 <__floatsisf+0x1c>
    2830:	fa f4       	brpl	.+62     	; 0x2870 <__floatsisf+0x6c>
    2832:	bb 0f       	add	r27, r27
    2834:	11 f4       	brne	.+4      	; 0x283a <__floatsisf+0x36>
    2836:	60 ff       	sbrs	r22, 0
    2838:	1b c0       	rjmp	.+54     	; 0x2870 <__floatsisf+0x6c>
    283a:	6f 5f       	subi	r22, 0xFF	; 255
    283c:	7f 4f       	sbci	r23, 0xFF	; 255
    283e:	8f 4f       	sbci	r24, 0xFF	; 255
    2840:	9f 4f       	sbci	r25, 0xFF	; 255
    2842:	16 c0       	rjmp	.+44     	; 0x2870 <__floatsisf+0x6c>
    2844:	88 23       	and	r24, r24
    2846:	11 f0       	breq	.+4      	; 0x284c <__floatsisf+0x48>
    2848:	96 e9       	ldi	r25, 0x96	; 150
    284a:	11 c0       	rjmp	.+34     	; 0x286e <__floatsisf+0x6a>
    284c:	77 23       	and	r23, r23
    284e:	21 f0       	breq	.+8      	; 0x2858 <__floatsisf+0x54>
    2850:	9e e8       	ldi	r25, 0x8E	; 142
    2852:	87 2f       	mov	r24, r23
    2854:	76 2f       	mov	r23, r22
    2856:	05 c0       	rjmp	.+10     	; 0x2862 <__floatsisf+0x5e>
    2858:	66 23       	and	r22, r22
    285a:	71 f0       	breq	.+28     	; 0x2878 <__floatsisf+0x74>
    285c:	96 e8       	ldi	r25, 0x86	; 134
    285e:	86 2f       	mov	r24, r22
    2860:	70 e0       	ldi	r23, 0x00	; 0
    2862:	60 e0       	ldi	r22, 0x00	; 0
    2864:	2a f0       	brmi	.+10     	; 0x2870 <__floatsisf+0x6c>
    2866:	9a 95       	dec	r25
    2868:	66 0f       	add	r22, r22
    286a:	77 1f       	adc	r23, r23
    286c:	88 1f       	adc	r24, r24
    286e:	da f7       	brpl	.-10     	; 0x2866 <__floatsisf+0x62>
    2870:	88 0f       	add	r24, r24
    2872:	96 95       	lsr	r25
    2874:	87 95       	ror	r24
    2876:	97 f9       	bld	r25, 7
    2878:	08 95       	ret

0000287a <__fp_inf>:
    287a:	97 f9       	bld	r25, 7
    287c:	9f 67       	ori	r25, 0x7F	; 127
    287e:	80 e8       	ldi	r24, 0x80	; 128
    2880:	70 e0       	ldi	r23, 0x00	; 0
    2882:	60 e0       	ldi	r22, 0x00	; 0
    2884:	08 95       	ret

00002886 <__fp_nan>:
    2886:	9f ef       	ldi	r25, 0xFF	; 255
    2888:	80 ec       	ldi	r24, 0xC0	; 192
    288a:	08 95       	ret

0000288c <__fp_pscA>:
    288c:	00 24       	eor	r0, r0
    288e:	0a 94       	dec	r0
    2890:	16 16       	cp	r1, r22
    2892:	17 06       	cpc	r1, r23
    2894:	18 06       	cpc	r1, r24
    2896:	09 06       	cpc	r0, r25
    2898:	08 95       	ret

0000289a <__fp_pscB>:
    289a:	00 24       	eor	r0, r0
    289c:	0a 94       	dec	r0
    289e:	12 16       	cp	r1, r18
    28a0:	13 06       	cpc	r1, r19
    28a2:	14 06       	cpc	r1, r20
    28a4:	05 06       	cpc	r0, r21
    28a6:	08 95       	ret

000028a8 <__fp_round>:
    28a8:	09 2e       	mov	r0, r25
    28aa:	03 94       	inc	r0
    28ac:	00 0c       	add	r0, r0
    28ae:	11 f4       	brne	.+4      	; 0x28b4 <__fp_round+0xc>
    28b0:	88 23       	and	r24, r24
    28b2:	52 f0       	brmi	.+20     	; 0x28c8 <__fp_round+0x20>
    28b4:	bb 0f       	add	r27, r27
    28b6:	40 f4       	brcc	.+16     	; 0x28c8 <__fp_round+0x20>
    28b8:	bf 2b       	or	r27, r31
    28ba:	11 f4       	brne	.+4      	; 0x28c0 <__fp_round+0x18>
    28bc:	60 ff       	sbrs	r22, 0
    28be:	04 c0       	rjmp	.+8      	; 0x28c8 <__fp_round+0x20>
    28c0:	6f 5f       	subi	r22, 0xFF	; 255
    28c2:	7f 4f       	sbci	r23, 0xFF	; 255
    28c4:	8f 4f       	sbci	r24, 0xFF	; 255
    28c6:	9f 4f       	sbci	r25, 0xFF	; 255
    28c8:	08 95       	ret

000028ca <__fp_split3>:
    28ca:	57 fd       	sbrc	r21, 7
    28cc:	90 58       	subi	r25, 0x80	; 128
    28ce:	44 0f       	add	r20, r20
    28d0:	55 1f       	adc	r21, r21
    28d2:	59 f0       	breq	.+22     	; 0x28ea <__fp_splitA+0x10>
    28d4:	5f 3f       	cpi	r21, 0xFF	; 255
    28d6:	71 f0       	breq	.+28     	; 0x28f4 <__fp_splitA+0x1a>
    28d8:	47 95       	ror	r20

000028da <__fp_splitA>:
    28da:	88 0f       	add	r24, r24
    28dc:	97 fb       	bst	r25, 7
    28de:	99 1f       	adc	r25, r25
    28e0:	61 f0       	breq	.+24     	; 0x28fa <__fp_splitA+0x20>
    28e2:	9f 3f       	cpi	r25, 0xFF	; 255
    28e4:	79 f0       	breq	.+30     	; 0x2904 <__fp_splitA+0x2a>
    28e6:	87 95       	ror	r24
    28e8:	08 95       	ret
    28ea:	12 16       	cp	r1, r18
    28ec:	13 06       	cpc	r1, r19
    28ee:	14 06       	cpc	r1, r20
    28f0:	55 1f       	adc	r21, r21
    28f2:	f2 cf       	rjmp	.-28     	; 0x28d8 <__fp_split3+0xe>
    28f4:	46 95       	lsr	r20
    28f6:	f1 df       	rcall	.-30     	; 0x28da <__fp_splitA>
    28f8:	08 c0       	rjmp	.+16     	; 0x290a <__fp_splitA+0x30>
    28fa:	16 16       	cp	r1, r22
    28fc:	17 06       	cpc	r1, r23
    28fe:	18 06       	cpc	r1, r24
    2900:	99 1f       	adc	r25, r25
    2902:	f1 cf       	rjmp	.-30     	; 0x28e6 <__fp_splitA+0xc>
    2904:	86 95       	lsr	r24
    2906:	71 05       	cpc	r23, r1
    2908:	61 05       	cpc	r22, r1
    290a:	08 94       	sec
    290c:	08 95       	ret

0000290e <__fp_zero>:
    290e:	e8 94       	clt

00002910 <__fp_szero>:
    2910:	bb 27       	eor	r27, r27
    2912:	66 27       	eor	r22, r22
    2914:	77 27       	eor	r23, r23
    2916:	cb 01       	movw	r24, r22
    2918:	97 f9       	bld	r25, 7
    291a:	08 95       	ret

0000291c <__mulsf3>:
    291c:	0e 94 a1 14 	call	0x2942	; 0x2942 <__mulsf3x>
    2920:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__fp_round>
    2924:	0e 94 46 14 	call	0x288c	; 0x288c <__fp_pscA>
    2928:	38 f0       	brcs	.+14     	; 0x2938 <__mulsf3+0x1c>
    292a:	0e 94 4d 14 	call	0x289a	; 0x289a <__fp_pscB>
    292e:	20 f0       	brcs	.+8      	; 0x2938 <__mulsf3+0x1c>
    2930:	95 23       	and	r25, r21
    2932:	11 f0       	breq	.+4      	; 0x2938 <__mulsf3+0x1c>
    2934:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__fp_inf>
    2938:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__fp_nan>
    293c:	11 24       	eor	r1, r1
    293e:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__fp_szero>

00002942 <__mulsf3x>:
    2942:	0e 94 65 14 	call	0x28ca	; 0x28ca <__fp_split3>
    2946:	70 f3       	brcs	.-36     	; 0x2924 <__mulsf3+0x8>

00002948 <__mulsf3_pse>:
    2948:	95 9f       	mul	r25, r21
    294a:	c1 f3       	breq	.-16     	; 0x293c <__mulsf3+0x20>
    294c:	95 0f       	add	r25, r21
    294e:	50 e0       	ldi	r21, 0x00	; 0
    2950:	55 1f       	adc	r21, r21
    2952:	62 9f       	mul	r22, r18
    2954:	f0 01       	movw	r30, r0
    2956:	72 9f       	mul	r23, r18
    2958:	bb 27       	eor	r27, r27
    295a:	f0 0d       	add	r31, r0
    295c:	b1 1d       	adc	r27, r1
    295e:	63 9f       	mul	r22, r19
    2960:	aa 27       	eor	r26, r26
    2962:	f0 0d       	add	r31, r0
    2964:	b1 1d       	adc	r27, r1
    2966:	aa 1f       	adc	r26, r26
    2968:	64 9f       	mul	r22, r20
    296a:	66 27       	eor	r22, r22
    296c:	b0 0d       	add	r27, r0
    296e:	a1 1d       	adc	r26, r1
    2970:	66 1f       	adc	r22, r22
    2972:	82 9f       	mul	r24, r18
    2974:	22 27       	eor	r18, r18
    2976:	b0 0d       	add	r27, r0
    2978:	a1 1d       	adc	r26, r1
    297a:	62 1f       	adc	r22, r18
    297c:	73 9f       	mul	r23, r19
    297e:	b0 0d       	add	r27, r0
    2980:	a1 1d       	adc	r26, r1
    2982:	62 1f       	adc	r22, r18
    2984:	83 9f       	mul	r24, r19
    2986:	a0 0d       	add	r26, r0
    2988:	61 1d       	adc	r22, r1
    298a:	22 1f       	adc	r18, r18
    298c:	74 9f       	mul	r23, r20
    298e:	33 27       	eor	r19, r19
    2990:	a0 0d       	add	r26, r0
    2992:	61 1d       	adc	r22, r1
    2994:	23 1f       	adc	r18, r19
    2996:	84 9f       	mul	r24, r20
    2998:	60 0d       	add	r22, r0
    299a:	21 1d       	adc	r18, r1
    299c:	82 2f       	mov	r24, r18
    299e:	76 2f       	mov	r23, r22
    29a0:	6a 2f       	mov	r22, r26
    29a2:	11 24       	eor	r1, r1
    29a4:	9f 57       	subi	r25, 0x7F	; 127
    29a6:	50 40       	sbci	r21, 0x00	; 0
    29a8:	9a f0       	brmi	.+38     	; 0x29d0 <__mulsf3_pse+0x88>
    29aa:	f1 f0       	breq	.+60     	; 0x29e8 <__mulsf3_pse+0xa0>
    29ac:	88 23       	and	r24, r24
    29ae:	4a f0       	brmi	.+18     	; 0x29c2 <__mulsf3_pse+0x7a>
    29b0:	ee 0f       	add	r30, r30
    29b2:	ff 1f       	adc	r31, r31
    29b4:	bb 1f       	adc	r27, r27
    29b6:	66 1f       	adc	r22, r22
    29b8:	77 1f       	adc	r23, r23
    29ba:	88 1f       	adc	r24, r24
    29bc:	91 50       	subi	r25, 0x01	; 1
    29be:	50 40       	sbci	r21, 0x00	; 0
    29c0:	a9 f7       	brne	.-22     	; 0x29ac <__mulsf3_pse+0x64>
    29c2:	9e 3f       	cpi	r25, 0xFE	; 254
    29c4:	51 05       	cpc	r21, r1
    29c6:	80 f0       	brcs	.+32     	; 0x29e8 <__mulsf3_pse+0xa0>
    29c8:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__fp_inf>
    29cc:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__fp_szero>
    29d0:	5f 3f       	cpi	r21, 0xFF	; 255
    29d2:	e4 f3       	brlt	.-8      	; 0x29cc <__mulsf3_pse+0x84>
    29d4:	98 3e       	cpi	r25, 0xE8	; 232
    29d6:	d4 f3       	brlt	.-12     	; 0x29cc <__mulsf3_pse+0x84>
    29d8:	86 95       	lsr	r24
    29da:	77 95       	ror	r23
    29dc:	67 95       	ror	r22
    29de:	b7 95       	ror	r27
    29e0:	f7 95       	ror	r31
    29e2:	e7 95       	ror	r30
    29e4:	9f 5f       	subi	r25, 0xFF	; 255
    29e6:	c1 f7       	brne	.-16     	; 0x29d8 <__mulsf3_pse+0x90>
    29e8:	fe 2b       	or	r31, r30
    29ea:	88 0f       	add	r24, r24
    29ec:	91 1d       	adc	r25, r1
    29ee:	96 95       	lsr	r25
    29f0:	87 95       	ror	r24
    29f2:	97 f9       	bld	r25, 7
    29f4:	08 95       	ret

000029f6 <__divmodhi4>:
    29f6:	97 fb       	bst	r25, 7
    29f8:	07 2e       	mov	r0, r23
    29fa:	16 f4       	brtc	.+4      	; 0x2a00 <__divmodhi4+0xa>
    29fc:	00 94       	com	r0
    29fe:	07 d0       	rcall	.+14     	; 0x2a0e <__divmodhi4_neg1>
    2a00:	77 fd       	sbrc	r23, 7
    2a02:	09 d0       	rcall	.+18     	; 0x2a16 <__divmodhi4_neg2>
    2a04:	0e 94 5f 15 	call	0x2abe	; 0x2abe <__udivmodhi4>
    2a08:	07 fc       	sbrc	r0, 7
    2a0a:	05 d0       	rcall	.+10     	; 0x2a16 <__divmodhi4_neg2>
    2a0c:	3e f4       	brtc	.+14     	; 0x2a1c <__divmodhi4_exit>

00002a0e <__divmodhi4_neg1>:
    2a0e:	90 95       	com	r25
    2a10:	81 95       	neg	r24
    2a12:	9f 4f       	sbci	r25, 0xFF	; 255
    2a14:	08 95       	ret

00002a16 <__divmodhi4_neg2>:
    2a16:	70 95       	com	r23
    2a18:	61 95       	neg	r22
    2a1a:	7f 4f       	sbci	r23, 0xFF	; 255

00002a1c <__divmodhi4_exit>:
    2a1c:	08 95       	ret

00002a1e <__udivmodsi4>:
    2a1e:	a1 e2       	ldi	r26, 0x21	; 33
    2a20:	1a 2e       	mov	r1, r26
    2a22:	aa 1b       	sub	r26, r26
    2a24:	bb 1b       	sub	r27, r27
    2a26:	fd 01       	movw	r30, r26
    2a28:	0d c0       	rjmp	.+26     	; 0x2a44 <__udivmodsi4_ep>

00002a2a <__udivmodsi4_loop>:
    2a2a:	aa 1f       	adc	r26, r26
    2a2c:	bb 1f       	adc	r27, r27
    2a2e:	ee 1f       	adc	r30, r30
    2a30:	ff 1f       	adc	r31, r31
    2a32:	a2 17       	cp	r26, r18
    2a34:	b3 07       	cpc	r27, r19
    2a36:	e4 07       	cpc	r30, r20
    2a38:	f5 07       	cpc	r31, r21
    2a3a:	20 f0       	brcs	.+8      	; 0x2a44 <__udivmodsi4_ep>
    2a3c:	a2 1b       	sub	r26, r18
    2a3e:	b3 0b       	sbc	r27, r19
    2a40:	e4 0b       	sbc	r30, r20
    2a42:	f5 0b       	sbc	r31, r21

00002a44 <__udivmodsi4_ep>:
    2a44:	66 1f       	adc	r22, r22
    2a46:	77 1f       	adc	r23, r23
    2a48:	88 1f       	adc	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	1a 94       	dec	r1
    2a4e:	69 f7       	brne	.-38     	; 0x2a2a <__udivmodsi4_loop>
    2a50:	60 95       	com	r22
    2a52:	70 95       	com	r23
    2a54:	80 95       	com	r24
    2a56:	90 95       	com	r25
    2a58:	9b 01       	movw	r18, r22
    2a5a:	ac 01       	movw	r20, r24
    2a5c:	bd 01       	movw	r22, r26
    2a5e:	cf 01       	movw	r24, r30
    2a60:	08 95       	ret

00002a62 <__divmodsi4>:
    2a62:	05 2e       	mov	r0, r21
    2a64:	97 fb       	bst	r25, 7
    2a66:	1e f4       	brtc	.+6      	; 0x2a6e <__divmodsi4+0xc>
    2a68:	00 94       	com	r0
    2a6a:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__negsi2>
    2a6e:	57 fd       	sbrc	r21, 7
    2a70:	07 d0       	rcall	.+14     	; 0x2a80 <__divmodsi4_neg2>
    2a72:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodsi4>
    2a76:	07 fc       	sbrc	r0, 7
    2a78:	03 d0       	rcall	.+6      	; 0x2a80 <__divmodsi4_neg2>
    2a7a:	4e f4       	brtc	.+18     	; 0x2a8e <__divmodsi4_exit>
    2a7c:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__negsi2>

00002a80 <__divmodsi4_neg2>:
    2a80:	50 95       	com	r21
    2a82:	40 95       	com	r20
    2a84:	30 95       	com	r19
    2a86:	21 95       	neg	r18
    2a88:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8a:	4f 4f       	sbci	r20, 0xFF	; 255
    2a8c:	5f 4f       	sbci	r21, 0xFF	; 255

00002a8e <__divmodsi4_exit>:
    2a8e:	08 95       	ret

00002a90 <__negsi2>:
    2a90:	90 95       	com	r25
    2a92:	80 95       	com	r24
    2a94:	70 95       	com	r23
    2a96:	61 95       	neg	r22
    2a98:	7f 4f       	sbci	r23, 0xFF	; 255
    2a9a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9e:	08 95       	ret

00002aa0 <__umulhisi3>:
    2aa0:	a2 9f       	mul	r26, r18
    2aa2:	b0 01       	movw	r22, r0
    2aa4:	b3 9f       	mul	r27, r19
    2aa6:	c0 01       	movw	r24, r0
    2aa8:	a3 9f       	mul	r26, r19
    2aaa:	70 0d       	add	r23, r0
    2aac:	81 1d       	adc	r24, r1
    2aae:	11 24       	eor	r1, r1
    2ab0:	91 1d       	adc	r25, r1
    2ab2:	b2 9f       	mul	r27, r18
    2ab4:	70 0d       	add	r23, r0
    2ab6:	81 1d       	adc	r24, r1
    2ab8:	11 24       	eor	r1, r1
    2aba:	91 1d       	adc	r25, r1
    2abc:	08 95       	ret

00002abe <__udivmodhi4>:
    2abe:	aa 1b       	sub	r26, r26
    2ac0:	bb 1b       	sub	r27, r27
    2ac2:	51 e1       	ldi	r21, 0x11	; 17
    2ac4:	07 c0       	rjmp	.+14     	; 0x2ad4 <__udivmodhi4_ep>

00002ac6 <__udivmodhi4_loop>:
    2ac6:	aa 1f       	adc	r26, r26
    2ac8:	bb 1f       	adc	r27, r27
    2aca:	a6 17       	cp	r26, r22
    2acc:	b7 07       	cpc	r27, r23
    2ace:	10 f0       	brcs	.+4      	; 0x2ad4 <__udivmodhi4_ep>
    2ad0:	a6 1b       	sub	r26, r22
    2ad2:	b7 0b       	sbc	r27, r23

00002ad4 <__udivmodhi4_ep>:
    2ad4:	88 1f       	adc	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	5a 95       	dec	r21
    2ada:	a9 f7       	brne	.-22     	; 0x2ac6 <__udivmodhi4_loop>
    2adc:	80 95       	com	r24
    2ade:	90 95       	com	r25
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	08 95       	ret

00002ae6 <fgetc>:
    2ae6:	cf 93       	push	r28
    2ae8:	df 93       	push	r29
    2aea:	ec 01       	movw	r28, r24
    2aec:	2b 81       	ldd	r18, Y+3	; 0x03
    2aee:	20 ff       	sbrs	r18, 0
    2af0:	33 c0       	rjmp	.+102    	; 0x2b58 <fgetc+0x72>
    2af2:	26 ff       	sbrs	r18, 6
    2af4:	0a c0       	rjmp	.+20     	; 0x2b0a <fgetc+0x24>
    2af6:	2f 7b       	andi	r18, 0xBF	; 191
    2af8:	2b 83       	std	Y+3, r18	; 0x03
    2afa:	8e 81       	ldd	r24, Y+6	; 0x06
    2afc:	9f 81       	ldd	r25, Y+7	; 0x07
    2afe:	01 96       	adiw	r24, 0x01	; 1
    2b00:	9f 83       	std	Y+7, r25	; 0x07
    2b02:	8e 83       	std	Y+6, r24	; 0x06
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	29 c0       	rjmp	.+82     	; 0x2b5c <fgetc+0x76>
    2b0a:	22 ff       	sbrs	r18, 2
    2b0c:	0f c0       	rjmp	.+30     	; 0x2b2c <fgetc+0x46>
    2b0e:	e8 81       	ld	r30, Y
    2b10:	f9 81       	ldd	r31, Y+1	; 0x01
    2b12:	80 81       	ld	r24, Z
    2b14:	08 2e       	mov	r0, r24
    2b16:	00 0c       	add	r0, r0
    2b18:	99 0b       	sbc	r25, r25
    2b1a:	00 97       	sbiw	r24, 0x00	; 0
    2b1c:	19 f4       	brne	.+6      	; 0x2b24 <fgetc+0x3e>
    2b1e:	20 62       	ori	r18, 0x20	; 32
    2b20:	2b 83       	std	Y+3, r18	; 0x03
    2b22:	1a c0       	rjmp	.+52     	; 0x2b58 <fgetc+0x72>
    2b24:	31 96       	adiw	r30, 0x01	; 1
    2b26:	f9 83       	std	Y+1, r31	; 0x01
    2b28:	e8 83       	st	Y, r30
    2b2a:	0e c0       	rjmp	.+28     	; 0x2b48 <fgetc+0x62>
    2b2c:	ea 85       	ldd	r30, Y+10	; 0x0a
    2b2e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2b30:	09 95       	icall
    2b32:	97 ff       	sbrs	r25, 7
    2b34:	09 c0       	rjmp	.+18     	; 0x2b48 <fgetc+0x62>
    2b36:	2b 81       	ldd	r18, Y+3	; 0x03
    2b38:	01 96       	adiw	r24, 0x01	; 1
    2b3a:	11 f0       	breq	.+4      	; 0x2b40 <fgetc+0x5a>
    2b3c:	80 e2       	ldi	r24, 0x20	; 32
    2b3e:	01 c0       	rjmp	.+2      	; 0x2b42 <fgetc+0x5c>
    2b40:	80 e1       	ldi	r24, 0x10	; 16
    2b42:	82 2b       	or	r24, r18
    2b44:	8b 83       	std	Y+3, r24	; 0x03
    2b46:	08 c0       	rjmp	.+16     	; 0x2b58 <fgetc+0x72>
    2b48:	2e 81       	ldd	r18, Y+6	; 0x06
    2b4a:	3f 81       	ldd	r19, Y+7	; 0x07
    2b4c:	2f 5f       	subi	r18, 0xFF	; 255
    2b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b50:	3f 83       	std	Y+7, r19	; 0x07
    2b52:	2e 83       	std	Y+6, r18	; 0x06
    2b54:	99 27       	eor	r25, r25
    2b56:	02 c0       	rjmp	.+4      	; 0x2b5c <fgetc+0x76>
    2b58:	8f ef       	ldi	r24, 0xFF	; 255
    2b5a:	9f ef       	ldi	r25, 0xFF	; 255
    2b5c:	df 91       	pop	r29
    2b5e:	cf 91       	pop	r28
    2b60:	08 95       	ret

00002b62 <printf>:
    2b62:	a0 e0       	ldi	r26, 0x00	; 0
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	e7 eb       	ldi	r30, 0xB7	; 183
    2b68:	f5 e1       	ldi	r31, 0x15	; 21
    2b6a:	0c 94 8e 18 	jmp	0x311c	; 0x311c <__prologue_saves__+0x20>
    2b6e:	ae 01       	movw	r20, r28
    2b70:	4b 5f       	subi	r20, 0xFB	; 251
    2b72:	5f 4f       	sbci	r21, 0xFF	; 255
    2b74:	fa 01       	movw	r30, r20
    2b76:	61 91       	ld	r22, Z+
    2b78:	71 91       	ld	r23, Z+
    2b7a:	af 01       	movw	r20, r30
    2b7c:	80 91 83 07 	lds	r24, 0x0783	; 0x800783 <__iob+0x2>
    2b80:	90 91 84 07 	lds	r25, 0x0784	; 0x800784 <__iob+0x3>
    2b84:	0e 94 ed 15 	call	0x2bda	; 0x2bda <vfprintf>
    2b88:	e2 e0       	ldi	r30, 0x02	; 2
    2b8a:	0c 94 aa 18 	jmp	0x3154	; 0x3154 <__epilogue_restores__+0x20>

00002b8e <printf_P>:
    2b8e:	a0 e0       	ldi	r26, 0x00	; 0
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	ed ec       	ldi	r30, 0xCD	; 205
    2b94:	f5 e1       	ldi	r31, 0x15	; 21
    2b96:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <__prologue_saves__+0x1c>
    2b9a:	ae 01       	movw	r20, r28
    2b9c:	49 5f       	subi	r20, 0xF9	; 249
    2b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2ba0:	da 01       	movw	r26, r20
    2ba2:	6d 91       	ld	r22, X+
    2ba4:	7d 91       	ld	r23, X+
    2ba6:	ad 01       	movw	r20, r26
    2ba8:	01 e8       	ldi	r16, 0x81	; 129
    2baa:	17 e0       	ldi	r17, 0x07	; 7
    2bac:	f8 01       	movw	r30, r16
    2bae:	82 81       	ldd	r24, Z+2	; 0x02
    2bb0:	93 81       	ldd	r25, Z+3	; 0x03
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	13 96       	adiw	r26, 0x03	; 3
    2bb6:	2c 91       	ld	r18, X
    2bb8:	13 97       	sbiw	r26, 0x03	; 3
    2bba:	28 60       	ori	r18, 0x08	; 8
    2bbc:	13 96       	adiw	r26, 0x03	; 3
    2bbe:	2c 93       	st	X, r18
    2bc0:	0e 94 ed 15 	call	0x2bda	; 0x2bda <vfprintf>
    2bc4:	d8 01       	movw	r26, r16
    2bc6:	12 96       	adiw	r26, 0x02	; 2
    2bc8:	ed 91       	ld	r30, X+
    2bca:	fc 91       	ld	r31, X
    2bcc:	13 97       	sbiw	r26, 0x03	; 3
    2bce:	23 81       	ldd	r18, Z+3	; 0x03
    2bd0:	27 7f       	andi	r18, 0xF7	; 247
    2bd2:	23 83       	std	Z+3, r18	; 0x03
    2bd4:	e4 e0       	ldi	r30, 0x04	; 4
    2bd6:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <__epilogue_restores__+0x1c>

00002bda <vfprintf>:
    2bda:	ab e0       	ldi	r26, 0x0B	; 11
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	e3 ef       	ldi	r30, 0xF3	; 243
    2be0:	f5 e1       	ldi	r31, 0x15	; 21
    2be2:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__prologue_saves__>
    2be6:	6c 01       	movw	r12, r24
    2be8:	7b 01       	movw	r14, r22
    2bea:	8a 01       	movw	r16, r20
    2bec:	fc 01       	movw	r30, r24
    2bee:	17 82       	std	Z+7, r1	; 0x07
    2bf0:	16 82       	std	Z+6, r1	; 0x06
    2bf2:	83 81       	ldd	r24, Z+3	; 0x03
    2bf4:	81 ff       	sbrs	r24, 1
    2bf6:	cc c1       	rjmp	.+920    	; 0x2f90 <vfprintf+0x3b6>
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	01 96       	adiw	r24, 0x01	; 1
    2bfc:	3c 01       	movw	r6, r24
    2bfe:	f6 01       	movw	r30, r12
    2c00:	93 81       	ldd	r25, Z+3	; 0x03
    2c02:	f7 01       	movw	r30, r14
    2c04:	93 fd       	sbrc	r25, 3
    2c06:	85 91       	lpm	r24, Z+
    2c08:	93 ff       	sbrs	r25, 3
    2c0a:	81 91       	ld	r24, Z+
    2c0c:	7f 01       	movw	r14, r30
    2c0e:	88 23       	and	r24, r24
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <vfprintf+0x3a>
    2c12:	ba c1       	rjmp	.+884    	; 0x2f88 <vfprintf+0x3ae>
    2c14:	85 32       	cpi	r24, 0x25	; 37
    2c16:	39 f4       	brne	.+14     	; 0x2c26 <vfprintf+0x4c>
    2c18:	93 fd       	sbrc	r25, 3
    2c1a:	85 91       	lpm	r24, Z+
    2c1c:	93 ff       	sbrs	r25, 3
    2c1e:	81 91       	ld	r24, Z+
    2c20:	7f 01       	movw	r14, r30
    2c22:	85 32       	cpi	r24, 0x25	; 37
    2c24:	29 f4       	brne	.+10     	; 0x2c30 <vfprintf+0x56>
    2c26:	b6 01       	movw	r22, r12
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <fputc>
    2c2e:	e7 cf       	rjmp	.-50     	; 0x2bfe <vfprintf+0x24>
    2c30:	91 2c       	mov	r9, r1
    2c32:	21 2c       	mov	r2, r1
    2c34:	31 2c       	mov	r3, r1
    2c36:	ff e1       	ldi	r31, 0x1F	; 31
    2c38:	f3 15       	cp	r31, r3
    2c3a:	d8 f0       	brcs	.+54     	; 0x2c72 <vfprintf+0x98>
    2c3c:	8b 32       	cpi	r24, 0x2B	; 43
    2c3e:	79 f0       	breq	.+30     	; 0x2c5e <vfprintf+0x84>
    2c40:	38 f4       	brcc	.+14     	; 0x2c50 <vfprintf+0x76>
    2c42:	80 32       	cpi	r24, 0x20	; 32
    2c44:	79 f0       	breq	.+30     	; 0x2c64 <vfprintf+0x8a>
    2c46:	83 32       	cpi	r24, 0x23	; 35
    2c48:	a1 f4       	brne	.+40     	; 0x2c72 <vfprintf+0x98>
    2c4a:	23 2d       	mov	r18, r3
    2c4c:	20 61       	ori	r18, 0x10	; 16
    2c4e:	1d c0       	rjmp	.+58     	; 0x2c8a <vfprintf+0xb0>
    2c50:	8d 32       	cpi	r24, 0x2D	; 45
    2c52:	61 f0       	breq	.+24     	; 0x2c6c <vfprintf+0x92>
    2c54:	80 33       	cpi	r24, 0x30	; 48
    2c56:	69 f4       	brne	.+26     	; 0x2c72 <vfprintf+0x98>
    2c58:	23 2d       	mov	r18, r3
    2c5a:	21 60       	ori	r18, 0x01	; 1
    2c5c:	16 c0       	rjmp	.+44     	; 0x2c8a <vfprintf+0xb0>
    2c5e:	83 2d       	mov	r24, r3
    2c60:	82 60       	ori	r24, 0x02	; 2
    2c62:	38 2e       	mov	r3, r24
    2c64:	e3 2d       	mov	r30, r3
    2c66:	e4 60       	ori	r30, 0x04	; 4
    2c68:	3e 2e       	mov	r3, r30
    2c6a:	2a c0       	rjmp	.+84     	; 0x2cc0 <vfprintf+0xe6>
    2c6c:	f3 2d       	mov	r31, r3
    2c6e:	f8 60       	ori	r31, 0x08	; 8
    2c70:	1d c0       	rjmp	.+58     	; 0x2cac <vfprintf+0xd2>
    2c72:	37 fc       	sbrc	r3, 7
    2c74:	2d c0       	rjmp	.+90     	; 0x2cd0 <vfprintf+0xf6>
    2c76:	20 ed       	ldi	r18, 0xD0	; 208
    2c78:	28 0f       	add	r18, r24
    2c7a:	2a 30       	cpi	r18, 0x0A	; 10
    2c7c:	40 f0       	brcs	.+16     	; 0x2c8e <vfprintf+0xb4>
    2c7e:	8e 32       	cpi	r24, 0x2E	; 46
    2c80:	b9 f4       	brne	.+46     	; 0x2cb0 <vfprintf+0xd6>
    2c82:	36 fc       	sbrc	r3, 6
    2c84:	81 c1       	rjmp	.+770    	; 0x2f88 <vfprintf+0x3ae>
    2c86:	23 2d       	mov	r18, r3
    2c88:	20 64       	ori	r18, 0x40	; 64
    2c8a:	32 2e       	mov	r3, r18
    2c8c:	19 c0       	rjmp	.+50     	; 0x2cc0 <vfprintf+0xe6>
    2c8e:	36 fe       	sbrs	r3, 6
    2c90:	06 c0       	rjmp	.+12     	; 0x2c9e <vfprintf+0xc4>
    2c92:	8a e0       	ldi	r24, 0x0A	; 10
    2c94:	98 9e       	mul	r9, r24
    2c96:	20 0d       	add	r18, r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	92 2e       	mov	r9, r18
    2c9c:	11 c0       	rjmp	.+34     	; 0x2cc0 <vfprintf+0xe6>
    2c9e:	ea e0       	ldi	r30, 0x0A	; 10
    2ca0:	2e 9e       	mul	r2, r30
    2ca2:	20 0d       	add	r18, r0
    2ca4:	11 24       	eor	r1, r1
    2ca6:	22 2e       	mov	r2, r18
    2ca8:	f3 2d       	mov	r31, r3
    2caa:	f0 62       	ori	r31, 0x20	; 32
    2cac:	3f 2e       	mov	r3, r31
    2cae:	08 c0       	rjmp	.+16     	; 0x2cc0 <vfprintf+0xe6>
    2cb0:	8c 36       	cpi	r24, 0x6C	; 108
    2cb2:	21 f4       	brne	.+8      	; 0x2cbc <vfprintf+0xe2>
    2cb4:	83 2d       	mov	r24, r3
    2cb6:	80 68       	ori	r24, 0x80	; 128
    2cb8:	38 2e       	mov	r3, r24
    2cba:	02 c0       	rjmp	.+4      	; 0x2cc0 <vfprintf+0xe6>
    2cbc:	88 36       	cpi	r24, 0x68	; 104
    2cbe:	41 f4       	brne	.+16     	; 0x2cd0 <vfprintf+0xf6>
    2cc0:	f7 01       	movw	r30, r14
    2cc2:	93 fd       	sbrc	r25, 3
    2cc4:	85 91       	lpm	r24, Z+
    2cc6:	93 ff       	sbrs	r25, 3
    2cc8:	81 91       	ld	r24, Z+
    2cca:	7f 01       	movw	r14, r30
    2ccc:	81 11       	cpse	r24, r1
    2cce:	b3 cf       	rjmp	.-154    	; 0x2c36 <vfprintf+0x5c>
    2cd0:	98 2f       	mov	r25, r24
    2cd2:	9f 7d       	andi	r25, 0xDF	; 223
    2cd4:	95 54       	subi	r25, 0x45	; 69
    2cd6:	93 30       	cpi	r25, 0x03	; 3
    2cd8:	28 f4       	brcc	.+10     	; 0x2ce4 <vfprintf+0x10a>
    2cda:	0c 5f       	subi	r16, 0xFC	; 252
    2cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cde:	9f e3       	ldi	r25, 0x3F	; 63
    2ce0:	99 83       	std	Y+1, r25	; 0x01
    2ce2:	0d c0       	rjmp	.+26     	; 0x2cfe <vfprintf+0x124>
    2ce4:	83 36       	cpi	r24, 0x63	; 99
    2ce6:	31 f0       	breq	.+12     	; 0x2cf4 <vfprintf+0x11a>
    2ce8:	83 37       	cpi	r24, 0x73	; 115
    2cea:	71 f0       	breq	.+28     	; 0x2d08 <vfprintf+0x12e>
    2cec:	83 35       	cpi	r24, 0x53	; 83
    2cee:	09 f0       	breq	.+2      	; 0x2cf2 <vfprintf+0x118>
    2cf0:	59 c0       	rjmp	.+178    	; 0x2da4 <vfprintf+0x1ca>
    2cf2:	21 c0       	rjmp	.+66     	; 0x2d36 <vfprintf+0x15c>
    2cf4:	f8 01       	movw	r30, r16
    2cf6:	80 81       	ld	r24, Z
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	0e 5f       	subi	r16, 0xFE	; 254
    2cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfe:	88 24       	eor	r8, r8
    2d00:	83 94       	inc	r8
    2d02:	91 2c       	mov	r9, r1
    2d04:	53 01       	movw	r10, r6
    2d06:	13 c0       	rjmp	.+38     	; 0x2d2e <vfprintf+0x154>
    2d08:	28 01       	movw	r4, r16
    2d0a:	f2 e0       	ldi	r31, 0x02	; 2
    2d0c:	4f 0e       	add	r4, r31
    2d0e:	51 1c       	adc	r5, r1
    2d10:	f8 01       	movw	r30, r16
    2d12:	a0 80       	ld	r10, Z
    2d14:	b1 80       	ldd	r11, Z+1	; 0x01
    2d16:	36 fe       	sbrs	r3, 6
    2d18:	03 c0       	rjmp	.+6      	; 0x2d20 <vfprintf+0x146>
    2d1a:	69 2d       	mov	r22, r9
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	02 c0       	rjmp	.+4      	; 0x2d24 <vfprintf+0x14a>
    2d20:	6f ef       	ldi	r22, 0xFF	; 255
    2d22:	7f ef       	ldi	r23, 0xFF	; 255
    2d24:	c5 01       	movw	r24, r10
    2d26:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <strnlen>
    2d2a:	4c 01       	movw	r8, r24
    2d2c:	82 01       	movw	r16, r4
    2d2e:	f3 2d       	mov	r31, r3
    2d30:	ff 77       	andi	r31, 0x7F	; 127
    2d32:	3f 2e       	mov	r3, r31
    2d34:	16 c0       	rjmp	.+44     	; 0x2d62 <vfprintf+0x188>
    2d36:	28 01       	movw	r4, r16
    2d38:	22 e0       	ldi	r18, 0x02	; 2
    2d3a:	42 0e       	add	r4, r18
    2d3c:	51 1c       	adc	r5, r1
    2d3e:	f8 01       	movw	r30, r16
    2d40:	a0 80       	ld	r10, Z
    2d42:	b1 80       	ldd	r11, Z+1	; 0x01
    2d44:	36 fe       	sbrs	r3, 6
    2d46:	03 c0       	rjmp	.+6      	; 0x2d4e <vfprintf+0x174>
    2d48:	69 2d       	mov	r22, r9
    2d4a:	70 e0       	ldi	r23, 0x00	; 0
    2d4c:	02 c0       	rjmp	.+4      	; 0x2d52 <vfprintf+0x178>
    2d4e:	6f ef       	ldi	r22, 0xFF	; 255
    2d50:	7f ef       	ldi	r23, 0xFF	; 255
    2d52:	c5 01       	movw	r24, r10
    2d54:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <strnlen_P>
    2d58:	4c 01       	movw	r8, r24
    2d5a:	f3 2d       	mov	r31, r3
    2d5c:	f0 68       	ori	r31, 0x80	; 128
    2d5e:	3f 2e       	mov	r3, r31
    2d60:	82 01       	movw	r16, r4
    2d62:	33 fc       	sbrc	r3, 3
    2d64:	1b c0       	rjmp	.+54     	; 0x2d9c <vfprintf+0x1c2>
    2d66:	82 2d       	mov	r24, r2
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	88 16       	cp	r8, r24
    2d6c:	99 06       	cpc	r9, r25
    2d6e:	b0 f4       	brcc	.+44     	; 0x2d9c <vfprintf+0x1c2>
    2d70:	b6 01       	movw	r22, r12
    2d72:	80 e2       	ldi	r24, 0x20	; 32
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <fputc>
    2d7a:	2a 94       	dec	r2
    2d7c:	f4 cf       	rjmp	.-24     	; 0x2d66 <vfprintf+0x18c>
    2d7e:	f5 01       	movw	r30, r10
    2d80:	37 fc       	sbrc	r3, 7
    2d82:	85 91       	lpm	r24, Z+
    2d84:	37 fe       	sbrs	r3, 7
    2d86:	81 91       	ld	r24, Z+
    2d88:	5f 01       	movw	r10, r30
    2d8a:	b6 01       	movw	r22, r12
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <fputc>
    2d92:	21 10       	cpse	r2, r1
    2d94:	2a 94       	dec	r2
    2d96:	21 e0       	ldi	r18, 0x01	; 1
    2d98:	82 1a       	sub	r8, r18
    2d9a:	91 08       	sbc	r9, r1
    2d9c:	81 14       	cp	r8, r1
    2d9e:	91 04       	cpc	r9, r1
    2da0:	71 f7       	brne	.-36     	; 0x2d7e <vfprintf+0x1a4>
    2da2:	e8 c0       	rjmp	.+464    	; 0x2f74 <vfprintf+0x39a>
    2da4:	84 36       	cpi	r24, 0x64	; 100
    2da6:	11 f0       	breq	.+4      	; 0x2dac <vfprintf+0x1d2>
    2da8:	89 36       	cpi	r24, 0x69	; 105
    2daa:	41 f5       	brne	.+80     	; 0x2dfc <vfprintf+0x222>
    2dac:	f8 01       	movw	r30, r16
    2dae:	37 fe       	sbrs	r3, 7
    2db0:	07 c0       	rjmp	.+14     	; 0x2dc0 <vfprintf+0x1e6>
    2db2:	60 81       	ld	r22, Z
    2db4:	71 81       	ldd	r23, Z+1	; 0x01
    2db6:	82 81       	ldd	r24, Z+2	; 0x02
    2db8:	93 81       	ldd	r25, Z+3	; 0x03
    2dba:	0c 5f       	subi	r16, 0xFC	; 252
    2dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dbe:	08 c0       	rjmp	.+16     	; 0x2dd0 <vfprintf+0x1f6>
    2dc0:	60 81       	ld	r22, Z
    2dc2:	71 81       	ldd	r23, Z+1	; 0x01
    2dc4:	07 2e       	mov	r0, r23
    2dc6:	00 0c       	add	r0, r0
    2dc8:	88 0b       	sbc	r24, r24
    2dca:	99 0b       	sbc	r25, r25
    2dcc:	0e 5f       	subi	r16, 0xFE	; 254
    2dce:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd0:	f3 2d       	mov	r31, r3
    2dd2:	ff 76       	andi	r31, 0x6F	; 111
    2dd4:	3f 2e       	mov	r3, r31
    2dd6:	97 ff       	sbrs	r25, 7
    2dd8:	09 c0       	rjmp	.+18     	; 0x2dec <vfprintf+0x212>
    2dda:	90 95       	com	r25
    2ddc:	80 95       	com	r24
    2dde:	70 95       	com	r23
    2de0:	61 95       	neg	r22
    2de2:	7f 4f       	sbci	r23, 0xFF	; 255
    2de4:	8f 4f       	sbci	r24, 0xFF	; 255
    2de6:	9f 4f       	sbci	r25, 0xFF	; 255
    2de8:	f0 68       	ori	r31, 0x80	; 128
    2dea:	3f 2e       	mov	r3, r31
    2dec:	2a e0       	ldi	r18, 0x0A	; 10
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	a3 01       	movw	r20, r6
    2df2:	0e 94 20 18 	call	0x3040	; 0x3040 <__ultoa_invert>
    2df6:	88 2e       	mov	r8, r24
    2df8:	86 18       	sub	r8, r6
    2dfa:	45 c0       	rjmp	.+138    	; 0x2e86 <vfprintf+0x2ac>
    2dfc:	85 37       	cpi	r24, 0x75	; 117
    2dfe:	31 f4       	brne	.+12     	; 0x2e0c <vfprintf+0x232>
    2e00:	23 2d       	mov	r18, r3
    2e02:	2f 7e       	andi	r18, 0xEF	; 239
    2e04:	b2 2e       	mov	r11, r18
    2e06:	2a e0       	ldi	r18, 0x0A	; 10
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	25 c0       	rjmp	.+74     	; 0x2e56 <vfprintf+0x27c>
    2e0c:	93 2d       	mov	r25, r3
    2e0e:	99 7f       	andi	r25, 0xF9	; 249
    2e10:	b9 2e       	mov	r11, r25
    2e12:	8f 36       	cpi	r24, 0x6F	; 111
    2e14:	c1 f0       	breq	.+48     	; 0x2e46 <vfprintf+0x26c>
    2e16:	18 f4       	brcc	.+6      	; 0x2e1e <vfprintf+0x244>
    2e18:	88 35       	cpi	r24, 0x58	; 88
    2e1a:	79 f0       	breq	.+30     	; 0x2e3a <vfprintf+0x260>
    2e1c:	b5 c0       	rjmp	.+362    	; 0x2f88 <vfprintf+0x3ae>
    2e1e:	80 37       	cpi	r24, 0x70	; 112
    2e20:	19 f0       	breq	.+6      	; 0x2e28 <vfprintf+0x24e>
    2e22:	88 37       	cpi	r24, 0x78	; 120
    2e24:	21 f0       	breq	.+8      	; 0x2e2e <vfprintf+0x254>
    2e26:	b0 c0       	rjmp	.+352    	; 0x2f88 <vfprintf+0x3ae>
    2e28:	e9 2f       	mov	r30, r25
    2e2a:	e0 61       	ori	r30, 0x10	; 16
    2e2c:	be 2e       	mov	r11, r30
    2e2e:	b4 fe       	sbrs	r11, 4
    2e30:	0d c0       	rjmp	.+26     	; 0x2e4c <vfprintf+0x272>
    2e32:	fb 2d       	mov	r31, r11
    2e34:	f4 60       	ori	r31, 0x04	; 4
    2e36:	bf 2e       	mov	r11, r31
    2e38:	09 c0       	rjmp	.+18     	; 0x2e4c <vfprintf+0x272>
    2e3a:	34 fe       	sbrs	r3, 4
    2e3c:	0a c0       	rjmp	.+20     	; 0x2e52 <vfprintf+0x278>
    2e3e:	29 2f       	mov	r18, r25
    2e40:	26 60       	ori	r18, 0x06	; 6
    2e42:	b2 2e       	mov	r11, r18
    2e44:	06 c0       	rjmp	.+12     	; 0x2e52 <vfprintf+0x278>
    2e46:	28 e0       	ldi	r18, 0x08	; 8
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	05 c0       	rjmp	.+10     	; 0x2e56 <vfprintf+0x27c>
    2e4c:	20 e1       	ldi	r18, 0x10	; 16
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	02 c0       	rjmp	.+4      	; 0x2e56 <vfprintf+0x27c>
    2e52:	20 e1       	ldi	r18, 0x10	; 16
    2e54:	32 e0       	ldi	r19, 0x02	; 2
    2e56:	f8 01       	movw	r30, r16
    2e58:	b7 fe       	sbrs	r11, 7
    2e5a:	07 c0       	rjmp	.+14     	; 0x2e6a <vfprintf+0x290>
    2e5c:	60 81       	ld	r22, Z
    2e5e:	71 81       	ldd	r23, Z+1	; 0x01
    2e60:	82 81       	ldd	r24, Z+2	; 0x02
    2e62:	93 81       	ldd	r25, Z+3	; 0x03
    2e64:	0c 5f       	subi	r16, 0xFC	; 252
    2e66:	1f 4f       	sbci	r17, 0xFF	; 255
    2e68:	06 c0       	rjmp	.+12     	; 0x2e76 <vfprintf+0x29c>
    2e6a:	60 81       	ld	r22, Z
    2e6c:	71 81       	ldd	r23, Z+1	; 0x01
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	0e 5f       	subi	r16, 0xFE	; 254
    2e74:	1f 4f       	sbci	r17, 0xFF	; 255
    2e76:	a3 01       	movw	r20, r6
    2e78:	0e 94 20 18 	call	0x3040	; 0x3040 <__ultoa_invert>
    2e7c:	88 2e       	mov	r8, r24
    2e7e:	86 18       	sub	r8, r6
    2e80:	fb 2d       	mov	r31, r11
    2e82:	ff 77       	andi	r31, 0x7F	; 127
    2e84:	3f 2e       	mov	r3, r31
    2e86:	36 fe       	sbrs	r3, 6
    2e88:	0d c0       	rjmp	.+26     	; 0x2ea4 <vfprintf+0x2ca>
    2e8a:	23 2d       	mov	r18, r3
    2e8c:	2e 7f       	andi	r18, 0xFE	; 254
    2e8e:	a2 2e       	mov	r10, r18
    2e90:	89 14       	cp	r8, r9
    2e92:	58 f4       	brcc	.+22     	; 0x2eaa <vfprintf+0x2d0>
    2e94:	34 fe       	sbrs	r3, 4
    2e96:	0b c0       	rjmp	.+22     	; 0x2eae <vfprintf+0x2d4>
    2e98:	32 fc       	sbrc	r3, 2
    2e9a:	09 c0       	rjmp	.+18     	; 0x2eae <vfprintf+0x2d4>
    2e9c:	83 2d       	mov	r24, r3
    2e9e:	8e 7e       	andi	r24, 0xEE	; 238
    2ea0:	a8 2e       	mov	r10, r24
    2ea2:	05 c0       	rjmp	.+10     	; 0x2eae <vfprintf+0x2d4>
    2ea4:	b8 2c       	mov	r11, r8
    2ea6:	a3 2c       	mov	r10, r3
    2ea8:	03 c0       	rjmp	.+6      	; 0x2eb0 <vfprintf+0x2d6>
    2eaa:	b8 2c       	mov	r11, r8
    2eac:	01 c0       	rjmp	.+2      	; 0x2eb0 <vfprintf+0x2d6>
    2eae:	b9 2c       	mov	r11, r9
    2eb0:	a4 fe       	sbrs	r10, 4
    2eb2:	0f c0       	rjmp	.+30     	; 0x2ed2 <vfprintf+0x2f8>
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e8 0d       	add	r30, r8
    2eb8:	f1 1d       	adc	r31, r1
    2eba:	80 81       	ld	r24, Z
    2ebc:	80 33       	cpi	r24, 0x30	; 48
    2ebe:	21 f4       	brne	.+8      	; 0x2ec8 <vfprintf+0x2ee>
    2ec0:	9a 2d       	mov	r25, r10
    2ec2:	99 7e       	andi	r25, 0xE9	; 233
    2ec4:	a9 2e       	mov	r10, r25
    2ec6:	09 c0       	rjmp	.+18     	; 0x2eda <vfprintf+0x300>
    2ec8:	a2 fe       	sbrs	r10, 2
    2eca:	06 c0       	rjmp	.+12     	; 0x2ed8 <vfprintf+0x2fe>
    2ecc:	b3 94       	inc	r11
    2ece:	b3 94       	inc	r11
    2ed0:	04 c0       	rjmp	.+8      	; 0x2eda <vfprintf+0x300>
    2ed2:	8a 2d       	mov	r24, r10
    2ed4:	86 78       	andi	r24, 0x86	; 134
    2ed6:	09 f0       	breq	.+2      	; 0x2eda <vfprintf+0x300>
    2ed8:	b3 94       	inc	r11
    2eda:	a3 fc       	sbrc	r10, 3
    2edc:	11 c0       	rjmp	.+34     	; 0x2f00 <vfprintf+0x326>
    2ede:	a0 fe       	sbrs	r10, 0
    2ee0:	06 c0       	rjmp	.+12     	; 0x2eee <vfprintf+0x314>
    2ee2:	b2 14       	cp	r11, r2
    2ee4:	88 f4       	brcc	.+34     	; 0x2f08 <vfprintf+0x32e>
    2ee6:	28 0c       	add	r2, r8
    2ee8:	92 2c       	mov	r9, r2
    2eea:	9b 18       	sub	r9, r11
    2eec:	0e c0       	rjmp	.+28     	; 0x2f0a <vfprintf+0x330>
    2eee:	b2 14       	cp	r11, r2
    2ef0:	60 f4       	brcc	.+24     	; 0x2f0a <vfprintf+0x330>
    2ef2:	b6 01       	movw	r22, r12
    2ef4:	80 e2       	ldi	r24, 0x20	; 32
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <fputc>
    2efc:	b3 94       	inc	r11
    2efe:	f7 cf       	rjmp	.-18     	; 0x2eee <vfprintf+0x314>
    2f00:	b2 14       	cp	r11, r2
    2f02:	18 f4       	brcc	.+6      	; 0x2f0a <vfprintf+0x330>
    2f04:	2b 18       	sub	r2, r11
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <vfprintf+0x332>
    2f08:	98 2c       	mov	r9, r8
    2f0a:	21 2c       	mov	r2, r1
    2f0c:	a4 fe       	sbrs	r10, 4
    2f0e:	10 c0       	rjmp	.+32     	; 0x2f30 <vfprintf+0x356>
    2f10:	b6 01       	movw	r22, r12
    2f12:	80 e3       	ldi	r24, 0x30	; 48
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <fputc>
    2f1a:	a2 fe       	sbrs	r10, 2
    2f1c:	17 c0       	rjmp	.+46     	; 0x2f4c <vfprintf+0x372>
    2f1e:	a1 fc       	sbrc	r10, 1
    2f20:	03 c0       	rjmp	.+6      	; 0x2f28 <vfprintf+0x34e>
    2f22:	88 e7       	ldi	r24, 0x78	; 120
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <vfprintf+0x352>
    2f28:	88 e5       	ldi	r24, 0x58	; 88
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	b6 01       	movw	r22, r12
    2f2e:	0c c0       	rjmp	.+24     	; 0x2f48 <vfprintf+0x36e>
    2f30:	8a 2d       	mov	r24, r10
    2f32:	86 78       	andi	r24, 0x86	; 134
    2f34:	59 f0       	breq	.+22     	; 0x2f4c <vfprintf+0x372>
    2f36:	a1 fe       	sbrs	r10, 1
    2f38:	02 c0       	rjmp	.+4      	; 0x2f3e <vfprintf+0x364>
    2f3a:	8b e2       	ldi	r24, 0x2B	; 43
    2f3c:	01 c0       	rjmp	.+2      	; 0x2f40 <vfprintf+0x366>
    2f3e:	80 e2       	ldi	r24, 0x20	; 32
    2f40:	a7 fc       	sbrc	r10, 7
    2f42:	8d e2       	ldi	r24, 0x2D	; 45
    2f44:	b6 01       	movw	r22, r12
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <fputc>
    2f4c:	89 14       	cp	r8, r9
    2f4e:	38 f4       	brcc	.+14     	; 0x2f5e <vfprintf+0x384>
    2f50:	b6 01       	movw	r22, r12
    2f52:	80 e3       	ldi	r24, 0x30	; 48
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <fputc>
    2f5a:	9a 94       	dec	r9
    2f5c:	f7 cf       	rjmp	.-18     	; 0x2f4c <vfprintf+0x372>
    2f5e:	8a 94       	dec	r8
    2f60:	f3 01       	movw	r30, r6
    2f62:	e8 0d       	add	r30, r8
    2f64:	f1 1d       	adc	r31, r1
    2f66:	80 81       	ld	r24, Z
    2f68:	b6 01       	movw	r22, r12
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <fputc>
    2f70:	81 10       	cpse	r8, r1
    2f72:	f5 cf       	rjmp	.-22     	; 0x2f5e <vfprintf+0x384>
    2f74:	22 20       	and	r2, r2
    2f76:	09 f4       	brne	.+2      	; 0x2f7a <vfprintf+0x3a0>
    2f78:	42 ce       	rjmp	.-892    	; 0x2bfe <vfprintf+0x24>
    2f7a:	b6 01       	movw	r22, r12
    2f7c:	80 e2       	ldi	r24, 0x20	; 32
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <fputc>
    2f84:	2a 94       	dec	r2
    2f86:	f6 cf       	rjmp	.-20     	; 0x2f74 <vfprintf+0x39a>
    2f88:	f6 01       	movw	r30, r12
    2f8a:	86 81       	ldd	r24, Z+6	; 0x06
    2f8c:	97 81       	ldd	r25, Z+7	; 0x07
    2f8e:	02 c0       	rjmp	.+4      	; 0x2f94 <vfprintf+0x3ba>
    2f90:	8f ef       	ldi	r24, 0xFF	; 255
    2f92:	9f ef       	ldi	r25, 0xFF	; 255
    2f94:	2b 96       	adiw	r28, 0x0b	; 11
    2f96:	e2 e1       	ldi	r30, 0x12	; 18
    2f98:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <__epilogue_restores__>

00002f9c <strnlen_P>:
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	05 90       	lpm	r0, Z+
    2fa0:	61 50       	subi	r22, 0x01	; 1
    2fa2:	70 40       	sbci	r23, 0x00	; 0
    2fa4:	01 10       	cpse	r0, r1
    2fa6:	d8 f7       	brcc	.-10     	; 0x2f9e <strnlen_P+0x2>
    2fa8:	80 95       	com	r24
    2faa:	90 95       	com	r25
    2fac:	8e 0f       	add	r24, r30
    2fae:	9f 1f       	adc	r25, r31
    2fb0:	08 95       	ret

00002fb2 <strnlen>:
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	61 50       	subi	r22, 0x01	; 1
    2fb6:	70 40       	sbci	r23, 0x00	; 0
    2fb8:	01 90       	ld	r0, Z+
    2fba:	01 10       	cpse	r0, r1
    2fbc:	d8 f7       	brcc	.-10     	; 0x2fb4 <strnlen+0x2>
    2fbe:	80 95       	com	r24
    2fc0:	90 95       	com	r25
    2fc2:	8e 0f       	add	r24, r30
    2fc4:	9f 1f       	adc	r25, r31
    2fc6:	08 95       	ret

00002fc8 <fputc>:
    2fc8:	0f 93       	push	r16
    2fca:	1f 93       	push	r17
    2fcc:	cf 93       	push	r28
    2fce:	df 93       	push	r29
    2fd0:	fb 01       	movw	r30, r22
    2fd2:	23 81       	ldd	r18, Z+3	; 0x03
    2fd4:	21 fd       	sbrc	r18, 1
    2fd6:	03 c0       	rjmp	.+6      	; 0x2fde <fputc+0x16>
    2fd8:	8f ef       	ldi	r24, 0xFF	; 255
    2fda:	9f ef       	ldi	r25, 0xFF	; 255
    2fdc:	2c c0       	rjmp	.+88     	; 0x3036 <fputc+0x6e>
    2fde:	22 ff       	sbrs	r18, 2
    2fe0:	16 c0       	rjmp	.+44     	; 0x300e <fputc+0x46>
    2fe2:	46 81       	ldd	r20, Z+6	; 0x06
    2fe4:	57 81       	ldd	r21, Z+7	; 0x07
    2fe6:	24 81       	ldd	r18, Z+4	; 0x04
    2fe8:	35 81       	ldd	r19, Z+5	; 0x05
    2fea:	42 17       	cp	r20, r18
    2fec:	53 07       	cpc	r21, r19
    2fee:	44 f4       	brge	.+16     	; 0x3000 <fputc+0x38>
    2ff0:	a0 81       	ld	r26, Z
    2ff2:	b1 81       	ldd	r27, Z+1	; 0x01
    2ff4:	9d 01       	movw	r18, r26
    2ff6:	2f 5f       	subi	r18, 0xFF	; 255
    2ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffa:	31 83       	std	Z+1, r19	; 0x01
    2ffc:	20 83       	st	Z, r18
    2ffe:	8c 93       	st	X, r24
    3000:	26 81       	ldd	r18, Z+6	; 0x06
    3002:	37 81       	ldd	r19, Z+7	; 0x07
    3004:	2f 5f       	subi	r18, 0xFF	; 255
    3006:	3f 4f       	sbci	r19, 0xFF	; 255
    3008:	37 83       	std	Z+7, r19	; 0x07
    300a:	26 83       	std	Z+6, r18	; 0x06
    300c:	14 c0       	rjmp	.+40     	; 0x3036 <fputc+0x6e>
    300e:	8b 01       	movw	r16, r22
    3010:	ec 01       	movw	r28, r24
    3012:	fb 01       	movw	r30, r22
    3014:	00 84       	ldd	r0, Z+8	; 0x08
    3016:	f1 85       	ldd	r31, Z+9	; 0x09
    3018:	e0 2d       	mov	r30, r0
    301a:	09 95       	icall
    301c:	89 2b       	or	r24, r25
    301e:	e1 f6       	brne	.-72     	; 0x2fd8 <fputc+0x10>
    3020:	d8 01       	movw	r26, r16
    3022:	16 96       	adiw	r26, 0x06	; 6
    3024:	8d 91       	ld	r24, X+
    3026:	9c 91       	ld	r25, X
    3028:	17 97       	sbiw	r26, 0x07	; 7
    302a:	01 96       	adiw	r24, 0x01	; 1
    302c:	17 96       	adiw	r26, 0x07	; 7
    302e:	9c 93       	st	X, r25
    3030:	8e 93       	st	-X, r24
    3032:	16 97       	sbiw	r26, 0x06	; 6
    3034:	ce 01       	movw	r24, r28
    3036:	df 91       	pop	r29
    3038:	cf 91       	pop	r28
    303a:	1f 91       	pop	r17
    303c:	0f 91       	pop	r16
    303e:	08 95       	ret

00003040 <__ultoa_invert>:
    3040:	fa 01       	movw	r30, r20
    3042:	aa 27       	eor	r26, r26
    3044:	28 30       	cpi	r18, 0x08	; 8
    3046:	51 f1       	breq	.+84     	; 0x309c <__ultoa_invert+0x5c>
    3048:	20 31       	cpi	r18, 0x10	; 16
    304a:	81 f1       	breq	.+96     	; 0x30ac <__ultoa_invert+0x6c>
    304c:	e8 94       	clt
    304e:	6f 93       	push	r22
    3050:	6e 7f       	andi	r22, 0xFE	; 254
    3052:	6e 5f       	subi	r22, 0xFE	; 254
    3054:	7f 4f       	sbci	r23, 0xFF	; 255
    3056:	8f 4f       	sbci	r24, 0xFF	; 255
    3058:	9f 4f       	sbci	r25, 0xFF	; 255
    305a:	af 4f       	sbci	r26, 0xFF	; 255
    305c:	b1 e0       	ldi	r27, 0x01	; 1
    305e:	3e d0       	rcall	.+124    	; 0x30dc <__ultoa_invert+0x9c>
    3060:	b4 e0       	ldi	r27, 0x04	; 4
    3062:	3c d0       	rcall	.+120    	; 0x30dc <__ultoa_invert+0x9c>
    3064:	67 0f       	add	r22, r23
    3066:	78 1f       	adc	r23, r24
    3068:	89 1f       	adc	r24, r25
    306a:	9a 1f       	adc	r25, r26
    306c:	a1 1d       	adc	r26, r1
    306e:	68 0f       	add	r22, r24
    3070:	79 1f       	adc	r23, r25
    3072:	8a 1f       	adc	r24, r26
    3074:	91 1d       	adc	r25, r1
    3076:	a1 1d       	adc	r26, r1
    3078:	6a 0f       	add	r22, r26
    307a:	71 1d       	adc	r23, r1
    307c:	81 1d       	adc	r24, r1
    307e:	91 1d       	adc	r25, r1
    3080:	a1 1d       	adc	r26, r1
    3082:	20 d0       	rcall	.+64     	; 0x30c4 <__ultoa_invert+0x84>
    3084:	09 f4       	brne	.+2      	; 0x3088 <__ultoa_invert+0x48>
    3086:	68 94       	set
    3088:	3f 91       	pop	r19
    308a:	2a e0       	ldi	r18, 0x0A	; 10
    308c:	26 9f       	mul	r18, r22
    308e:	11 24       	eor	r1, r1
    3090:	30 19       	sub	r19, r0
    3092:	30 5d       	subi	r19, 0xD0	; 208
    3094:	31 93       	st	Z+, r19
    3096:	de f6       	brtc	.-74     	; 0x304e <__ultoa_invert+0xe>
    3098:	cf 01       	movw	r24, r30
    309a:	08 95       	ret
    309c:	46 2f       	mov	r20, r22
    309e:	47 70       	andi	r20, 0x07	; 7
    30a0:	40 5d       	subi	r20, 0xD0	; 208
    30a2:	41 93       	st	Z+, r20
    30a4:	b3 e0       	ldi	r27, 0x03	; 3
    30a6:	0f d0       	rcall	.+30     	; 0x30c6 <__ultoa_invert+0x86>
    30a8:	c9 f7       	brne	.-14     	; 0x309c <__ultoa_invert+0x5c>
    30aa:	f6 cf       	rjmp	.-20     	; 0x3098 <__ultoa_invert+0x58>
    30ac:	46 2f       	mov	r20, r22
    30ae:	4f 70       	andi	r20, 0x0F	; 15
    30b0:	40 5d       	subi	r20, 0xD0	; 208
    30b2:	4a 33       	cpi	r20, 0x3A	; 58
    30b4:	18 f0       	brcs	.+6      	; 0x30bc <__ultoa_invert+0x7c>
    30b6:	49 5d       	subi	r20, 0xD9	; 217
    30b8:	31 fd       	sbrc	r19, 1
    30ba:	40 52       	subi	r20, 0x20	; 32
    30bc:	41 93       	st	Z+, r20
    30be:	02 d0       	rcall	.+4      	; 0x30c4 <__ultoa_invert+0x84>
    30c0:	a9 f7       	brne	.-22     	; 0x30ac <__ultoa_invert+0x6c>
    30c2:	ea cf       	rjmp	.-44     	; 0x3098 <__ultoa_invert+0x58>
    30c4:	b4 e0       	ldi	r27, 0x04	; 4
    30c6:	a6 95       	lsr	r26
    30c8:	97 95       	ror	r25
    30ca:	87 95       	ror	r24
    30cc:	77 95       	ror	r23
    30ce:	67 95       	ror	r22
    30d0:	ba 95       	dec	r27
    30d2:	c9 f7       	brne	.-14     	; 0x30c6 <__ultoa_invert+0x86>
    30d4:	00 97       	sbiw	r24, 0x00	; 0
    30d6:	61 05       	cpc	r22, r1
    30d8:	71 05       	cpc	r23, r1
    30da:	08 95       	ret
    30dc:	9b 01       	movw	r18, r22
    30de:	ac 01       	movw	r20, r24
    30e0:	0a 2e       	mov	r0, r26
    30e2:	06 94       	lsr	r0
    30e4:	57 95       	ror	r21
    30e6:	47 95       	ror	r20
    30e8:	37 95       	ror	r19
    30ea:	27 95       	ror	r18
    30ec:	ba 95       	dec	r27
    30ee:	c9 f7       	brne	.-14     	; 0x30e2 <__ultoa_invert+0xa2>
    30f0:	62 0f       	add	r22, r18
    30f2:	73 1f       	adc	r23, r19
    30f4:	84 1f       	adc	r24, r20
    30f6:	95 1f       	adc	r25, r21
    30f8:	a0 1d       	adc	r26, r0
    30fa:	08 95       	ret

000030fc <__prologue_saves__>:
    30fc:	2f 92       	push	r2
    30fe:	3f 92       	push	r3
    3100:	4f 92       	push	r4
    3102:	5f 92       	push	r5
    3104:	6f 92       	push	r6
    3106:	7f 92       	push	r7
    3108:	8f 92       	push	r8
    310a:	9f 92       	push	r9
    310c:	af 92       	push	r10
    310e:	bf 92       	push	r11
    3110:	cf 92       	push	r12
    3112:	df 92       	push	r13
    3114:	ef 92       	push	r14
    3116:	ff 92       	push	r15
    3118:	0f 93       	push	r16
    311a:	1f 93       	push	r17
    311c:	cf 93       	push	r28
    311e:	df 93       	push	r29
    3120:	cd b7       	in	r28, 0x3d	; 61
    3122:	de b7       	in	r29, 0x3e	; 62
    3124:	ca 1b       	sub	r28, r26
    3126:	db 0b       	sbc	r29, r27
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	f8 94       	cli
    312c:	de bf       	out	0x3e, r29	; 62
    312e:	0f be       	out	0x3f, r0	; 63
    3130:	cd bf       	out	0x3d, r28	; 61
    3132:	09 94       	ijmp

00003134 <__epilogue_restores__>:
    3134:	2a 88       	ldd	r2, Y+18	; 0x12
    3136:	39 88       	ldd	r3, Y+17	; 0x11
    3138:	48 88       	ldd	r4, Y+16	; 0x10
    313a:	5f 84       	ldd	r5, Y+15	; 0x0f
    313c:	6e 84       	ldd	r6, Y+14	; 0x0e
    313e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3140:	8c 84       	ldd	r8, Y+12	; 0x0c
    3142:	9b 84       	ldd	r9, Y+11	; 0x0b
    3144:	aa 84       	ldd	r10, Y+10	; 0x0a
    3146:	b9 84       	ldd	r11, Y+9	; 0x09
    3148:	c8 84       	ldd	r12, Y+8	; 0x08
    314a:	df 80       	ldd	r13, Y+7	; 0x07
    314c:	ee 80       	ldd	r14, Y+6	; 0x06
    314e:	fd 80       	ldd	r15, Y+5	; 0x05
    3150:	0c 81       	ldd	r16, Y+4	; 0x04
    3152:	1b 81       	ldd	r17, Y+3	; 0x03
    3154:	aa 81       	ldd	r26, Y+2	; 0x02
    3156:	b9 81       	ldd	r27, Y+1	; 0x01
    3158:	ce 0f       	add	r28, r30
    315a:	d1 1d       	adc	r29, r1
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	de bf       	out	0x3e, r29	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	cd bf       	out	0x3d, r28	; 61
    3166:	ed 01       	movw	r28, r26
    3168:	08 95       	ret

0000316a <_exit>:
    316a:	f8 94       	cli

0000316c <__stop_program>:
    316c:	ff cf       	rjmp	.-2      	; 0x316c <__stop_program>
