
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d0  00800100  000024e4  00002578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000134  008002d0  008002d0  00002748  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  000027e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000037c7  00000000  00000000  00002adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001233  00000000  00000000  000062a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f52  00000000  00000000  000074d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000960  00000000  00000000  00009428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c09  00000000  00000000  00009d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002151  00000000  00000000  0000a991  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000cae2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__ctors_end>
       4:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       8:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      10:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      14:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_5>
      18:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      1c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      20:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      24:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      28:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      2c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      30:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      34:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      38:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      3c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      40:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__vector_16>
      44:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      48:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      4c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      50:	0c 94 c4 0d 	jmp	0x1b88	; 0x1b88 <__vector_20>
      54:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <__vector_21>
      58:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      5c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      60:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      64:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      68:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      6c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      70:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      74:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      78:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2320>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2267>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 20 43 61 69 6c 69 6e 20 44 65 6c 67      by  Cailin Delg
      d4:	61 64 6f 20 2d 20 34 38 30 32 37 39 34 32 00        ado - 48027942.

000000e3 <__c.2265>:
      e3:	20 5c 24 24 20 20 20 5c 24 24 20 20 20 20 20 5c      \$$   \$$     \
      f3:	24 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20     $     \$$   \$$ 
     103:	20 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20           \$$   \$$ 
     113:	20 5c 24 24 24 24 24 24 24 20 5c 24 24 20 20 20      \$$$$$$$ \$$   
     123:	20 20 20 20 20 5c 24 24 24 24 24 24 00                   \$$$$$$.

00000130 <__c.2263>:
     130:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 5c 24     | $$  | $$    \$
     140:	24 24 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20     $$   | $$  | $$ 
     150:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     160:	5c 24 24 20 20 20 20 20 5c 7c 20 24 24 20 20 20     \$$     \| $$   
     170:	20 20 20 20 5c 24 24 20 20 20 20 24 24 00               \$$    $$.

0000017e <__c.2261>:
     17e:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 5c 24 24     | $$  | $$   \$$
     18e:	20 24 24 20 20 7c 20 24 24 20 20 7c 20 24 24 20      $$  | $$  | $$ 
     19e:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 7c          | $$  | $$|
     1ae:	20 24 24 24 24 24 24 24 24 7c 20 24 24 20 20 20      $$$$$$$$| $$   
     1be:	20 20 20 7c 20 24 24 5f 5f 2f 20 24 24 00              | $$__/ $$.

000001cc <__c.2259>:
     1cc:	7c 20 24 24 24 24 24 24 24 24 20 20 5c 24 24 5c     | $$$$$$$$  \$$\
     1dc:	20 20 24 24 20 7c 20 24 24 24 24 24 24 24 5c 20       $$ | $$$$$$$\ 
     1ec:	20 20 20 20 20 7c 20 24 24 24 24 24 24 24 24 7c          | $$$$$$$$|
     1fc:	20 24 24 20 20 20 20 24 24 7c 20 24 24 20 20 20      $$    $$| $$   
     20c:	5c 24 24 7c 20 24 24 20 20 7c 20 24 24 00           \$$| $$  | $$.

0000021a <__c.2257>:
     21a:	7c 20 24 24 20 20 20 20 24 24 20 5c 24 24 5c 20     | $$    $$ \$$\ 
     22a:	2f 20 20 24 24 7c 20 24 24 20 20 20 20 24 24 20     /  $$| $$    $$ 
     23a:	20 20 20 20 20 7c 20 24 24 20 20 20 20 24 24 7c          | $$    $$|
     24a:	20 20 24 24 24 24 24 24 5c 7c 20 20 24 24 24 24       $$$$$$\|  $$$$
     25a:	24 24 5c 7c 20 20 24 24 24 24 24 24 5c 00           $$\|  $$$$$$\.

00000268 <__c.2255>:
     268:	7c 20 24 24 5f 5f 7c 20 24 24 7c 20 24 24 20 20     | $$__| $$| $$  
     278:	20 7c 20 24 24 7c 20 24 24 5f 5f 7c 20 24 24 20      | $$| $$__| $$ 
     288:	20 20 20 20 20 7c 20 24 24 5f 5f 7c 20 24 24 20          | $$__| $$ 
     298:	2f 20 20 20 20 20 20 5c 20 20 2f 20 20 20 20 20     /      \  /     
     2a8:	20 5c 20 20 2f 20 20 20 20 20 20 5c 00               \  /      \.

000002b5 <__c.2253>:
     2b5:	7c 20 20 24 24 24 24 24 24 5c 7c 20 24 24 20 20     |  $$$$$$\| $$  
     2c5:	20 7c 20 24 24 7c 20 24 24 24 24 24 24 24 5c 20      | $$| $$$$$$$\ 
     2d5:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     2e5:	20 5f 5f 5f 5f 5f 5f 20 20 20 20 5f 5f 5f 5f 5f      ______    _____
     2f5:	5f 20 20 20 20 5f 5f 5f 5f 5f 5f 00                 _    ______.

00000301 <__c.2251>:
     301:	20 2f 20 20 20 20 20 20 5c 20 7c 20 20 5c 20 20      /      \ |  \  
     311:	20 7c 20 20 5c 7c 20 20 20 20 20 20 20 5c 20 20      |  \|       \  
     321:	20 20 20 20 20 7c 20 20 5c 20 20 7c 20 20 5c 00          |  \  |  \.

00000331 <__c.2249>:
     331:	20 20 5f 5f 5f 5f 5f 5f 20 20 20 5f 5f 20 20 20       ______   __   
     341:	20 20 5f 5f 20 20 5f 5f 5f 5f 5f 5f 5f 20 20 20       __  _______   
     351:	20 20 20 20 20 20 5f 5f 20 20 20 20 5f 5f 00              __    __.

00000360 <__c.2058>:
     360:	1b 5b 3f 32 35 68 00                                .[?25h.

00000367 <__c.2054>:
     367:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000036e <__c.2050>:
     36e:	1b 5b 25 64 6d 00                                   .[%dm.

00000374 <__c.2045>:
     374:	1b 5b 4b 00                                         .[K.

00000378 <__c.2040>:
     378:	1b 5b 32 4a 00                                      .[2J.

0000037d <__c.2025>:
     37d:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000386 <__ctors_end>:
     386:	11 24       	eor	r1, r1
     388:	1f be       	out	0x3f, r1	; 63
     38a:	cf ef       	ldi	r28, 0xFF	; 255
     38c:	d8 e0       	ldi	r29, 0x08	; 8
     38e:	de bf       	out	0x3e, r29	; 62
     390:	cd bf       	out	0x3d, r28	; 61

00000392 <__do_copy_data>:
     392:	12 e0       	ldi	r17, 0x02	; 2
     394:	a0 e0       	ldi	r26, 0x00	; 0
     396:	b1 e0       	ldi	r27, 0x01	; 1
     398:	e4 ee       	ldi	r30, 0xE4	; 228
     39a:	f4 e2       	ldi	r31, 0x24	; 36
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__do_copy_data+0x10>
     39e:	05 90       	lpm	r0, Z+
     3a0:	0d 92       	st	X+, r0
     3a2:	a0 3d       	cpi	r26, 0xD0	; 208
     3a4:	b1 07       	cpc	r27, r17
     3a6:	d9 f7       	brne	.-10     	; 0x39e <__do_copy_data+0xc>

000003a8 <__do_clear_bss>:
     3a8:	24 e0       	ldi	r18, 0x04	; 4
     3aa:	a0 ed       	ldi	r26, 0xD0	; 208
     3ac:	b2 e0       	ldi	r27, 0x02	; 2
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
     3b2:	a4 30       	cpi	r26, 0x04	; 4
     3b4:	b2 07       	cpc	r27, r18
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>
     3b8:	0e 94 ba 0c 	call	0x1974	; 0x1974 <main>
     3bc:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <_exit>

000003c0 <__bad_interrupt>:
     3c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c4 <init_button_interrupts>:
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void)
{
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     3c4:	e8 e6       	ldi	r30, 0x68	; 104
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	82 60       	ori	r24, 0x02	; 2
     3cc:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     3ce:	8b b3       	in	r24, 0x1b	; 27
     3d0:	82 60       	ori	r24, 0x02	; 2
     3d2:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     3d4:	ec e6       	ldi	r30, 0x6C	; 108
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	8f 60       	ori	r24, 0x0F	; 15
     3dc:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     3de:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <__data_end>
     3e2:	08 95       	ret

000003e4 <button_pushed>:

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0)
     3e4:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <__data_end>
     3e8:	18 16       	cp	r1, r24
     3ea:	14 f5       	brge	.+68     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     3ec:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3f0:	6f b7       	in	r22, 0x3f	; 63
		cli();
     3f2:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	09 c0       	rjmp	.+18     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		{
			button_queue[i - 1] = button_queue[i];
     3f8:	f9 01       	movw	r30, r18
     3fa:	ef 52       	subi	r30, 0x2F	; 47
     3fc:	fd 4f       	sbci	r31, 0xFD	; 253
     3fe:	40 81       	ld	r20, Z
     400:	f9 01       	movw	r30, r18
     402:	e0 53       	subi	r30, 0x30	; 48
     404:	fd 4f       	sbci	r31, 0xFD	; 253
     406:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     408:	9f 5f       	subi	r25, 0xFF	; 255
     40a:	29 2f       	mov	r18, r25
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 91 d0 02 	lds	r20, 0x02D0	; 0x8002d0 <__data_end>
     412:	04 2e       	mov	r0, r20
     414:	00 0c       	add	r0, r0
     416:	55 0b       	sbc	r21, r21
     418:	24 17       	cp	r18, r20
     41a:	35 07       	cpc	r19, r21
     41c:	6c f3       	brlt	.-38     	; 0x3f8 <button_pushed+0x14>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     41e:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <__data_end>
     422:	91 50       	subi	r25, 0x01	; 1
     424:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <__data_end>
		
		if (interrupts_were_enabled)
     428:	66 23       	and	r22, r22
     42a:	1c f4       	brge	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		{
			// Turn them back on again
			sei();
     42c:	78 94       	sei
     42e:	08 95       	ret
	queue_length = 0;
}

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     430:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     432:	08 95       	ret

00000434 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect)
{
     434:	1f 92       	push	r1
     436:	0f 92       	push	r0
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     44c:	43 b1       	in	r20, 0x03	; 3
     44e:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	26 c0       	rjmp	.+76     	; 0x4a0 <__vector_5+0x6c>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     454:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <__data_end>
     458:	94 30       	cpi	r25, 0x04	; 4
     45a:	0c f5       	brge	.+66     	; 0x49e <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     45c:	24 2f       	mov	r18, r20
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	08 2e       	mov	r0, r24
     462:	02 c0       	rjmp	.+4      	; 0x468 <__vector_5+0x34>
     464:	35 95       	asr	r19
     466:	27 95       	ror	r18
     468:	0a 94       	dec	r0
     46a:	e2 f7       	brpl	.-8      	; 0x464 <__vector_5+0x30>
     46c:	20 ff       	sbrs	r18, 0
     46e:	17 c0       	rjmp	.+46     	; 0x49e <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin)))
     470:	20 91 d5 02 	lds	r18, 0x02D5	; 0x8002d5 <last_button_state>
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	08 2e       	mov	r0, r24
     478:	02 c0       	rjmp	.+4      	; 0x47e <__vector_5+0x4a>
     47a:	35 95       	asr	r19
     47c:	27 95       	ror	r18
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <__vector_5+0x46>
     482:	20 fd       	sbrc	r18, 0
     484:	0c c0       	rjmp	.+24     	; 0x49e <__vector_5+0x6a>
				{
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     486:	e0 91 d0 02 	lds	r30, 0x02D0	; 0x8002d0 <__data_end>
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	9e 0f       	add	r25, r30
     48e:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <__data_end>
     492:	0e 2e       	mov	r0, r30
     494:	00 0c       	add	r0, r0
     496:	ff 0b       	sbc	r31, r31
     498:	ef 52       	subi	r30, 0x2F	; 47
     49a:	fd 4f       	sbci	r31, 0xFD	; 253
     49c:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	c0 f2       	brcs	.-80     	; 0x454 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     4a4:	40 93 d5 02 	sts	0x02D5, r20	; 0x8002d5 <last_button_state>
}
     4a8:	ff 91       	pop	r31
     4aa:	ef 91       	pop	r30
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <update_start_screen>:

// Update dynamic start screen based on the frame number (0-31)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	18 2f       	mov	r17, r24
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     4c8:	d4 e0       	ldi	r29, 0x04	; 4
     4ca:	36 c0       	rjmp	.+108    	; 0x538 <update_start_screen+0x78>
	{
		for (uint8_t col = 11; col < 16; col++)
		{
			colour = col == 14 ? COLOUR_YELLOW : COLOUR_BLACK;
     4cc:	ce 30       	cpi	r28, 0x0E	; 14
     4ce:	11 f4       	brne	.+4      	; 0x4d4 <update_start_screen+0x14>
     4d0:	4f ef       	ldi	r20, 0xFF	; 255
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <update_start_screen+0x16>
     4d4:	40 e0       	ldi	r20, 0x00	; 0
			if (((32+col-frame_number) & ((1<<(row-2))-1)) == (1<<(row-3))-1)
     4d6:	2c 2f       	mov	r18, r28
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	20 5e       	subi	r18, 0xE0	; 224
     4dc:	3f 4f       	sbci	r19, 0xFF	; 255
     4de:	21 1b       	sub	r18, r17
     4e0:	31 09       	sbc	r19, r1
     4e2:	ed 2f       	mov	r30, r29
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	bf 01       	movw	r22, r30
     4e8:	62 50       	subi	r22, 0x02	; 2
     4ea:	71 09       	sbc	r23, r1
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	dc 01       	movw	r26, r24
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <update_start_screen+0x38>
     4f4:	aa 0f       	add	r26, r26
     4f6:	bb 1f       	adc	r27, r27
     4f8:	6a 95       	dec	r22
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <update_start_screen+0x34>
     4fc:	bd 01       	movw	r22, r26
     4fe:	61 50       	subi	r22, 0x01	; 1
     500:	71 09       	sbc	r23, r1
     502:	26 23       	and	r18, r22
     504:	37 23       	and	r19, r23
     506:	33 97       	sbiw	r30, 0x03	; 3
     508:	02 c0       	rjmp	.+4      	; 0x50e <update_start_screen+0x4e>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	ea 95       	dec	r30
     510:	e2 f7       	brpl	.-8      	; 0x50a <update_start_screen+0x4a>
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	28 17       	cp	r18, r24
     516:	39 07       	cpc	r19, r25
     518:	29 f4       	brne	.+10     	; 0x524 <update_start_screen+0x64>
			{
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
     51a:	ce 30       	cpi	r28, 0x0E	; 14
     51c:	10 f4       	brcc	.+4      	; 0x522 <update_start_screen+0x62>
     51e:	4f e0       	ldi	r20, 0x0F	; 15
     520:	01 c0       	rjmp	.+2      	; 0x524 <update_start_screen+0x64>
     522:	40 ef       	ldi	r20, 0xF0	; 240
			}
			ledmatrix_update_pixel(col, row, colour);
     524:	6d 2f       	mov	r22, r29
     526:	8c 2f       	mov	r24, r28
     528:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
	{
		for (uint8_t col = 11; col < 16; col++)
     52c:	cf 5f       	subi	r28, 0xFF	; 255
     52e:	01 c0       	rjmp	.+2      	; 0x532 <update_start_screen+0x72>
     530:	cb e0       	ldi	r28, 0x0B	; 11
     532:	c0 31       	cpi	r28, 0x10	; 16
     534:	58 f2       	brcs	.-106    	; 0x4cc <update_start_screen+0xc>
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     536:	df 5f       	subi	r29, 0xFF	; 255
     538:	d8 30       	cpi	r29, 0x08	; 8
     53a:	d0 f3       	brcs	.-12     	; 0x530 <update_start_screen+0x70>
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
			}
			ledmatrix_update_pixel(col, row, colour);
		}
	}
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	08 95       	ret

00000544 <show_start_screen>:
// Stored as a 5 x 3 grid pattern going from Left-to-Right, Top-to-Bottom
// Padded with a leading zero so that it fits into a 16-bit value


void show_start_screen(void)
{
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	28 97       	sbiw	r28, 0x08	; 8
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     55a:	0e 94 c4 06 	call	0xd88	; 0xd88 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	31 c0       	rjmp	.+98     	; 0x5c4 <show_start_screen+0x80>
	{
		col_data = pong_display[col];
     562:	e1 2f       	mov	r30, r17
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	e1 5f       	subi	r30, 0xF1	; 241
     568:	fe 4f       	sbci	r31, 0xFE	; 254
     56a:	90 81       	ld	r25, Z
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	21 c0       	rjmp	.+66     	; 0x5b2 <show_start_screen+0x6e>
		{
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data>>row & 1)
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	49 2f       	mov	r20, r25
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	08 2e       	mov	r0, r24
     57a:	02 c0       	rjmp	.+4      	; 0x580 <show_start_screen+0x3c>
     57c:	55 95       	asr	r21
     57e:	47 95       	ror	r20
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <show_start_screen+0x38>
     584:	40 ff       	sbrs	r20, 0
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <show_start_screen+0x5e>
			{
				column_colour_data[row] = (row < 4 ? COLOUR_RED : COLOUR_GREEN);
     588:	84 30       	cpi	r24, 0x04	; 4
     58a:	10 f4       	brcc	.+4      	; 0x590 <show_start_screen+0x4c>
     58c:	4f e0       	ldi	r20, 0x0F	; 15
     58e:	01 c0       	rjmp	.+2      	; 0x592 <show_start_screen+0x4e>
     590:	40 ef       	ldi	r20, 0xF0	; 240
     592:	e1 e0       	ldi	r30, 0x01	; 1
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	ec 0f       	add	r30, r28
     598:	fd 1f       	adc	r31, r29
     59a:	e2 0f       	add	r30, r18
     59c:	f3 1f       	adc	r31, r19
     59e:	40 83       	st	Z, r20
     5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <show_start_screen+0x6c>
			}
			else
			{
				column_colour_data[row] = 0;
     5a2:	e1 e0       	ldi	r30, 0x01	; 1
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	ec 0f       	add	r30, r28
     5a8:	fd 1f       	adc	r31, r29
     5aa:	e2 0f       	add	r30, r18
     5ac:	f3 1f       	adc	r31, r19
     5ae:	10 82       	st	Z, r1
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
	{
		col_data = pong_display[col];
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	88 30       	cpi	r24, 0x08	; 8
     5b4:	e8 f2       	brcs	.-70     	; 0x570 <show_start_screen+0x2c>
			else
			{
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
     5b6:	be 01       	movw	r22, r28
     5b8:	6f 5f       	subi	r22, 0xFF	; 255
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	81 2f       	mov	r24, r17
     5be:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ledmatrix_update_column>
{
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     5c2:	1f 5f       	subi	r17, 0xFF	; 255
     5c4:	10 31       	cpi	r17, 0x10	; 16
     5c6:	68 f2       	brcs	.-102    	; 0x562 <show_start_screen+0x1e>
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
	}
	update_start_screen(0);
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
}
     5ce:	28 96       	adiw	r28, 0x08	; 8
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	08 95       	ret

000005e2 <default_grid>:
}

// Initialize the display for the board, this creates the display
// for an empty board.
void default_grid(void)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	28 97       	sbiw	r28, 0x08	; 8
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_clear();
     5f6:	0e 94 c4 06 	call	0xd88	; 0xd88 <ledmatrix_clear>
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <default_grid+0x2e>
	{
		colours[row] = COLOUR_YELLOW;
     5fe:	e1 e0       	ldi	r30, 0x01	; 1
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	e8 0f       	add	r30, r24
     608:	f1 1d       	adc	r31, r1
     60a:	9f ef       	ldi	r25, 0xFF	; 255
     60c:	90 83       	st	Z, r25
void default_grid(void)
{
	ledmatrix_clear();
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     60e:	8f 5f       	subi	r24, 0xFF	; 255
     610:	88 30       	cpi	r24, 0x08	; 8
     612:	a8 f3       	brcs	.-22     	; 0x5fe <default_grid+0x1c>
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
     614:	be 01       	movw	r22, r28
     616:	6f 5f       	subi	r22, 0xFF	; 255
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	8d e0       	ldi	r24, 0x0D	; 13
     61c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	09 c0       	rjmp	.+18     	; 0x636 <default_grid+0x54>
	{
		colours[row] = COLOUR_HALF_YELLOW;
     624:	e1 e0       	ldi	r30, 0x01	; 1
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ec 0f       	add	r30, r28
     62a:	fd 1f       	adc	r31, r29
     62c:	e8 0f       	add	r30, r24
     62e:	f1 1d       	adc	r31, r1
     630:	95 e5       	ldi	r25, 0x55	; 85
     632:	90 83       	st	Z, r25
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	88 30       	cpi	r24, 0x08	; 8
     638:	a8 f3       	brcs	.-22     	; 0x624 <default_grid+0x42>
	{
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
     63a:	be 01       	movw	r22, r28
     63c:	6f 5f       	subi	r22, 0xFF	; 255
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	8c e0       	ldi	r24, 0x0C	; 12
     642:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ledmatrix_update_column>
	ledmatrix_update_column(14, colours);
     646:	be 01       	movw	r22, r28
     648:	6f 5f       	subi	r22, 0xFF	; 255
     64a:	7f 4f       	sbci	r23, 0xFF	; 255
     64c:	8e e0       	ldi	r24, 0x0E	; 14
     64e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	09 c0       	rjmp	.+18     	; 0x668 <default_grid+0x86>
	{
		colours[row] = COLOUR_QUART_YELLOW;
     656:	e1 e0       	ldi	r30, 0x01	; 1
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	e8 0f       	add	r30, r24
     660:	f1 1d       	adc	r31, r1
     662:	91 e1       	ldi	r25, 0x11	; 17
     664:	90 83       	st	Z, r25
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
	ledmatrix_update_column(14, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	88 30       	cpi	r24, 0x08	; 8
     66a:	a8 f3       	brcs	.-22     	; 0x656 <default_grid+0x74>
	{
		colours[row] = COLOUR_QUART_YELLOW;
	}
	ledmatrix_update_column(11, colours);
     66c:	be 01       	movw	r22, r28
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	8b e0       	ldi	r24, 0x0B	; 11
     674:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ledmatrix_update_column>
	ledmatrix_update_column(15, colours);
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	8f e0       	ldi	r24, 0x0F	; 15
     680:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ledmatrix_update_column>
}
     684:	28 96       	adiw	r28, 0x08	; 8
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <update_points>:
uint8_t green_check = - 1; 
uint8_t game_over = 0;

void update_points() {
	//clear terminal line and reprint the game score with the points
	move_terminal_cursor(10, 13);
     696:	6d e0       	ldi	r22, 0x0D	; 13
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	8a e0       	ldi	r24, 0x0A	; 10
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	clear_to_end_of_line();
     6a2:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <clear_to_end_of_line>

	// if x >= 10 and [-9, 0)
	if ((points >= 10) || (points < 0 && points >= -9)) {
     6a6:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <points>
     6aa:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <points+0x1>
     6ae:	8a 30       	cpi	r24, 0x0A	; 10
     6b0:	91 05       	cpc	r25, r1
     6b2:	34 f4       	brge	.+12     	; 0x6c0 <update_points+0x2a>
     6b4:	9c 01       	movw	r18, r24
     6b6:	27 5f       	subi	r18, 0xF7	; 247
     6b8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ba:	29 30       	cpi	r18, 0x09	; 9
     6bc:	31 05       	cpc	r19, r1
     6be:	68 f4       	brcc	.+26     	; 0x6da <update_points+0x44>
		printf("Game Score:   %d", points);
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	8f e1       	ldi	r24, 0x1F	; 31
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	08 95       	ret
		
		//if x >= 100 and (-9, -99)
	} else if ((points >= 100) || (points < -9 && points > -99)) {
     6da:	84 36       	cpi	r24, 0x64	; 100
     6dc:	91 05       	cpc	r25, r1
     6de:	34 f4       	brge	.+12     	; 0x6ec <update_points+0x56>
     6e0:	9c 01       	movw	r18, r24
     6e2:	2e 59       	subi	r18, 0x9E	; 158
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255
     6e6:	29 35       	cpi	r18, 0x59	; 89
     6e8:	31 05       	cpc	r19, r1
     6ea:	68 f4       	brcc	.+26     	; 0x706 <update_points+0x70>
		printf("Game Score:  %d", points);
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	80 e3       	ldi	r24, 0x30	; 48
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	08 95       	ret
		
		//if x < -99
	} else if (points < -99) {
     706:	8d 39       	cpi	r24, 0x9D	; 157
     708:	2f ef       	ldi	r18, 0xFF	; 255
     70a:	92 07       	cpc	r25, r18
     70c:	6c f4       	brge	.+26     	; 0x728 <update_points+0x92>
		printf("Game Score: %d", points);
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	80 e4       	ldi	r24, 0x40	; 64
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	08 95       	ret
		
	} else {
		printf("Game Score:    %d", points);
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	8f e4       	ldi	r24, 0x4F	; 79
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	9f 93       	push	r25
     732:	8f 93       	push	r24
     734:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	08 95       	ret

00000742 <update_combo>:
	}
}

void update_combo() {
	//Clear terminal line and reprint the combo count
	move_terminal_cursor(10, 14);
     742:	6e e0       	ldi	r22, 0x0E	; 14
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	8a e0       	ldi	r24, 0x0A	; 10
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	clear_to_end_of_line();
     74e:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <clear_to_end_of_line>
	
	//adjusts the combo count padding so it matches points
	if (combo_count >= 10) {
     752:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <combo_count>
     756:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <combo_count+0x1>
     75a:	8a 30       	cpi	r24, 0x0A	; 10
     75c:	91 05       	cpc	r25, r1
     75e:	6c f0       	brlt	.+26     	; 0x77a <update_combo+0x38>
		printf("Combo Count:  %d", combo_count);
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	81 e6       	ldi	r24, 0x61	; 97
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	9f 93       	push	r25
     76a:	8f 93       	push	r24
     76c:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	1c c0       	rjmp	.+56     	; 0x7b2 <update_combo+0x70>
		
	} else if (combo_count >= 100) {
     77a:	84 36       	cpi	r24, 0x64	; 100
     77c:	91 05       	cpc	r25, r1
     77e:	6c f0       	brlt	.+26     	; 0x79a <update_combo+0x58>
		printf("Combo Count: %d", combo_count);
     780:	9f 93       	push	r25
     782:	8f 93       	push	r24
     784:	82 e7       	ldi	r24, 0x72	; 114
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	9f 93       	push	r25
     78a:	8f 93       	push	r24
     78c:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	0c c0       	rjmp	.+24     	; 0x7b2 <update_combo+0x70>
		
	} else {
		printf("Combo Count:   %d", combo_count);
     79a:	9f 93       	push	r25
     79c:	8f 93       	push	r24
     79e:	82 e8       	ldi	r24, 0x82	; 130
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	9f 93       	push	r25
     7a4:	8f 93       	push	r24
     7a6:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
	}
	
	
	//update combo check accordingly
	if (combo_count >= 3) {
     7b2:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <combo_count>
     7b6:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <combo_count+0x1>
     7ba:	03 97       	sbiw	r24, 0x03	; 3
     7bc:	3c f0       	brlt	.+14     	; 0x7cc <update_combo+0x8a>
		combo_check = 1;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <combo_check+0x1>
     7c6:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <combo_check>
     7ca:	08 95       	ret
	} else {
		combo_check = 0;
     7cc:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <combo_check+0x1>
     7d0:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <combo_check>
     7d4:	08 95       	ret

000007d6 <initialise_game>:

// Initialize the game by resetting the grid and beat
void initialise_game(void)
{
	// initialize the display we are using.
	default_grid();
     7d6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <default_grid>
	
	beat = 0;
     7da:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <beat+0x1>
     7de:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <beat>
	game_over = 0;
     7e2:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <game_over>
	update_points();
     7e6:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
	update_combo();
     7ea:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
     7ee:	08 95       	ret

000007f0 <play_note>:
}


// Play a note in the given lane
void play_note(uint8_t lane)
{	
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	d8 2f       	mov	r29, r24

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     7f8:	cb e0       	ldi	r28, 0x0B	; 11
     7fa:	a8 c0       	rjmp	.+336    	; 0x94c <__stack+0x4d>
	
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col; //this is the next position that the note will be in
     7fc:	8f e0       	ldi	r24, 0x0F	; 15
     7fe:	8c 1b       	sub	r24, r28
		uint8_t index = (future + beat) / 5;	//this is the note??
     800:	40 91 e6 02 	lds	r20, 0x02E6	; 0x8002e6 <beat>
     804:	50 91 e7 02 	lds	r21, 0x02E7	; 0x8002e7 <beat+0x1>
     808:	48 0f       	add	r20, r24
     80a:	51 1d       	adc	r21, r1
     80c:	9a 01       	movw	r18, r20
     80e:	ad ec       	ldi	r26, 0xCD	; 205
     810:	bc ec       	ldi	r27, 0xCC	; 204
     812:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__umulhisi3>
     816:	fc 01       	movw	r30, r24
     818:	f6 95       	lsr	r31
     81a:	e7 95       	ror	r30
     81c:	f6 95       	lsr	r31
     81e:	e7 95       	ror	r30
		
		if ((future + beat) % 5) {
     820:	cf 01       	movw	r24, r30
     822:	88 0f       	add	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	88 0f       	add	r24, r24
     828:	99 1f       	adc	r25, r25
     82a:	8e 0f       	add	r24, r30
     82c:	9f 1f       	adc	r25, r31
     82e:	48 17       	cp	r20, r24
     830:	59 07       	cpc	r21, r25
     832:	09 f0       	breq	.+2      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     834:	8a c0       	rjmp	.+276    	; 0x94a <__stack+0x4b>
			continue;
		}
		if (track[index] & (1<<lane))
     836:	ff 27       	eor	r31, r31
     838:	ec 56       	subi	r30, 0x6C	; 108
     83a:	fe 4f       	sbci	r31, 0xFE	; 254
     83c:	80 81       	ld	r24, Z
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0d 2e       	mov	r0, r29
     842:	02 c0       	rjmp	.+4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     844:	95 95       	asr	r25
     846:	87 95       	ror	r24
     848:	0a 94       	dec	r0
     84a:	e2 f7       	brpl	.-8      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     84c:	80 ff       	sbrs	r24, 0
     84e:	6c c0       	rjmp	.+216    	; 0x928 <__stack+0x29>
		{	
			if (green_check == lane) {
     850:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     854:	d8 13       	cpse	r29, r24
     856:	12 c0       	rjmp	.+36     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
				points--;
     858:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <points>
     85c:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <points+0x1>
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <points+0x1>
     866:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <points>
				update_points();
     86a:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
				
				combo_count = 0;
     86e:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <combo_count+0x1>
     872:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <combo_count>
				update_combo();
     876:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
				
				break;
     87a:	6b c0       	rjmp	.+214    	; 0x952 <__stack+0x53>
			}
			
			green_check = lane;
     87c:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			// if so, colour the two pixels green
			ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     880:	40 ef       	ldi	r20, 0xF0	; 240
     882:	1d 2f       	mov	r17, r29
     884:	11 0f       	add	r17, r17
     886:	61 2f       	mov	r22, r17
     888:	8c 2f       	mov	r24, r28
     88a:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	61 0f       	add	r22, r17
     892:	40 ef       	ldi	r20, 0xF0	; 240
     894:	8c 2f       	mov	r24, r28
     896:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			
			//if the note is in the two specified lanes then award the appropriate amount of points
			if (col == 11 || col == 15) {
     89a:	cb 30       	cpi	r28, 0x0B	; 11
     89c:	11 f0       	breq	.+4      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
     89e:	cf 30       	cpi	r28, 0x0F	; 15
     8a0:	71 f4       	brne	.+28     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
				points++;
     8a2:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <points>
     8a6:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <points+0x1>
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <points+0x1>
     8b0:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <points>
				combo_count = 0;
     8b4:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <combo_count+0x1>
     8b8:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <combo_count>
     8bc:	42 c0       	rjmp	.+132    	; 0x942 <__stack+0x43>
				
			} else if (col == 12 || col == 14) {
     8be:	cc 30       	cpi	r28, 0x0C	; 12
     8c0:	11 f0       	breq	.+4      	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
     8c2:	ce 30       	cpi	r28, 0x0E	; 14
     8c4:	71 f4       	brne	.+28     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
				points += 2;
     8c6:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <points>
     8ca:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <points+0x1>
     8ce:	02 96       	adiw	r24, 0x02	; 2
     8d0:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <points+0x1>
     8d4:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <points>
				combo_count = 0;
     8d8:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <combo_count+0x1>
     8dc:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <combo_count>
     8e0:	30 c0       	rjmp	.+96     	; 0x942 <__stack+0x43>
				
			} else if (col == 13) {
     8e2:	cd 30       	cpi	r28, 0x0D	; 13
     8e4:	71 f5       	brne	.+92     	; 0x942 <__stack+0x43>
				if (combo_count > 3) {
     8e6:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <combo_count>
     8ea:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <combo_count+0x1>
     8ee:	84 30       	cpi	r24, 0x04	; 4
     8f0:	91 05       	cpc	r25, r1
     8f2:	54 f0       	brlt	.+20     	; 0x908 <__stack+0x9>
					points += 4;
     8f4:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <points>
     8f8:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <points+0x1>
     8fc:	04 96       	adiw	r24, 0x04	; 4
     8fe:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <points+0x1>
     902:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <points>
     906:	1d c0       	rjmp	.+58     	; 0x942 <__stack+0x43>
				} else {
					points += 3;
     908:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <points>
     90c:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <points+0x1>
     910:	2d 5f       	subi	r18, 0xFD	; 253
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	30 93 e1 02 	sts	0x02E1, r19	; 0x8002e1 <points+0x1>
     918:	20 93 e0 02 	sts	0x02E0, r18	; 0x8002e0 <points>
					combo_count++;
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <combo_count+0x1>
     922:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <combo_count>
     926:	0d c0       	rjmp	.+26     	; 0x942 <__stack+0x43>
				}
			}
			
		} else {
			points--;
     928:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <points>
     92c:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <points+0x1>
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <points+0x1>
     936:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <points>
			combo_count = 0;
     93a:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <combo_count+0x1>
     93e:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <combo_count>
		
		}
			
		update_points();
     942:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
		update_combo();
     946:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>

// Play a note in the given lane
void play_note(uint8_t lane)
{	

	for (uint8_t col = 11; col < MATRIX_NUM_COLUMNS; col++) {
     94a:	cf 5f       	subi	r28, 0xFF	; 255
     94c:	c0 31       	cpi	r28, 0x10	; 16
     94e:	08 f4       	brcc	.+2      	; 0x952 <__stack+0x53>
     950:	55 cf       	rjmp	.-342    	; 0x7fc <play_note+0xc>
		}
			
		update_points();
		update_combo();
		}	
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	08 95       	ret

0000095a <advance_note>:
	

// Advance the notes one row down the display
void advance_note(void)
{
     95a:	df 92       	push	r13
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     968:	10 e0       	ldi	r17, 0x00	; 0
     96a:	e9 c0       	rjmp	.+466    	; 0xb3e <advance_note+0x1e4>
	{
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col;
     96c:	8f e0       	ldi	r24, 0x0F	; 15
     96e:	81 1b       	sub	r24, r17
		uint8_t index = (future + beat) / 5;
     970:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <beat>
     974:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <beat+0x1>
     978:	af 01       	movw	r20, r30
     97a:	48 0f       	add	r20, r24
     97c:	51 1d       	adc	r21, r1
     97e:	9a 01       	movw	r18, r20
     980:	ad ec       	ldi	r26, 0xCD	; 205
     982:	bc ec       	ldi	r27, 0xCC	; 204
     984:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__umulhisi3>
     988:	ec 01       	movw	r28, r24
     98a:	d6 95       	lsr	r29
     98c:	c7 95       	ror	r28
     98e:	d6 95       	lsr	r29
     990:	c7 95       	ror	r28
     992:	0c 2f       	mov	r16, r28
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     994:	9f 01       	movw	r18, r30
     996:	21 5f       	subi	r18, 0xF1	; 241
     998:	3f 4f       	sbci	r19, 0xFF	; 255
     99a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__umulhisi3>
     99e:	96 95       	lsr	r25
     9a0:	87 95       	ror	r24
     9a2:	96 95       	lsr	r25
     9a4:	87 95       	ror	r24
		uint8_t ghost_index = ghost_start_index +1;
     9a6:	8f 5f       	subi	r24, 0xFF	; 255
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     9a8:	08 c0       	rjmp	.+16     	; 0x9ba <advance_note+0x60>
			if (track[ghost_index] & 0x0F) {
     9aa:	e8 2f       	mov	r30, r24
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	ec 56       	subi	r30, 0x6C	; 108
     9b0:	fe 4f       	sbci	r31, 0xFE	; 254
     9b2:	90 81       	ld	r25, Z
     9b4:	9f 70       	andi	r25, 0x0F	; 15
     9b6:	19 f4       	brne	.+6      	; 0x9be <advance_note+0x64>
		uint8_t index = (future + beat) / 5;
		uint8_t ghost_start_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
		uint8_t ghost_index = ghost_start_index +1;
		
		//iterate over until the next valid future note is coming
		for (; ghost_index < TRACK_LENGTH; ghost_index++) {
     9b8:	8f 5f       	subi	r24, 0xFF	; 255
     9ba:	81 38       	cpi	r24, 0x81	; 129
     9bc:	b0 f3       	brcs	.-20     	; 0x9aa <advance_note+0x50>
			if (track[ghost_index] & 0x0F) {
				break;
			}
		}
		uint8_t ghost_note = track[ghost_index];
     9be:	e8 2f       	mov	r30, r24
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	ec 56       	subi	r30, 0x6C	; 108
     9c4:	fe 4f       	sbci	r31, 0xFE	; 254
     9c6:	f0 80       	ld	r15, Z
		
		if (index >= TRACK_LENGTH)
     9c8:	01 38       	cpi	r16, 0x81	; 129
     9ca:	20 f0       	brcs	.+8      	; 0x9d4 <advance_note+0x7a>
		{
			//Game Over
			game_over = 1;
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <game_over>
			break;
     9d2:	b8 c0       	rjmp	.+368    	; 0xb44 <advance_note+0x1ea>
		}
		if ((future+beat) % 5)
     9d4:	9a 01       	movw	r18, r20
     9d6:	ad ec       	ldi	r26, 0xCD	; 205
     9d8:	bc ec       	ldi	r27, 0xCC	; 204
     9da:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__umulhisi3>
     9de:	96 95       	lsr	r25
     9e0:	87 95       	ror	r24
     9e2:	96 95       	lsr	r25
     9e4:	87 95       	ror	r24
     9e6:	9c 01       	movw	r18, r24
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	22 0f       	add	r18, r18
     9ee:	33 1f       	adc	r19, r19
     9f0:	82 0f       	add	r24, r18
     9f2:	93 1f       	adc	r25, r19
     9f4:	48 17       	cp	r20, r24
     9f6:	59 07       	cpc	r21, r25
     9f8:	09 f0       	breq	.+2      	; 0x9fc <advance_note+0xa2>
     9fa:	a0 c0       	rjmp	.+320    	; 0xb3c <advance_note+0x1e2>
     9fc:	00 e0       	ldi	r16, 0x00	; 0
     9fe:	9b c0       	rjmp	.+310    	; 0xb36 <advance_note+0x1dc>
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
		{
			//check if the next note is in the appropriate lane
			if ((ghost_note == 0x01) & (lane == 0)) {
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	f9 12       	cpse	r15, r25
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	01 11       	cpse	r16, r1
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	89 23       	and	r24, r25
     a0e:	71 f0       	breq	.+28     	; 0xa2c <advance_note+0xd2>
				ledmatrix_update_pixel(0, 2*lane, COLOUR_DARK_RED);
     a10:	41 e0       	ldi	r20, 0x01	; 1
     a12:	e0 2e       	mov	r14, r16
     a14:	ee 0c       	add	r14, r14
     a16:	6e 2d       	mov	r22, r14
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, COLOUR_DARK_RED);
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	6e 0d       	add	r22, r14
     a22:	41 e0       	ldi	r20, 0x01	; 1
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
     a2a:	47 c0       	rjmp	.+142    	; 0xaba <advance_note+0x160>
				
			} else if ((ghost_note == 0x02) & (lane == 1)) {
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	82 e0       	ldi	r24, 0x02	; 2
     a30:	f8 12       	cpse	r15, r24
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	01 30       	cpi	r16, 0x01	; 1
     a38:	09 f0       	breq	.+2      	; 0xa3c <advance_note+0xe2>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	89 23       	and	r24, r25
     a3e:	71 f0       	breq	.+28     	; 0xa5c <advance_note+0x102>
				ledmatrix_update_pixel(0, 2*lane, COLOUR_DARK_RED);
     a40:	41 e0       	ldi	r20, 0x01	; 1
     a42:	e0 2e       	mov	r14, r16
     a44:	ee 0c       	add	r14, r14
     a46:	6e 2d       	mov	r22, r14
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, COLOUR_DARK_RED);
     a4e:	61 e0       	ldi	r22, 0x01	; 1
     a50:	6e 0d       	add	r22, r14
     a52:	41 e0       	ldi	r20, 0x01	; 1
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
     a5a:	2f c0       	rjmp	.+94     	; 0xaba <advance_note+0x160>
			
			} else if ((ghost_note == 0x04) & (lane == 2)) {
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	84 e0       	ldi	r24, 0x04	; 4
     a60:	f8 12       	cpse	r15, r24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	02 30       	cpi	r16, 0x02	; 2
     a68:	09 f0       	breq	.+2      	; 0xa6c <advance_note+0x112>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	89 23       	and	r24, r25
     a6e:	71 f0       	breq	.+28     	; 0xa8c <advance_note+0x132>
				ledmatrix_update_pixel(0, 2*lane, COLOUR_DARK_RED);
     a70:	41 e0       	ldi	r20, 0x01	; 1
     a72:	e0 2e       	mov	r14, r16
     a74:	ee 0c       	add	r14, r14
     a76:	6e 2d       	mov	r22, r14
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, COLOUR_DARK_RED);
     a7e:	61 e0       	ldi	r22, 0x01	; 1
     a80:	6e 0d       	add	r22, r14
     a82:	41 e0       	ldi	r20, 0x01	; 1
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
     a8a:	17 c0       	rjmp	.+46     	; 0xaba <advance_note+0x160>
			
			} else if ((ghost_note == 0x08) & (lane == 3)) {
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	88 e0       	ldi	r24, 0x08	; 8
     a90:	f8 12       	cpse	r15, r24
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	03 30       	cpi	r16, 0x03	; 3
     a98:	09 f0       	breq	.+2      	; 0xa9c <advance_note+0x142>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	89 23       	and	r24, r25
     a9e:	69 f0       	breq	.+26     	; 0xaba <advance_note+0x160>
				ledmatrix_update_pixel(0, 2*lane, COLOUR_DARK_RED);
     aa0:	41 e0       	ldi	r20, 0x01	; 1
     aa2:	e0 2e       	mov	r14, r16
     aa4:	ee 0c       	add	r14, r14
     aa6:	6e 2d       	mov	r22, r14
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane + 1, COLOUR_DARK_RED);
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	6e 0d       	add	r22, r14
     ab2:	41 e0       	ldi	r20, 0x01	; 1
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			
			}
				
			if (track[index] & (1<<lane))
     aba:	fe 01       	movw	r30, r28
     abc:	ff 27       	eor	r31, r31
     abe:	ec 56       	subi	r30, 0x6C	; 108
     ac0:	fe 4f       	sbci	r31, 0xFE	; 254
     ac2:	80 81       	ld	r24, Z
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	00 2e       	mov	r0, r16
     ac8:	02 c0       	rjmp	.+4      	; 0xace <advance_note+0x174>
     aca:	95 95       	asr	r25
     acc:	87 95       	ror	r24
     ace:	0a 94       	dec	r0
     ad0:	e2 f7       	brpl	.-8      	; 0xaca <advance_note+0x170>
     ad2:	80 ff       	sbrs	r24, 0
     ad4:	2f c0       	rjmp	.+94     	; 0xb34 <advance_note+0x1da>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
     ad6:	1b 30       	cpi	r17, 0x0B	; 11
     ad8:	59 f0       	breq	.+22     	; 0xaf0 <advance_note+0x196>
     ada:	1f 30       	cpi	r17, 0x0F	; 15
     adc:	71 f0       	breq	.+28     	; 0xafa <advance_note+0x1a0>
				{
					colour = COLOUR_QUART_YELLOW;
				}
				else if (col==12 || col == 14)
     ade:	1c 30       	cpi	r17, 0x0C	; 12
     ae0:	89 f0       	breq	.+34     	; 0xb04 <advance_note+0x1aa>
     ae2:	1e 30       	cpi	r17, 0x0E	; 14
     ae4:	a1 f0       	breq	.+40     	; 0xb0e <advance_note+0x1b4>
				{
					colour = COLOUR_HALF_YELLOW;
				}
				else if (col==13)
     ae6:	1d 30       	cpi	r17, 0x0D	; 13
     ae8:	b9 f4       	brne	.+46     	; 0xb18 <advance_note+0x1be>
				{
					colour = COLOUR_YELLOW;
     aea:	dd 24       	eor	r13, r13
     aec:	da 94       	dec	r13
     aee:	15 c0       	rjmp	.+42     	; 0xb1a <advance_note+0x1c0>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
				{
					colour = COLOUR_QUART_YELLOW;
     af0:	0f 2e       	mov	r0, r31
     af2:	f1 e1       	ldi	r31, 0x11	; 17
     af4:	df 2e       	mov	r13, r31
     af6:	f0 2d       	mov	r31, r0
     af8:	10 c0       	rjmp	.+32     	; 0xb1a <advance_note+0x1c0>
     afa:	0f 2e       	mov	r0, r31
     afc:	f1 e1       	ldi	r31, 0x11	; 17
     afe:	df 2e       	mov	r13, r31
     b00:	f0 2d       	mov	r31, r0
     b02:	0b c0       	rjmp	.+22     	; 0xb1a <advance_note+0x1c0>
				}
				else if (col==12 || col == 14)
				{
					colour = COLOUR_HALF_YELLOW;
     b04:	0f 2e       	mov	r0, r31
     b06:	f5 e5       	ldi	r31, 0x55	; 85
     b08:	df 2e       	mov	r13, r31
     b0a:	f0 2d       	mov	r31, r0
     b0c:	06 c0       	rjmp	.+12     	; 0xb1a <advance_note+0x1c0>
     b0e:	0f 2e       	mov	r0, r31
     b10:	f5 e5       	ldi	r31, 0x55	; 85
     b12:	df 2e       	mov	r13, r31
     b14:	f0 2d       	mov	r31, r0
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <advance_note+0x1c0>
				{
					colour = COLOUR_YELLOW;
				}
				else
				{
					colour = COLOUR_BLACK;
     b18:	d1 2c       	mov	r13, r1
				}
				ledmatrix_update_pixel(col, 2*lane, colour);
     b1a:	4d 2d       	mov	r20, r13
     b1c:	e0 2e       	mov	r14, r16
     b1e:	ee 0c       	add	r14, r14
     b20:	6e 2d       	mov	r22, r14
     b22:	81 2f       	mov	r24, r17
     b24:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 2*lane+1, colour);
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	6e 0d       	add	r22, r14
     b2c:	4d 2d       	mov	r20, r13
     b2e:	81 2f       	mov	r24, r17
     b30:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
		}
		if ((future+beat) % 5)
		{
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
     b34:	0f 5f       	subi	r16, 0xFF	; 255
     b36:	04 30       	cpi	r16, 0x04	; 4
     b38:	08 f4       	brcc	.+2      	; 0xb3c <advance_note+0x1e2>
     b3a:	62 cf       	rjmp	.-316    	; 0xa00 <advance_note+0xa6>
// Advance the notes one row down the display
void advance_note(void)
{
	
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     b3c:	1f 5f       	subi	r17, 0xFF	; 255
     b3e:	10 31       	cpi	r17, 0x10	; 16
     b40:	08 f4       	brcc	.+2      	; 0xb44 <advance_note+0x1ea>
     b42:	14 cf       	rjmp	.-472    	; 0x96c <advance_note+0x12>
			}
		}
	}
	
	// increment the beat
	beat++;
     b44:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <beat>
     b48:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <beat+0x1>
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <beat+0x1>
     b52:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <beat>
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     b56:	c0 e0       	ldi	r28, 0x00	; 0
     b58:	c4 c0       	rjmp	.+392    	; 0xce2 <advance_note+0x388>
	{
		// col counts from one end, future from the other
		uint8_t future = MATRIX_NUM_COLUMNS-1-col;
     b5a:	8f e0       	ldi	r24, 0x0F	; 15
     b5c:	8c 1b       	sub	r24, r28
		// notes are only drawn every five columns
		if ((future+beat)%5)
     b5e:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <beat>
     b62:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <beat+0x1>
     b66:	af 01       	movw	r20, r30
     b68:	48 0f       	add	r20, r24
     b6a:	51 1d       	adc	r21, r1
     b6c:	9a 01       	movw	r18, r20
     b6e:	ad ec       	ldi	r26, 0xCD	; 205
     b70:	bc ec       	ldi	r27, 0xCC	; 204
     b72:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__umulhisi3>
     b76:	96 95       	lsr	r25
     b78:	87 95       	ror	r24
     b7a:	96 95       	lsr	r25
     b7c:	87 95       	ror	r24
     b7e:	9c 01       	movw	r18, r24
     b80:	22 0f       	add	r18, r18
     b82:	33 1f       	adc	r19, r19
     b84:	22 0f       	add	r18, r18
     b86:	33 1f       	adc	r19, r19
     b88:	82 0f       	add	r24, r18
     b8a:	93 1f       	adc	r25, r19
     b8c:	48 17       	cp	r20, r24
     b8e:	59 07       	cpc	r21, r25
     b90:	09 f0       	breq	.+2      	; 0xb94 <advance_note+0x23a>
     b92:	a6 c0       	rjmp	.+332    	; 0xce0 <advance_note+0x386>
		{
			continue;
		}
		
		// index of which note in the track to play
		uint8_t index = (future+beat)/5;
     b94:	9a 01       	movw	r18, r20
     b96:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__umulhisi3>
     b9a:	ac 01       	movw	r20, r24
     b9c:	56 95       	lsr	r21
     b9e:	47 95       	ror	r20
     ba0:	56 95       	lsr	r21
     ba2:	47 95       	ror	r20
		
		uint8_t ghost_index = ((MATRIX_NUM_COLUMNS - 1) + beat)/5;
     ba4:	9f 01       	movw	r18, r30
     ba6:	21 5f       	subi	r18, 0xF1	; 241
     ba8:	3f 4f       	sbci	r19, 0xFF	; 255
     baa:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__umulhisi3>
     bae:	96 95       	lsr	r25
     bb0:	87 95       	ror	r24
     bb2:	96 95       	lsr	r25
     bb4:	87 95       	ror	r24
		//next note in track that is coming
		uint8_t ghost_note = track[ghost_index];
     bb6:	fc 01       	movw	r30, r24
     bb8:	ff 27       	eor	r31, r31
     bba:	ec 56       	subi	r30, 0x6C	; 108
     bbc:	fe 4f       	sbci	r31, 0xFE	; 254
     bbe:	e0 80       	ld	r14, Z
		
		// if the index is beyond the end of the track,
		// no note can be drawn
		if (index >= TRACK_LENGTH || (index + 1) >= TRACK_LENGTH)
     bc0:	41 38       	cpi	r20, 0x81	; 129
     bc2:	08 f0       	brcs	.+2      	; 0xbc6 <advance_note+0x26c>
     bc4:	8d c0       	rjmp	.+282    	; 0xce0 <advance_note+0x386>
     bc6:	8a 01       	movw	r16, r20
     bc8:	11 27       	eor	r17, r17
     bca:	c8 01       	movw	r24, r16
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	81 38       	cpi	r24, 0x81	; 129
     bd0:	91 05       	cpc	r25, r1
     bd2:	0c f0       	brlt	.+2      	; 0xbd6 <advance_note+0x27c>
     bd4:	85 c0       	rjmp	.+266    	; 0xce0 <advance_note+0x386>
     bd6:	d0 e0       	ldi	r29, 0x00	; 0
     bd8:	80 c0       	rjmp	.+256    	; 0xcda <advance_note+0x380>
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{									
				
			//check if there's a note in the specific path
			if (track[index] & (1<<lane)) {
     bda:	f8 01       	movw	r30, r16
     bdc:	ec 56       	subi	r30, 0x6C	; 108
     bde:	fe 4f       	sbci	r31, 0xFE	; 254
     be0:	80 81       	ld	r24, Z
     be2:	28 2f       	mov	r18, r24
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	0d 2e       	mov	r0, r29
     be8:	02 c0       	rjmp	.+4      	; 0xbee <advance_note+0x294>
     bea:	35 95       	asr	r19
     bec:	27 95       	ror	r18
     bee:	0a 94       	dec	r0
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <advance_note+0x290>
     bf2:	20 ff       	sbrs	r18, 0
     bf4:	71 c0       	rjmp	.+226    	; 0xcd8 <advance_note+0x37e>
				
				//check if theres a note in the led matrix section
				if ((green_check == lane) & ((col >= 11) & (col <= 15))) {
     bf6:	21 e0       	ldi	r18, 0x01	; 1
     bf8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     bfc:	9d 13       	cpse	r25, r29
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	31 e0       	ldi	r19, 0x01	; 1
     c02:	95 ef       	ldi	r25, 0xF5	; 245
     c04:	9c 0f       	add	r25, r28
     c06:	95 30       	cpi	r25, 0x05	; 5
     c08:	08 f0       	brcs	.+2      	; 0xc0c <advance_note+0x2b2>
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	22 23       	and	r18, r18
     c0e:	81 f0       	breq	.+32     	; 0xc30 <advance_note+0x2d6>
     c10:	33 23       	and	r19, r19
     c12:	71 f0       	breq	.+28     	; 0xc30 <advance_note+0x2d6>
					//if true set pixels to green
					ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     c14:	40 ef       	ldi	r20, 0xF0	; 240
     c16:	fd 2e       	mov	r15, r29
     c18:	ff 0c       	add	r15, r15
     c1a:	6f 2d       	mov	r22, r15
     c1c:	8c 2f       	mov	r24, r28
     c1e:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	6f 0d       	add	r22, r15
     c26:	40 ef       	ldi	r20, 0xF0	; 240
     c28:	8c 2f       	mov	r24, r28
     c2a:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
     c2e:	4f c0       	rjmp	.+158    	; 0xcce <advance_note+0x374>
				
				} else if (ghost_note != track[index]) {					
     c30:	e8 16       	cp	r14, r24
     c32:	39 f1       	breq	.+78     	; 0xc82 <advance_note+0x328>
					ledmatrix_update_pixel(col, 2*lane, COLOUR_RED);
     c34:	4f e0       	ldi	r20, 0x0F	; 15
     c36:	fd 2e       	mov	r15, r29
     c38:	ff 0c       	add	r15, r15
     c3a:	6f 2d       	mov	r22, r15
     c3c:	8c 2f       	mov	r24, r28
     c3e:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_RED);
     c42:	61 e0       	ldi	r22, 0x01	; 1
     c44:	6f 0d       	add	r22, r15
     c46:	4f e0       	ldi	r20, 0x0F	; 15
     c48:	8c 2f       	mov	r24, r28
     c4a:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
					
					//if note slides off screen and green_check isn't checked to a lane
					if (col == 15) {
     c4e:	cf 30       	cpi	r28, 0x0F	; 15
     c50:	f1 f5       	brne	.+124    	; 0xcce <advance_note+0x374>
						points--;
     c52:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <points>
     c56:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <points+0x1>
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <points+0x1>
     c60:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <points>
						update_points();		
     c64:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
						
						if (combo_count != 0) {
     c68:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <combo_count>
     c6c:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <combo_count+0x1>
     c70:	89 2b       	or	r24, r25
     c72:	69 f1       	breq	.+90     	; 0xcce <advance_note+0x374>
							combo_count = 0;
     c74:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <combo_count+0x1>
     c78:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <combo_count>
							update_combo();				
     c7c:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
     c80:	26 c0       	rjmp	.+76     	; 0xcce <advance_note+0x374>
						}
					}
					
				} else {
					ledmatrix_update_pixel(col, 2*lane, COLOUR_RED);
     c82:	4f e0       	ldi	r20, 0x0F	; 15
     c84:	fd 2e       	mov	r15, r29
     c86:	ff 0c       	add	r15, r15
     c88:	6f 2d       	mov	r22, r15
     c8a:	8c 2f       	mov	r24, r28
     c8c:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2*lane+1, COLOUR_RED);	
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	6f 0d       	add	r22, r15
     c94:	4f e0       	ldi	r20, 0x0F	; 15
     c96:	8c 2f       	mov	r24, r28
     c98:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
					
					//if note slides off screen and green_check isn't checked to a lane
					if (col == 15) {
     c9c:	cf 30       	cpi	r28, 0x0F	; 15
     c9e:	b9 f4       	brne	.+46     	; 0xcce <advance_note+0x374>
						points--;
     ca0:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <points>
     ca4:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <points+0x1>
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <points+0x1>
     cae:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <points>
						update_points();		
     cb2:	0e 94 4b 03 	call	0x696	; 0x696 <update_points>
						
						if (combo_count != 0) {
     cb6:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <combo_count>
     cba:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <combo_count+0x1>
     cbe:	89 2b       	or	r24, r25
     cc0:	31 f0       	breq	.+12     	; 0xcce <advance_note+0x374>
							combo_count = 0;
     cc2:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <combo_count+0x1>
     cc6:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <combo_count>
							update_combo();
     cca:	0e 94 a1 03 	call	0x742	; 0x742 <update_combo>
						}			
					}
				} 
				
				//check if the current note goes off the screen
				if (col >= 15) {
     cce:	cf 30       	cpi	r28, 0x0F	; 15
     cd0:	18 f0       	brcs	.+6      	; 0xcd8 <advance_note+0x37e>
					green_check = -1;
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		{
			continue;
		}
				
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
     cd8:	df 5f       	subi	r29, 0xFF	; 255
     cda:	d4 30       	cpi	r29, 0x04	; 4
     cdc:	08 f4       	brcc	.+2      	; 0xce0 <advance_note+0x386>
     cde:	7d cf       	rjmp	.-262    	; 0xbda <advance_note+0x280>
	
	// increment the beat
	beat++;
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     ce0:	cf 5f       	subi	r28, 0xFF	; 255
     ce2:	c0 31       	cpi	r28, 0x10	; 16
     ce4:	08 f4       	brcc	.+2      	; 0xce8 <advance_note+0x38e>
     ce6:	39 cf       	rjmp	.-398    	; 0xb5a <advance_note+0x200>
				
								
			}
		}
	}
}
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	08 95       	ret

00000cf8 <is_game_over>:

// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over(void)
{
	// Detect if the game is over i.e. if a player has won.
	if (game_over) {	
     cf8:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <game_over>
     cfc:	88 23       	and	r24, r24
     cfe:	19 f0       	breq	.+6      	; 0xd06 <is_game_over+0xe>
		game_over = 0; //reset game over check
     d00:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <game_over>
		return 1;	
     d04:	81 e0       	ldi	r24, 0x01	; 1
	
	} else {
	return 0;
	
	}
     d06:	08 95       	ret

00000d08 <ledmatrix_setup>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     d08:	80 e8       	ldi	r24, 0x80	; 128
     d0a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <spi_setup_master>
     d0e:	08 95       	ret

00000d10 <ledmatrix_update_pixel>:
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	80 31       	cpi	r24, 0x10	; 16
     d18:	b0 f4       	brcc	.+44     	; 0xd46 <ledmatrix_update_pixel+0x36>
     d1a:	68 30       	cpi	r22, 0x08	; 8
     d1c:	a0 f4       	brcc	.+40     	; 0xd46 <ledmatrix_update_pixel+0x36>
     d1e:	14 2f       	mov	r17, r20
     d20:	c6 2f       	mov	r28, r22
     d22:	d8 2f       	mov	r29, r24
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <spi_send_byte>
     d2a:	6c 2f       	mov	r22, r28
     d2c:	67 70       	andi	r22, 0x07	; 7
     d2e:	80 e1       	ldi	r24, 0x10	; 16
     d30:	68 9f       	mul	r22, r24
     d32:	90 01       	movw	r18, r0
     d34:	11 24       	eor	r1, r1
     d36:	8d 2f       	mov	r24, r29
     d38:	8f 70       	andi	r24, 0x0F	; 15
     d3a:	82 2b       	or	r24, r18
     d3c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <spi_send_byte>
     d40:	81 2f       	mov	r24, r17
     d42:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <spi_send_byte>
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	08 95       	ret

00000d4e <ledmatrix_update_column>:
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	80 31       	cpi	r24, 0x10	; 16
     d56:	a0 f4       	brcc	.+40     	; 0xd80 <ledmatrix_update_column+0x32>
     d58:	8b 01       	movw	r16, r22
     d5a:	c8 2f       	mov	r28, r24
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <spi_send_byte>
     d62:	8c 2f       	mov	r24, r28
     d64:	8f 70       	andi	r24, 0x0F	; 15
     d66:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <spi_send_byte>
     d6a:	c0 e0       	ldi	r28, 0x00	; 0
     d6c:	07 c0       	rjmp	.+14     	; 0xd7c <ledmatrix_update_column+0x2e>
     d6e:	f8 01       	movw	r30, r16
     d70:	ec 0f       	add	r30, r28
     d72:	f1 1d       	adc	r31, r1
     d74:	80 81       	ld	r24, Z
     d76:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <spi_send_byte>
     d7a:	cf 5f       	subi	r28, 0xFF	; 255
     d7c:	c8 30       	cpi	r28, 0x08	; 8
     d7e:	b8 f3       	brcs	.-18     	; 0xd6e <ledmatrix_update_column+0x20>
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	08 95       	ret

00000d88 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     d88:	8f e0       	ldi	r24, 0x0F	; 15
     d8a:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <spi_send_byte>
     d8e:	08 95       	ret

00000d90 <initialise_hardware>:
	}
}

void initialise_hardware(void)
{
	ledmatrix_setup();
     d90:	0e 94 84 06 	call	0xd08	; 0xd08 <ledmatrix_setup>
	init_button_interrupts();
     d94:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <init_button_interrupts>
	
	//Make all bits of port C and the upper 5 bits of port D to be output bits
	DDRC = 0xFF; //0xFF => 0b11111111
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFC; //0xFC => 0b11111100																						//is this valid??
     d9c:	8c ef       	ldi	r24, 0xFC	; 252
     d9e:	8a b9       	out	0x0a, r24	; 10
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	7b e4       	ldi	r23, 0x4B	; 75
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <init_serial_stdio>
	
	init_timer0();
     dae:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <init_timer0>
	init_timer1();
     db2:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <init_timer1>
	init_timer2();
     db6:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <init_timer2>
	
	// Turn on global interrupts
	sei();
     dba:	78 94       	sei
     dbc:	08 95       	ret

00000dbe <start_screen>:
}

void start_screen(void)
{
     dbe:	4f 92       	push	r4
     dc0:	5f 92       	push	r5
     dc2:	6f 92       	push	r6
     dc4:	7f 92       	push	r7
     dc6:	8f 92       	push	r8
     dc8:	9f 92       	push	r9
     dca:	af 92       	push	r10
     dcc:	bf 92       	push	r11
     dce:	cf 92       	push	r12
     dd0:	df 92       	push	r13
     dd2:	ef 92       	push	r14
     dd4:	ff 92       	push	r15
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
	// Clear terminal screen and output a message
	clear_terminal();
     dda:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <clear_terminal>
	show_cursor();
     dde:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <show_cursor>
	clear_terminal();
     de2:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <clear_terminal>
	hide_cursor();
     de6:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <hide_cursor>
	set_display_attribute(FG_WHITE);
     dea:	85 e2       	ldi	r24, 0x25	; 37
     dec:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <set_display_attribute>
	move_terminal_cursor(10,4);
     df0:	64 e0       	ldi	r22, 0x04	; 4
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	8a e0       	ldi	r24, 0x0A	; 10
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	printf_P(PSTR("  ______   __     __  _______         __    __"));
     dfc:	81 e3       	ldi	r24, 0x31	; 49
     dfe:	93 e0       	ldi	r25, 0x03	; 3
     e00:	9f 93       	push	r25
     e02:	8f 93       	push	r24
     e04:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
	move_terminal_cursor(10,5);
     e08:	65 e0       	ldi	r22, 0x05	; 5
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	8a e0       	ldi	r24, 0x0A	; 10
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	printf_P(PSTR(" /      \\ |  \\   |  \\|       \\       |  \\  |  \\"));
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	93 e0       	ldi	r25, 0x03	; 3
     e18:	9f 93       	push	r25
     e1a:	8f 93       	push	r24
     e1c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
	move_terminal_cursor(10,6);
     e20:	66 e0       	ldi	r22, 0x06	; 6
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	8a e0       	ldi	r24, 0x0A	; 10
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	printf_P(PSTR("|  $$$$$$\\| $$   | $$| $$$$$$$\\      | $$  | $$  ______    ______    ______"));
     e2c:	85 eb       	ldi	r24, 0xB5	; 181
     e2e:	92 e0       	ldi	r25, 0x02	; 2
     e30:	9f 93       	push	r25
     e32:	8f 93       	push	r24
     e34:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
	move_terminal_cursor(10,7);
     e38:	67 e0       	ldi	r22, 0x07	; 7
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	8a e0       	ldi	r24, 0x0A	; 10
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	printf_P(PSTR("| $$__| $$| $$   | $$| $$__| $$      | $$__| $$ /      \\  /      \\  /      \\"));
     e44:	88 e6       	ldi	r24, 0x68	; 104
     e46:	92 e0       	ldi	r25, 0x02	; 2
     e48:	9f 93       	push	r25
     e4a:	8f 93       	push	r24
     e4c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
	move_terminal_cursor(10,8);
     e50:	68 e0       	ldi	r22, 0x08	; 8
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	8a e0       	ldi	r24, 0x0A	; 10
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	printf_P(PSTR("| $$    $$ \\$$\\ /  $$| $$    $$      | $$    $$|  $$$$$$\\|  $$$$$$\\|  $$$$$$\\"));
     e5c:	8a e1       	ldi	r24, 0x1A	; 26
     e5e:	92 e0       	ldi	r25, 0x02	; 2
     e60:	9f 93       	push	r25
     e62:	8f 93       	push	r24
     e64:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
	move_terminal_cursor(10,9);
     e68:	69 e0       	ldi	r22, 0x09	; 9
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	8a e0       	ldi	r24, 0x0A	; 10
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	printf_P(PSTR("| $$$$$$$$  \\$$\\  $$ | $$$$$$$\\      | $$$$$$$$| $$    $$| $$   \\$$| $$  | $$"));
     e74:	8c ec       	ldi	r24, 0xCC	; 204
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	9f 93       	push	r25
     e7a:	8f 93       	push	r24
     e7c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
	move_terminal_cursor(10,10);
     e80:	6a e0       	ldi	r22, 0x0A	; 10
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	8a e0       	ldi	r24, 0x0A	; 10
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$   \\$$ $$  | $$  | $$      | $$  | $$| $$$$$$$$| $$      | $$__/ $$"));
     e8c:	8e e7       	ldi	r24, 0x7E	; 126
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	9f 93       	push	r25
     e92:	8f 93       	push	r24
     e94:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
	move_terminal_cursor(10,11);
     e98:	6b e0       	ldi	r22, 0x0B	; 11
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	8a e0       	ldi	r24, 0x0A	; 10
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$    \\$$$   | $$  | $$      | $$  | $$ \\$$     \\| $$       \\$$    $$"));
     ea4:	80 e3       	ldi	r24, 0x30	; 48
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	9f 93       	push	r25
     eaa:	8f 93       	push	r24
     eac:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
	move_terminal_cursor(10,12);
     eb0:	6c e0       	ldi	r22, 0x0C	; 12
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	8a e0       	ldi	r24, 0x0A	; 10
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	printf_P(PSTR(" \\$$   \\$$     \\$     \\$$   \\$$       \\$$   \\$$  \\$$$$$$$ \\$$        \\$$$$$$"));
     ebc:	83 ee       	ldi	r24, 0xE3	; 227
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	9f 93       	push	r25
     ec2:	8f 93       	push	r24
     ec4:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
	move_terminal_cursor(10,14);
     ec8:	6e e0       	ldi	r22, 0x0E	; 14
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	8a e0       	ldi	r24, 0x0A	; 10
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	// change this to your name and student number; remove the chevrons <>
	printf_P(PSTR("CSSE2010/7201 A2 by  Cailin Delgado - 48027942"));
     ed4:	84 eb       	ldi	r24, 0xB4	; 180
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9f 93       	push	r25
     eda:	8f 93       	push	r24
     edc:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
     ee0:	0e 94 a2 02 	call	0x544	; 0x544 <show_start_screen>
	
	//Display current track
	move_terminal_cursor(10, 15);
     ee4:	6f e0       	ldi	r22, 0x0F	; 15
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	8a e0       	ldi	r24, 0x0A	; 10
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	printf("Track: Through Fire & Flames");															//do %s and add a new track title at the end.
     ef0:	85 e1       	ldi	r24, 0x15	; 21
     ef2:	92 e0       	ldi	r25, 0x02	; 2
     ef4:	9f 93       	push	r25
     ef6:	8f 93       	push	r24
     ef8:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
     efc:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <get_current_time>
     f00:	6b 01       	movw	r12, r22
     f02:	7c 01       	movw	r14, r24
	
	uint8_t frame_number = 0;
	game_speed = 1000;
     f04:	88 ee       	ldi	r24, 0xE8	; 232
     f06:	93 e0       	ldi	r25, 0x03	; 3
     f08:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <game_speed+0x1>
     f0c:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <game_speed>
	
	
	move_terminal_cursor(10, 17);
     f10:	61 e1       	ldi	r22, 0x11	; 17
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	8a e0       	ldi	r24, 0x0A	; 10
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	clear_to_end_of_line();
     f1c:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <clear_to_end_of_line>
	//update game speed in terminal appropriately
	if (game_speed == 1000) {
     f20:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <game_speed>
     f24:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <game_speed+0x1>
     f28:	2d b7       	in	r18, 0x3d	; 61
     f2a:	3e b7       	in	r19, 0x3e	; 62
     f2c:	2a 5e       	subi	r18, 0xEA	; 234
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	3e bf       	out	0x3e, r19	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	2d bf       	out	0x3d, r18	; 61
     f3a:	88 3e       	cpi	r24, 0xE8	; 232
     f3c:	33 e0       	ldi	r19, 0x03	; 3
     f3e:	93 07       	cpc	r25, r19
     f40:	69 f4       	brne	.+26     	; 0xf5c <start_screen+0x19e>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
     f42:	9f 93       	push	r25
     f44:	8f 93       	push	r24
     f46:	82 e3       	ldi	r24, 0x32	; 50
     f48:	92 e0       	ldi	r25, 0x02	; 2
     f4a:	9f 93       	push	r25
     f4c:	8f 93       	push	r24
     f4e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	20 c0       	rjmp	.+64     	; 0xf9c <start_screen+0x1de>
		
	} else if (game_speed == 500) {
     f5c:	84 3f       	cpi	r24, 0xF4	; 244
     f5e:	21 e0       	ldi	r18, 0x01	; 1
     f60:	92 07       	cpc	r25, r18
     f62:	69 f4       	brne	.+26     	; 0xf7e <start_screen+0x1c0>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
     f64:	9f 93       	push	r25
     f66:	8f 93       	push	r24
     f68:	88 e5       	ldi	r24, 0x58	; 88
     f6a:	92 e0       	ldi	r25, 0x02	; 2
     f6c:	9f 93       	push	r25
     f6e:	8f 93       	push	r24
     f70:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f c0       	rjmp	.+30     	; 0xf9c <start_screen+0x1de>
		
	} else if (game_speed == 250) {
     f7e:	8a 3f       	cpi	r24, 0xFA	; 250
     f80:	91 05       	cpc	r25, r1
     f82:	61 f4       	brne	.+24     	; 0xf9c <start_screen+0x1de>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
     f84:	9f 93       	push	r25
     f86:	8f 93       	push	r24
     f88:	8c e7       	ldi	r24, 0x7C	; 124
     f8a:	92 e0       	ldi	r25, 0x02	; 2
     f8c:	9f 93       	push	r25
     f8e:	8f 93       	push	r24
     f90:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
			current_time = get_current_time();
			if (current_time - last_screen_update > game_speed/5)
			{
				update_start_screen(frame_number);
				frame_number = (frame_number + 1) % 32;
				last_screen_update = current_time;
     f9c:	d0 e0       	ldi	r29, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available())
     f9e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <serial_input_available>
     fa2:	88 23       	and	r24, r24
     fa4:	41 f0       	breq	.+16     	; 0xfb6 <start_screen+0x1f8>
		{
			serial_input = fgetc(stdin);
     fa6:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <__iob>
     faa:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <__iob+0x1>
     fae:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fgetc>
     fb2:	c8 2f       	mov	r28, r24
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <start_screen+0x1fa>
	{
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     fb6:	cf ef       	ldi	r28, 0xFF	; 255
		if (serial_input_available())
		{
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S')
     fb8:	c3 37       	cpi	r28, 0x73	; 115
     fba:	09 f4       	brne	.+2      	; 0xfbe <start_screen+0x200>
     fbc:	cd c0       	rjmp	.+410    	; 0x1158 <start_screen+0x39a>
     fbe:	c3 35       	cpi	r28, 0x53	; 83
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <start_screen+0x206>
     fc2:	ca c0       	rjmp	.+404    	; 0x1158 <start_screen+0x39a>
			break;
		} 
		
		
		//display the game speed to the terminal
		if (serial_input == '1') {
     fc4:	c1 33       	cpi	r28, 0x31	; 49
     fc6:	f9 f4       	brne	.+62     	; 0x1006 <start_screen+0x248>
			game_speed = 1000; //set game speed to 1000ms
     fc8:	88 ee       	ldi	r24, 0xE8	; 232
     fca:	93 e0       	ldi	r25, 0x03	; 3
     fcc:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <game_speed+0x1>
     fd0:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <game_speed>
			
			move_terminal_cursor(10, 17);
     fd4:	61 e1       	ldi	r22, 0x11	; 17
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	8a e0       	ldi	r24, 0x0A	; 10
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
			clear_to_end_of_line();
     fe0:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <clear_to_end_of_line>
			printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
     fe4:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <game_speed+0x1>
     fe8:	8f 93       	push	r24
     fea:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <game_speed>
     fee:	8f 93       	push	r24
     ff0:	82 e3       	ldi	r24, 0x32	; 50
     ff2:	92 e0       	ldi	r25, 0x02	; 2
     ff4:	9f 93       	push	r25
     ff6:	8f 93       	push	r24
     ff8:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	41 c0       	rjmp	.+130    	; 0x1088 <start_screen+0x2ca>
			
		} else if (serial_input == '2') {
    1006:	c2 33       	cpi	r28, 0x32	; 50
    1008:	f9 f4       	brne	.+62     	; 0x1048 <start_screen+0x28a>
			game_speed = 500; //set game speed to 500ms
    100a:	84 ef       	ldi	r24, 0xF4	; 244
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <game_speed+0x1>
    1012:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <game_speed>
			
			move_terminal_cursor(10, 17);
    1016:	61 e1       	ldi	r22, 0x11	; 17
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	8a e0       	ldi	r24, 0x0A	; 10
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
			clear_to_end_of_line();
    1022:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <clear_to_end_of_line>
			printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1026:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <game_speed+0x1>
    102a:	8f 93       	push	r24
    102c:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <game_speed>
    1030:	8f 93       	push	r24
    1032:	88 e5       	ldi	r24, 0x58	; 88
    1034:	92 e0       	ldi	r25, 0x02	; 2
    1036:	9f 93       	push	r25
    1038:	8f 93       	push	r24
    103a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	20 c0       	rjmp	.+64     	; 0x1088 <start_screen+0x2ca>
			
		} else if (serial_input == '3') {
    1048:	c3 33       	cpi	r28, 0x33	; 51
    104a:	f1 f4       	brne	.+60     	; 0x1088 <start_screen+0x2ca>
			game_speed = 250; //set game speed to 250ms
    104c:	8a ef       	ldi	r24, 0xFA	; 250
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <game_speed+0x1>
    1054:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <game_speed>
			
			move_terminal_cursor(10, 17);
    1058:	61 e1       	ldi	r22, 0x11	; 17
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	8a e0       	ldi	r24, 0x0A	; 10
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
			clear_to_end_of_line();
    1064:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <clear_to_end_of_line>
			printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1068:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <game_speed+0x1>
    106c:	8f 93       	push	r24
    106e:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <game_speed>
    1072:	8f 93       	push	r24
    1074:	8c e7       	ldi	r24, 0x7C	; 124
    1076:	92 e0       	ldi	r25, 0x02	; 2
    1078:	9f 93       	push	r25
    107a:	8f 93       	push	r24
    107c:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
		}
		
		
		// Next check for any button presses
		int8_t btn = button_pushed();
    1088:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
		if (btn != NO_BUTTON_PUSHED)
    108c:	8f 3f       	cpi	r24, 0xFF	; 255
    108e:	09 f0       	breq	.+2      	; 0x1092 <start_screen+0x2d4>
    1090:	63 c0       	rjmp	.+198    	; 0x1158 <start_screen+0x39a>
		{
			break;
			
		} else if (serial_input == 'm' || serial_input == 'M') {
    1092:	cd 36       	cpi	r28, 0x6D	; 109
    1094:	11 f0       	breq	.+4      	; 0x109a <start_screen+0x2dc>
    1096:	cd 34       	cpi	r28, 0x4D	; 77
    1098:	09 f5       	brne	.+66     	; 0x10dc <start_screen+0x31e>
			//clear manual mode alert
			move_terminal_cursor(10, 16);
    109a:	60 e1       	ldi	r22, 0x10	; 16
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	8a e0       	ldi	r24, 0x0A	; 10
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
			clear_to_end_of_line();
    10a6:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <clear_to_end_of_line>
			
			if (man_mode) {
    10aa:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <man_mode>
    10ae:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <man_mode+0x1>
    10b2:	89 2b       	or	r24, r25
    10b4:	29 f0       	breq	.+10     	; 0x10c0 <start_screen+0x302>
				man_mode = 0;  // toggle manual mode checker
    10b6:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <man_mode+0x1>
    10ba:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <man_mode>
    10be:	0e c0       	rjmp	.+28     	; 0x10dc <start_screen+0x31e>
				
			} else {
				man_mode = 1; //toggle manual mode checker				
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <man_mode+0x1>
    10c8:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <man_mode>
				//print to terminal that manual mode is on
				printf("Manual Mode: ON");
    10cc:	83 ea       	ldi	r24, 0xA3	; 163
    10ce:	92 e0       	ldi	r25, 0x02	; 2
    10d0:	9f 93       	push	r25
    10d2:	8f 93       	push	r24
    10d4:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
			}
		} 		

		if (!man_mode) {
    10dc:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <man_mode>
    10e0:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <man_mode+0x1>
    10e4:	89 2b       	or	r24, r25
    10e6:	09 f0       	breq	.+2      	; 0x10ea <start_screen+0x32c>
    10e8:	5a cf       	rjmp	.-332    	; 0xf9e <start_screen+0x1e0>
			// every 200 ms, update the animation
			current_time = get_current_time();
    10ea:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <get_current_time>
    10ee:	4b 01       	movw	r8, r22
    10f0:	5c 01       	movw	r10, r24
			if (current_time - last_screen_update > game_speed/5)
    10f2:	2b 01       	movw	r4, r22
    10f4:	3c 01       	movw	r6, r24
    10f6:	4c 18       	sub	r4, r12
    10f8:	5d 08       	sbc	r5, r13
    10fa:	6e 08       	sbc	r6, r14
    10fc:	7f 08       	sbc	r7, r15
    10fe:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <game_speed>
    1102:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <game_speed+0x1>
    1106:	ad ec       	ldi	r26, 0xCD	; 205
    1108:	bc ec       	ldi	r27, 0xCC	; 204
    110a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__umulhisi3>
    110e:	96 95       	lsr	r25
    1110:	87 95       	ror	r24
    1112:	96 95       	lsr	r25
    1114:	87 95       	ror	r24
    1116:	a0 e0       	ldi	r26, 0x00	; 0
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	84 15       	cp	r24, r4
    111c:	95 05       	cpc	r25, r5
    111e:	a6 05       	cpc	r26, r6
    1120:	b7 05       	cpc	r27, r7
    1122:	90 f4       	brcc	.+36     	; 0x1148 <start_screen+0x38a>
			{
				update_start_screen(frame_number);
    1124:	8d 2f       	mov	r24, r29
    1126:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_start_screen>
				frame_number = (frame_number + 1) % 32;
    112a:	8d 2f       	mov	r24, r29
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	8f 71       	andi	r24, 0x1F	; 31
    1132:	90 78       	andi	r25, 0x80	; 128
    1134:	99 23       	and	r25, r25
    1136:	24 f4       	brge	.+8      	; 0x1140 <start_screen+0x382>
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	80 6e       	ori	r24, 0xE0	; 224
    113c:	9f 6f       	ori	r25, 0xFF	; 255
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	d8 2f       	mov	r29, r24
				last_screen_update = current_time;
    1142:	75 01       	movw	r14, r10
    1144:	64 01       	movw	r12, r8
    1146:	2b cf       	rjmp	.-426    	; 0xf9e <start_screen+0x1e0>
			} else {
				if (serial_input == 'n' || serial_input == 'N') {
    1148:	ce 36       	cpi	r28, 0x6E	; 110
    114a:	19 f0       	breq	.+6      	; 0x1152 <start_screen+0x394>
    114c:	ce 34       	cpi	r28, 0x4E	; 78
    114e:	09 f0       	breq	.+2      	; 0x1152 <start_screen+0x394>
    1150:	26 cf       	rjmp	.-436    	; 0xf9e <start_screen+0x1e0>
					advance_note();
    1152:	0e 94 ad 04 	call	0x95a	; 0x95a <advance_note>
    1156:	23 cf       	rjmp	.-442    	; 0xf9e <start_screen+0x1e0>
				}
			}
		}
	}
}
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	df 90       	pop	r13
    1162:	cf 90       	pop	r12
    1164:	bf 90       	pop	r11
    1166:	af 90       	pop	r10
    1168:	9f 90       	pop	r9
    116a:	8f 90       	pop	r8
    116c:	7f 90       	pop	r7
    116e:	6f 90       	pop	r6
    1170:	5f 90       	pop	r5
    1172:	4f 90       	pop	r4
    1174:	08 95       	ret

00001176 <display_countdown>:

void display_countdown(int countdown) {
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	ec 01       	movw	r28, r24
	
	//clear display
	ledmatrix_clear();
    117c:	0e 94 c4 06 	call	0xd88	; 0xd88 <ledmatrix_clear>
	
	switch (countdown) {
    1180:	c2 30       	cpi	r28, 0x02	; 2
    1182:	d1 05       	cpc	r29, r1
    1184:	a9 f1       	breq	.+106    	; 0x11f0 <display_countdown+0x7a>
    1186:	1c f4       	brge	.+6      	; 0x118e <display_countdown+0x18>
    1188:	21 97       	sbiw	r28, 0x01	; 1
    118a:	71 f1       	breq	.+92     	; 0x11e8 <display_countdown+0x72>
    118c:	74 c1       	rjmp	.+744    	; 0x1476 <display_countdown+0x300>
    118e:	c3 30       	cpi	r28, 0x03	; 3
    1190:	d1 05       	cpc	r29, r1
    1192:	09 f4       	brne	.+2      	; 0x1196 <display_countdown+0x20>
    1194:	f3 c0       	rjmp	.+486    	; 0x137c <display_countdown+0x206>
    1196:	24 97       	sbiw	r28, 0x04	; 4
    1198:	09 f4       	brne	.+2      	; 0x119c <display_countdown+0x26>
    119a:	f5 c0       	rjmp	.+490    	; 0x1386 <display_countdown+0x210>
    119c:	6c c1       	rjmp	.+728    	; 0x1476 <display_countdown+0x300>
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
				ledmatrix_update_pixel(col, 3, COLOUR_RED);
    119e:	4f e0       	ldi	r20, 0x0F	; 15
    11a0:	63 e0       	ldi	r22, 0x03	; 3
    11a2:	8c 2f       	mov	r24, r28
    11a4:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 4, COLOUR_RED);
    11a8:	4f e0       	ldi	r20, 0x0F	; 15
    11aa:	64 e0       	ldi	r22, 0x04	; 4
    11ac:	8c 2f       	mov	r24, r28
    11ae:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
				
				if (col == 5) {
    11b2:	c5 30       	cpi	r28, 0x05	; 5
    11b4:	59 f4       	brne	.+22     	; 0x11cc <display_countdown+0x56>
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    11b6:	4f e0       	ldi	r20, 0x0F	; 15
    11b8:	62 e0       	ldi	r22, 0x02	; 2
    11ba:	8c 2f       	mov	r24, r28
    11bc:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_RED);
    11c0:	4f e0       	ldi	r20, 0x0F	; 15
    11c2:	64 e0       	ldi	r22, 0x04	; 4
    11c4:	8c 2f       	mov	r24, r28
    11c6:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
    11ca:	0c c0       	rjmp	.+24     	; 0x11e4 <display_countdown+0x6e>
					
					} else if (col == 10) {
    11cc:	ca 30       	cpi	r28, 0x0A	; 10
    11ce:	51 f4       	brne	.+20     	; 0x11e4 <display_countdown+0x6e>
					ledmatrix_update_pixel(col, 2, COLOUR_RED);
    11d0:	4f e0       	ldi	r20, 0x0F	; 15
    11d2:	62 e0       	ldi	r22, 0x02	; 2
    11d4:	8c 2f       	mov	r24, r28
    11d6:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_RED);
    11da:	4f e0       	ldi	r20, 0x0F	; 15
    11dc:	65 e0       	ldi	r22, 0x05	; 5
    11de:	8c 2f       	mov	r24, r28
    11e0:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
    11e4:	cf 5f       	subi	r28, 0xFF	; 255
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <display_countdown+0x74>
void display_countdown(int countdown) {
	
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
    11e8:	c4 e0       	ldi	r28, 0x04	; 4
		case 1: //Then draw the 1
			for (uint8_t col = 4; col < 11; col++) {
    11ea:	cb 30       	cpi	r28, 0x0B	; 11
    11ec:	c0 f2       	brcs	.-80     	; 0x119e <display_countdown+0x28>
    11ee:	43 c1       	rjmp	.+646    	; 0x1476 <display_countdown+0x300>
				}
			}
			break;
			
		case 2:  //Then draw the 2
			ledmatrix_update_pixel(4, 2, COLOUR_RED);
    11f0:	4f e0       	ldi	r20, 0x0F	; 15
    11f2:	62 e0       	ldi	r22, 0x02	; 2
    11f4:	84 e0       	ldi	r24, 0x04	; 4
    11f6:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 3, COLOUR_RED);
    11fa:	4f e0       	ldi	r20, 0x0F	; 15
    11fc:	63 e0       	ldi	r22, 0x03	; 3
    11fe:	84 e0       	ldi	r24, 0x04	; 4
    1200:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 4, COLOUR_RED);
    1204:	4f e0       	ldi	r20, 0x0F	; 15
    1206:	64 e0       	ldi	r22, 0x04	; 4
    1208:	84 e0       	ldi	r24, 0x04	; 4
    120a:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(4, 5, COLOUR_RED);
    120e:	4f e0       	ldi	r20, 0x0F	; 15
    1210:	65 e0       	ldi	r22, 0x05	; 5
    1212:	84 e0       	ldi	r24, 0x04	; 4
    1214:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(5, 1, COLOUR_RED);
    1218:	4f e0       	ldi	r20, 0x0F	; 15
    121a:	61 e0       	ldi	r22, 0x01	; 1
    121c:	85 e0       	ldi	r24, 0x05	; 5
    121e:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 2, COLOUR_RED);
    1222:	4f e0       	ldi	r20, 0x0F	; 15
    1224:	62 e0       	ldi	r22, 0x02	; 2
    1226:	85 e0       	ldi	r24, 0x05	; 5
    1228:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 5, COLOUR_RED);
    122c:	4f e0       	ldi	r20, 0x0F	; 15
    122e:	65 e0       	ldi	r22, 0x05	; 5
    1230:	85 e0       	ldi	r24, 0x05	; 5
    1232:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 6, COLOUR_RED);
    1236:	4f e0       	ldi	r20, 0x0F	; 15
    1238:	66 e0       	ldi	r22, 0x06	; 6
    123a:	85 e0       	ldi	r24, 0x05	; 5
    123c:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(6, 5, COLOUR_RED);
    1240:	4f e0       	ldi	r20, 0x0F	; 15
    1242:	65 e0       	ldi	r22, 0x05	; 5
    1244:	86 e0       	ldi	r24, 0x06	; 6
    1246:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 6, COLOUR_RED);
    124a:	4f e0       	ldi	r20, 0x0F	; 15
    124c:	66 e0       	ldi	r22, 0x06	; 6
    124e:	86 e0       	ldi	r24, 0x06	; 6
    1250:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(7, 5, COLOUR_RED);
    1254:	4f e0       	ldi	r20, 0x0F	; 15
    1256:	65 e0       	ldi	r22, 0x05	; 5
    1258:	87 e0       	ldi	r24, 0x07	; 7
    125a:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 6, COLOUR_RED);
    125e:	4f e0       	ldi	r20, 0x0F	; 15
    1260:	66 e0       	ldi	r22, 0x06	; 6
    1262:	87 e0       	ldi	r24, 0x07	; 7
    1264:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(8, 2, COLOUR_RED);
    1268:	4f e0       	ldi	r20, 0x0F	; 15
    126a:	62 e0       	ldi	r22, 0x02	; 2
    126c:	88 e0       	ldi	r24, 0x08	; 8
    126e:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 3, COLOUR_RED);
    1272:	4f e0       	ldi	r20, 0x0F	; 15
    1274:	63 e0       	ldi	r22, 0x03	; 3
    1276:	88 e0       	ldi	r24, 0x08	; 8
    1278:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 4, COLOUR_RED);
    127c:	4f e0       	ldi	r20, 0x0F	; 15
    127e:	64 e0       	ldi	r22, 0x04	; 4
    1280:	88 e0       	ldi	r24, 0x08	; 8
    1282:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(9, 1, COLOUR_RED);
    1286:	4f e0       	ldi	r20, 0x0F	; 15
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	89 e0       	ldi	r24, 0x09	; 9
    128c:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 2, COLOUR_RED);
    1290:	4f e0       	ldi	r20, 0x0F	; 15
    1292:	62 e0       	ldi	r22, 0x02	; 2
    1294:	89 e0       	ldi	r24, 0x09	; 9
    1296:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(10, 1, COLOUR_RED);
    129a:	4f e0       	ldi	r20, 0x0F	; 15
    129c:	61 e0       	ldi	r22, 0x01	; 1
    129e:	8a e0       	ldi	r24, 0x0A	; 10
    12a0:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 2, COLOUR_RED);
    12a4:	4f e0       	ldi	r20, 0x0F	; 15
    12a6:	62 e0       	ldi	r22, 0x02	; 2
    12a8:	8a e0       	ldi	r24, 0x0A	; 10
    12aa:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 3, COLOUR_RED);
    12ae:	4f e0       	ldi	r20, 0x0F	; 15
    12b0:	63 e0       	ldi	r22, 0x03	; 3
    12b2:	8a e0       	ldi	r24, 0x0A	; 10
    12b4:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 4, COLOUR_RED);
    12b8:	4f e0       	ldi	r20, 0x0F	; 15
    12ba:	64 e0       	ldi	r22, 0x04	; 4
    12bc:	8a e0       	ldi	r24, 0x0A	; 10
    12be:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
    12c2:	4f e0       	ldi	r20, 0x0F	; 15
    12c4:	65 e0       	ldi	r22, 0x05	; 5
    12c6:	8a e0       	ldi	r24, 0x0A	; 10
    12c8:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
    12cc:	4f e0       	ldi	r20, 0x0F	; 15
    12ce:	66 e0       	ldi	r22, 0x06	; 6
    12d0:	8a e0       	ldi	r24, 0x0A	; 10
    12d2:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			break;
    12d6:	cf c0       	rjmp	.+414    	; 0x1476 <display_countdown+0x300>
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
				if (col == 4 || col == 10) {
    12d8:	c4 30       	cpi	r28, 0x04	; 4
    12da:	11 f0       	breq	.+4      	; 0x12e0 <display_countdown+0x16a>
    12dc:	ca 30       	cpi	r28, 0x0A	; 10
    12de:	a9 f4       	brne	.+42     	; 0x130a <display_countdown+0x194>
					ledmatrix_update_pixel(col, 2, COLOUR_YELLOW);
    12e0:	4f ef       	ldi	r20, 0xFF	; 255
    12e2:	62 e0       	ldi	r22, 0x02	; 2
    12e4:	8c 2f       	mov	r24, r28
    12e6:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 3, COLOUR_YELLOW);
    12ea:	4f ef       	ldi	r20, 0xFF	; 255
    12ec:	63 e0       	ldi	r22, 0x03	; 3
    12ee:	8c 2f       	mov	r24, r28
    12f0:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_YELLOW);
    12f4:	4f ef       	ldi	r20, 0xFF	; 255
    12f6:	64 e0       	ldi	r22, 0x04	; 4
    12f8:	8c 2f       	mov	r24, r28
    12fa:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_YELLOW);
    12fe:	4f ef       	ldi	r20, 0xFF	; 255
    1300:	65 e0       	ldi	r22, 0x05	; 5
    1302:	8c 2f       	mov	r24, r28
    1304:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
    1308:	37 c0       	rjmp	.+110    	; 0x1378 <display_countdown+0x202>
					
					} else if (col == 5 || col == 9) {
    130a:	c5 30       	cpi	r28, 0x05	; 5
    130c:	11 f0       	breq	.+4      	; 0x1312 <display_countdown+0x19c>
    130e:	c9 30       	cpi	r28, 0x09	; 9
    1310:	a9 f4       	brne	.+42     	; 0x133c <display_countdown+0x1c6>
					ledmatrix_update_pixel(col, 1, COLOUR_YELLOW);
    1312:	4f ef       	ldi	r20, 0xFF	; 255
    1314:	61 e0       	ldi	r22, 0x01	; 1
    1316:	8c 2f       	mov	r24, r28
    1318:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 2, COLOUR_YELLOW);
    131c:	4f ef       	ldi	r20, 0xFF	; 255
    131e:	62 e0       	ldi	r22, 0x02	; 2
    1320:	8c 2f       	mov	r24, r28
    1322:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 5, COLOUR_YELLOW);
    1326:	4f ef       	ldi	r20, 0xFF	; 255
    1328:	65 e0       	ldi	r22, 0x05	; 5
    132a:	8c 2f       	mov	r24, r28
    132c:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 6, COLOUR_YELLOW);
    1330:	4f ef       	ldi	r20, 0xFF	; 255
    1332:	66 e0       	ldi	r22, 0x06	; 6
    1334:	8c 2f       	mov	r24, r28
    1336:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
    133a:	1e c0       	rjmp	.+60     	; 0x1378 <display_countdown+0x202>
					
					} else if (col == 6 || col == 8) {
    133c:	c6 30       	cpi	r28, 0x06	; 6
    133e:	11 f0       	breq	.+4      	; 0x1344 <display_countdown+0x1ce>
    1340:	c8 30       	cpi	r28, 0x08	; 8
    1342:	59 f4       	brne	.+22     	; 0x135a <display_countdown+0x1e4>
					ledmatrix_update_pixel(col, 5, COLOUR_YELLOW);
    1344:	4f ef       	ldi	r20, 0xFF	; 255
    1346:	65 e0       	ldi	r22, 0x05	; 5
    1348:	8c 2f       	mov	r24, r28
    134a:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 6, COLOUR_YELLOW);
    134e:	4f ef       	ldi	r20, 0xFF	; 255
    1350:	66 e0       	ldi	r22, 0x06	; 6
    1352:	8c 2f       	mov	r24, r28
    1354:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
    1358:	0f c0       	rjmp	.+30     	; 0x1378 <display_countdown+0x202>
					
					} else {
					ledmatrix_update_pixel(col, 2, COLOUR_YELLOW);
    135a:	4f ef       	ldi	r20, 0xFF	; 255
    135c:	62 e0       	ldi	r22, 0x02	; 2
    135e:	8c 2f       	mov	r24, r28
    1360:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 3, COLOUR_YELLOW);
    1364:	4f ef       	ldi	r20, 0xFF	; 255
    1366:	63 e0       	ldi	r22, 0x03	; 3
    1368:	8c 2f       	mov	r24, r28
    136a:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
					ledmatrix_update_pixel(col, 4, COLOUR_YELLOW);
    136e:	4f ef       	ldi	r20, 0xFF	; 255
    1370:	64 e0       	ldi	r22, 0x04	; 4
    1372:	8c 2f       	mov	r24, r28
    1374:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
			break;
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
    1378:	cf 5f       	subi	r28, 0xFF	; 255
    137a:	01 c0       	rjmp	.+2      	; 0x137e <display_countdown+0x208>
void display_countdown(int countdown) {
	
	//clear display
	ledmatrix_clear();
	
	switch (countdown) {
    137c:	c4 e0       	ldi	r28, 0x04	; 4
			ledmatrix_update_pixel(10, 5, COLOUR_RED);
			ledmatrix_update_pixel(10, 6, COLOUR_RED);
			break;
			
		case 3: //Then draw the 3
			for (uint8_t col = 4; col < 11; col ++) {
    137e:	cb 30       	cpi	r28, 0x0B	; 11
    1380:	08 f4       	brcc	.+2      	; 0x1384 <display_countdown+0x20e>
    1382:	aa cf       	rjmp	.-172    	; 0x12d8 <display_countdown+0x162>
    1384:	78 c0       	rjmp	.+240    	; 0x1476 <display_countdown+0x300>
				}
			}
			break;
		
		case 4: //Then draw the Go
			ledmatrix_update_pixel(5, 1, COLOUR_GREEN);
    1386:	40 ef       	ldi	r20, 0xF0	; 240
    1388:	61 e0       	ldi	r22, 0x01	; 1
    138a:	85 e0       	ldi	r24, 0x05	; 5
    138c:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 2, COLOUR_GREEN);
    1390:	40 ef       	ldi	r20, 0xF0	; 240
    1392:	62 e0       	ldi	r22, 0x02	; 2
    1394:	85 e0       	ldi	r24, 0x05	; 5
    1396:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 3, COLOUR_GREEN);
    139a:	40 ef       	ldi	r20, 0xF0	; 240
    139c:	63 e0       	ldi	r22, 0x03	; 3
    139e:	85 e0       	ldi	r24, 0x05	; 5
    13a0:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 5, COLOUR_GREEN);
    13a4:	40 ef       	ldi	r20, 0xF0	; 240
    13a6:	65 e0       	ldi	r22, 0x05	; 5
    13a8:	85 e0       	ldi	r24, 0x05	; 5
    13aa:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 6, COLOUR_GREEN);
    13ae:	40 ef       	ldi	r20, 0xF0	; 240
    13b0:	66 e0       	ldi	r22, 0x06	; 6
    13b2:	85 e0       	ldi	r24, 0x05	; 5
    13b4:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 7, COLOUR_GREEN);
    13b8:	40 ef       	ldi	r20, 0xF0	; 240
    13ba:	67 e0       	ldi	r22, 0x07	; 7
    13bc:	85 e0       	ldi	r24, 0x05	; 5
    13be:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(6, 0, COLOUR_GREEN);
    13c2:	40 ef       	ldi	r20, 0xF0	; 240
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	86 e0       	ldi	r24, 0x06	; 6
    13c8:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 5, COLOUR_GREEN);
    13cc:	40 ef       	ldi	r20, 0xF0	; 240
    13ce:	65 e0       	ldi	r22, 0x05	; 5
    13d0:	86 e0       	ldi	r24, 0x06	; 6
    13d2:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(6, 7, COLOUR_GREEN);
    13d6:	40 ef       	ldi	r20, 0xF0	; 240
    13d8:	67 e0       	ldi	r22, 0x07	; 7
    13da:	86 e0       	ldi	r24, 0x06	; 6
    13dc:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(7, 0, COLOUR_GREEN);
    13e0:	40 ef       	ldi	r20, 0xF0	; 240
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	87 e0       	ldi	r24, 0x07	; 7
    13e6:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 2, COLOUR_GREEN);
    13ea:	40 ef       	ldi	r20, 0xF0	; 240
    13ec:	62 e0       	ldi	r22, 0x02	; 2
    13ee:	87 e0       	ldi	r24, 0x07	; 7
    13f0:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 3, COLOUR_GREEN);
    13f4:	40 ef       	ldi	r20, 0xF0	; 240
    13f6:	63 e0       	ldi	r22, 0x03	; 3
    13f8:	87 e0       	ldi	r24, 0x07	; 7
    13fa:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 5, COLOUR_GREEN);
    13fe:	40 ef       	ldi	r20, 0xF0	; 240
    1400:	65 e0       	ldi	r22, 0x05	; 5
    1402:	87 e0       	ldi	r24, 0x07	; 7
    1404:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(7, 7, COLOUR_GREEN);
    1408:	40 ef       	ldi	r20, 0xF0	; 240
    140a:	67 e0       	ldi	r22, 0x07	; 7
    140c:	87 e0       	ldi	r24, 0x07	; 7
    140e:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(8, 0, COLOUR_GREEN);
    1412:	40 ef       	ldi	r20, 0xF0	; 240
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	88 e0       	ldi	r24, 0x08	; 8
    1418:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 3, COLOUR_GREEN);
    141c:	40 ef       	ldi	r20, 0xF0	; 240
    141e:	63 e0       	ldi	r22, 0x03	; 3
    1420:	88 e0       	ldi	r24, 0x08	; 8
    1422:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 5, COLOUR_GREEN);
    1426:	40 ef       	ldi	r20, 0xF0	; 240
    1428:	65 e0       	ldi	r22, 0x05	; 5
    142a:	88 e0       	ldi	r24, 0x08	; 8
    142c:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(8, 7, COLOUR_GREEN);
    1430:	40 ef       	ldi	r20, 0xF0	; 240
    1432:	67 e0       	ldi	r22, 0x07	; 7
    1434:	88 e0       	ldi	r24, 0x08	; 8
    1436:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			
			ledmatrix_update_pixel(9, 1, COLOUR_GREEN);
    143a:	40 ef       	ldi	r20, 0xF0	; 240
    143c:	61 e0       	ldi	r22, 0x01	; 1
    143e:	89 e0       	ldi	r24, 0x09	; 9
    1440:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 2, COLOUR_GREEN);
    1444:	40 ef       	ldi	r20, 0xF0	; 240
    1446:	62 e0       	ldi	r22, 0x02	; 2
    1448:	89 e0       	ldi	r24, 0x09	; 9
    144a:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(5, 3, COLOUR_GREEN);
    144e:	40 ef       	ldi	r20, 0xF0	; 240
    1450:	63 e0       	ldi	r22, 0x03	; 3
    1452:	85 e0       	ldi	r24, 0x05	; 5
    1454:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 5, COLOUR_GREEN);
    1458:	40 ef       	ldi	r20, 0xF0	; 240
    145a:	65 e0       	ldi	r22, 0x05	; 5
    145c:	89 e0       	ldi	r24, 0x09	; 9
    145e:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 6, COLOUR_GREEN);
    1462:	40 ef       	ldi	r20, 0xF0	; 240
    1464:	66 e0       	ldi	r22, 0x06	; 6
    1466:	89 e0       	ldi	r24, 0x09	; 9
    1468:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
			ledmatrix_update_pixel(9, 7, COLOUR_GREEN);
    146c:	40 ef       	ldi	r20, 0xF0	; 240
    146e:	67 e0       	ldi	r22, 0x07	; 7
    1470:	89 e0       	ldi	r24, 0x09	; 9
    1472:	0e 94 88 06 	call	0xd10	; 0xd10 <ledmatrix_update_pixel>
		
		default:
			break;
	}
	
}
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	08 95       	ret

0000147c <game_countdown>:

void game_countdown() {
    147c:	8f 92       	push	r8
    147e:	9f 92       	push	r9
    1480:	af 92       	push	r10
    1482:	bf 92       	push	r11
    1484:	cf 92       	push	r12
    1486:	df 92       	push	r13
    1488:	ef 92       	push	r14
    148a:	ff 92       	push	r15
	
	uint32_t current_time = get_current_time();
    148c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <get_current_time>
    1490:	4b 01       	movw	r8, r22
    1492:	5c 01       	movw	r10, r24
	uint32_t last_recorded_time = current_time;

	display_countdown(1); // display 1
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 bb 08 	call	0x1176	; 0x1176 <display_countdown>
	
	while (1) {
		//update current time
		current_time = get_current_time();
    149c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <get_current_time>
    14a0:	6b 01       	movw	r12, r22
    14a2:	7c 01       	movw	r14, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    14a4:	ab 01       	movw	r20, r22
    14a6:	bc 01       	movw	r22, r24
    14a8:	48 19       	sub	r20, r8
    14aa:	59 09       	sbc	r21, r9
    14ac:	6a 09       	sbc	r22, r10
    14ae:	7b 09       	sbc	r23, r11
    14b0:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <game_speed>
    14b4:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <game_speed+0x1>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	a0 e0       	ldi	r26, 0x00	; 0
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	48 17       	cp	r20, r24
    14c2:	59 07       	cpc	r21, r25
    14c4:	6a 07       	cpc	r22, r26
    14c6:	7b 07       	cpc	r23, r27
    14c8:	48 f3       	brcs	.-46     	; 0x149c <game_countdown+0x20>
			display_countdown(2); //display 2
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 bb 08 	call	0x1176	; 0x1176 <display_countdown>
		}
	}
	
	while (1) {
		//update current time
		current_time = get_current_time();
    14d2:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <get_current_time>
    14d6:	4b 01       	movw	r8, r22
    14d8:	5c 01       	movw	r10, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    14da:	ab 01       	movw	r20, r22
    14dc:	bc 01       	movw	r22, r24
    14de:	4c 19       	sub	r20, r12
    14e0:	5d 09       	sbc	r21, r13
    14e2:	6e 09       	sbc	r22, r14
    14e4:	7f 09       	sbc	r23, r15
    14e6:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <game_speed>
    14ea:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <game_speed+0x1>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	a0 e0       	ldi	r26, 0x00	; 0
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	48 17       	cp	r20, r24
    14f8:	59 07       	cpc	r21, r25
    14fa:	6a 07       	cpc	r22, r26
    14fc:	7b 07       	cpc	r23, r27
    14fe:	48 f3       	brcs	.-46     	; 0x14d2 <game_countdown+0x56>
			display_countdown(3); //display 3
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 bb 08 	call	0x1176	; 0x1176 <display_countdown>
		}
	}
	
	while (1) {
		//update current time
		current_time = get_current_time();
    1508:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <get_current_time>
    150c:	6b 01       	movw	r12, r22
    150e:	7c 01       	movw	r14, r24
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    1510:	ab 01       	movw	r20, r22
    1512:	bc 01       	movw	r22, r24
    1514:	48 19       	sub	r20, r8
    1516:	59 09       	sbc	r21, r9
    1518:	6a 09       	sbc	r22, r10
    151a:	7b 09       	sbc	r23, r11
    151c:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <game_speed>
    1520:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <game_speed+0x1>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	a0 e0       	ldi	r26, 0x00	; 0
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	48 17       	cp	r20, r24
    152e:	59 07       	cpc	r21, r25
    1530:	6a 07       	cpc	r22, r26
    1532:	7b 07       	cpc	r23, r27
    1534:	48 f3       	brcs	.-46     	; 0x1508 <game_countdown+0x8c>
			display_countdown(4); //display go
    1536:	84 e0       	ldi	r24, 0x04	; 4
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 bb 08 	call	0x1176	; 0x1176 <display_countdown>
	}
	
																														//turn into a loop
	while (1) {
		//update current time
		current_time = get_current_time();
    153e:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <get_current_time>
		
		//if the change in time between the 1 being drawn hits 2 * game speed
		if ((current_time - last_recorded_time) >= (2 * game_speed)) {
    1542:	ab 01       	movw	r20, r22
    1544:	bc 01       	movw	r22, r24
    1546:	4c 19       	sub	r20, r12
    1548:	5d 09       	sbc	r21, r13
    154a:	6e 09       	sbc	r22, r14
    154c:	7f 09       	sbc	r23, r15
    154e:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <game_speed>
    1552:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <game_speed+0x1>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	a0 e0       	ldi	r26, 0x00	; 0
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	48 17       	cp	r20, r24
    1560:	59 07       	cpc	r21, r25
    1562:	6a 07       	cpc	r22, r26
    1564:	7b 07       	cpc	r23, r27
    1566:	58 f3       	brcs	.-42     	; 0x153e <game_countdown+0xc2>
			break;
		}
	}
}
    1568:	ff 90       	pop	r15
    156a:	ef 90       	pop	r14
    156c:	df 90       	pop	r13
    156e:	cf 90       	pop	r12
    1570:	bf 90       	pop	r11
    1572:	af 90       	pop	r10
    1574:	9f 90       	pop	r9
    1576:	8f 90       	pop	r8
    1578:	08 95       	ret

0000157a <new_game>:

void new_game(void)
{
	// Clear the serial terminal
	clear_terminal();
    157a:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <clear_terminal>
	
	//reset number of points player has
	points = 0;
    157e:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <points+0x1>
    1582:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <points>
	
	//Start Game Countdown
	game_countdown();
    1586:	0e 94 3e 0a 	call	0x147c	; 0x147c <game_countdown>
		
	// Initialize the game and display
	initialise_game();
    158a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    158e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
	clear_serial_input_buffer();
    1592:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <clear_serial_input_buffer>
    1596:	08 95       	ret

00001598 <play_game>:
}

void play_game(void)
{
    1598:	8f 92       	push	r8
    159a:	9f 92       	push	r9
    159c:	af 92       	push	r10
    159e:	bf 92       	push	r11
    15a0:	cf 92       	push	r12
    15a2:	df 92       	push	r13
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
	
	int8_t btn; // The button pushed
	
	//int combo_line = 0;
	
	last_advance_time = get_current_time();
    15ac:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <get_current_time>
    15b0:	6b 01       	movw	r12, r22
    15b2:	7c 01       	movw	r14, r24
	
	//Display current track
	move_terminal_cursor(10, 15);
    15b4:	6f e0       	ldi	r22, 0x0F	; 15
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	8a e0       	ldi	r24, 0x0A	; 10
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	printf("Track: Through Fire & Flames");																//do %s and add a new track title at the end.
    15c0:	85 e1       	ldi	r24, 0x15	; 21
    15c2:	92 e0       	ldi	r25, 0x02	; 2
    15c4:	9f 93       	push	r25
    15c6:	8f 93       	push	r24
    15c8:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
	
	move_terminal_cursor(10, 18);
    15cc:	62 e1       	ldi	r22, 0x12	; 18
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	8a e0       	ldi	r24, 0x0A	; 10
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	clear_to_end_of_line();
    15d8:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <clear_to_end_of_line>
	//update terminal line appropriately
	if (game_speed == 1000) {
    15dc:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <game_speed>
    15e0:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <game_speed+0x1>
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	88 3e       	cpi	r24, 0xE8	; 232
    15ea:	23 e0       	ldi	r18, 0x03	; 3
    15ec:	92 07       	cpc	r25, r18
    15ee:	69 f4       	brne	.+26     	; 0x160a <play_game+0x72>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    15f0:	9f 93       	push	r25
    15f2:	8f 93       	push	r24
    15f4:	82 e3       	ldi	r24, 0x32	; 50
    15f6:	92 e0       	ldi	r25, 0x02	; 2
    15f8:	9f 93       	push	r25
    15fa:	8f 93       	push	r24
    15fc:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0d c1       	rjmp	.+538    	; 0x1824 <play_game+0x28c>
		
	} else if (game_speed == 500) {
    160a:	84 3f       	cpi	r24, 0xF4	; 244
    160c:	31 e0       	ldi	r19, 0x01	; 1
    160e:	93 07       	cpc	r25, r19
    1610:	69 f4       	brne	.+26     	; 0x162c <play_game+0x94>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    1612:	9f 93       	push	r25
    1614:	8f 93       	push	r24
    1616:	88 e5       	ldi	r24, 0x58	; 88
    1618:	92 e0       	ldi	r25, 0x02	; 2
    161a:	9f 93       	push	r25
    161c:	8f 93       	push	r24
    161e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	fc c0       	rjmp	.+504    	; 0x1824 <play_game+0x28c>
		
	} else if (game_speed == 250) {
    162c:	8a 3f       	cpi	r24, 0xFA	; 250
    162e:	91 05       	cpc	r25, r1
    1630:	09 f0       	breq	.+2      	; 0x1634 <play_game+0x9c>
    1632:	f8 c0       	rjmp	.+496    	; 0x1824 <play_game+0x28c>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1634:	9f 93       	push	r25
    1636:	8f 93       	push	r24
    1638:	8c e7       	ldi	r24, 0x7C	; 124
    163a:	92 e0       	ldi	r25, 0x02	; 2
    163c:	9f 93       	push	r25
    163e:	8f 93       	push	r24
    1640:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	eb c0       	rjmp	.+470    	; 0x1824 <play_game+0x28c>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
    164e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    1652:	d8 2f       	mov	r29, r24
		
		char keyboard_input = -1;
		
		if (serial_input_available()) {
    1654:	0e 94 76 0d 	call	0x1aec	; 0x1aec <serial_input_available>
    1658:	88 23       	and	r24, r24
    165a:	41 f0       	breq	.+16     	; 0x166c <play_game+0xd4>
			keyboard_input = fgetc(stdin);
    165c:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <__iob>
    1660:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <__iob+0x1>
    1664:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fgetc>
    1668:	c8 2f       	mov	r28, r24
    166a:	01 c0       	rjmp	.+2      	; 0x166e <play_game+0xd6>
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
		
		char keyboard_input = -1;
    166c:	cf ef       	ldi	r28, 0xFF	; 255
		
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		if ((btn == BUTTON0_PUSHED) || (keyboard_input == 'f' || keyboard_input == 'F')) {
    166e:	dd 23       	and	r29, r29
    1670:	21 f0       	breq	.+8      	; 0x167a <play_game+0xe2>
    1672:	c6 36       	cpi	r28, 0x66	; 102
    1674:	11 f0       	breq	.+4      	; 0x167a <play_game+0xe2>
    1676:	c6 34       	cpi	r28, 0x46	; 70
    1678:	21 f4       	brne	.+8      	; 0x1682 <play_game+0xea>
			// If button 0 play the lowest note (right lane)
			play_note(3);
    167a:	83 e0       	ldi	r24, 0x03	; 3
    167c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <play_note>
    1680:	1d c0       	rjmp	.+58     	; 0x16bc <play_game+0x124>
		
		} else if ((btn == BUTTON1_PUSHED) || (keyboard_input == 'd' || keyboard_input == 'D')) {
    1682:	d1 30       	cpi	r29, 0x01	; 1
    1684:	21 f0       	breq	.+8      	; 0x168e <play_game+0xf6>
    1686:	c4 36       	cpi	r28, 0x64	; 100
    1688:	11 f0       	breq	.+4      	; 0x168e <play_game+0xf6>
    168a:	c4 34       	cpi	r28, 0x44	; 68
    168c:	21 f4       	brne	.+8      	; 0x1696 <play_game+0xfe>
			//If button 1 is pushed play the second lowest note
			play_note(2);		
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <play_note>
    1694:	13 c0       	rjmp	.+38     	; 0x16bc <play_game+0x124>
		
		} else if ((btn == BUTTON2_PUSHED) || (keyboard_input == 's' || keyboard_input == 'S')) {
    1696:	d2 30       	cpi	r29, 0x02	; 2
    1698:	21 f0       	breq	.+8      	; 0x16a2 <play_game+0x10a>
    169a:	c3 37       	cpi	r28, 0x73	; 115
    169c:	11 f0       	breq	.+4      	; 0x16a2 <play_game+0x10a>
    169e:	c3 35       	cpi	r28, 0x53	; 83
    16a0:	21 f4       	brne	.+8      	; 0x16aa <play_game+0x112>
			//If button 2 is pushed play the second highest note
			play_note(1); 
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <play_note>
    16a8:	09 c0       	rjmp	.+18     	; 0x16bc <play_game+0x124>
			
		} else if ((btn == BUTTON3_PUSHED) || (keyboard_input == 'a' || keyboard_input == 'A')) {
    16aa:	d3 30       	cpi	r29, 0x03	; 3
    16ac:	21 f0       	breq	.+8      	; 0x16b6 <play_game+0x11e>
    16ae:	c1 36       	cpi	r28, 0x61	; 97
    16b0:	11 f0       	breq	.+4      	; 0x16b6 <play_game+0x11e>
    16b2:	c1 34       	cpi	r28, 0x41	; 65
    16b4:	19 f4       	brne	.+6      	; 0x16bc <play_game+0x124>
			//If button 3 is pushed play the highest note
			play_note(0);
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <play_note>
			
		} 
		
		if (keyboard_input == 'm' || keyboard_input == 'M') {
    16bc:	cd 36       	cpi	r28, 0x6D	; 109
    16be:	11 f0       	breq	.+4      	; 0x16c4 <play_game+0x12c>
    16c0:	cd 34       	cpi	r28, 0x4D	; 77
    16c2:	39 f5       	brne	.+78     	; 0x1712 <play_game+0x17a>
			//check to see if the game is currently paused
			if (!paused) {
    16c4:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <paused>
    16c8:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <paused+0x1>
    16cc:	89 2b       	or	r24, r25
    16ce:	09 f5       	brne	.+66     	; 0x1712 <play_game+0x17a>
				//clear manual mode alert
				move_terminal_cursor(10, 16);
    16d0:	60 e1       	ldi	r22, 0x10	; 16
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	8a e0       	ldi	r24, 0x0A	; 10
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
				clear_to_end_of_line();
    16dc:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <clear_to_end_of_line>
				if (man_mode) {
    16e0:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <man_mode>
    16e4:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <man_mode+0x1>
    16e8:	89 2b       	or	r24, r25
    16ea:	29 f0       	breq	.+10     	; 0x16f6 <play_game+0x15e>
					man_mode = 0;
    16ec:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <man_mode+0x1>
    16f0:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <man_mode>
    16f4:	0e c0       	rjmp	.+28     	; 0x1712 <play_game+0x17a>
		
				} else {
					man_mode = 1;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <man_mode+0x1>
    16fe:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <man_mode>
					
					//print to terminal that manual mode is on
					printf("Manual Mode: ON");
    1702:	83 ea       	ldi	r24, 0xA3	; 163
    1704:	92 e0       	ldi	r25, 0x02	; 2
    1706:	9f 93       	push	r25
    1708:	8f 93       	push	r24
    170a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
				}
			}	
		}
		
		if (keyboard_input == 'p' || keyboard_input == 'P') {
    1712:	c0 37       	cpi	r28, 0x70	; 112
    1714:	11 f0       	breq	.+4      	; 0x171a <play_game+0x182>
    1716:	c0 35       	cpi	r28, 0x50	; 80
    1718:	69 f5       	brne	.+90     	; 0x1774 <play_game+0x1dc>
			//Check to see if the game is in manual mode
			if (!man_mode) {
    171a:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <man_mode>
    171e:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <man_mode+0x1>
    1722:	89 2b       	or	r24, r25
    1724:	39 f5       	brne	.+78     	; 0x1774 <play_game+0x1dc>
				//clear pause line in terminal
				move_terminal_cursor(10, 17);
    1726:	61 e1       	ldi	r22, 0x11	; 17
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	8a e0       	ldi	r24, 0x0A	; 10
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
				clear_to_end_of_line();
    1732:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <clear_to_end_of_line>
				if (paused) {
    1736:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <paused>
    173a:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <paused+0x1>
    173e:	89 2b       	or	r24, r25
    1740:	41 f0       	breq	.+16     	; 0x1752 <play_game+0x1ba>
					paused = 0;
    1742:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <paused+0x1>
    1746:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <paused>
					PORTD = PORTD & 0b01111111;
    174a:	8b b1       	in	r24, 0x0b	; 11
    174c:	8f 77       	andi	r24, 0x7F	; 127
    174e:	8b b9       	out	0x0b, r24	; 11
    1750:	11 c0       	rjmp	.+34     	; 0x1774 <play_game+0x1dc>
			
				} else {
					paused = 1;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <paused+0x1>
    175a:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <paused>
					PORTD = PORTD | (1<<7); //essentially just PORTD | 0b00001000
    175e:	8b b1       	in	r24, 0x0b	; 11
    1760:	80 68       	ori	r24, 0x80	; 128
    1762:	8b b9       	out	0x0b, r24	; 11
					
					//tell user that game is currently paused
					printf("Game Paused");
    1764:	83 eb       	ldi	r24, 0xB3	; 179
    1766:	92 e0       	ldi	r25, 0x02	; 2
    1768:	9f 93       	push	r25
    176a:	8f 93       	push	r24
    176c:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
				
			}
		}
		
		//Combo IO board LED's
		if (combo_count == 0) {
    1774:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <combo_count>
    1778:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <combo_count+0x1>
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	21 f4       	brne	.+8      	; 0x1788 <play_game+0x1f0>
			//set portD outputs to the I/O boards LED matrix to be 0
			PORTD = PORTD & 0b10001111;
    1780:	8b b1       	in	r24, 0x0b	; 11
    1782:	8f 78       	andi	r24, 0x8F	; 143
    1784:	8b b9       	out	0x0b, r24	; 11
    1786:	13 c0       	rjmp	.+38     	; 0x17ae <play_game+0x216>

		} else if (combo_count == 1) {
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	91 05       	cpc	r25, r1
    178c:	21 f4       	brne	.+8      	; 0x1796 <play_game+0x1fe>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<4); //essentially just PORTD | 0b00010000
    178e:	8b b1       	in	r24, 0x0b	; 11
    1790:	80 61       	ori	r24, 0x10	; 16
    1792:	8b b9       	out	0x0b, r24	; 11
    1794:	0c c0       	rjmp	.+24     	; 0x17ae <play_game+0x216>
			
		} else if (combo_count == 2) {
    1796:	82 30       	cpi	r24, 0x02	; 2
    1798:	91 05       	cpc	r25, r1
    179a:	21 f4       	brne	.+8      	; 0x17a4 <play_game+0x20c>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<5);
    179c:	8b b1       	in	r24, 0x0b	; 11
    179e:	80 62       	ori	r24, 0x20	; 32
    17a0:	8b b9       	out	0x0b, r24	; 11
    17a2:	05 c0       	rjmp	.+10     	; 0x17ae <play_game+0x216>
			
		} else if (combo_count >= 3) {
    17a4:	03 97       	sbiw	r24, 0x03	; 3
    17a6:	1c f0       	brlt	.+6      	; 0x17ae <play_game+0x216>
			//set appropriate led connection to be high
			PORTD = PORTD | (1<<6);
    17a8:	8b b1       	in	r24, 0x0b	; 11
    17aa:	80 64       	ori	r24, 0x40	; 64
    17ac:	8b b9       	out	0x0b, r24	; 11
				
			}
		}
		*/
		
		if (!man_mode & !paused) {
    17ae:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <man_mode>
    17b2:	30 91 da 02 	lds	r19, 0x02DA	; 0x8002da <man_mode+0x1>
    17b6:	91 e0       	ldi	r25, 0x01	; 1
    17b8:	40 91 d7 02 	lds	r20, 0x02D7	; 0x8002d7 <paused>
    17bc:	50 91 d8 02 	lds	r21, 0x02D8	; 0x8002d8 <paused+0x1>
    17c0:	45 2b       	or	r20, r21
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <play_game+0x22e>
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	21 15       	cp	r18, r1
    17ca:	31 05       	cpc	r19, r1
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <play_game+0x238>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	89 23       	and	r24, r25
    17d2:	01 f1       	breq	.+64     	; 0x1814 <play_game+0x27c>
			current_time = get_current_time();
    17d4:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <get_current_time>
    17d8:	4b 01       	movw	r8, r22
    17da:	5c 01       	movw	r10, r24
			
			if (current_time >= last_advance_time + game_speed/5)
    17dc:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <game_speed>
    17e0:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <game_speed+0x1>
    17e4:	ad ec       	ldi	r26, 0xCD	; 205
    17e6:	bc ec       	ldi	r27, 0xCC	; 204
    17e8:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__umulhisi3>
    17ec:	96 95       	lsr	r25
    17ee:	87 95       	ror	r24
    17f0:	96 95       	lsr	r25
    17f2:	87 95       	ror	r24
    17f4:	a7 01       	movw	r20, r14
    17f6:	96 01       	movw	r18, r12
    17f8:	28 0f       	add	r18, r24
    17fa:	39 1f       	adc	r19, r25
    17fc:	41 1d       	adc	r20, r1
    17fe:	51 1d       	adc	r21, r1
    1800:	82 16       	cp	r8, r18
    1802:	93 06       	cpc	r9, r19
    1804:	a4 06       	cpc	r10, r20
    1806:	b5 06       	cpc	r11, r21
    1808:	68 f0       	brcs	.+26     	; 0x1824 <play_game+0x28c>
			{
				// 200ms (0.2 second) has passed since the last time we advance the
				// notes here, so update the advance the notes
				advance_note();
    180a:	0e 94 ad 04 	call	0x95a	; 0x95a <advance_note>
				
				// Update the most recent time the notes were advanced
				last_advance_time = current_time;
    180e:	75 01       	movw	r14, r10
    1810:	64 01       	movw	r12, r8
    1812:	08 c0       	rjmp	.+16     	; 0x1824 <play_game+0x28c>
			}
			
		} else if (man_mode) {
    1814:	23 2b       	or	r18, r19
    1816:	31 f0       	breq	.+12     	; 0x1824 <play_game+0x28c>
			if (keyboard_input == 'n' || keyboard_input == 'N') {
    1818:	ce 36       	cpi	r28, 0x6E	; 110
    181a:	11 f0       	breq	.+4      	; 0x1820 <play_game+0x288>
    181c:	ce 34       	cpi	r28, 0x4E	; 78
    181e:	11 f4       	brne	.+4      	; 0x1824 <play_game+0x28c>
				advance_note();
    1820:	0e 94 ad 04 	call	0x95a	; 0x95a <advance_note>
	} else if (game_speed == 250) {
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
	}
	
	// We play the game until it's over
	while (!is_game_over())
    1824:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <is_game_over>
    1828:	88 23       	and	r24, r24
    182a:	09 f4       	brne	.+2      	; 0x182e <play_game+0x296>
    182c:	10 cf       	rjmp	.-480    	; 0x164e <play_game+0xb6>
			if (keyboard_input == 'n' || keyboard_input == 'N') {
				advance_note();
			}
		}
	}
}
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	ff 90       	pop	r15
    1834:	ef 90       	pop	r14
    1836:	df 90       	pop	r13
    1838:	cf 90       	pop	r12
    183a:	bf 90       	pop	r11
    183c:	af 90       	pop	r10
    183e:	9f 90       	pop	r9
    1840:	8f 90       	pop	r8
    1842:	08 95       	ret

00001844 <handle_game_over>:

void handle_game_over()
{
	clear_terminal();
    1844:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <clear_terminal>
	move_terminal_cursor(10,13);
    1848:	6d e0       	ldi	r22, 0x0D	; 13
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	8a e0       	ldi	r24, 0x0A	; 10
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    1854:	8a ea       	ldi	r24, 0xAA	; 170
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	9f 93       	push	r25
    185a:	8f 93       	push	r24
    185c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
	move_terminal_cursor(10,14);
    1860:	6e e0       	ldi	r22, 0x0E	; 14
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	8a e0       	ldi	r24, 0x0A	; 10
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	printf("Final Score: %d\n", points);
    186c:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <points+0x1>
    1870:	8f 93       	push	r24
    1872:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <points>
    1876:	8f 93       	push	r24
    1878:	8f eb       	ldi	r24, 0xBF	; 191
    187a:	92 e0       	ldi	r25, 0x02	; 2
    187c:	9f 93       	push	r25
    187e:	8f 93       	push	r24
    1880:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
	//Display current track
	move_terminal_cursor(10, 15);
    1884:	6f e0       	ldi	r22, 0x0F	; 15
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	8a e0       	ldi	r24, 0x0A	; 10
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	printf("Track: Through Fire & Flames");																//do %s and add a new track title at the end.
    1890:	85 e1       	ldi	r24, 0x15	; 21
    1892:	92 e0       	ldi	r25, 0x02	; 2
    1894:	9f 93       	push	r25
    1896:	8f 93       	push	r24
    1898:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
	move_terminal_cursor(10, 16);
    189c:	60 e1       	ldi	r22, 0x10	; 16
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	8a e0       	ldi	r24, 0x0A	; 10
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	clear_to_end_of_line();
    18a8:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <clear_to_end_of_line>
	//display game sped
	if (game_speed == 1000) {
    18ac:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <game_speed>
    18b0:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <game_speed+0x1>
    18b4:	2d b7       	in	r18, 0x3d	; 61
    18b6:	3e b7       	in	r19, 0x3e	; 62
    18b8:	28 5f       	subi	r18, 0xF8	; 248
    18ba:	3f 4f       	sbci	r19, 0xFF	; 255
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	3e bf       	out	0x3e, r19	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	2d bf       	out	0x3d, r18	; 61
    18c6:	88 3e       	cpi	r24, 0xE8	; 232
    18c8:	33 e0       	ldi	r19, 0x03	; 3
    18ca:	93 07       	cpc	r25, r19
    18cc:	69 f4       	brne	.+26     	; 0x18e8 <handle_game_over+0xa4>
		printf("Current Game Speed: 1 (Normal: %d ms)", game_speed);
    18ce:	9f 93       	push	r25
    18d0:	8f 93       	push	r24
    18d2:	82 e3       	ldi	r24, 0x32	; 50
    18d4:	92 e0       	ldi	r25, 0x02	; 2
    18d6:	9f 93       	push	r25
    18d8:	8f 93       	push	r24
    18da:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	20 c0       	rjmp	.+64     	; 0x1928 <handle_game_over+0xe4>
		
		} else if (game_speed == 500) {
    18e8:	84 3f       	cpi	r24, 0xF4	; 244
    18ea:	21 e0       	ldi	r18, 0x01	; 1
    18ec:	92 07       	cpc	r25, r18
    18ee:	69 f4       	brne	.+26     	; 0x190a <handle_game_over+0xc6>
		printf("Current Game Speed: 2 (Fast: %d ms)", game_speed);
    18f0:	9f 93       	push	r25
    18f2:	8f 93       	push	r24
    18f4:	88 e5       	ldi	r24, 0x58	; 88
    18f6:	92 e0       	ldi	r25, 0x02	; 2
    18f8:	9f 93       	push	r25
    18fa:	8f 93       	push	r24
    18fc:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f c0       	rjmp	.+30     	; 0x1928 <handle_game_over+0xe4>
		
		} else if (game_speed == 250) {
    190a:	8a 3f       	cpi	r24, 0xFA	; 250
    190c:	91 05       	cpc	r25, r1
    190e:	61 f4       	brne	.+24     	; 0x1928 <handle_game_over+0xe4>
		printf("Current Game Speed: 3 (Extreme: %d ms)", game_speed);
    1910:	9f 93       	push	r25
    1912:	8f 93       	push	r24
    1914:	8c e7       	ldi	r24, 0x7C	; 124
    1916:	92 e0       	ldi	r25, 0x02	; 2
    1918:	9f 93       	push	r25
    191a:	8f 93       	push	r24
    191c:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
	}
	
	move_terminal_cursor(10, 17);
    1928:	61 e1       	ldi	r22, 0x11	; 17
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	8a e0       	ldi	r24, 0x0A	; 10
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
    1934:	8c e7       	ldi	r24, 0x7C	; 124
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	9f 93       	push	r25
    193a:	8f 93       	push	r24
    193c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	10 c0       	rjmp	.+32     	; 0x1966 <handle_game_over+0x122>
	{
		char keyboard_input = -1;
				
		if (serial_input_available()) {
    1946:	0e 94 76 0d 	call	0x1aec	; 0x1aec <serial_input_available>
    194a:	88 23       	and	r24, r24
    194c:	39 f0       	breq	.+14     	; 0x195c <handle_game_over+0x118>
			keyboard_input = fgetc(stdin);
    194e:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <__iob>
    1952:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <__iob+0x1>
    1956:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fgetc>
    195a:	01 c0       	rjmp	.+2      	; 0x195e <handle_game_over+0x11a>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
	{
		char keyboard_input = -1;
    195c:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			keyboard_input = fgetc(stdin);
		}
		
		//check if the user presses s
		if (keyboard_input == 's' || keyboard_input == 'S') {
    195e:	83 37       	cpi	r24, 0x73	; 115
    1960:	31 f0       	breq	.+12     	; 0x196e <handle_game_over+0x12a>
    1962:	83 35       	cpi	r24, 0x53	; 83
    1964:	21 f0       	breq	.+8      	; 0x196e <handle_game_over+0x12a>
	move_terminal_cursor(10, 17);
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    1966:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <button_pushed>
    196a:	8f 3f       	cpi	r24, 0xFF	; 255
    196c:	61 f3       	breq	.-40     	; 0x1946 <handle_game_over+0x102>
		if (keyboard_input == 's' || keyboard_input == 'S') {
			break;
		}
	}	
	
	start_screen();
    196e:	0e 94 df 06 	call	0xdbe	; 0xdbe <start_screen>
    1972:	08 95       	ret

00001974 <main>:
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1974:	0e 94 c8 06 	call	0xd90	; 0xd90 <initialise_hardware>
	
	points = 0;
    1978:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <points+0x1>
    197c:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <points>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
    1980:	0e 94 df 06 	call	0xdbe	; 0xdbe <start_screen>
	
	// Loop forever and continuously play the game.
	while(1)
	{
		new_game();
    1984:	0e 94 bd 0a 	call	0x157a	; 0x157a <new_game>
		play_game();
    1988:	0e 94 cc 0a 	call	0x1598	; 0x1598 <play_game>
		handle_game_over();
    198c:	0e 94 22 0c 	call	0x1844	; 0x1844 <handle_game_over>
    1990:	f9 cf       	rjmp	.-14     	; 0x1984 <main+0x10>

00001992 <uart_put_char>:
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream)
{
    1992:	cf 93       	push	r28
    1994:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n')
    1996:	8a 30       	cpi	r24, 0x0A	; 10
    1998:	19 f4       	brne	.+6      	; 0x19a0 <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
    199a:	8d e0       	ldi	r24, 0x0D	; 13
    199c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    19a0:	9f b7       	in	r25, 0x3f	; 63
    19a2:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
    19a6:	99 23       	and	r25, r25
    19a8:	29 f1       	breq	.+74     	; 0x19f4 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    19aa:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bytes_in_out_buffer>
    19ae:	8f 3f       	cpi	r24, 0xFF	; 255
    19b0:	d1 f3       	breq	.-12     	; 0x19a6 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    19b2:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    19b4:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <out_insert_pos>
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	8e 0f       	add	r24, r30
    19bc:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <out_insert_pos>
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	e4 51       	subi	r30, 0x14	; 20
    19c4:	fd 4f       	sbci	r31, 0xFD	; 253
    19c6:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    19c8:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bytes_in_out_buffer>
    19cc:	8f 5f       	subi	r24, 0xFF	; 255
    19ce:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
    19d2:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <out_insert_pos>
    19d6:	8f 3f       	cpi	r24, 0xFF	; 255
    19d8:	11 f4       	brne	.+4      	; 0x19de <uart_put_char+0x4c>
	{
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    19da:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    19de:	e1 ec       	ldi	r30, 0xC1	; 193
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	80 62       	ori	r24, 0x20	; 32
    19e6:	80 83       	st	Z, r24
	if (interrupts_enabled)
    19e8:	99 23       	and	r25, r25
    19ea:	39 f0       	breq	.+14     	; 0x19fa <uart_put_char+0x68>
	{
		sei();
    19ec:	78 94       	sei
	}
	return 0;
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	05 c0       	rjmp	.+10     	; 0x19fe <uart_put_char+0x6c>
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
}
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <uart_get_char>:

int uart_get_char(FILE* stream)
{
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0)
    1a02:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <bytes_in_input_buffer>
    1a06:	88 23       	and	r24, r24
    1a08:	e1 f3       	breq	.-8      	; 0x1a02 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1a0a:	2f b7       	in	r18, 0x3f	; 63
    1a0c:	20 78       	andi	r18, 0x80	; 128
	cli();
    1a0e:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
    1a10:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <input_insert_pos>
    1a14:	30 91 fd 03 	lds	r19, 0x03FD	; 0x8003fd <bytes_in_input_buffer>
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	83 1b       	sub	r24, r19
    1a1c:	91 09       	sbc	r25, r1
    1a1e:	5a f4       	brpl	.+22     	; 0x1a36 <uart_get_char+0x34>
	{
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1a20:	e0 91 eb 03 	lds	r30, 0x03EB	; 0x8003eb <input_insert_pos>
    1a24:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <bytes_in_input_buffer>
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	e8 1b       	sub	r30, r24
    1a2c:	f1 09       	sbc	r31, r1
    1a2e:	e4 50       	subi	r30, 0x04	; 4
    1a30:	fc 4f       	sbci	r31, 0xFC	; 252
    1a32:	80 81       	ld	r24, Z
    1a34:	0a c0       	rjmp	.+20     	; 0x1a4a <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1a36:	e0 91 eb 03 	lds	r30, 0x03EB	; 0x8003eb <input_insert_pos>
    1a3a:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <bytes_in_input_buffer>
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	e8 1b       	sub	r30, r24
    1a42:	f1 09       	sbc	r31, r1
    1a44:	e4 51       	subi	r30, 0x14	; 20
    1a46:	fc 4f       	sbci	r31, 0xFC	; 252
    1a48:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1a4a:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <bytes_in_input_buffer>
    1a4e:	91 50       	subi	r25, 0x01	; 1
    1a50:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <bytes_in_input_buffer>
	if (interrupts_enabled)
    1a54:	22 23       	and	r18, r18
    1a56:	09 f0       	breq	.+2      	; 0x1a5a <uart_get_char+0x58>
	{
		sei();
    1a58:	78 94       	sei
	}	
	return c;
}
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	08 95       	ret

00001a5e <init_serial_stdio>:
{
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1a5e:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <out_insert_pos>
	bytes_in_out_buffer = 0;
    1a62:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <bytes_in_out_buffer>
	input_insert_pos = 0;
    1a66:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <input_insert_pos>
	bytes_in_input_buffer = 0;
    1a6a:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <bytes_in_input_buffer>
	input_overrun = 0;
    1a6e:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1a72:	40 93 db 02 	sts	0x02DB, r20	; 0x8002db <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	aa 1f       	adc	r26, r26
    1a80:	bb 1f       	adc	r27, r27
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	aa 1f       	adc	r26, r26
    1a88:	bb 1f       	adc	r27, r27
    1a8a:	9c 01       	movw	r18, r24
    1a8c:	ad 01       	movw	r20, r26
    1a8e:	22 0f       	add	r18, r18
    1a90:	33 1f       	adc	r19, r19
    1a92:	44 1f       	adc	r20, r20
    1a94:	55 1f       	adc	r21, r21
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	72 e1       	ldi	r23, 0x12	; 18
    1a9a:	8a e7       	ldi	r24, 0x7A	; 122
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__divmodsi4>
    1aa2:	ba 01       	movw	r22, r20
    1aa4:	a9 01       	movw	r20, r18
    1aa6:	4f 5f       	subi	r20, 0xFF	; 255
    1aa8:	5f 4f       	sbci	r21, 0xFF	; 255
    1aaa:	6f 4f       	sbci	r22, 0xFF	; 255
    1aac:	7f 4f       	sbci	r23, 0xFF	; 255
    1aae:	db 01       	movw	r26, r22
    1ab0:	ca 01       	movw	r24, r20
    1ab2:	1a f4       	brpl	.+6      	; 0x1aba <init_serial_stdio+0x5c>
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	a1 1d       	adc	r26, r1
    1ab8:	b1 1d       	adc	r27, r1
    1aba:	b5 95       	asr	r27
    1abc:	a7 95       	ror	r26
    1abe:	97 95       	ror	r25
    1ac0:	87 95       	ror	r24
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1ac4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1ac8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    1acc:	e1 ec       	ldi	r30, 0xC1	; 193
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	88 e1       	ldi	r24, 0x18	; 24
    1ad2:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
    1ad4:	80 81       	ld	r24, Z
    1ad6:	80 68       	ori	r24, 0x80	; 128
    1ad8:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1ada:	ee ef       	ldi	r30, 0xFE	; 254
    1adc:	f3 e0       	ldi	r31, 0x03	; 3
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	91 e0       	ldi	r25, 0x01	; 1
    1ae2:	93 83       	std	Z+3, r25	; 0x03
    1ae4:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	80 83       	st	Z, r24
    1aea:	08 95       	ret

00001aec <serial_input_available>:
}

int8_t serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
    1aec:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <bytes_in_input_buffer>
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	91 11       	cpse	r25, r1
    1af4:	01 c0       	rjmp	.+2      	; 0x1af8 <serial_input_available+0xc>
    1af6:	80 e0       	ldi	r24, 0x00	; 0
}
    1af8:	08 95       	ret

00001afa <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1afa:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <input_insert_pos>
	bytes_in_input_buffer = 0;
    1afe:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <bytes_in_input_buffer>
    1b02:	08 95       	ret

00001b04 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    1b04:	1f 92       	push	r1
    1b06:	0f 92       	push	r0
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	0f 92       	push	r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	2f 93       	push	r18
    1b10:	8f 93       	push	r24
    1b12:	9f 93       	push	r25
    1b14:	ef 93       	push	r30
    1b16:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0)
    1b18:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bytes_in_out_buffer>
    1b1c:	88 23       	and	r24, r24
    1b1e:	29 f1       	breq	.+74     	; 0x1b6a <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
    1b20:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <out_insert_pos>
    1b24:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <bytes_in_out_buffer>
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	82 1b       	sub	r24, r18
    1b2c:	91 09       	sbc	r25, r1
    1b2e:	5a f4       	brpl	.+22     	; 0x1b46 <__vector_21+0x42>
		{
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1b30:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <out_insert_pos>
    1b34:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bytes_in_out_buffer>
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	e8 1b       	sub	r30, r24
    1b3c:	f1 09       	sbc	r31, r1
    1b3e:	e5 51       	subi	r30, 0x15	; 21
    1b40:	fc 4f       	sbci	r31, 0xFC	; 252
    1b42:	90 81       	ld	r25, Z
    1b44:	0a c0       	rjmp	.+20     	; 0x1b5a <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1b46:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <out_insert_pos>
    1b4a:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bytes_in_out_buffer>
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	e8 1b       	sub	r30, r24
    1b52:	f1 09       	sbc	r31, r1
    1b54:	e4 51       	subi	r30, 0x14	; 20
    1b56:	fd 4f       	sbci	r31, 0xFD	; 253
    1b58:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1b5a:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bytes_in_out_buffer>
    1b5e:	81 50       	subi	r24, 0x01	; 1
    1b60:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1b64:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1b68:	05 c0       	rjmp	.+10     	; 0x1b74 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
    1b6a:	e1 ec       	ldi	r30, 0xC1	; 193
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	8f 7d       	andi	r24, 0xDF	; 223
    1b72:	80 83       	st	Z, r24
	}
}
    1b74:	ff 91       	pop	r31
    1b76:	ef 91       	pop	r30
    1b78:	9f 91       	pop	r25
    1b7a:	8f 91       	pop	r24
    1b7c:	2f 91       	pop	r18
    1b7e:	0f 90       	pop	r0
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	0f 90       	pop	r0
    1b84:	1f 90       	pop	r1
    1b86:	18 95       	reti

00001b88 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1b88:	1f 92       	push	r1
    1b8a:	0f 92       	push	r0
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	0f 92       	push	r0
    1b90:	11 24       	eor	r1, r1
    1b92:	2f 93       	push	r18
    1b94:	3f 93       	push	r19
    1b96:	4f 93       	push	r20
    1b98:	5f 93       	push	r21
    1b9a:	6f 93       	push	r22
    1b9c:	7f 93       	push	r23
    1b9e:	8f 93       	push	r24
    1ba0:	9f 93       	push	r25
    1ba2:	af 93       	push	r26
    1ba4:	bf 93       	push	r27
    1ba6:	cf 93       	push	r28
    1ba8:	ef 93       	push	r30
    1baa:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1bac:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
    1bb0:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <do_echo>
    1bb4:	88 23       	and	r24, r24
    1bb6:	49 f0       	breq	.+18     	; 0x1bca <__vector_20+0x42>
    1bb8:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bytes_in_out_buffer>
    1bbc:	8f 3f       	cpi	r24, 0xFF	; 255
    1bbe:	29 f0       	breq	.+10     	; 0x1bca <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	8c 2f       	mov	r24, r28
    1bc6:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
    1bca:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <bytes_in_input_buffer>
    1bce:	80 31       	cpi	r24, 0x10	; 16
    1bd0:	20 f0       	brcs	.+8      	; 0x1bda <__vector_20+0x52>
	{
		input_overrun = 1;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <input_overrun>
    1bd8:	18 c0       	rjmp	.+48     	; 0x1c0a <__vector_20+0x82>
	} else
	{
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r')
    1bda:	cd 30       	cpi	r28, 0x0D	; 13
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <__vector_20+0x58>
		{
			c = '\n';
    1bde:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1be0:	e0 91 eb 03 	lds	r30, 0x03EB	; 0x8003eb <input_insert_pos>
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	8e 0f       	add	r24, r30
    1be8:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <input_insert_pos>
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	e4 51       	subi	r30, 0x14	; 20
    1bf0:	fc 4f       	sbci	r31, 0xFC	; 252
    1bf2:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1bf4:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <bytes_in_input_buffer>
    1bf8:	8f 5f       	subi	r24, 0xFF	; 255
    1bfa:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
    1bfe:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <input_insert_pos>
    1c02:	80 31       	cpi	r24, 0x10	; 16
    1c04:	11 f4       	brne	.+4      	; 0x1c0a <__vector_20+0x82>
		{
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1c06:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <input_insert_pos>
		}
	}
}
    1c0a:	ff 91       	pop	r31
    1c0c:	ef 91       	pop	r30
    1c0e:	cf 91       	pop	r28
    1c10:	bf 91       	pop	r27
    1c12:	af 91       	pop	r26
    1c14:	9f 91       	pop	r25
    1c16:	8f 91       	pop	r24
    1c18:	7f 91       	pop	r23
    1c1a:	6f 91       	pop	r22
    1c1c:	5f 91       	pop	r21
    1c1e:	4f 91       	pop	r20
    1c20:	3f 91       	pop	r19
    1c22:	2f 91       	pop	r18
    1c24:	0f 90       	pop	r0
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	0f 90       	pop	r0
    1c2a:	1f 90       	pop	r1
    1c2c:	18 95       	reti

00001c2e <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider)
{
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    1c2e:	94 b1       	in	r25, 0x04	; 4
    1c30:	90 6b       	ori	r25, 0xB0	; 176
    1c32:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
    1c34:	95 b1       	in	r25, 0x05	; 5
    1c36:	90 61       	ori	r25, 0x10	; 16
    1c38:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    1c3a:	90 e5       	ldi	r25, 0x50	; 80
    1c3c:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider)
    1c3e:	88 30       	cpi	r24, 0x08	; 8
    1c40:	21 f0       	breq	.+8      	; 0x1c4a <spi_setup_master+0x1c>
    1c42:	80 32       	cpi	r24, 0x20	; 32
    1c44:	11 f0       	breq	.+4      	; 0x1c4a <spi_setup_master+0x1c>
    1c46:	82 30       	cpi	r24, 0x02	; 2
    1c48:	19 f4       	brne	.+6      	; 0x1c50 <spi_setup_master+0x22>
	{
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
    1c4a:	91 e0       	ldi	r25, 0x01	; 1
    1c4c:	9d bd       	out	0x2d, r25	; 45
			break;
    1c4e:	01 c0       	rjmp	.+2      	; 0x1c52 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    1c50:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
    1c52:	80 32       	cpi	r24, 0x20	; 32
    1c54:	69 f0       	breq	.+26     	; 0x1c70 <spi_setup_master+0x42>
    1c56:	28 f4       	brcc	.+10     	; 0x1c62 <spi_setup_master+0x34>
    1c58:	88 30       	cpi	r24, 0x08	; 8
    1c5a:	71 f0       	breq	.+28     	; 0x1c78 <spi_setup_master+0x4a>
    1c5c:	80 31       	cpi	r24, 0x10	; 16
    1c5e:	61 f0       	breq	.+24     	; 0x1c78 <spi_setup_master+0x4a>
    1c60:	0e c0       	rjmp	.+28     	; 0x1c7e <spi_setup_master+0x50>
    1c62:	80 34       	cpi	r24, 0x40	; 64
    1c64:	29 f0       	breq	.+10     	; 0x1c70 <spi_setup_master+0x42>
    1c66:	80 38       	cpi	r24, 0x80	; 128
    1c68:	51 f4       	brne	.+20     	; 0x1c7e <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
    1c6a:	8c b5       	in	r24, 0x2c	; 44
    1c6c:	81 60       	ori	r24, 0x01	; 1
    1c6e:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
    1c70:	8c b5       	in	r24, 0x2c	; 44
    1c72:	82 60       	ori	r24, 0x02	; 2
    1c74:	8c bd       	out	0x2c, r24	; 44
			break;
    1c76:	03 c0       	rjmp	.+6      	; 0x1c7e <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
    1c78:	8c b5       	in	r24, 0x2c	; 44
    1c7a:	81 60       	ori	r24, 0x01	; 1
    1c7c:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
    1c7e:	85 b1       	in	r24, 0x05	; 5
    1c80:	8f 7e       	andi	r24, 0xEF	; 239
    1c82:	85 b9       	out	0x05, r24	; 5
    1c84:	08 95       	ret

00001c86 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1c86:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    1c88:	0d b4       	in	r0, 0x2d	; 45
    1c8a:	07 fe       	sbrs	r0, 7
    1c8c:	fd cf       	rjmp	.-6      	; 0x1c88 <spi_send_byte+0x2>
	{
		; // wait
	}
	return SPDR0;
    1c8e:	8e b5       	in	r24, 0x2e	; 46
}
    1c90:	08 95       	ret

00001c92 <move_terminal_cursor>:
}

void reverse_video(void)
{
	printf_P(PSTR("\x1b[7m"));
}
    1c92:	9f 93       	push	r25
    1c94:	8f 93       	push	r24
    1c96:	7f 93       	push	r23
    1c98:	6f 93       	push	r22
    1c9a:	8d e7       	ldi	r24, 0x7D	; 125
    1c9c:	93 e0       	ldi	r25, 0x03	; 3
    1c9e:	9f 93       	push	r25
    1ca0:	8f 93       	push	r24
    1ca2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	08 95       	ret

00001cb4 <clear_terminal>:

void clear_terminal(void)
{
	printf_P(PSTR("\x1b[2J"));
    1cb4:	88 e7       	ldi	r24, 0x78	; 120
    1cb6:	93 e0       	ldi	r25, 0x03	; 3
    1cb8:	9f 93       	push	r25
    1cba:	8f 93       	push	r24
    1cbc:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	08 95       	ret

00001cc6 <clear_to_end_of_line>:

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
    1cc6:	84 e7       	ldi	r24, 0x74	; 116
    1cc8:	93 e0       	ldi	r25, 0x03	; 3
    1cca:	9f 93       	push	r25
    1ccc:	8f 93       	push	r24
    1cce:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
}
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	08 95       	ret

00001cd8 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    1cd8:	1f 92       	push	r1
    1cda:	8f 93       	push	r24
    1cdc:	8e e6       	ldi	r24, 0x6E	; 110
    1cde:	93 e0       	ldi	r25, 0x03	; 3
    1ce0:	9f 93       	push	r25
    1ce2:	8f 93       	push	r24
    1ce4:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
}
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	08 95       	ret

00001cf2 <hide_cursor>:

void hide_cursor()
{
	printf_P(PSTR("\x1b[?25l"));
    1cf2:	87 e6       	ldi	r24, 0x67	; 103
    1cf4:	93 e0       	ldi	r25, 0x03	; 3
    1cf6:	9f 93       	push	r25
    1cf8:	8f 93       	push	r24
    1cfa:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
}
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	08 95       	ret

00001d04 <show_cursor>:

void show_cursor()
{
	printf_P(PSTR("\x1b[?25h"));
    1d04:	80 e6       	ldi	r24, 0x60	; 96
    1d06:	93 e0       	ldi	r25, 0x03	; 3
    1d08:	9f 93       	push	r25
    1d0a:	8f 93       	push	r24
    1d0c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
}
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	08 95       	ret

00001d16 <init_timer0>:
void init_timer0(void)
{
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
    1d16:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <clock_ticks_ms>
    1d1a:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <clock_ticks_ms+0x1>
    1d1e:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <clock_ticks_ms+0x2>
    1d22:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    1d26:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    1d28:	8c e7       	ldi	r24, 0x7C	; 124
    1d2a:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
    1d2c:	92 e0       	ldi	r25, 0x02	; 2
    1d2e:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    1d30:	83 e0       	ldi	r24, 0x03	; 3
    1d32:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
    1d34:	ee e6       	ldi	r30, 0x6E	; 110
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	82 60       	ori	r24, 0x02	; 2
    1d3c:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
    1d3e:	95 bb       	out	0x15, r25	; 21
    1d40:	08 95       	ret

00001d42 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    1d42:	8f b7       	in	r24, 0x3f	; 63
    1d44:	28 2f       	mov	r18, r24
    1d46:	20 78       	andi	r18, 0x80	; 128
	cli();
    1d48:	f8 94       	cli
	return_value = clock_ticks_ms;
    1d4a:	60 91 dc 02 	lds	r22, 0x02DC	; 0x8002dc <clock_ticks_ms>
    1d4e:	70 91 dd 02 	lds	r23, 0x02DD	; 0x8002dd <clock_ticks_ms+0x1>
    1d52:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <clock_ticks_ms+0x2>
    1d56:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    1d5a:	22 23       	and	r18, r18
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <get_current_time+0x1e>
	{
		sei();
    1d5e:	78 94       	sei
	}
	return return_value;
}
    1d60:	08 95       	ret

00001d62 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
    1d62:	1f 92       	push	r1
    1d64:	0f 92       	push	r0
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	0f 92       	push	r0
    1d6a:	11 24       	eor	r1, r1
    1d6c:	8f 93       	push	r24
    1d6e:	9f 93       	push	r25
    1d70:	af 93       	push	r26
    1d72:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
    1d74:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <clock_ticks_ms>
    1d78:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <clock_ticks_ms+0x1>
    1d7c:	a0 91 de 02 	lds	r26, 0x02DE	; 0x8002de <clock_ticks_ms+0x2>
    1d80:	b0 91 df 02 	lds	r27, 0x02DF	; 0x8002df <clock_ticks_ms+0x3>
    1d84:	01 96       	adiw	r24, 0x01	; 1
    1d86:	a1 1d       	adc	r26, r1
    1d88:	b1 1d       	adc	r27, r1
    1d8a:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <clock_ticks_ms>
    1d8e:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <clock_ticks_ms+0x1>
    1d92:	a0 93 de 02 	sts	0x02DE, r26	; 0x8002de <clock_ticks_ms+0x2>
    1d96:	b0 93 df 02 	sts	0x02DF, r27	; 0x8002df <clock_ticks_ms+0x3>
}
    1d9a:	bf 91       	pop	r27
    1d9c:	af 91       	pop	r26
    1d9e:	9f 91       	pop	r25
    1da0:	8f 91       	pop	r24
    1da2:	0f 90       	pop	r0
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	0f 90       	pop	r0
    1da8:	1f 90       	pop	r1
    1daa:	18 95       	reti

00001dac <init_timer1>:

/* Set up timer 1
 */
void init_timer1(void)
{
	TCNT1 = 0;
    1dac:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1db0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1db4:	08 95       	ret

00001db6 <init_timer2>:

/* Set up timer 2
 */
void init_timer2(void)
{
	TCNT2 = 0;
    1db6:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    1dba:	08 95       	ret

00001dbc <__divmodsi4>:
    1dbc:	05 2e       	mov	r0, r21
    1dbe:	97 fb       	bst	r25, 7
    1dc0:	1e f4       	brtc	.+6      	; 0x1dc8 <__divmodsi4+0xc>
    1dc2:	00 94       	com	r0
    1dc4:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__negsi2>
    1dc8:	57 fd       	sbrc	r21, 7
    1dca:	07 d0       	rcall	.+14     	; 0x1dda <__divmodsi4_neg2>
    1dcc:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__udivmodsi4>
    1dd0:	07 fc       	sbrc	r0, 7
    1dd2:	03 d0       	rcall	.+6      	; 0x1dda <__divmodsi4_neg2>
    1dd4:	4e f4       	brtc	.+18     	; 0x1de8 <__divmodsi4_exit>
    1dd6:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <__negsi2>

00001dda <__divmodsi4_neg2>:
    1dda:	50 95       	com	r21
    1ddc:	40 95       	com	r20
    1dde:	30 95       	com	r19
    1de0:	21 95       	neg	r18
    1de2:	3f 4f       	sbci	r19, 0xFF	; 255
    1de4:	4f 4f       	sbci	r20, 0xFF	; 255
    1de6:	5f 4f       	sbci	r21, 0xFF	; 255

00001de8 <__divmodsi4_exit>:
    1de8:	08 95       	ret

00001dea <__negsi2>:
    1dea:	90 95       	com	r25
    1dec:	80 95       	com	r24
    1dee:	70 95       	com	r23
    1df0:	61 95       	neg	r22
    1df2:	7f 4f       	sbci	r23, 0xFF	; 255
    1df4:	8f 4f       	sbci	r24, 0xFF	; 255
    1df6:	9f 4f       	sbci	r25, 0xFF	; 255
    1df8:	08 95       	ret

00001dfa <__umulhisi3>:
    1dfa:	a2 9f       	mul	r26, r18
    1dfc:	b0 01       	movw	r22, r0
    1dfe:	b3 9f       	mul	r27, r19
    1e00:	c0 01       	movw	r24, r0
    1e02:	a3 9f       	mul	r26, r19
    1e04:	70 0d       	add	r23, r0
    1e06:	81 1d       	adc	r24, r1
    1e08:	11 24       	eor	r1, r1
    1e0a:	91 1d       	adc	r25, r1
    1e0c:	b2 9f       	mul	r27, r18
    1e0e:	70 0d       	add	r23, r0
    1e10:	81 1d       	adc	r24, r1
    1e12:	11 24       	eor	r1, r1
    1e14:	91 1d       	adc	r25, r1
    1e16:	08 95       	ret

00001e18 <__udivmodsi4>:
    1e18:	a1 e2       	ldi	r26, 0x21	; 33
    1e1a:	1a 2e       	mov	r1, r26
    1e1c:	aa 1b       	sub	r26, r26
    1e1e:	bb 1b       	sub	r27, r27
    1e20:	fd 01       	movw	r30, r26
    1e22:	0d c0       	rjmp	.+26     	; 0x1e3e <__udivmodsi4_ep>

00001e24 <__udivmodsi4_loop>:
    1e24:	aa 1f       	adc	r26, r26
    1e26:	bb 1f       	adc	r27, r27
    1e28:	ee 1f       	adc	r30, r30
    1e2a:	ff 1f       	adc	r31, r31
    1e2c:	a2 17       	cp	r26, r18
    1e2e:	b3 07       	cpc	r27, r19
    1e30:	e4 07       	cpc	r30, r20
    1e32:	f5 07       	cpc	r31, r21
    1e34:	20 f0       	brcs	.+8      	; 0x1e3e <__udivmodsi4_ep>
    1e36:	a2 1b       	sub	r26, r18
    1e38:	b3 0b       	sbc	r27, r19
    1e3a:	e4 0b       	sbc	r30, r20
    1e3c:	f5 0b       	sbc	r31, r21

00001e3e <__udivmodsi4_ep>:
    1e3e:	66 1f       	adc	r22, r22
    1e40:	77 1f       	adc	r23, r23
    1e42:	88 1f       	adc	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	1a 94       	dec	r1
    1e48:	69 f7       	brne	.-38     	; 0x1e24 <__udivmodsi4_loop>
    1e4a:	60 95       	com	r22
    1e4c:	70 95       	com	r23
    1e4e:	80 95       	com	r24
    1e50:	90 95       	com	r25
    1e52:	9b 01       	movw	r18, r22
    1e54:	ac 01       	movw	r20, r24
    1e56:	bd 01       	movw	r22, r26
    1e58:	cf 01       	movw	r24, r30
    1e5a:	08 95       	ret

00001e5c <fgetc>:
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	ec 01       	movw	r28, r24
    1e62:	2b 81       	ldd	r18, Y+3	; 0x03
    1e64:	20 ff       	sbrs	r18, 0
    1e66:	33 c0       	rjmp	.+102    	; 0x1ece <fgetc+0x72>
    1e68:	26 ff       	sbrs	r18, 6
    1e6a:	0a c0       	rjmp	.+20     	; 0x1e80 <fgetc+0x24>
    1e6c:	2f 7b       	andi	r18, 0xBF	; 191
    1e6e:	2b 83       	std	Y+3, r18	; 0x03
    1e70:	8e 81       	ldd	r24, Y+6	; 0x06
    1e72:	9f 81       	ldd	r25, Y+7	; 0x07
    1e74:	01 96       	adiw	r24, 0x01	; 1
    1e76:	9f 83       	std	Y+7, r25	; 0x07
    1e78:	8e 83       	std	Y+6, r24	; 0x06
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	29 c0       	rjmp	.+82     	; 0x1ed2 <fgetc+0x76>
    1e80:	22 ff       	sbrs	r18, 2
    1e82:	0f c0       	rjmp	.+30     	; 0x1ea2 <fgetc+0x46>
    1e84:	e8 81       	ld	r30, Y
    1e86:	f9 81       	ldd	r31, Y+1	; 0x01
    1e88:	80 81       	ld	r24, Z
    1e8a:	08 2e       	mov	r0, r24
    1e8c:	00 0c       	add	r0, r0
    1e8e:	99 0b       	sbc	r25, r25
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	19 f4       	brne	.+6      	; 0x1e9a <fgetc+0x3e>
    1e94:	20 62       	ori	r18, 0x20	; 32
    1e96:	2b 83       	std	Y+3, r18	; 0x03
    1e98:	1a c0       	rjmp	.+52     	; 0x1ece <fgetc+0x72>
    1e9a:	31 96       	adiw	r30, 0x01	; 1
    1e9c:	f9 83       	std	Y+1, r31	; 0x01
    1e9e:	e8 83       	st	Y, r30
    1ea0:	0e c0       	rjmp	.+28     	; 0x1ebe <fgetc+0x62>
    1ea2:	ea 85       	ldd	r30, Y+10	; 0x0a
    1ea4:	fb 85       	ldd	r31, Y+11	; 0x0b
    1ea6:	09 95       	icall
    1ea8:	97 ff       	sbrs	r25, 7
    1eaa:	09 c0       	rjmp	.+18     	; 0x1ebe <fgetc+0x62>
    1eac:	2b 81       	ldd	r18, Y+3	; 0x03
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	11 f0       	breq	.+4      	; 0x1eb6 <fgetc+0x5a>
    1eb2:	80 e2       	ldi	r24, 0x20	; 32
    1eb4:	01 c0       	rjmp	.+2      	; 0x1eb8 <fgetc+0x5c>
    1eb6:	80 e1       	ldi	r24, 0x10	; 16
    1eb8:	82 2b       	or	r24, r18
    1eba:	8b 83       	std	Y+3, r24	; 0x03
    1ebc:	08 c0       	rjmp	.+16     	; 0x1ece <fgetc+0x72>
    1ebe:	2e 81       	ldd	r18, Y+6	; 0x06
    1ec0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ec2:	2f 5f       	subi	r18, 0xFF	; 255
    1ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec6:	3f 83       	std	Y+7, r19	; 0x07
    1ec8:	2e 83       	std	Y+6, r18	; 0x06
    1eca:	99 27       	eor	r25, r25
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <fgetc+0x76>
    1ece:	8f ef       	ldi	r24, 0xFF	; 255
    1ed0:	9f ef       	ldi	r25, 0xFF	; 255
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	08 95       	ret

00001ed8 <printf>:
    1ed8:	a0 e0       	ldi	r26, 0x00	; 0
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e2 e7       	ldi	r30, 0x72	; 114
    1ede:	ff e0       	ldi	r31, 0x0F	; 15
    1ee0:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__prologue_saves__+0x20>
    1ee4:	ae 01       	movw	r20, r28
    1ee6:	4b 5f       	subi	r20, 0xFB	; 251
    1ee8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eea:	fa 01       	movw	r30, r20
    1eec:	61 91       	ld	r22, Z+
    1eee:	71 91       	ld	r23, Z+
    1ef0:	af 01       	movw	r20, r30
    1ef2:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <__iob+0x2>
    1ef6:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <__iob+0x3>
    1efa:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <vfprintf>
    1efe:	e2 e0       	ldi	r30, 0x02	; 2
    1f00:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__epilogue_restores__+0x20>

00001f04 <printf_P>:
    1f04:	a0 e0       	ldi	r26, 0x00	; 0
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	e8 e8       	ldi	r30, 0x88	; 136
    1f0a:	ff e0       	ldi	r31, 0x0F	; 15
    1f0c:	0c 94 47 12 	jmp	0x248e	; 0x248e <__prologue_saves__+0x1c>
    1f10:	ae 01       	movw	r20, r28
    1f12:	49 5f       	subi	r20, 0xF9	; 249
    1f14:	5f 4f       	sbci	r21, 0xFF	; 255
    1f16:	da 01       	movw	r26, r20
    1f18:	6d 91       	ld	r22, X+
    1f1a:	7d 91       	ld	r23, X+
    1f1c:	ad 01       	movw	r20, r26
    1f1e:	0e ef       	ldi	r16, 0xFE	; 254
    1f20:	13 e0       	ldi	r17, 0x03	; 3
    1f22:	f8 01       	movw	r30, r16
    1f24:	82 81       	ldd	r24, Z+2	; 0x02
    1f26:	93 81       	ldd	r25, Z+3	; 0x03
    1f28:	dc 01       	movw	r26, r24
    1f2a:	13 96       	adiw	r26, 0x03	; 3
    1f2c:	2c 91       	ld	r18, X
    1f2e:	13 97       	sbiw	r26, 0x03	; 3
    1f30:	28 60       	ori	r18, 0x08	; 8
    1f32:	13 96       	adiw	r26, 0x03	; 3
    1f34:	2c 93       	st	X, r18
    1f36:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <vfprintf>
    1f3a:	d8 01       	movw	r26, r16
    1f3c:	12 96       	adiw	r26, 0x02	; 2
    1f3e:	ed 91       	ld	r30, X+
    1f40:	fc 91       	ld	r31, X
    1f42:	13 97       	sbiw	r26, 0x03	; 3
    1f44:	23 81       	ldd	r18, Z+3	; 0x03
    1f46:	27 7f       	andi	r18, 0xF7	; 247
    1f48:	23 83       	std	Z+3, r18	; 0x03
    1f4a:	e4 e0       	ldi	r30, 0x04	; 4
    1f4c:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__epilogue_restores__+0x1c>

00001f50 <vfprintf>:
    1f50:	ab e0       	ldi	r26, 0x0B	; 11
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	ee ea       	ldi	r30, 0xAE	; 174
    1f56:	ff e0       	ldi	r31, 0x0F	; 15
    1f58:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__prologue_saves__>
    1f5c:	6c 01       	movw	r12, r24
    1f5e:	7b 01       	movw	r14, r22
    1f60:	8a 01       	movw	r16, r20
    1f62:	fc 01       	movw	r30, r24
    1f64:	17 82       	std	Z+7, r1	; 0x07
    1f66:	16 82       	std	Z+6, r1	; 0x06
    1f68:	83 81       	ldd	r24, Z+3	; 0x03
    1f6a:	81 ff       	sbrs	r24, 1
    1f6c:	cc c1       	rjmp	.+920    	; 0x2306 <vfprintf+0x3b6>
    1f6e:	ce 01       	movw	r24, r28
    1f70:	01 96       	adiw	r24, 0x01	; 1
    1f72:	3c 01       	movw	r6, r24
    1f74:	f6 01       	movw	r30, r12
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	f7 01       	movw	r30, r14
    1f7a:	93 fd       	sbrc	r25, 3
    1f7c:	85 91       	lpm	r24, Z+
    1f7e:	93 ff       	sbrs	r25, 3
    1f80:	81 91       	ld	r24, Z+
    1f82:	7f 01       	movw	r14, r30
    1f84:	88 23       	and	r24, r24
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <vfprintf+0x3a>
    1f88:	ba c1       	rjmp	.+884    	; 0x22fe <vfprintf+0x3ae>
    1f8a:	85 32       	cpi	r24, 0x25	; 37
    1f8c:	39 f4       	brne	.+14     	; 0x1f9c <vfprintf+0x4c>
    1f8e:	93 fd       	sbrc	r25, 3
    1f90:	85 91       	lpm	r24, Z+
    1f92:	93 ff       	sbrs	r25, 3
    1f94:	81 91       	ld	r24, Z+
    1f96:	7f 01       	movw	r14, r30
    1f98:	85 32       	cpi	r24, 0x25	; 37
    1f9a:	29 f4       	brne	.+10     	; 0x1fa6 <vfprintf+0x56>
    1f9c:	b6 01       	movw	r22, r12
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	0e 94 9f 11 	call	0x233e	; 0x233e <fputc>
    1fa4:	e7 cf       	rjmp	.-50     	; 0x1f74 <vfprintf+0x24>
    1fa6:	91 2c       	mov	r9, r1
    1fa8:	21 2c       	mov	r2, r1
    1faa:	31 2c       	mov	r3, r1
    1fac:	ff e1       	ldi	r31, 0x1F	; 31
    1fae:	f3 15       	cp	r31, r3
    1fb0:	d8 f0       	brcs	.+54     	; 0x1fe8 <vfprintf+0x98>
    1fb2:	8b 32       	cpi	r24, 0x2B	; 43
    1fb4:	79 f0       	breq	.+30     	; 0x1fd4 <vfprintf+0x84>
    1fb6:	38 f4       	brcc	.+14     	; 0x1fc6 <vfprintf+0x76>
    1fb8:	80 32       	cpi	r24, 0x20	; 32
    1fba:	79 f0       	breq	.+30     	; 0x1fda <vfprintf+0x8a>
    1fbc:	83 32       	cpi	r24, 0x23	; 35
    1fbe:	a1 f4       	brne	.+40     	; 0x1fe8 <vfprintf+0x98>
    1fc0:	23 2d       	mov	r18, r3
    1fc2:	20 61       	ori	r18, 0x10	; 16
    1fc4:	1d c0       	rjmp	.+58     	; 0x2000 <vfprintf+0xb0>
    1fc6:	8d 32       	cpi	r24, 0x2D	; 45
    1fc8:	61 f0       	breq	.+24     	; 0x1fe2 <vfprintf+0x92>
    1fca:	80 33       	cpi	r24, 0x30	; 48
    1fcc:	69 f4       	brne	.+26     	; 0x1fe8 <vfprintf+0x98>
    1fce:	23 2d       	mov	r18, r3
    1fd0:	21 60       	ori	r18, 0x01	; 1
    1fd2:	16 c0       	rjmp	.+44     	; 0x2000 <vfprintf+0xb0>
    1fd4:	83 2d       	mov	r24, r3
    1fd6:	82 60       	ori	r24, 0x02	; 2
    1fd8:	38 2e       	mov	r3, r24
    1fda:	e3 2d       	mov	r30, r3
    1fdc:	e4 60       	ori	r30, 0x04	; 4
    1fde:	3e 2e       	mov	r3, r30
    1fe0:	2a c0       	rjmp	.+84     	; 0x2036 <vfprintf+0xe6>
    1fe2:	f3 2d       	mov	r31, r3
    1fe4:	f8 60       	ori	r31, 0x08	; 8
    1fe6:	1d c0       	rjmp	.+58     	; 0x2022 <vfprintf+0xd2>
    1fe8:	37 fc       	sbrc	r3, 7
    1fea:	2d c0       	rjmp	.+90     	; 0x2046 <vfprintf+0xf6>
    1fec:	20 ed       	ldi	r18, 0xD0	; 208
    1fee:	28 0f       	add	r18, r24
    1ff0:	2a 30       	cpi	r18, 0x0A	; 10
    1ff2:	40 f0       	brcs	.+16     	; 0x2004 <vfprintf+0xb4>
    1ff4:	8e 32       	cpi	r24, 0x2E	; 46
    1ff6:	b9 f4       	brne	.+46     	; 0x2026 <vfprintf+0xd6>
    1ff8:	36 fc       	sbrc	r3, 6
    1ffa:	81 c1       	rjmp	.+770    	; 0x22fe <vfprintf+0x3ae>
    1ffc:	23 2d       	mov	r18, r3
    1ffe:	20 64       	ori	r18, 0x40	; 64
    2000:	32 2e       	mov	r3, r18
    2002:	19 c0       	rjmp	.+50     	; 0x2036 <vfprintf+0xe6>
    2004:	36 fe       	sbrs	r3, 6
    2006:	06 c0       	rjmp	.+12     	; 0x2014 <vfprintf+0xc4>
    2008:	8a e0       	ldi	r24, 0x0A	; 10
    200a:	98 9e       	mul	r9, r24
    200c:	20 0d       	add	r18, r0
    200e:	11 24       	eor	r1, r1
    2010:	92 2e       	mov	r9, r18
    2012:	11 c0       	rjmp	.+34     	; 0x2036 <vfprintf+0xe6>
    2014:	ea e0       	ldi	r30, 0x0A	; 10
    2016:	2e 9e       	mul	r2, r30
    2018:	20 0d       	add	r18, r0
    201a:	11 24       	eor	r1, r1
    201c:	22 2e       	mov	r2, r18
    201e:	f3 2d       	mov	r31, r3
    2020:	f0 62       	ori	r31, 0x20	; 32
    2022:	3f 2e       	mov	r3, r31
    2024:	08 c0       	rjmp	.+16     	; 0x2036 <vfprintf+0xe6>
    2026:	8c 36       	cpi	r24, 0x6C	; 108
    2028:	21 f4       	brne	.+8      	; 0x2032 <vfprintf+0xe2>
    202a:	83 2d       	mov	r24, r3
    202c:	80 68       	ori	r24, 0x80	; 128
    202e:	38 2e       	mov	r3, r24
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <vfprintf+0xe6>
    2032:	88 36       	cpi	r24, 0x68	; 104
    2034:	41 f4       	brne	.+16     	; 0x2046 <vfprintf+0xf6>
    2036:	f7 01       	movw	r30, r14
    2038:	93 fd       	sbrc	r25, 3
    203a:	85 91       	lpm	r24, Z+
    203c:	93 ff       	sbrs	r25, 3
    203e:	81 91       	ld	r24, Z+
    2040:	7f 01       	movw	r14, r30
    2042:	81 11       	cpse	r24, r1
    2044:	b3 cf       	rjmp	.-154    	; 0x1fac <vfprintf+0x5c>
    2046:	98 2f       	mov	r25, r24
    2048:	9f 7d       	andi	r25, 0xDF	; 223
    204a:	95 54       	subi	r25, 0x45	; 69
    204c:	93 30       	cpi	r25, 0x03	; 3
    204e:	28 f4       	brcc	.+10     	; 0x205a <vfprintf+0x10a>
    2050:	0c 5f       	subi	r16, 0xFC	; 252
    2052:	1f 4f       	sbci	r17, 0xFF	; 255
    2054:	9f e3       	ldi	r25, 0x3F	; 63
    2056:	99 83       	std	Y+1, r25	; 0x01
    2058:	0d c0       	rjmp	.+26     	; 0x2074 <vfprintf+0x124>
    205a:	83 36       	cpi	r24, 0x63	; 99
    205c:	31 f0       	breq	.+12     	; 0x206a <vfprintf+0x11a>
    205e:	83 37       	cpi	r24, 0x73	; 115
    2060:	71 f0       	breq	.+28     	; 0x207e <vfprintf+0x12e>
    2062:	83 35       	cpi	r24, 0x53	; 83
    2064:	09 f0       	breq	.+2      	; 0x2068 <vfprintf+0x118>
    2066:	59 c0       	rjmp	.+178    	; 0x211a <vfprintf+0x1ca>
    2068:	21 c0       	rjmp	.+66     	; 0x20ac <vfprintf+0x15c>
    206a:	f8 01       	movw	r30, r16
    206c:	80 81       	ld	r24, Z
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	0e 5f       	subi	r16, 0xFE	; 254
    2072:	1f 4f       	sbci	r17, 0xFF	; 255
    2074:	88 24       	eor	r8, r8
    2076:	83 94       	inc	r8
    2078:	91 2c       	mov	r9, r1
    207a:	53 01       	movw	r10, r6
    207c:	13 c0       	rjmp	.+38     	; 0x20a4 <vfprintf+0x154>
    207e:	28 01       	movw	r4, r16
    2080:	f2 e0       	ldi	r31, 0x02	; 2
    2082:	4f 0e       	add	r4, r31
    2084:	51 1c       	adc	r5, r1
    2086:	f8 01       	movw	r30, r16
    2088:	a0 80       	ld	r10, Z
    208a:	b1 80       	ldd	r11, Z+1	; 0x01
    208c:	36 fe       	sbrs	r3, 6
    208e:	03 c0       	rjmp	.+6      	; 0x2096 <vfprintf+0x146>
    2090:	69 2d       	mov	r22, r9
    2092:	70 e0       	ldi	r23, 0x00	; 0
    2094:	02 c0       	rjmp	.+4      	; 0x209a <vfprintf+0x14a>
    2096:	6f ef       	ldi	r22, 0xFF	; 255
    2098:	7f ef       	ldi	r23, 0xFF	; 255
    209a:	c5 01       	movw	r24, r10
    209c:	0e 94 94 11 	call	0x2328	; 0x2328 <strnlen>
    20a0:	4c 01       	movw	r8, r24
    20a2:	82 01       	movw	r16, r4
    20a4:	f3 2d       	mov	r31, r3
    20a6:	ff 77       	andi	r31, 0x7F	; 127
    20a8:	3f 2e       	mov	r3, r31
    20aa:	16 c0       	rjmp	.+44     	; 0x20d8 <vfprintf+0x188>
    20ac:	28 01       	movw	r4, r16
    20ae:	22 e0       	ldi	r18, 0x02	; 2
    20b0:	42 0e       	add	r4, r18
    20b2:	51 1c       	adc	r5, r1
    20b4:	f8 01       	movw	r30, r16
    20b6:	a0 80       	ld	r10, Z
    20b8:	b1 80       	ldd	r11, Z+1	; 0x01
    20ba:	36 fe       	sbrs	r3, 6
    20bc:	03 c0       	rjmp	.+6      	; 0x20c4 <vfprintf+0x174>
    20be:	69 2d       	mov	r22, r9
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <vfprintf+0x178>
    20c4:	6f ef       	ldi	r22, 0xFF	; 255
    20c6:	7f ef       	ldi	r23, 0xFF	; 255
    20c8:	c5 01       	movw	r24, r10
    20ca:	0e 94 89 11 	call	0x2312	; 0x2312 <strnlen_P>
    20ce:	4c 01       	movw	r8, r24
    20d0:	f3 2d       	mov	r31, r3
    20d2:	f0 68       	ori	r31, 0x80	; 128
    20d4:	3f 2e       	mov	r3, r31
    20d6:	82 01       	movw	r16, r4
    20d8:	33 fc       	sbrc	r3, 3
    20da:	1b c0       	rjmp	.+54     	; 0x2112 <vfprintf+0x1c2>
    20dc:	82 2d       	mov	r24, r2
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	88 16       	cp	r8, r24
    20e2:	99 06       	cpc	r9, r25
    20e4:	b0 f4       	brcc	.+44     	; 0x2112 <vfprintf+0x1c2>
    20e6:	b6 01       	movw	r22, r12
    20e8:	80 e2       	ldi	r24, 0x20	; 32
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 94 9f 11 	call	0x233e	; 0x233e <fputc>
    20f0:	2a 94       	dec	r2
    20f2:	f4 cf       	rjmp	.-24     	; 0x20dc <vfprintf+0x18c>
    20f4:	f5 01       	movw	r30, r10
    20f6:	37 fc       	sbrc	r3, 7
    20f8:	85 91       	lpm	r24, Z+
    20fa:	37 fe       	sbrs	r3, 7
    20fc:	81 91       	ld	r24, Z+
    20fe:	5f 01       	movw	r10, r30
    2100:	b6 01       	movw	r22, r12
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0e 94 9f 11 	call	0x233e	; 0x233e <fputc>
    2108:	21 10       	cpse	r2, r1
    210a:	2a 94       	dec	r2
    210c:	21 e0       	ldi	r18, 0x01	; 1
    210e:	82 1a       	sub	r8, r18
    2110:	91 08       	sbc	r9, r1
    2112:	81 14       	cp	r8, r1
    2114:	91 04       	cpc	r9, r1
    2116:	71 f7       	brne	.-36     	; 0x20f4 <vfprintf+0x1a4>
    2118:	e8 c0       	rjmp	.+464    	; 0x22ea <vfprintf+0x39a>
    211a:	84 36       	cpi	r24, 0x64	; 100
    211c:	11 f0       	breq	.+4      	; 0x2122 <vfprintf+0x1d2>
    211e:	89 36       	cpi	r24, 0x69	; 105
    2120:	41 f5       	brne	.+80     	; 0x2172 <vfprintf+0x222>
    2122:	f8 01       	movw	r30, r16
    2124:	37 fe       	sbrs	r3, 7
    2126:	07 c0       	rjmp	.+14     	; 0x2136 <vfprintf+0x1e6>
    2128:	60 81       	ld	r22, Z
    212a:	71 81       	ldd	r23, Z+1	; 0x01
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	0c 5f       	subi	r16, 0xFC	; 252
    2132:	1f 4f       	sbci	r17, 0xFF	; 255
    2134:	08 c0       	rjmp	.+16     	; 0x2146 <vfprintf+0x1f6>
    2136:	60 81       	ld	r22, Z
    2138:	71 81       	ldd	r23, Z+1	; 0x01
    213a:	07 2e       	mov	r0, r23
    213c:	00 0c       	add	r0, r0
    213e:	88 0b       	sbc	r24, r24
    2140:	99 0b       	sbc	r25, r25
    2142:	0e 5f       	subi	r16, 0xFE	; 254
    2144:	1f 4f       	sbci	r17, 0xFF	; 255
    2146:	f3 2d       	mov	r31, r3
    2148:	ff 76       	andi	r31, 0x6F	; 111
    214a:	3f 2e       	mov	r3, r31
    214c:	97 ff       	sbrs	r25, 7
    214e:	09 c0       	rjmp	.+18     	; 0x2162 <vfprintf+0x212>
    2150:	90 95       	com	r25
    2152:	80 95       	com	r24
    2154:	70 95       	com	r23
    2156:	61 95       	neg	r22
    2158:	7f 4f       	sbci	r23, 0xFF	; 255
    215a:	8f 4f       	sbci	r24, 0xFF	; 255
    215c:	9f 4f       	sbci	r25, 0xFF	; 255
    215e:	f0 68       	ori	r31, 0x80	; 128
    2160:	3f 2e       	mov	r3, r31
    2162:	2a e0       	ldi	r18, 0x0A	; 10
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	a3 01       	movw	r20, r6
    2168:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__ultoa_invert>
    216c:	88 2e       	mov	r8, r24
    216e:	86 18       	sub	r8, r6
    2170:	45 c0       	rjmp	.+138    	; 0x21fc <vfprintf+0x2ac>
    2172:	85 37       	cpi	r24, 0x75	; 117
    2174:	31 f4       	brne	.+12     	; 0x2182 <vfprintf+0x232>
    2176:	23 2d       	mov	r18, r3
    2178:	2f 7e       	andi	r18, 0xEF	; 239
    217a:	b2 2e       	mov	r11, r18
    217c:	2a e0       	ldi	r18, 0x0A	; 10
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	25 c0       	rjmp	.+74     	; 0x21cc <vfprintf+0x27c>
    2182:	93 2d       	mov	r25, r3
    2184:	99 7f       	andi	r25, 0xF9	; 249
    2186:	b9 2e       	mov	r11, r25
    2188:	8f 36       	cpi	r24, 0x6F	; 111
    218a:	c1 f0       	breq	.+48     	; 0x21bc <vfprintf+0x26c>
    218c:	18 f4       	brcc	.+6      	; 0x2194 <vfprintf+0x244>
    218e:	88 35       	cpi	r24, 0x58	; 88
    2190:	79 f0       	breq	.+30     	; 0x21b0 <vfprintf+0x260>
    2192:	b5 c0       	rjmp	.+362    	; 0x22fe <vfprintf+0x3ae>
    2194:	80 37       	cpi	r24, 0x70	; 112
    2196:	19 f0       	breq	.+6      	; 0x219e <vfprintf+0x24e>
    2198:	88 37       	cpi	r24, 0x78	; 120
    219a:	21 f0       	breq	.+8      	; 0x21a4 <vfprintf+0x254>
    219c:	b0 c0       	rjmp	.+352    	; 0x22fe <vfprintf+0x3ae>
    219e:	e9 2f       	mov	r30, r25
    21a0:	e0 61       	ori	r30, 0x10	; 16
    21a2:	be 2e       	mov	r11, r30
    21a4:	b4 fe       	sbrs	r11, 4
    21a6:	0d c0       	rjmp	.+26     	; 0x21c2 <vfprintf+0x272>
    21a8:	fb 2d       	mov	r31, r11
    21aa:	f4 60       	ori	r31, 0x04	; 4
    21ac:	bf 2e       	mov	r11, r31
    21ae:	09 c0       	rjmp	.+18     	; 0x21c2 <vfprintf+0x272>
    21b0:	34 fe       	sbrs	r3, 4
    21b2:	0a c0       	rjmp	.+20     	; 0x21c8 <vfprintf+0x278>
    21b4:	29 2f       	mov	r18, r25
    21b6:	26 60       	ori	r18, 0x06	; 6
    21b8:	b2 2e       	mov	r11, r18
    21ba:	06 c0       	rjmp	.+12     	; 0x21c8 <vfprintf+0x278>
    21bc:	28 e0       	ldi	r18, 0x08	; 8
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	05 c0       	rjmp	.+10     	; 0x21cc <vfprintf+0x27c>
    21c2:	20 e1       	ldi	r18, 0x10	; 16
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <vfprintf+0x27c>
    21c8:	20 e1       	ldi	r18, 0x10	; 16
    21ca:	32 e0       	ldi	r19, 0x02	; 2
    21cc:	f8 01       	movw	r30, r16
    21ce:	b7 fe       	sbrs	r11, 7
    21d0:	07 c0       	rjmp	.+14     	; 0x21e0 <vfprintf+0x290>
    21d2:	60 81       	ld	r22, Z
    21d4:	71 81       	ldd	r23, Z+1	; 0x01
    21d6:	82 81       	ldd	r24, Z+2	; 0x02
    21d8:	93 81       	ldd	r25, Z+3	; 0x03
    21da:	0c 5f       	subi	r16, 0xFC	; 252
    21dc:	1f 4f       	sbci	r17, 0xFF	; 255
    21de:	06 c0       	rjmp	.+12     	; 0x21ec <vfprintf+0x29c>
    21e0:	60 81       	ld	r22, Z
    21e2:	71 81       	ldd	r23, Z+1	; 0x01
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	0e 5f       	subi	r16, 0xFE	; 254
    21ea:	1f 4f       	sbci	r17, 0xFF	; 255
    21ec:	a3 01       	movw	r20, r6
    21ee:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__ultoa_invert>
    21f2:	88 2e       	mov	r8, r24
    21f4:	86 18       	sub	r8, r6
    21f6:	fb 2d       	mov	r31, r11
    21f8:	ff 77       	andi	r31, 0x7F	; 127
    21fa:	3f 2e       	mov	r3, r31
    21fc:	36 fe       	sbrs	r3, 6
    21fe:	0d c0       	rjmp	.+26     	; 0x221a <vfprintf+0x2ca>
    2200:	23 2d       	mov	r18, r3
    2202:	2e 7f       	andi	r18, 0xFE	; 254
    2204:	a2 2e       	mov	r10, r18
    2206:	89 14       	cp	r8, r9
    2208:	58 f4       	brcc	.+22     	; 0x2220 <vfprintf+0x2d0>
    220a:	34 fe       	sbrs	r3, 4
    220c:	0b c0       	rjmp	.+22     	; 0x2224 <vfprintf+0x2d4>
    220e:	32 fc       	sbrc	r3, 2
    2210:	09 c0       	rjmp	.+18     	; 0x2224 <vfprintf+0x2d4>
    2212:	83 2d       	mov	r24, r3
    2214:	8e 7e       	andi	r24, 0xEE	; 238
    2216:	a8 2e       	mov	r10, r24
    2218:	05 c0       	rjmp	.+10     	; 0x2224 <vfprintf+0x2d4>
    221a:	b8 2c       	mov	r11, r8
    221c:	a3 2c       	mov	r10, r3
    221e:	03 c0       	rjmp	.+6      	; 0x2226 <vfprintf+0x2d6>
    2220:	b8 2c       	mov	r11, r8
    2222:	01 c0       	rjmp	.+2      	; 0x2226 <vfprintf+0x2d6>
    2224:	b9 2c       	mov	r11, r9
    2226:	a4 fe       	sbrs	r10, 4
    2228:	0f c0       	rjmp	.+30     	; 0x2248 <vfprintf+0x2f8>
    222a:	fe 01       	movw	r30, r28
    222c:	e8 0d       	add	r30, r8
    222e:	f1 1d       	adc	r31, r1
    2230:	80 81       	ld	r24, Z
    2232:	80 33       	cpi	r24, 0x30	; 48
    2234:	21 f4       	brne	.+8      	; 0x223e <vfprintf+0x2ee>
    2236:	9a 2d       	mov	r25, r10
    2238:	99 7e       	andi	r25, 0xE9	; 233
    223a:	a9 2e       	mov	r10, r25
    223c:	09 c0       	rjmp	.+18     	; 0x2250 <vfprintf+0x300>
    223e:	a2 fe       	sbrs	r10, 2
    2240:	06 c0       	rjmp	.+12     	; 0x224e <vfprintf+0x2fe>
    2242:	b3 94       	inc	r11
    2244:	b3 94       	inc	r11
    2246:	04 c0       	rjmp	.+8      	; 0x2250 <vfprintf+0x300>
    2248:	8a 2d       	mov	r24, r10
    224a:	86 78       	andi	r24, 0x86	; 134
    224c:	09 f0       	breq	.+2      	; 0x2250 <vfprintf+0x300>
    224e:	b3 94       	inc	r11
    2250:	a3 fc       	sbrc	r10, 3
    2252:	11 c0       	rjmp	.+34     	; 0x2276 <vfprintf+0x326>
    2254:	a0 fe       	sbrs	r10, 0
    2256:	06 c0       	rjmp	.+12     	; 0x2264 <vfprintf+0x314>
    2258:	b2 14       	cp	r11, r2
    225a:	88 f4       	brcc	.+34     	; 0x227e <vfprintf+0x32e>
    225c:	28 0c       	add	r2, r8
    225e:	92 2c       	mov	r9, r2
    2260:	9b 18       	sub	r9, r11
    2262:	0e c0       	rjmp	.+28     	; 0x2280 <vfprintf+0x330>
    2264:	b2 14       	cp	r11, r2
    2266:	60 f4       	brcc	.+24     	; 0x2280 <vfprintf+0x330>
    2268:	b6 01       	movw	r22, r12
    226a:	80 e2       	ldi	r24, 0x20	; 32
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	0e 94 9f 11 	call	0x233e	; 0x233e <fputc>
    2272:	b3 94       	inc	r11
    2274:	f7 cf       	rjmp	.-18     	; 0x2264 <vfprintf+0x314>
    2276:	b2 14       	cp	r11, r2
    2278:	18 f4       	brcc	.+6      	; 0x2280 <vfprintf+0x330>
    227a:	2b 18       	sub	r2, r11
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <vfprintf+0x332>
    227e:	98 2c       	mov	r9, r8
    2280:	21 2c       	mov	r2, r1
    2282:	a4 fe       	sbrs	r10, 4
    2284:	10 c0       	rjmp	.+32     	; 0x22a6 <vfprintf+0x356>
    2286:	b6 01       	movw	r22, r12
    2288:	80 e3       	ldi	r24, 0x30	; 48
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	0e 94 9f 11 	call	0x233e	; 0x233e <fputc>
    2290:	a2 fe       	sbrs	r10, 2
    2292:	17 c0       	rjmp	.+46     	; 0x22c2 <vfprintf+0x372>
    2294:	a1 fc       	sbrc	r10, 1
    2296:	03 c0       	rjmp	.+6      	; 0x229e <vfprintf+0x34e>
    2298:	88 e7       	ldi	r24, 0x78	; 120
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <vfprintf+0x352>
    229e:	88 e5       	ldi	r24, 0x58	; 88
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	b6 01       	movw	r22, r12
    22a4:	0c c0       	rjmp	.+24     	; 0x22be <vfprintf+0x36e>
    22a6:	8a 2d       	mov	r24, r10
    22a8:	86 78       	andi	r24, 0x86	; 134
    22aa:	59 f0       	breq	.+22     	; 0x22c2 <vfprintf+0x372>
    22ac:	a1 fe       	sbrs	r10, 1
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <vfprintf+0x364>
    22b0:	8b e2       	ldi	r24, 0x2B	; 43
    22b2:	01 c0       	rjmp	.+2      	; 0x22b6 <vfprintf+0x366>
    22b4:	80 e2       	ldi	r24, 0x20	; 32
    22b6:	a7 fc       	sbrc	r10, 7
    22b8:	8d e2       	ldi	r24, 0x2D	; 45
    22ba:	b6 01       	movw	r22, r12
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	0e 94 9f 11 	call	0x233e	; 0x233e <fputc>
    22c2:	89 14       	cp	r8, r9
    22c4:	38 f4       	brcc	.+14     	; 0x22d4 <vfprintf+0x384>
    22c6:	b6 01       	movw	r22, r12
    22c8:	80 e3       	ldi	r24, 0x30	; 48
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	0e 94 9f 11 	call	0x233e	; 0x233e <fputc>
    22d0:	9a 94       	dec	r9
    22d2:	f7 cf       	rjmp	.-18     	; 0x22c2 <vfprintf+0x372>
    22d4:	8a 94       	dec	r8
    22d6:	f3 01       	movw	r30, r6
    22d8:	e8 0d       	add	r30, r8
    22da:	f1 1d       	adc	r31, r1
    22dc:	80 81       	ld	r24, Z
    22de:	b6 01       	movw	r22, r12
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	0e 94 9f 11 	call	0x233e	; 0x233e <fputc>
    22e6:	81 10       	cpse	r8, r1
    22e8:	f5 cf       	rjmp	.-22     	; 0x22d4 <vfprintf+0x384>
    22ea:	22 20       	and	r2, r2
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <vfprintf+0x3a0>
    22ee:	42 ce       	rjmp	.-892    	; 0x1f74 <vfprintf+0x24>
    22f0:	b6 01       	movw	r22, r12
    22f2:	80 e2       	ldi	r24, 0x20	; 32
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	0e 94 9f 11 	call	0x233e	; 0x233e <fputc>
    22fa:	2a 94       	dec	r2
    22fc:	f6 cf       	rjmp	.-20     	; 0x22ea <vfprintf+0x39a>
    22fe:	f6 01       	movw	r30, r12
    2300:	86 81       	ldd	r24, Z+6	; 0x06
    2302:	97 81       	ldd	r25, Z+7	; 0x07
    2304:	02 c0       	rjmp	.+4      	; 0x230a <vfprintf+0x3ba>
    2306:	8f ef       	ldi	r24, 0xFF	; 255
    2308:	9f ef       	ldi	r25, 0xFF	; 255
    230a:	2b 96       	adiw	r28, 0x0b	; 11
    230c:	e2 e1       	ldi	r30, 0x12	; 18
    230e:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__epilogue_restores__>

00002312 <strnlen_P>:
    2312:	fc 01       	movw	r30, r24
    2314:	05 90       	lpm	r0, Z+
    2316:	61 50       	subi	r22, 0x01	; 1
    2318:	70 40       	sbci	r23, 0x00	; 0
    231a:	01 10       	cpse	r0, r1
    231c:	d8 f7       	brcc	.-10     	; 0x2314 <strnlen_P+0x2>
    231e:	80 95       	com	r24
    2320:	90 95       	com	r25
    2322:	8e 0f       	add	r24, r30
    2324:	9f 1f       	adc	r25, r31
    2326:	08 95       	ret

00002328 <strnlen>:
    2328:	fc 01       	movw	r30, r24
    232a:	61 50       	subi	r22, 0x01	; 1
    232c:	70 40       	sbci	r23, 0x00	; 0
    232e:	01 90       	ld	r0, Z+
    2330:	01 10       	cpse	r0, r1
    2332:	d8 f7       	brcc	.-10     	; 0x232a <strnlen+0x2>
    2334:	80 95       	com	r24
    2336:	90 95       	com	r25
    2338:	8e 0f       	add	r24, r30
    233a:	9f 1f       	adc	r25, r31
    233c:	08 95       	ret

0000233e <fputc>:
    233e:	0f 93       	push	r16
    2340:	1f 93       	push	r17
    2342:	cf 93       	push	r28
    2344:	df 93       	push	r29
    2346:	fb 01       	movw	r30, r22
    2348:	23 81       	ldd	r18, Z+3	; 0x03
    234a:	21 fd       	sbrc	r18, 1
    234c:	03 c0       	rjmp	.+6      	; 0x2354 <fputc+0x16>
    234e:	8f ef       	ldi	r24, 0xFF	; 255
    2350:	9f ef       	ldi	r25, 0xFF	; 255
    2352:	2c c0       	rjmp	.+88     	; 0x23ac <fputc+0x6e>
    2354:	22 ff       	sbrs	r18, 2
    2356:	16 c0       	rjmp	.+44     	; 0x2384 <fputc+0x46>
    2358:	46 81       	ldd	r20, Z+6	; 0x06
    235a:	57 81       	ldd	r21, Z+7	; 0x07
    235c:	24 81       	ldd	r18, Z+4	; 0x04
    235e:	35 81       	ldd	r19, Z+5	; 0x05
    2360:	42 17       	cp	r20, r18
    2362:	53 07       	cpc	r21, r19
    2364:	44 f4       	brge	.+16     	; 0x2376 <fputc+0x38>
    2366:	a0 81       	ld	r26, Z
    2368:	b1 81       	ldd	r27, Z+1	; 0x01
    236a:	9d 01       	movw	r18, r26
    236c:	2f 5f       	subi	r18, 0xFF	; 255
    236e:	3f 4f       	sbci	r19, 0xFF	; 255
    2370:	31 83       	std	Z+1, r19	; 0x01
    2372:	20 83       	st	Z, r18
    2374:	8c 93       	st	X, r24
    2376:	26 81       	ldd	r18, Z+6	; 0x06
    2378:	37 81       	ldd	r19, Z+7	; 0x07
    237a:	2f 5f       	subi	r18, 0xFF	; 255
    237c:	3f 4f       	sbci	r19, 0xFF	; 255
    237e:	37 83       	std	Z+7, r19	; 0x07
    2380:	26 83       	std	Z+6, r18	; 0x06
    2382:	14 c0       	rjmp	.+40     	; 0x23ac <fputc+0x6e>
    2384:	8b 01       	movw	r16, r22
    2386:	ec 01       	movw	r28, r24
    2388:	fb 01       	movw	r30, r22
    238a:	00 84       	ldd	r0, Z+8	; 0x08
    238c:	f1 85       	ldd	r31, Z+9	; 0x09
    238e:	e0 2d       	mov	r30, r0
    2390:	09 95       	icall
    2392:	89 2b       	or	r24, r25
    2394:	e1 f6       	brne	.-72     	; 0x234e <fputc+0x10>
    2396:	d8 01       	movw	r26, r16
    2398:	16 96       	adiw	r26, 0x06	; 6
    239a:	8d 91       	ld	r24, X+
    239c:	9c 91       	ld	r25, X
    239e:	17 97       	sbiw	r26, 0x07	; 7
    23a0:	01 96       	adiw	r24, 0x01	; 1
    23a2:	17 96       	adiw	r26, 0x07	; 7
    23a4:	9c 93       	st	X, r25
    23a6:	8e 93       	st	-X, r24
    23a8:	16 97       	sbiw	r26, 0x06	; 6
    23aa:	ce 01       	movw	r24, r28
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	1f 91       	pop	r17
    23b2:	0f 91       	pop	r16
    23b4:	08 95       	ret

000023b6 <__ultoa_invert>:
    23b6:	fa 01       	movw	r30, r20
    23b8:	aa 27       	eor	r26, r26
    23ba:	28 30       	cpi	r18, 0x08	; 8
    23bc:	51 f1       	breq	.+84     	; 0x2412 <__ultoa_invert+0x5c>
    23be:	20 31       	cpi	r18, 0x10	; 16
    23c0:	81 f1       	breq	.+96     	; 0x2422 <__ultoa_invert+0x6c>
    23c2:	e8 94       	clt
    23c4:	6f 93       	push	r22
    23c6:	6e 7f       	andi	r22, 0xFE	; 254
    23c8:	6e 5f       	subi	r22, 0xFE	; 254
    23ca:	7f 4f       	sbci	r23, 0xFF	; 255
    23cc:	8f 4f       	sbci	r24, 0xFF	; 255
    23ce:	9f 4f       	sbci	r25, 0xFF	; 255
    23d0:	af 4f       	sbci	r26, 0xFF	; 255
    23d2:	b1 e0       	ldi	r27, 0x01	; 1
    23d4:	3e d0       	rcall	.+124    	; 0x2452 <__ultoa_invert+0x9c>
    23d6:	b4 e0       	ldi	r27, 0x04	; 4
    23d8:	3c d0       	rcall	.+120    	; 0x2452 <__ultoa_invert+0x9c>
    23da:	67 0f       	add	r22, r23
    23dc:	78 1f       	adc	r23, r24
    23de:	89 1f       	adc	r24, r25
    23e0:	9a 1f       	adc	r25, r26
    23e2:	a1 1d       	adc	r26, r1
    23e4:	68 0f       	add	r22, r24
    23e6:	79 1f       	adc	r23, r25
    23e8:	8a 1f       	adc	r24, r26
    23ea:	91 1d       	adc	r25, r1
    23ec:	a1 1d       	adc	r26, r1
    23ee:	6a 0f       	add	r22, r26
    23f0:	71 1d       	adc	r23, r1
    23f2:	81 1d       	adc	r24, r1
    23f4:	91 1d       	adc	r25, r1
    23f6:	a1 1d       	adc	r26, r1
    23f8:	20 d0       	rcall	.+64     	; 0x243a <__ultoa_invert+0x84>
    23fa:	09 f4       	brne	.+2      	; 0x23fe <__ultoa_invert+0x48>
    23fc:	68 94       	set
    23fe:	3f 91       	pop	r19
    2400:	2a e0       	ldi	r18, 0x0A	; 10
    2402:	26 9f       	mul	r18, r22
    2404:	11 24       	eor	r1, r1
    2406:	30 19       	sub	r19, r0
    2408:	30 5d       	subi	r19, 0xD0	; 208
    240a:	31 93       	st	Z+, r19
    240c:	de f6       	brtc	.-74     	; 0x23c4 <__ultoa_invert+0xe>
    240e:	cf 01       	movw	r24, r30
    2410:	08 95       	ret
    2412:	46 2f       	mov	r20, r22
    2414:	47 70       	andi	r20, 0x07	; 7
    2416:	40 5d       	subi	r20, 0xD0	; 208
    2418:	41 93       	st	Z+, r20
    241a:	b3 e0       	ldi	r27, 0x03	; 3
    241c:	0f d0       	rcall	.+30     	; 0x243c <__ultoa_invert+0x86>
    241e:	c9 f7       	brne	.-14     	; 0x2412 <__ultoa_invert+0x5c>
    2420:	f6 cf       	rjmp	.-20     	; 0x240e <__ultoa_invert+0x58>
    2422:	46 2f       	mov	r20, r22
    2424:	4f 70       	andi	r20, 0x0F	; 15
    2426:	40 5d       	subi	r20, 0xD0	; 208
    2428:	4a 33       	cpi	r20, 0x3A	; 58
    242a:	18 f0       	brcs	.+6      	; 0x2432 <__ultoa_invert+0x7c>
    242c:	49 5d       	subi	r20, 0xD9	; 217
    242e:	31 fd       	sbrc	r19, 1
    2430:	40 52       	subi	r20, 0x20	; 32
    2432:	41 93       	st	Z+, r20
    2434:	02 d0       	rcall	.+4      	; 0x243a <__ultoa_invert+0x84>
    2436:	a9 f7       	brne	.-22     	; 0x2422 <__ultoa_invert+0x6c>
    2438:	ea cf       	rjmp	.-44     	; 0x240e <__ultoa_invert+0x58>
    243a:	b4 e0       	ldi	r27, 0x04	; 4
    243c:	a6 95       	lsr	r26
    243e:	97 95       	ror	r25
    2440:	87 95       	ror	r24
    2442:	77 95       	ror	r23
    2444:	67 95       	ror	r22
    2446:	ba 95       	dec	r27
    2448:	c9 f7       	brne	.-14     	; 0x243c <__ultoa_invert+0x86>
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	61 05       	cpc	r22, r1
    244e:	71 05       	cpc	r23, r1
    2450:	08 95       	ret
    2452:	9b 01       	movw	r18, r22
    2454:	ac 01       	movw	r20, r24
    2456:	0a 2e       	mov	r0, r26
    2458:	06 94       	lsr	r0
    245a:	57 95       	ror	r21
    245c:	47 95       	ror	r20
    245e:	37 95       	ror	r19
    2460:	27 95       	ror	r18
    2462:	ba 95       	dec	r27
    2464:	c9 f7       	brne	.-14     	; 0x2458 <__ultoa_invert+0xa2>
    2466:	62 0f       	add	r22, r18
    2468:	73 1f       	adc	r23, r19
    246a:	84 1f       	adc	r24, r20
    246c:	95 1f       	adc	r25, r21
    246e:	a0 1d       	adc	r26, r0
    2470:	08 95       	ret

00002472 <__prologue_saves__>:
    2472:	2f 92       	push	r2
    2474:	3f 92       	push	r3
    2476:	4f 92       	push	r4
    2478:	5f 92       	push	r5
    247a:	6f 92       	push	r6
    247c:	7f 92       	push	r7
    247e:	8f 92       	push	r8
    2480:	9f 92       	push	r9
    2482:	af 92       	push	r10
    2484:	bf 92       	push	r11
    2486:	cf 92       	push	r12
    2488:	df 92       	push	r13
    248a:	ef 92       	push	r14
    248c:	ff 92       	push	r15
    248e:	0f 93       	push	r16
    2490:	1f 93       	push	r17
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	ca 1b       	sub	r28, r26
    249c:	db 0b       	sbc	r29, r27
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	09 94       	ijmp

000024aa <__epilogue_restores__>:
    24aa:	2a 88       	ldd	r2, Y+18	; 0x12
    24ac:	39 88       	ldd	r3, Y+17	; 0x11
    24ae:	48 88       	ldd	r4, Y+16	; 0x10
    24b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    24b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    24b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    24b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    24b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    24ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    24bc:	b9 84       	ldd	r11, Y+9	; 0x09
    24be:	c8 84       	ldd	r12, Y+8	; 0x08
    24c0:	df 80       	ldd	r13, Y+7	; 0x07
    24c2:	ee 80       	ldd	r14, Y+6	; 0x06
    24c4:	fd 80       	ldd	r15, Y+5	; 0x05
    24c6:	0c 81       	ldd	r16, Y+4	; 0x04
    24c8:	1b 81       	ldd	r17, Y+3	; 0x03
    24ca:	aa 81       	ldd	r26, Y+2	; 0x02
    24cc:	b9 81       	ldd	r27, Y+1	; 0x01
    24ce:	ce 0f       	add	r28, r30
    24d0:	d1 1d       	adc	r29, r1
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	ed 01       	movw	r28, r26
    24de:	08 95       	ret

000024e0 <_exit>:
    24e0:	f8 94       	cli

000024e2 <__stop_program>:
    24e2:	ff cf       	rjmp	.-2      	; 0x24e2 <__stop_program>
